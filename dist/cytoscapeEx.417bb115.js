// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

// eslint-disable-next-line no-global-assign
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  return newRequire;
})({"node_modules/lodash.debounce/index.js":[function(require,module,exports) {
var global = arguments[3];
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        result = wait - timeSinceLastCall;

    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = debounce;

},{}],"node_modules/heap/lib/heap.js":[function(require,module,exports) {
var define;
// Generated by CoffeeScript 1.8.0
(function() {
  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;

  floor = Math.floor, min = Math.min;


  /*
  Default comparison function to be used
   */

  defaultCmp = function(x, y) {
    if (x < y) {
      return -1;
    }
    if (x > y) {
      return 1;
    }
    return 0;
  };


  /*
  Insert item x in list a, and keep it sorted assuming a is sorted.
  
  If x is already in a, insert it to the right of the rightmost x.
  
  Optional args lo (default 0) and hi (default a.length) bound the slice
  of a to be searched.
   */

  insort = function(a, x, lo, hi, cmp) {
    var mid;
    if (lo == null) {
      lo = 0;
    }
    if (cmp == null) {
      cmp = defaultCmp;
    }
    if (lo < 0) {
      throw new Error('lo must be non-negative');
    }
    if (hi == null) {
      hi = a.length;
    }
    while (lo < hi) {
      mid = floor((lo + hi) / 2);
      if (cmp(x, a[mid]) < 0) {
        hi = mid;
      } else {
        lo = mid + 1;
      }
    }
    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);
  };


  /*
  Push item onto heap, maintaining the heap invariant.
   */

  heappush = function(array, item, cmp) {
    if (cmp == null) {
      cmp = defaultCmp;
    }
    array.push(item);
    return _siftdown(array, 0, array.length - 1, cmp);
  };


  /*
  Pop the smallest item off the heap, maintaining the heap invariant.
   */

  heappop = function(array, cmp) {
    var lastelt, returnitem;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    lastelt = array.pop();
    if (array.length) {
      returnitem = array[0];
      array[0] = lastelt;
      _siftup(array, 0, cmp);
    } else {
      returnitem = lastelt;
    }
    return returnitem;
  };


  /*
  Pop and return the current smallest value, and add the new item.
  
  This is more efficient than heappop() followed by heappush(), and can be
  more appropriate when using a fixed size heap. Note that the value
  returned may be larger than item! That constrains reasonable use of
  this routine unless written as part of a conditional replacement:
      if item > array[0]
        item = heapreplace(array, item)
   */

  heapreplace = function(array, item, cmp) {
    var returnitem;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    returnitem = array[0];
    array[0] = item;
    _siftup(array, 0, cmp);
    return returnitem;
  };


  /*
  Fast version of a heappush followed by a heappop.
   */

  heappushpop = function(array, item, cmp) {
    var _ref;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    if (array.length && cmp(array[0], item) < 0) {
      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];
      _siftup(array, 0, cmp);
    }
    return item;
  };


  /*
  Transform list into a heap, in-place, in O(array.length) time.
   */

  heapify = function(array, cmp) {
    var i, _i, _j, _len, _ref, _ref1, _results, _results1;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    _ref1 = (function() {
      _results1 = [];
      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }
      return _results1;
    }).apply(this).reverse();
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      i = _ref1[_i];
      _results.push(_siftup(array, i, cmp));
    }
    return _results;
  };


  /*
  Update the position of the given item in the heap.
  This function should be called every time the item is being modified.
   */

  updateItem = function(array, item, cmp) {
    var pos;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    pos = array.indexOf(item);
    if (pos === -1) {
      return;
    }
    _siftdown(array, 0, pos, cmp);
    return _siftup(array, pos, cmp);
  };


  /*
  Find the n largest elements in a dataset.
   */

  nlargest = function(array, n, cmp) {
    var elem, result, _i, _len, _ref;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    result = array.slice(0, n);
    if (!result.length) {
      return result;
    }
    heapify(result, cmp);
    _ref = array.slice(n);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      elem = _ref[_i];
      heappushpop(result, elem, cmp);
    }
    return result.sort(cmp).reverse();
  };


  /*
  Find the n smallest elements in a dataset.
   */

  nsmallest = function(array, n, cmp) {
    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    if (n * 10 <= array.length) {
      result = array.slice(0, n).sort(cmp);
      if (!result.length) {
        return result;
      }
      los = result[result.length - 1];
      _ref = array.slice(n);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elem = _ref[_i];
        if (cmp(elem, los) < 0) {
          insort(result, elem, 0, null, cmp);
          result.pop();
          los = result[result.length - 1];
        }
      }
      return result;
    }
    heapify(array, cmp);
    _results = [];
    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
      _results.push(heappop(array, cmp));
    }
    return _results;
  };

  _siftdown = function(array, startpos, pos, cmp) {
    var newitem, parent, parentpos;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    newitem = array[pos];
    while (pos > startpos) {
      parentpos = (pos - 1) >> 1;
      parent = array[parentpos];
      if (cmp(newitem, parent) < 0) {
        array[pos] = parent;
        pos = parentpos;
        continue;
      }
      break;
    }
    return array[pos] = newitem;
  };

  _siftup = function(array, pos, cmp) {
    var childpos, endpos, newitem, rightpos, startpos;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    endpos = array.length;
    startpos = pos;
    newitem = array[pos];
    childpos = 2 * pos + 1;
    while (childpos < endpos) {
      rightpos = childpos + 1;
      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {
        childpos = rightpos;
      }
      array[pos] = array[childpos];
      pos = childpos;
      childpos = 2 * pos + 1;
    }
    array[pos] = newitem;
    return _siftdown(array, startpos, pos, cmp);
  };

  Heap = (function() {
    Heap.push = heappush;

    Heap.pop = heappop;

    Heap.replace = heapreplace;

    Heap.pushpop = heappushpop;

    Heap.heapify = heapify;

    Heap.updateItem = updateItem;

    Heap.nlargest = nlargest;

    Heap.nsmallest = nsmallest;

    function Heap(cmp) {
      this.cmp = cmp != null ? cmp : defaultCmp;
      this.nodes = [];
    }

    Heap.prototype.push = function(x) {
      return heappush(this.nodes, x, this.cmp);
    };

    Heap.prototype.pop = function() {
      return heappop(this.nodes, this.cmp);
    };

    Heap.prototype.peek = function() {
      return this.nodes[0];
    };

    Heap.prototype.contains = function(x) {
      return this.nodes.indexOf(x) !== -1;
    };

    Heap.prototype.replace = function(x) {
      return heapreplace(this.nodes, x, this.cmp);
    };

    Heap.prototype.pushpop = function(x) {
      return heappushpop(this.nodes, x, this.cmp);
    };

    Heap.prototype.heapify = function() {
      return heapify(this.nodes, this.cmp);
    };

    Heap.prototype.updateItem = function(x) {
      return updateItem(this.nodes, x, this.cmp);
    };

    Heap.prototype.clear = function() {
      return this.nodes = [];
    };

    Heap.prototype.empty = function() {
      return this.nodes.length === 0;
    };

    Heap.prototype.size = function() {
      return this.nodes.length;
    };

    Heap.prototype.clone = function() {
      var heap;
      heap = new Heap();
      heap.nodes = this.nodes.slice(0);
      return heap;
    };

    Heap.prototype.toArray = function() {
      return this.nodes.slice(0);
    };

    Heap.prototype.insert = Heap.prototype.push;

    Heap.prototype.top = Heap.prototype.peek;

    Heap.prototype.front = Heap.prototype.peek;

    Heap.prototype.has = Heap.prototype.contains;

    Heap.prototype.copy = Heap.prototype.clone;

    return Heap;

  })();

  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      return define([], factory);
    } else if (typeof exports === 'object') {
      return module.exports = factory();
    } else {
      return root.Heap = factory();
    }
  })(this, function() {
    return Heap;
  });

}).call(this);

},{}],"node_modules/heap/index.js":[function(require,module,exports) {
module.exports = require('./lib/heap');

},{"./lib/heap":"node_modules/heap/lib/heap.js"}],"node_modules/cytoscape/dist/cytoscape.cjs.js":[function(require,module,exports) {

/**
 * Copyright (c) 2016-2019, The Cytoscape Consortium.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the “Software”), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var util = _interopDefault(require('lodash.debounce'));

var Heap = _interopDefault(require('heap'));

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var window$1 = typeof window === 'undefined' ? null : window; // eslint-disable-line no-undef

var navigator = window$1 ? window$1.navigator : null;
var document$1 = window$1 ? window$1.document : null;

var typeofstr = _typeof('');

var typeofobj = _typeof({});

var typeoffn = _typeof(function () {});

var typeofhtmlele = typeof HTMLElement === "undefined" ? "undefined" : _typeof(HTMLElement);

var instanceStr = function instanceStr(obj) {
  return obj && obj.instanceString && fn(obj.instanceString) ? obj.instanceString() : null;
};

var string = function string(obj) {
  return obj != null && _typeof(obj) == typeofstr;
};

var fn = function fn(obj) {
  return obj != null && _typeof(obj) === typeoffn;
};

var array = function array(obj) {
  return Array.isArray ? Array.isArray(obj) : obj != null && obj instanceof Array;
};

var plainObject = function plainObject(obj) {
  return obj != null && _typeof(obj) === typeofobj && !array(obj) && obj.constructor === Object;
};

var object = function object(obj) {
  return obj != null && _typeof(obj) === typeofobj;
};

var number = function number(obj) {
  return obj != null && _typeof(obj) === _typeof(1) && !isNaN(obj);
};

var integer = function integer(obj) {
  return number(obj) && Math.floor(obj) === obj;
};

var htmlElement = function htmlElement(obj) {
  if ('undefined' === typeofhtmlele) {
    return undefined;
  } else {
    return null != obj && obj instanceof HTMLElement;
  }
};

var elementOrCollection = function elementOrCollection(obj) {
  return element(obj) || collection(obj);
};

var element = function element(obj) {
  return instanceStr(obj) === 'collection' && obj._private.single;
};

var collection = function collection(obj) {
  return instanceStr(obj) === 'collection' && !obj._private.single;
};

var core = function core(obj) {
  return instanceStr(obj) === 'core';
};

var stylesheet = function stylesheet(obj) {
  return instanceStr(obj) === 'stylesheet';
};

var event = function event(obj) {
  return instanceStr(obj) === 'event';
};

var emptyString = function emptyString(obj) {
  if (obj === undefined || obj === null) {
    // null is empty
    return true;
  } else if (obj === '' || obj.match(/^\s+$/)) {
    return true; // empty string is empty
  }

  return false; // otherwise, we don't know what we've got
};

var domElement = function domElement(obj) {
  if (typeof HTMLElement === 'undefined') {
    return false; // we're not in a browser so it doesn't matter
  } else {
    return obj instanceof HTMLElement;
  }
};

var boundingBox = function boundingBox(obj) {
  return plainObject(obj) && number(obj.x1) && number(obj.x2) && number(obj.y1) && number(obj.y2);
};

var promise = function promise(obj) {
  return object(obj) && fn(obj.then);
};

var ms = function ms() {
  return navigator && navigator.userAgent.match(/msie|trident|edge/i);
}; // probably a better way to detect this...


var memoize = function memoize(fn, keyFn) {
  if (!keyFn) {
    keyFn = function keyFn() {
      if (arguments.length === 1) {
        return arguments[0];
      } else if (arguments.length === 0) {
        return 'undefined';
      }

      var args = [];

      for (var i = 0; i < arguments.length; i++) {
        args.push(arguments[i]);
      }

      return args.join('$');
    };
  }

  var memoizedFn = function memoizedFn() {
    var self = this;
    var args = arguments;
    var ret;
    var k = keyFn.apply(self, args);
    var cache = memoizedFn.cache;

    if (!(ret = cache[k])) {
      ret = cache[k] = fn.apply(self, args);
    }

    return ret;
  };

  memoizedFn.cache = {};
  return memoizedFn;
};

var camel2dash = memoize(function (str) {
  return str.replace(/([A-Z])/g, function (v) {
    return '-' + v.toLowerCase();
  });
});
var dash2camel = memoize(function (str) {
  return str.replace(/(-\w)/g, function (v) {
    return v[1].toUpperCase();
  });
});
var prependCamel = memoize(function (prefix, str) {
  return prefix + str[0].toUpperCase() + str.substring(1);
}, function (prefix, str) {
  return prefix + '$' + str;
});

var capitalize = function capitalize(str) {
  if (emptyString(str)) {
    return str;
  }

  return str.charAt(0).toUpperCase() + str.substring(1);
};

var number$1 = '(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))';
var rgba = 'rgb[a]?\\((' + number$1 + '[%]?)\\s*,\\s*(' + number$1 + '[%]?)\\s*,\\s*(' + number$1 + '[%]?)(?:\\s*,\\s*(' + number$1 + '))?\\)';
var rgbaNoBackRefs = 'rgb[a]?\\((?:' + number$1 + '[%]?)\\s*,\\s*(?:' + number$1 + '[%]?)\\s*,\\s*(?:' + number$1 + '[%]?)(?:\\s*,\\s*(?:' + number$1 + '))?\\)';
var hsla = 'hsl[a]?\\((' + number$1 + ')\\s*,\\s*(' + number$1 + '[%])\\s*,\\s*(' + number$1 + '[%])(?:\\s*,\\s*(' + number$1 + '))?\\)';
var hslaNoBackRefs = 'hsl[a]?\\((?:' + number$1 + ')\\s*,\\s*(?:' + number$1 + '[%])\\s*,\\s*(?:' + number$1 + '[%])(?:\\s*,\\s*(?:' + number$1 + '))?\\)';
var hex3 = '\\#[0-9a-fA-F]{3}';
var hex6 = '\\#[0-9a-fA-F]{6}';

var ascending = function ascending(a, b) {
  if (a < b) {
    return -1;
  } else if (a > b) {
    return 1;
  } else {
    return 0;
  }
};

var descending = function descending(a, b) {
  return -1 * ascending(a, b);
};

var extend = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {
  var args = arguments;

  for (var i = 1; i < args.length; i++) {
    var obj = args[i];

    if (obj == null) {
      continue;
    }

    var keys = Object.keys(obj);

    for (var j = 0; j < keys.length; j++) {
      var k = keys[j];
      tgt[k] = obj[k];
    }
  }

  return tgt;
};

var hex2tuple = function hex2tuple(hex) {
  if (!(hex.length === 4 || hex.length === 7) || hex[0] !== '#') {
    return;
  }

  var shortHex = hex.length === 4;
  var r, g, b;
  var base = 16;

  if (shortHex) {
    r = parseInt(hex[1] + hex[1], base);
    g = parseInt(hex[2] + hex[2], base);
    b = parseInt(hex[3] + hex[3], base);
  } else {
    r = parseInt(hex[1] + hex[2], base);
    g = parseInt(hex[3] + hex[4], base);
    b = parseInt(hex[5] + hex[6], base);
  }

  return [r, g, b];
}; // get [r, g, b, a] from hsl(0, 0, 0) or hsla(0, 0, 0, 0)


var hsl2tuple = function hsl2tuple(hsl) {
  var ret;
  var h, s, l, a, r, g, b;

  function hue2rgb(p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * 6 * t;
    if (t < 1 / 2) return q;
    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
    return p;
  }

  var m = new RegExp('^' + hsla + '$').exec(hsl);

  if (m) {
    // get hue
    h = parseInt(m[1]);

    if (h < 0) {
      h = (360 - -1 * h % 360) % 360;
    } else if (h > 360) {
      h = h % 360;
    }

    h /= 360; // normalise on [0, 1]

    s = parseFloat(m[2]);

    if (s < 0 || s > 100) {
      return;
    } // saturation is [0, 100]


    s = s / 100; // normalise on [0, 1]

    l = parseFloat(m[3]);

    if (l < 0 || l > 100) {
      return;
    } // lightness is [0, 100]


    l = l / 100; // normalise on [0, 1]

    a = m[4];

    if (a !== undefined) {
      a = parseFloat(a);

      if (a < 0 || a > 1) {
        return;
      } // alpha is [0, 1]

    } // now, convert to rgb
    // code from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript


    if (s === 0) {
      r = g = b = Math.round(l * 255); // achromatic
    } else {
      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r = Math.round(255 * hue2rgb(p, q, h + 1 / 3));
      g = Math.round(255 * hue2rgb(p, q, h));
      b = Math.round(255 * hue2rgb(p, q, h - 1 / 3));
    }

    ret = [r, g, b, a];
  }

  return ret;
}; // get [r, g, b, a] from rgb(0, 0, 0) or rgba(0, 0, 0, 0)


var rgb2tuple = function rgb2tuple(rgb) {
  var ret;
  var m = new RegExp('^' + rgba + '$').exec(rgb);

  if (m) {
    ret = [];
    var isPct = [];

    for (var i = 1; i <= 3; i++) {
      var channel = m[i];

      if (channel[channel.length - 1] === '%') {
        isPct[i] = true;
      }

      channel = parseFloat(channel);

      if (isPct[i]) {
        channel = channel / 100 * 255; // normalise to [0, 255]
      }

      if (channel < 0 || channel > 255) {
        return;
      } // invalid channel value


      ret.push(Math.floor(channel));
    }

    var atLeastOneIsPct = isPct[1] || isPct[2] || isPct[3];
    var allArePct = isPct[1] && isPct[2] && isPct[3];

    if (atLeastOneIsPct && !allArePct) {
      return;
    } // must all be percent values if one is


    var alpha = m[4];

    if (alpha !== undefined) {
      alpha = parseFloat(alpha);

      if (alpha < 0 || alpha > 1) {
        return;
      } // invalid alpha value


      ret.push(alpha);
    }
  }

  return ret;
};

var colorname2tuple = function colorname2tuple(color) {
  return colors[color.toLowerCase()];
};

var color2tuple = function color2tuple(color) {
  return (array(color) ? color : null) || colorname2tuple(color) || hex2tuple(color) || rgb2tuple(color) || hsl2tuple(color);
};

var colors = {
  // special colour names
  transparent: [0, 0, 0, 0],
  // NB alpha === 0
  // regular colours
  aliceblue: [240, 248, 255],
  antiquewhite: [250, 235, 215],
  aqua: [0, 255, 255],
  aquamarine: [127, 255, 212],
  azure: [240, 255, 255],
  beige: [245, 245, 220],
  bisque: [255, 228, 196],
  black: [0, 0, 0],
  blanchedalmond: [255, 235, 205],
  blue: [0, 0, 255],
  blueviolet: [138, 43, 226],
  brown: [165, 42, 42],
  burlywood: [222, 184, 135],
  cadetblue: [95, 158, 160],
  chartreuse: [127, 255, 0],
  chocolate: [210, 105, 30],
  coral: [255, 127, 80],
  cornflowerblue: [100, 149, 237],
  cornsilk: [255, 248, 220],
  crimson: [220, 20, 60],
  cyan: [0, 255, 255],
  darkblue: [0, 0, 139],
  darkcyan: [0, 139, 139],
  darkgoldenrod: [184, 134, 11],
  darkgray: [169, 169, 169],
  darkgreen: [0, 100, 0],
  darkgrey: [169, 169, 169],
  darkkhaki: [189, 183, 107],
  darkmagenta: [139, 0, 139],
  darkolivegreen: [85, 107, 47],
  darkorange: [255, 140, 0],
  darkorchid: [153, 50, 204],
  darkred: [139, 0, 0],
  darksalmon: [233, 150, 122],
  darkseagreen: [143, 188, 143],
  darkslateblue: [72, 61, 139],
  darkslategray: [47, 79, 79],
  darkslategrey: [47, 79, 79],
  darkturquoise: [0, 206, 209],
  darkviolet: [148, 0, 211],
  deeppink: [255, 20, 147],
  deepskyblue: [0, 191, 255],
  dimgray: [105, 105, 105],
  dimgrey: [105, 105, 105],
  dodgerblue: [30, 144, 255],
  firebrick: [178, 34, 34],
  floralwhite: [255, 250, 240],
  forestgreen: [34, 139, 34],
  fuchsia: [255, 0, 255],
  gainsboro: [220, 220, 220],
  ghostwhite: [248, 248, 255],
  gold: [255, 215, 0],
  goldenrod: [218, 165, 32],
  gray: [128, 128, 128],
  grey: [128, 128, 128],
  green: [0, 128, 0],
  greenyellow: [173, 255, 47],
  honeydew: [240, 255, 240],
  hotpink: [255, 105, 180],
  indianred: [205, 92, 92],
  indigo: [75, 0, 130],
  ivory: [255, 255, 240],
  khaki: [240, 230, 140],
  lavender: [230, 230, 250],
  lavenderblush: [255, 240, 245],
  lawngreen: [124, 252, 0],
  lemonchiffon: [255, 250, 205],
  lightblue: [173, 216, 230],
  lightcoral: [240, 128, 128],
  lightcyan: [224, 255, 255],
  lightgoldenrodyellow: [250, 250, 210],
  lightgray: [211, 211, 211],
  lightgreen: [144, 238, 144],
  lightgrey: [211, 211, 211],
  lightpink: [255, 182, 193],
  lightsalmon: [255, 160, 122],
  lightseagreen: [32, 178, 170],
  lightskyblue: [135, 206, 250],
  lightslategray: [119, 136, 153],
  lightslategrey: [119, 136, 153],
  lightsteelblue: [176, 196, 222],
  lightyellow: [255, 255, 224],
  lime: [0, 255, 0],
  limegreen: [50, 205, 50],
  linen: [250, 240, 230],
  magenta: [255, 0, 255],
  maroon: [128, 0, 0],
  mediumaquamarine: [102, 205, 170],
  mediumblue: [0, 0, 205],
  mediumorchid: [186, 85, 211],
  mediumpurple: [147, 112, 219],
  mediumseagreen: [60, 179, 113],
  mediumslateblue: [123, 104, 238],
  mediumspringgreen: [0, 250, 154],
  mediumturquoise: [72, 209, 204],
  mediumvioletred: [199, 21, 133],
  midnightblue: [25, 25, 112],
  mintcream: [245, 255, 250],
  mistyrose: [255, 228, 225],
  moccasin: [255, 228, 181],
  navajowhite: [255, 222, 173],
  navy: [0, 0, 128],
  oldlace: [253, 245, 230],
  olive: [128, 128, 0],
  olivedrab: [107, 142, 35],
  orange: [255, 165, 0],
  orangered: [255, 69, 0],
  orchid: [218, 112, 214],
  palegoldenrod: [238, 232, 170],
  palegreen: [152, 251, 152],
  paleturquoise: [175, 238, 238],
  palevioletred: [219, 112, 147],
  papayawhip: [255, 239, 213],
  peachpuff: [255, 218, 185],
  peru: [205, 133, 63],
  pink: [255, 192, 203],
  plum: [221, 160, 221],
  powderblue: [176, 224, 230],
  purple: [128, 0, 128],
  red: [255, 0, 0],
  rosybrown: [188, 143, 143],
  royalblue: [65, 105, 225],
  saddlebrown: [139, 69, 19],
  salmon: [250, 128, 114],
  sandybrown: [244, 164, 96],
  seagreen: [46, 139, 87],
  seashell: [255, 245, 238],
  sienna: [160, 82, 45],
  silver: [192, 192, 192],
  skyblue: [135, 206, 235],
  slateblue: [106, 90, 205],
  slategray: [112, 128, 144],
  slategrey: [112, 128, 144],
  snow: [255, 250, 250],
  springgreen: [0, 255, 127],
  steelblue: [70, 130, 180],
  tan: [210, 180, 140],
  teal: [0, 128, 128],
  thistle: [216, 191, 216],
  tomato: [255, 99, 71],
  turquoise: [64, 224, 208],
  violet: [238, 130, 238],
  wheat: [245, 222, 179],
  white: [255, 255, 255],
  whitesmoke: [245, 245, 245],
  yellow: [255, 255, 0],
  yellowgreen: [154, 205, 50]
};

var setMap = function setMap(options) {
  var obj = options.map;
  var keys = options.keys;
  var l = keys.length;

  for (var i = 0; i < l; i++) {
    var key = keys[i];

    if (plainObject(key)) {
      throw Error('Tried to set map with object key');
    }

    if (i < keys.length - 1) {
      // extend the map if necessary
      if (obj[key] == null) {
        obj[key] = {};
      }

      obj = obj[key];
    } else {
      // set the value
      obj[key] = options.value;
    }
  }
}; // gets the value in a map even if it's not built in places


var getMap = function getMap(options) {
  var obj = options.map;
  var keys = options.keys;
  var l = keys.length;

  for (var i = 0; i < l; i++) {
    var key = keys[i];

    if (plainObject(key)) {
      throw Error('Tried to get map with object key');
    }

    obj = obj[key];

    if (obj == null) {
      return obj;
    }
  }

  return obj;
}; // deletes the entry in the map


var performance = window$1 ? window$1.performance : null;
var pnow = performance && performance.now ? function () {
  return performance.now();
} : function () {
  return Date.now();
};

var raf = function () {
  if (window$1) {
    if (window$1.requestAnimationFrame) {
      return function (fn) {
        window$1.requestAnimationFrame(fn);
      };
    } else if (window$1.mozRequestAnimationFrame) {
      return function (fn) {
        window$1.mozRequestAnimationFrame(fn);
      };
    } else if (window$1.webkitRequestAnimationFrame) {
      return function (fn) {
        window$1.webkitRequestAnimationFrame(fn);
      };
    } else if (window$1.msRequestAnimationFrame) {
      return function (fn) {
        window$1.msRequestAnimationFrame(fn);
      };
    }
  }

  return function (fn) {
    if (fn) {
      setTimeout(function () {
        fn(pnow());
      }, 1000 / 60);
    }
  };
}();

var requestAnimationFrame = function requestAnimationFrame(fn) {
  return raf(fn);
};

var performanceNow = pnow;

var hashIterableInts = function hashIterableInts(iterator) {
  var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5381; // djb2/string-hash

  var hash = seed;
  var entry;

  for (;;) {
    entry = iterator.next();

    if (entry.done) {
      break;
    }

    hash = hash * 33 ^ entry.value;
  }

  return hash >>> 0;
};

var hashInt = function hashInt(num) {
  var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5381; // djb2/string-hash

  return (seed * 33 ^ num) >>> 0;
};

var hashIntsArray = function hashIntsArray(ints, seed) {
  var entry = {
    value: 0,
    done: false
  };
  var i = 0;
  var length = ints.length;
  var iterator = {
    next: function next() {
      if (i < length) {
        entry.value = ints[i++];
      } else {
        entry.done = true;
      }

      return entry;
    }
  };
  return hashIterableInts(iterator, seed);
};

var hashString = function hashString(str, seed) {
  var entry = {
    value: 0,
    done: false
  };
  var i = 0;
  var length = str.length;
  var iterator = {
    next: function next() {
      if (i < length) {
        entry.value = str.charCodeAt(i++);
      } else {
        entry.done = true;
      }

      return entry;
    }
  };
  return hashIterableInts(iterator, seed);
};

var hashStrings = function hashStrings() {
  return hashStringsArray(arguments);
};

var hashStringsArray = function hashStringsArray(strs) {
  var hash;

  for (var i = 0; i < strs.length; i++) {
    var str = strs[i];

    if (i === 0) {
      hash = hashString(str);
    } else {
      hash = hashString(str, hash);
    }
  }

  return hash;
};
/*global console */


var warnSupported = console.warn != null; // eslint-disable-line no-console

var traceSupported = console.trace != null; // eslint-disable-line no-console

var MAX_INT = Number.MAX_SAFE_INTEGER || 9007199254740991;

var trueify = function trueify() {
  return true;
};

var falsify = function falsify() {
  return false;
};

var zeroify = function zeroify() {
  return 0;
};

var noop = function noop() {};

var error = function error(msg) {
  throw new Error(msg);
};

var warn = function warn(msg) {
  /* eslint-disable no-console */
  if (warnSupported) {
    console.warn(msg);
  } else {
    console.log(msg);

    if (traceSupported) {
      console.trace();
    }
  }
};
/* eslint-enable */


var clone = function clone(obj) {
  return extend({}, obj);
}; // gets a shallow copy of the argument


var copy = function copy(obj) {
  if (obj == null) {
    return obj;
  }

  if (array(obj)) {
    return obj.slice();
  } else if (plainObject(obj)) {
    return clone(obj);
  } else {
    return obj;
  }
};

var copyArray = function copyArray(arr) {
  return arr.slice();
};

var uuid = function uuid(a, b
/* placeholders */
) {
  for ( // loop :)
  b = a = ''; // b - result , a - numeric letiable
  a++ < 36; //
  b += a * 51 & 52 // if "a" is not 9 or 14 or 19 or 24
  ? //  return a random number or 4
  (a ^ 15 // if "a" is not 15
  ? // genetate a random number from 0 to 15
  8 ^ Math.random() * (a ^ 20 ? 16 : 4) // unless "a" is 20, in which case a random number from 8 to 11
  : 4 //  otherwise 4
  ).toString(16) : '-' //  in other cases (if "a" is 9,14,19,24) insert "-"
  ) {}

  return b;
};

var _staticEmptyObject = {};

var staticEmptyObject = function staticEmptyObject() {
  return _staticEmptyObject;
};

var defaults = function defaults(_defaults) {
  var keys = Object.keys(_defaults);
  return function (opts) {
    var filledOpts = {};

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var optVal = opts == null ? undefined : opts[key];
      filledOpts[key] = optVal === undefined ? _defaults[key] : optVal;
    }

    return filledOpts;
  };
};

var removeFromArray = function removeFromArray(arr, ele, manyCopies) {
  for (var i = arr.length; i >= 0; i--) {
    if (arr[i] === ele) {
      arr.splice(i, 1);

      if (!manyCopies) {
        break;
      }
    }
  }
};

var clearArray = function clearArray(arr) {
  arr.splice(0, arr.length);
};

var push = function push(arr, otherArr) {
  for (var i = 0; i < otherArr.length; i++) {
    var el = otherArr[i];
    arr.push(el);
  }
};

var getPrefixedProperty = function getPrefixedProperty(obj, propName, prefix) {
  if (prefix) {
    propName = prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth
  }

  return obj[propName];
};

var setPrefixedProperty = function setPrefixedProperty(obj, propName, prefix, value) {
  if (prefix) {
    propName = prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth
  }

  obj[propName] = value;
};
/* global Map */


var ObjectMap =
/*#__PURE__*/
function () {
  function ObjectMap() {
    _classCallCheck(this, ObjectMap);

    this._obj = {};
  }

  _createClass(ObjectMap, [{
    key: "set",
    value: function set(key, val) {
      this._obj[key] = val;
      return this;
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      this._obj[key] = undefined;
      return this;
    }
  }, {
    key: "clear",
    value: function clear() {
      this._obj = {};
    }
  }, {
    key: "has",
    value: function has(key) {
      return this._obj[key] !== undefined;
    }
  }, {
    key: "get",
    value: function get(key) {
      return this._obj[key];
    }
  }]);

  return ObjectMap;
}();

var Map$1 = typeof Map !== 'undefined' ? Map : ObjectMap;
/* global Set */

var undef = "undefined";

var ObjectSet =
/*#__PURE__*/
function () {
  function ObjectSet(arrayOrObjectSet) {
    _classCallCheck(this, ObjectSet);

    this._obj = Object.create(null);
    this.size = 0;

    if (arrayOrObjectSet != null) {
      var arr;

      if (arrayOrObjectSet.instanceString != null && arrayOrObjectSet.instanceString() === this.instanceString()) {
        arr = arrayOrObjectSet.toArray();
      } else {
        arr = arrayOrObjectSet;
      }

      for (var i = 0; i < arr.length; i++) {
        this.add(arr[i]);
      }
    }
  }

  _createClass(ObjectSet, [{
    key: "instanceString",
    value: function instanceString() {
      return 'set';
    }
  }, {
    key: "add",
    value: function add(val) {
      var o = this._obj;

      if (o[val] !== 1) {
        o[val] = 1;
        this.size++;
      }
    }
  }, {
    key: "delete",
    value: function _delete(val) {
      var o = this._obj;

      if (o[val] === 1) {
        o[val] = 0;
        this.size--;
      }
    }
  }, {
    key: "clear",
    value: function clear() {
      this._obj = Object.create(null);
    }
  }, {
    key: "has",
    value: function has(val) {
      return this._obj[val] === 1;
    }
  }, {
    key: "toArray",
    value: function toArray() {
      var _this = this;

      return Object.keys(this._obj).filter(function (key) {
        return _this.has(key);
      });
    }
  }, {
    key: "forEach",
    value: function forEach(callback, thisArg) {
      return this.toArray().forEach(callback, thisArg);
    }
  }]);

  return ObjectSet;
}();

var Set$1 = (typeof Set === "undefined" ? "undefined" : _typeof(Set)) !== undef ? Set : ObjectSet;

var Element = function Element(cy, params, restore) {
  restore = restore === undefined || restore ? true : false;

  if (cy === undefined || params === undefined || !core(cy)) {
    error('An element must have a core reference and parameters set');
    return;
  }

  var group = params.group; // try to automatically infer the group if unspecified

  if (group == null) {
    if (params.data && params.data.source != null && params.data.target != null) {
      group = 'edges';
    } else {
      group = 'nodes';
    }
  } // validate group


  if (group !== 'nodes' && group !== 'edges') {
    error('An element must be of type `nodes` or `edges`; you specified `' + group + '`');
    return;
  } // make the element array-like, just like a collection


  this.length = 1;
  this[0] = this; // NOTE: when something is added here, add also to ele.json()

  var _p = this._private = {
    cy: cy,
    single: true,
    // indicates this is an element
    data: params.data || {},
    // data object
    position: params.position || {
      x: 0,
      y: 0
    },
    // (x, y) position pair
    autoWidth: undefined,
    // width and height of nodes calculated by the renderer when set to special 'auto' value
    autoHeight: undefined,
    autoPadding: undefined,
    compoundBoundsClean: false,
    // whether the compound dimensions need to be recalculated the next time dimensions are read
    listeners: [],
    // array of bound listeners
    group: group,
    // string; 'nodes' or 'edges'
    style: {},
    // properties as set by the style
    rstyle: {},
    // properties for style sent from the renderer to the core
    styleCxts: [],
    // applied style contexts from the styler
    styleKeys: {},
    // per-group keys of style property values
    removed: true,
    // whether it's inside the vis; true if removed (set true here since we call restore)
    selected: params.selected ? true : false,
    // whether it's selected
    selectable: params.selectable === undefined ? true : params.selectable ? true : false,
    // whether it's selectable
    locked: params.locked ? true : false,
    // whether the element is locked (cannot be moved)
    grabbed: false,
    // whether the element is grabbed by the mouse; renderer sets this privately
    grabbable: params.grabbable === undefined ? true : params.grabbable ? true : false,
    // whether the element can be grabbed
    active: false,
    // whether the element is active from user interaction
    classes: new Set$1(),
    // map ( className => true )
    animation: {
      // object for currently-running animations
      current: [],
      queue: []
    },
    rscratch: {},
    // object in which the renderer can store information
    scratch: params.scratch || {},
    // scratch objects
    edges: [],
    // array of connected edges
    children: [],
    // array of children
    parent: null,
    // parent ref
    traversalCache: {},
    // cache of output of traversal functions
    backgrounding: false,
    // whether background images are loading
    bbCache: null,
    // cache of the current bounding box
    bbCacheShift: {
      x: 0,
      y: 0 // shift applied to cached bb to be applied on next get

    }
  };

  if (_p.position.x == null) {
    _p.position.x = 0;
  }

  if (_p.position.y == null) {
    _p.position.y = 0;
  } // renderedPosition overrides if specified


  if (params.renderedPosition) {
    var rpos = params.renderedPosition;
    var pan = cy.pan();
    var zoom = cy.zoom();
    _p.position = {
      x: (rpos.x - pan.x) / zoom,
      y: (rpos.y - pan.y) / zoom
    };
  }

  var classes = [];

  if (array(params.classes)) {
    classes = params.classes;
  } else if (string(params.classes)) {
    classes = params.classes.split(/\s+/);
  }

  for (var i = 0, l = classes.length; i < l; i++) {
    var cls = classes[i];

    if (!cls || cls === '') {
      continue;
    }

    _p.classes.add(cls);
  }

  var bypass = params.style || params.css;

  if (bypass) {
    warn('Setting a `style` bypass at element creation is deprecated');
    cy.style().applyBypass(this, bypass);
  }

  this.createEmitter();

  if (restore === undefined || restore) {
    this.restore();
  }
};

var defineSearch = function defineSearch(params) {
  params = {
    bfs: params.bfs || !params.dfs,
    dfs: params.dfs || !params.bfs
  }; // from pseudocode on wikipedia

  return function searchFn(roots, fn$$1, directed) {
    var options;

    if (plainObject(roots) && !elementOrCollection(roots)) {
      options = roots;
      roots = options.roots || options.root;
      fn$$1 = options.visit;
      directed = options.directed;
    }

    directed = arguments.length === 2 && !fn(fn$$1) ? fn$$1 : directed;
    fn$$1 = fn(fn$$1) ? fn$$1 : function () {};
    var cy = this._private.cy;
    var v = roots = string(roots) ? this.filter(roots) : roots;
    var Q = [];
    var connectedNodes = [];
    var connectedBy = {};
    var id2depth = {};
    var V = {};
    var j = 0;
    var found;

    var _this$byGroup = this.byGroup(),
        nodes = _this$byGroup.nodes,
        edges = _this$byGroup.edges; // enqueue v


    for (var i = 0; i < v.length; i++) {
      var vi = v[i];
      var viId = vi.id();

      if (vi.isNode()) {
        Q.unshift(vi);

        if (params.bfs) {
          V[viId] = true;
          connectedNodes.push(vi);
        }

        id2depth[viId] = 0;
      }
    }

    var _loop2 = function _loop2() {
      var v = params.bfs ? Q.shift() : Q.pop();
      var vId = v.id();

      if (params.dfs) {
        if (V[vId]) {
          return "continue";
        }

        V[vId] = true;
        connectedNodes.push(v);
      }

      var depth = id2depth[vId];
      var prevEdge = connectedBy[vId];
      var src = prevEdge != null ? prevEdge.source() : null;
      var tgt = prevEdge != null ? prevEdge.target() : null;
      var prevNode = prevEdge == null ? undefined : v.same(src) ? tgt[0] : src[0];
      var ret = void 0;
      ret = fn$$1(v, prevEdge, prevNode, j++, depth);

      if (ret === true) {
        found = v;
        return "break";
      }

      if (ret === false) {
        return "break";
      }

      var vwEdges = v.connectedEdges().filter(function (e) {
        return (!directed || e.source().same(v)) && edges.has(e);
      });

      for (var _i2 = 0; _i2 < vwEdges.length; _i2++) {
        var e = vwEdges[_i2];
        var w = e.connectedNodes().filter(function (n) {
          return !n.same(v) && nodes.has(n);
        });
        var wId = w.id();

        if (w.length !== 0 && !V[wId]) {
          w = w[0];
          Q.push(w);

          if (params.bfs) {
            V[wId] = true;
            connectedNodes.push(w);
          }

          connectedBy[wId] = e;
          id2depth[wId] = id2depth[vId] + 1;
        }
      }
    };

    _loop: while (Q.length !== 0) {
      var _ret = _loop2();

      switch (_ret) {
        case "continue":
          continue;

        case "break":
          break _loop;
      }
    }

    var connectedEles = cy.collection();

    for (var _i = 0; _i < connectedNodes.length; _i++) {
      var node = connectedNodes[_i];
      var edge = connectedBy[node.id()];

      if (edge != null) {
        connectedEles.merge(edge);
      }

      connectedEles.merge(node);
    }

    return {
      path: cy.collection(connectedEles),
      found: cy.collection(found)
    };
  };
}; // search, spanning trees, etc


var elesfn = {
  breadthFirstSearch: defineSearch({
    bfs: true
  }),
  depthFirstSearch: defineSearch({
    dfs: true
  })
}; // nice, short mathemathical alias

elesfn.bfs = elesfn.breadthFirstSearch;
elesfn.dfs = elesfn.depthFirstSearch;
var dijkstraDefaults = defaults({
  root: null,
  weight: function weight(edge) {
    return 1;
  },
  directed: false
});
var elesfn$1 = {
  dijkstra: function dijkstra(options) {
    if (!plainObject(options)) {
      var args = arguments;
      options = {
        root: args[0],
        weight: args[1],
        directed: args[2]
      };
    }

    var _dijkstraDefaults = dijkstraDefaults(options),
        root = _dijkstraDefaults.root,
        weight = _dijkstraDefaults.weight,
        directed = _dijkstraDefaults.directed;

    var eles = this;
    var weightFn = weight;
    var source = string(root) ? this.filter(root)[0] : root[0];
    var dist = {};
    var prev = {};
    var knownDist = {};

    var _this$byGroup = this.byGroup(),
        nodes = _this$byGroup.nodes,
        edges = _this$byGroup.edges;

    edges.unmergeBy(function (ele) {
      return ele.isLoop();
    });

    var getDist = function getDist(node) {
      return dist[node.id()];
    };

    var setDist = function setDist(node, d) {
      dist[node.id()] = d;
      Q.updateItem(node);
    };

    var Q = new Heap(function (a, b) {
      return getDist(a) - getDist(b);
    });

    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      dist[node.id()] = node.same(source) ? 0 : Infinity;
      Q.push(node);
    }

    var distBetween = function distBetween(u, v) {
      var uvs = (directed ? u.edgesTo(v) : u.edgesWith(v)).intersect(edges);
      var smallestDistance = Infinity;
      var smallestEdge;

      for (var _i = 0; _i < uvs.length; _i++) {
        var edge = uvs[_i];

        var _weight = weightFn(edge);

        if (_weight < smallestDistance || !smallestEdge) {
          smallestDistance = _weight;
          smallestEdge = edge;
        }
      }

      return {
        edge: smallestEdge,
        dist: smallestDistance
      };
    };

    while (Q.size() > 0) {
      var u = Q.pop();
      var smalletsDist = getDist(u);
      var uid = u.id();
      knownDist[uid] = smalletsDist;

      if (smalletsDist === Infinity) {
        continue;
      }

      var neighbors = u.neighborhood().intersect(nodes);

      for (var _i2 = 0; _i2 < neighbors.length; _i2++) {
        var v = neighbors[_i2];
        var vid = v.id();
        var vDist = distBetween(u, v);
        var alt = smalletsDist + vDist.dist;

        if (alt < getDist(v)) {
          setDist(v, alt);
          prev[vid] = {
            node: u,
            edge: vDist.edge
          };
        }
      } // for

    } // while


    return {
      distanceTo: function distanceTo(node) {
        var target = string(node) ? nodes.filter(node)[0] : node[0];
        return knownDist[target.id()];
      },
      pathTo: function pathTo(node) {
        var target = string(node) ? nodes.filter(node)[0] : node[0];
        var S = [];
        var u = target;
        var uid = u.id();

        if (target.length > 0) {
          S.unshift(target);

          while (prev[uid]) {
            var p = prev[uid];
            S.unshift(p.edge);
            S.unshift(p.node);
            u = p.node;
            uid = u.id();
          }
        }

        return eles.spawn(S);
      }
    };
  }
};
var elesfn$2 = {
  // kruskal's algorithm (finds min spanning tree, assuming undirected graph)
  // implemented from pseudocode from wikipedia
  kruskal: function kruskal(weightFn) {
    weightFn = weightFn || function (edge) {
      return 1;
    };

    var _this$byGroup = this.byGroup(),
        nodes = _this$byGroup.nodes,
        edges = _this$byGroup.edges;

    var numNodes = nodes.length;
    var forest = new Array(numNodes);
    var A = nodes; // assumes byGroup() creates new collections that can be safely mutated

    var findSetIndex = function findSetIndex(ele) {
      for (var i = 0; i < forest.length; i++) {
        var eles = forest[i];

        if (eles.has(ele)) {
          return i;
        }
      }
    }; // start with one forest per node


    for (var i = 0; i < numNodes; i++) {
      forest[i] = this.spawn(nodes[i]);
    }

    var S = edges.sort(function (a, b) {
      return weightFn(a) - weightFn(b);
    });

    for (var _i = 0; _i < S.length; _i++) {
      var edge = S[_i];
      var u = edge.source()[0];
      var v = edge.target()[0];
      var setUIndex = findSetIndex(u);
      var setVIndex = findSetIndex(v);
      var setU = forest[setUIndex];
      var setV = forest[setVIndex];

      if (setUIndex !== setVIndex) {
        A.merge(edge); // combine forests for u and v

        setU.merge(setV);
        forest.splice(setVIndex, 1);
      }
    }

    return A;
  }
};
var aStarDefaults = defaults({
  root: null,
  goal: null,
  weight: function weight(edge) {
    return 1;
  },
  heuristic: function heuristic(edge) {
    return 0;
  },
  directed: false
});
var elesfn$3 = {
  // Implemented from pseudocode from wikipedia
  aStar: function aStar(options) {
    var cy = this.cy();

    var _aStarDefaults = aStarDefaults(options),
        root = _aStarDefaults.root,
        goal = _aStarDefaults.goal,
        heuristic = _aStarDefaults.heuristic,
        directed = _aStarDefaults.directed,
        weight = _aStarDefaults.weight;

    root = cy.collection(root)[0];
    goal = cy.collection(goal)[0];
    var sid = root.id();
    var tid = goal.id();
    var gScore = {};
    var fScore = {};
    var closedSetIds = {};
    var openSet = new Heap(function (a, b) {
      return fScore[a.id()] - fScore[b.id()];
    });
    var openSetIds = new Set$1();
    var cameFrom = {};
    var cameFromEdge = {};

    var addToOpenSet = function addToOpenSet(ele, id) {
      openSet.push(ele);
      openSetIds.add(id);
    };

    var cMin, cMinId;

    var popFromOpenSet = function popFromOpenSet() {
      cMin = openSet.pop();
      cMinId = cMin.id();
      openSetIds.delete(cMinId);
    };

    var isInOpenSet = function isInOpenSet(id) {
      return openSetIds.has(id);
    };

    addToOpenSet(root, sid);
    gScore[sid] = 0;
    fScore[sid] = heuristic(root); // Counter

    var steps = 0; // Main loop

    while (openSet.size() > 0) {
      popFromOpenSet();
      steps++; // If we've found our goal, then we are done

      if (cMinId === tid) {
        var path = [];
        var pathNode = goal;
        var pathNodeId = tid;
        var pathEdge = cameFromEdge[pathNodeId];

        for (;;) {
          path.unshift(pathNode);

          if (pathEdge != null) {
            path.unshift(pathEdge);
          }

          pathNode = cameFrom[pathNodeId];

          if (pathNode == null) {
            break;
          }

          pathNodeId = pathNode.id();
          pathEdge = cameFromEdge[pathNodeId];
        }

        return {
          found: true,
          distance: gScore[cMinId],
          path: this.spawn(path),
          steps: steps
        };
      } // Add cMin to processed nodes


      closedSetIds[cMinId] = true; // Update scores for neighbors of cMin
      // Take into account if graph is directed or not

      var vwEdges = cMin._private.edges;

      for (var i = 0; i < vwEdges.length; i++) {
        var e = vwEdges[i]; // edge must be in set of calling eles

        if (!this.hasElementWithId(e.id())) {
          continue;
        } // cMin must be the source of edge if directed


        if (directed && e.data('source') !== cMinId) {
          continue;
        }

        var wSrc = e.source();
        var wTgt = e.target();
        var w = wSrc.id() !== cMinId ? wSrc : wTgt;
        var wid = w.id(); // node must be in set of calling eles

        if (!this.hasElementWithId(wid)) {
          continue;
        } // if node is in closedSet, ignore it


        if (closedSetIds[wid]) {
          continue;
        } // New tentative score for node w


        var tempScore = gScore[cMinId] + weight(e); // Update gScore for node w if:
        //   w not present in openSet
        // OR
        //   tentative gScore is less than previous value
        // w not in openSet

        if (!isInOpenSet(wid)) {
          gScore[wid] = tempScore;
          fScore[wid] = tempScore + heuristic(w);
          addToOpenSet(w, wid);
          cameFrom[wid] = cMin;
          cameFromEdge[wid] = e;
          continue;
        } // w already in openSet, but with greater gScore


        if (tempScore < gScore[wid]) {
          gScore[wid] = tempScore;
          fScore[wid] = tempScore + heuristic(w);
          cameFrom[wid] = cMin;
        }
      } // End of neighbors update

    } // End of main loop
    // If we've reached here, then we've not reached our goal


    return {
      found: false,
      distance: undefined,
      path: undefined,
      steps: steps
    };
  }
}; // elesfn

var floydWarshallDefaults = defaults({
  weight: function weight(edge) {
    return 1;
  },
  directed: false
});
var elesfn$4 = {
  // Implemented from pseudocode from wikipedia
  floydWarshall: function floydWarshall(options) {
    var cy = this.cy();

    var _floydWarshallDefault = floydWarshallDefaults(options),
        weight = _floydWarshallDefault.weight,
        directed = _floydWarshallDefault.directed;

    var weightFn = weight;

    var _this$byGroup = this.byGroup(),
        nodes = _this$byGroup.nodes,
        edges = _this$byGroup.edges;

    var N = nodes.length;
    var Nsq = N * N;

    var indexOf = function indexOf(node) {
      return nodes.indexOf(node);
    };

    var atIndex = function atIndex(i) {
      return nodes[i];
    }; // Initialize distance matrix


    var dist = new Array(Nsq);

    for (var n = 0; n < Nsq; n++) {
      var j = n % N;
      var i = (n - j) / N;

      if (i === j) {
        dist[n] = 0;
      } else {
        dist[n] = Infinity;
      }
    } // Initialize matrix used for path reconstruction
    // Initialize distance matrix


    var next = new Array(Nsq);
    var edgeNext = new Array(Nsq); // Process edges

    for (var _i = 0; _i < edges.length; _i++) {
      var edge = edges[_i];
      var src = edge.source()[0];
      var tgt = edge.target()[0];

      if (src === tgt) {
        continue;
      } // exclude loops


      var s = indexOf(src);
      var t = indexOf(tgt);
      var st = s * N + t; // source to target index

      var _weight = weightFn(edge); // Check if already process another edge between same 2 nodes


      if (dist[st] > _weight) {
        dist[st] = _weight;
        next[st] = t;
        edgeNext[st] = edge;
      } // If undirected graph, process 'reversed' edge


      if (!directed) {
        var ts = t * N + s; // target to source index

        if (!directed && dist[ts] > _weight) {
          dist[ts] = _weight;
          next[ts] = s;
          edgeNext[ts] = edge;
        }
      }
    } // Main loop


    for (var k = 0; k < N; k++) {
      for (var _i2 = 0; _i2 < N; _i2++) {
        var ik = _i2 * N + k;

        for (var _j = 0; _j < N; _j++) {
          var ij = _i2 * N + _j;
          var kj = k * N + _j;

          if (dist[ik] + dist[kj] < dist[ij]) {
            dist[ij] = dist[ik] + dist[kj];
            next[ij] = next[ik];
          }
        }
      }
    }

    var getArgEle = function getArgEle(ele) {
      return (string(ele) ? cy.filter(ele) : ele)[0];
    };

    var indexOfArgEle = function indexOfArgEle(ele) {
      return indexOf(getArgEle(ele));
    };

    var res = {
      distance: function distance(from, to) {
        var i = indexOfArgEle(from);
        var j = indexOfArgEle(to);
        return dist[i * N + j];
      },
      path: function path(from, to) {
        var i = indexOfArgEle(from);
        var j = indexOfArgEle(to);
        var fromNode = atIndex(i);

        if (i === j) {
          return fromNode.collection();
        }

        if (next[i * N + j] == null) {
          return cy.collection();
        }

        var path = cy.collection();
        var prev = i;
        var edge;
        path.merge(fromNode);

        while (i !== j) {
          prev = i;
          i = next[i * N + j];
          edge = edgeNext[prev * N + i];
          path.merge(edge);
          path.merge(atIndex(i));
        }

        return path;
      }
    };
    return res;
  } // floydWarshall

}; // elesfn

var bellmanFordDefaults = defaults({
  weight: function weight(edge) {
    return 1;
  },
  directed: false,
  root: null
});
var elesfn$5 = {
  // Implemented from pseudocode from wikipedia
  bellmanFord: function bellmanFord(options) {
    var _this = this;

    var _bellmanFordDefaults = bellmanFordDefaults(options),
        weight = _bellmanFordDefaults.weight,
        directed = _bellmanFordDefaults.directed,
        root = _bellmanFordDefaults.root;

    var weightFn = weight;
    var eles = this;
    var cy = this.cy();

    var _this$byGroup = this.byGroup(),
        edges = _this$byGroup.edges,
        nodes = _this$byGroup.nodes;

    var numNodes = nodes.length;
    var infoMap = new Map$1();
    var hasNegativeWeightCycle = false;
    var negativeWeightCycles = [];
    root = cy.collection(root)[0]; // in case selector passed

    edges.unmergeBy(function (edge) {
      return edge.isLoop();
    });
    var numEdges = edges.length;

    var getInfo = function getInfo(node) {
      var obj = infoMap.get(node.id());

      if (!obj) {
        obj = {};
        infoMap.set(node.id(), obj);
      }

      return obj;
    };

    var getNodeFromTo = function getNodeFromTo(to) {
      return (string(to) ? cy.$(to) : to)[0];
    };

    var distanceTo = function distanceTo(to) {
      return getInfo(getNodeFromTo(to)).dist;
    };

    var pathTo = function pathTo(to) {
      var thisStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : root;
      var end = getNodeFromTo(to);
      var path = [];
      var node = end;

      for (;;) {
        if (node == null) {
          return _this.spawn();
        }

        var _getInfo = getInfo(node),
            edge = _getInfo.edge,
            pred = _getInfo.pred;

        path.unshift(node[0]);

        if (node.same(thisStart) && path.length > 0) {
          break;
        }

        if (edge != null) {
          path.unshift(edge);
        }

        node = pred;
      }

      return eles.spawn(path);
    }; // Initializations { dist, pred, edge }


    for (var i = 0; i < numNodes; i++) {
      var node = nodes[i];
      var info = getInfo(node);

      if (node.same(root)) {
        info.dist = 0;
      } else {
        info.dist = Infinity;
      }

      info.pred = null;
      info.edge = null;
    } // Edges relaxation


    var replacedEdge = false;

    var checkForEdgeReplacement = function checkForEdgeReplacement(node1, node2, edge, info1, info2, weight) {
      var dist = info1.dist + weight;

      if (dist < info2.dist && !edge.same(info1.edge)) {
        info2.dist = dist;
        info2.pred = node1;
        info2.edge = edge;
        replacedEdge = true;
      }
    };

    for (var _i = 1; _i < numNodes; _i++) {
      replacedEdge = false;

      for (var e = 0; e < numEdges; e++) {
        var edge = edges[e];
        var src = edge.source();
        var tgt = edge.target();

        var _weight = weightFn(edge);

        var srcInfo = getInfo(src);
        var tgtInfo = getInfo(tgt);
        checkForEdgeReplacement(src, tgt, edge, srcInfo, tgtInfo, _weight); // If undirected graph, we need to take into account the 'reverse' edge

        if (!directed) {
          checkForEdgeReplacement(tgt, src, edge, tgtInfo, srcInfo, _weight);
        }
      }

      if (!replacedEdge) {
        break;
      }
    }

    if (replacedEdge) {
      // Check for negative weight cycles
      for (var _e = 0; _e < numEdges; _e++) {
        var _edge = edges[_e];

        var _src = _edge.source();

        var _tgt = _edge.target();

        var _weight2 = weightFn(_edge);

        var srcDist = getInfo(_src).dist;
        var tgtDist = getInfo(_tgt).dist;

        if (srcDist + _weight2 < tgtDist || !directed && tgtDist + _weight2 < srcDist) {
          warn('Graph contains a negative weight cycle for Bellman-Ford');
          hasNegativeWeightCycle = true;
          break;
        }
      }
    }

    return {
      distanceTo: distanceTo,
      pathTo: pathTo,
      hasNegativeWeightCycle: hasNegativeWeightCycle,
      negativeWeightCycles: negativeWeightCycles
    };
  } // bellmanFord

}; // elesfn

var sqrt2 = Math.sqrt(2); // Function which colapses 2 (meta) nodes into one
// Updates the remaining edge lists
// Receives as a paramater the edge which causes the collapse

var collapse = function collapse(edgeIndex, nodeMap, remainingEdges) {
  if (remainingEdges.length === 0) {
    error("Karger-Stein must be run on a connected (sub)graph");
  }

  var edgeInfo = remainingEdges[edgeIndex];
  var sourceIn = edgeInfo[1];
  var targetIn = edgeInfo[2];
  var partition1 = nodeMap[sourceIn];
  var partition2 = nodeMap[targetIn];
  var newEdges = remainingEdges; // re-use array
  // Delete all edges between partition1 and partition2

  for (var i = newEdges.length - 1; i >= 0; i--) {
    var edge = newEdges[i];
    var src = edge[1];
    var tgt = edge[2];

    if (nodeMap[src] === partition1 && nodeMap[tgt] === partition2 || nodeMap[src] === partition2 && nodeMap[tgt] === partition1) {
      newEdges.splice(i, 1);
    }
  } // All edges pointing to partition2 should now point to partition1


  for (var _i = 0; _i < newEdges.length; _i++) {
    var _edge = newEdges[_i];

    if (_edge[1] === partition2) {
      // Check source
      newEdges[_i] = _edge.slice(); // copy

      newEdges[_i][1] = partition1;
    } else if (_edge[2] === partition2) {
      // Check target
      newEdges[_i] = _edge.slice(); // copy

      newEdges[_i][2] = partition1;
    }
  } // Move all nodes from partition2 to partition1


  for (var _i2 = 0; _i2 < nodeMap.length; _i2++) {
    if (nodeMap[_i2] === partition2) {
      nodeMap[_i2] = partition1;
    }
  }

  return newEdges;
}; // Contracts a graph until we reach a certain number of meta nodes


var contractUntil = function contractUntil(metaNodeMap, remainingEdges, size, sizeLimit) {
  while (size > sizeLimit) {
    // Choose an edge randomly
    var edgeIndex = Math.floor(Math.random() * remainingEdges.length); // Collapse graph based on edge

    remainingEdges = collapse(edgeIndex, metaNodeMap, remainingEdges);
    size--;
  }

  return remainingEdges;
};

var elesfn$6 = {
  // Computes the minimum cut of an undirected graph
  // Returns the correct answer with high probability
  kargerStein: function kargerStein() {
    var _this$byGroup = this.byGroup(),
        nodes = _this$byGroup.nodes,
        edges = _this$byGroup.edges;

    edges.unmergeBy(function (edge) {
      return edge.isLoop();
    });
    var numNodes = nodes.length;
    var numEdges = edges.length;
    var numIter = Math.ceil(Math.pow(Math.log(numNodes) / Math.LN2, 2));
    var stopSize = Math.floor(numNodes / sqrt2);

    if (numNodes < 2) {
      error('At least 2 nodes are required for Karger-Stein algorithm');
      return undefined;
    } // Now store edge destination as indexes
    // Format for each edge (edge index, source node index, target node index)


    var edgeIndexes = [];

    for (var i = 0; i < numEdges; i++) {
      var e = edges[i];
      edgeIndexes.push([i, nodes.indexOf(e.source()), nodes.indexOf(e.target())]);
    } // We will store the best cut found here


    var minCutSize = Infinity;
    var minCutEdgeIndexes = [];
    var minCutNodeMap = new Array(numNodes); // Initial meta node partition

    var metaNodeMap = new Array(numNodes);
    var metaNodeMap2 = new Array(numNodes);

    var copyNodesMap = function copyNodesMap(from, to) {
      for (var _i3 = 0; _i3 < numNodes; _i3++) {
        to[_i3] = from[_i3];
      }
    }; // Main loop


    for (var iter = 0; iter <= numIter; iter++) {
      // Reset meta node partition
      for (var _i4 = 0; _i4 < numNodes; _i4++) {
        metaNodeMap[_i4] = _i4;
      } // Contract until stop point (stopSize nodes)


      var edgesState = contractUntil(metaNodeMap, edgeIndexes.slice(), numNodes, stopSize);
      var edgesState2 = edgesState.slice(); // copy
      // Create a copy of the colapsed nodes state

      copyNodesMap(metaNodeMap, metaNodeMap2); // Run 2 iterations starting in the stop state

      var res1 = contractUntil(metaNodeMap, edgesState, stopSize, 2);
      var res2 = contractUntil(metaNodeMap2, edgesState2, stopSize, 2); // Is any of the 2 results the best cut so far?

      if (res1.length <= res2.length && res1.length < minCutSize) {
        minCutSize = res1.length;
        minCutEdgeIndexes = res1;
        copyNodesMap(metaNodeMap, minCutNodeMap);
      } else if (res2.length <= res1.length && res2.length < minCutSize) {
        minCutSize = res2.length;
        minCutEdgeIndexes = res2;
        copyNodesMap(metaNodeMap2, minCutNodeMap);
      }
    } // end of main loop
    // Construct result


    var cut = this.spawn(minCutEdgeIndexes.map(function (e) {
      return edges[e[0]];
    }));
    var partition1 = this.spawn();
    var partition2 = this.spawn(); // traverse metaNodeMap for best cut

    var witnessNodePartition = minCutNodeMap[0];

    for (var _i5 = 0; _i5 < minCutNodeMap.length; _i5++) {
      var partitionId = minCutNodeMap[_i5];
      var node = nodes[_i5];

      if (partitionId === witnessNodePartition) {
        partition1.merge(node);
      } else {
        partition2.merge(node);
      }
    }

    var ret = {
      cut: cut,
      partition1: partition1,
      partition2: partition2
    };
    return ret;
  }
}; // elesfn

var copyPosition = function copyPosition(p) {
  return {
    x: p.x,
    y: p.y
  };
};

var modelToRenderedPosition = function modelToRenderedPosition(p, zoom, pan) {
  return {
    x: p.x * zoom + pan.x,
    y: p.y * zoom + pan.y
  };
};

var renderedToModelPosition = function renderedToModelPosition(p, zoom, pan) {
  return {
    x: (p.x - pan.x) / zoom,
    y: (p.y - pan.y) / zoom
  };
};

var array2point = function array2point(arr) {
  return {
    x: arr[0],
    y: arr[1]
  };
};

var min = function min(arr) {
  var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
  var min = Infinity;

  for (var i = begin; i < end; i++) {
    var val = arr[i];

    if (isFinite(val)) {
      min = Math.min(val, min);
    }
  }

  return min;
};

var max = function max(arr) {
  var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
  var max = -Infinity;

  for (var i = begin; i < end; i++) {
    var val = arr[i];

    if (isFinite(val)) {
      max = Math.max(val, max);
    }
  }

  return max;
};

var mean = function mean(arr) {
  var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
  var total = 0;
  var n = 0;

  for (var i = begin; i < end; i++) {
    var val = arr[i];

    if (isFinite(val)) {
      total += val;
      n++;
    }
  }

  return total / n;
};

var median = function median(arr) {
  var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
  var copy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var sort = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
  var includeHoles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;

  if (copy) {
    arr = arr.slice(begin, end);
  } else {
    if (end < arr.length) {
      arr.splice(end, arr.length - end);
    }

    if (begin > 0) {
      arr.splice(0, begin);
    }
  } // all non finite (e.g. Infinity, NaN) elements must be -Infinity so they go to the start


  var off = 0; // offset from non-finite values

  for (var i = arr.length - 1; i >= 0; i--) {
    var v = arr[i];

    if (includeHoles) {
      if (!isFinite(v)) {
        arr[i] = -Infinity;
        off++;
      }
    } else {
      // just remove it if we don't want to consider holes
      arr.splice(i, 1);
    }
  }

  if (sort) {
    arr.sort(function (a, b) {
      return a - b;
    }); // requires copy = true if you don't want to change the orig
  }

  var len = arr.length;
  var mid = Math.floor(len / 2);

  if (len % 2 !== 0) {
    return arr[mid + 1 + off];
  } else {
    return (arr[mid - 1 + off] + arr[mid + off]) / 2;
  }
};

var deg2rad = function deg2rad(deg) {
  return Math.PI * deg / 180;
};

var getAngleFromDisp = function getAngleFromDisp(dispX, dispY) {
  return Math.atan2(dispY, dispX) - Math.PI / 2;
};

var log2 = Math.log2 || function (n) {
  return Math.log(n) / Math.log(2);
};

var signum = function signum(x) {
  if (x > 0) {
    return 1;
  } else if (x < 0) {
    return -1;
  } else {
    return 0;
  }
};

var dist = function dist(p1, p2) {
  return Math.sqrt(sqdist(p1, p2));
};

var sqdist = function sqdist(p1, p2) {
  var dx = p2.x - p1.x;
  var dy = p2.y - p1.y;
  return dx * dx + dy * dy;
};

var inPlaceSumNormalize = function inPlaceSumNormalize(v) {
  var length = v.length; // First, get sum of all elements

  var total = 0;

  for (var i = 0; i < length; i++) {
    total += v[i];
  } // Now, divide each by the sum of all elements


  for (var _i = 0; _i < length; _i++) {
    v[_i] = v[_i] / total;
  }

  return v;
};

var qbezierAt = function qbezierAt(p0, p1, p2, t) {
  return (1 - t) * (1 - t) * p0 + 2 * (1 - t) * t * p1 + t * t * p2;
};

var qbezierPtAt = function qbezierPtAt(p0, p1, p2, t) {
  return {
    x: qbezierAt(p0.x, p1.x, p2.x, t),
    y: qbezierAt(p0.y, p1.y, p2.y, t)
  };
};

var lineAt = function lineAt(p0, p1, t, d) {
  var vec = {
    x: p1.x - p0.x,
    y: p1.y - p0.y
  };
  var vecDist = dist(p0, p1);
  var normVec = {
    x: vec.x / vecDist,
    y: vec.y / vecDist
  };
  t = t == null ? 0 : t;
  d = d != null ? d : t * vecDist;
  return {
    x: p0.x + normVec.x * d,
    y: p0.y + normVec.y * d
  };
};

var bound = function bound(min, val, max) {
  return Math.max(min, Math.min(max, val));
}; // makes a full bb (x1, y1, x2, y2, w, h) from implicit params


var makeBoundingBox = function makeBoundingBox(bb) {
  if (bb == null) {
    return {
      x1: Infinity,
      y1: Infinity,
      x2: -Infinity,
      y2: -Infinity,
      w: 0,
      h: 0
    };
  } else if (bb.x1 != null && bb.y1 != null) {
    if (bb.x2 != null && bb.y2 != null && bb.x2 >= bb.x1 && bb.y2 >= bb.y1) {
      return {
        x1: bb.x1,
        y1: bb.y1,
        x2: bb.x2,
        y2: bb.y2,
        w: bb.x2 - bb.x1,
        h: bb.y2 - bb.y1
      };
    } else if (bb.w != null && bb.h != null && bb.w >= 0 && bb.h >= 0) {
      return {
        x1: bb.x1,
        y1: bb.y1,
        x2: bb.x1 + bb.w,
        y2: bb.y1 + bb.h,
        w: bb.w,
        h: bb.h
      };
    }
  }
};

var clearBoundingBox = function clearBoundingBox(bb) {
  bb.x1 = Infinity;
  bb.y1 = Infinity;
  bb.x2 = -Infinity;
  bb.y2 = -Infinity;
  bb.w = 0;
  bb.h = 0;
};

var updateBoundingBox = function updateBoundingBox(bb1, bb2) {
  // update bb1 with bb2 bounds
  bb1.x1 = Math.min(bb1.x1, bb2.x1);
  bb1.x2 = Math.max(bb1.x2, bb2.x2);
  bb1.w = bb1.x2 - bb1.x1;
  bb1.y1 = Math.min(bb1.y1, bb2.y1);
  bb1.y2 = Math.max(bb1.y2, bb2.y2);
  bb1.h = bb1.y2 - bb1.y1;
};

var expandBoundingBoxByPoint = function expandBoundingBoxByPoint(bb, x, y) {
  bb.x1 = Math.min(bb.x1, x);
  bb.x2 = Math.max(bb.x2, x);
  bb.w = bb.x2 - bb.x1;
  bb.y1 = Math.min(bb.y1, y);
  bb.y2 = Math.max(bb.y2, y);
  bb.h = bb.y2 - bb.y1;
};

var expandBoundingBox = function expandBoundingBox(bb) {
  var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  bb.x1 -= padding;
  bb.x2 += padding;
  bb.y1 -= padding;
  bb.y2 += padding;
  bb.w = bb.x2 - bb.x1;
  bb.h = bb.y2 - bb.y1;
  return bb;
};

var assignBoundingBox = function assignBoundingBox(bb1, bb2) {
  bb1.x1 = bb2.x1;
  bb1.y1 = bb2.y1;
  bb1.x2 = bb2.x2;
  bb1.y2 = bb2.y2;
  bb1.w = bb1.x2 - bb1.x1;
  bb1.h = bb1.y2 - bb1.y1;
};

var assignShiftToBoundingBox = function assignShiftToBoundingBox(bb, delta) {
  bb.x1 += delta.x;
  bb.x2 += delta.x;
  bb.y1 += delta.y;
  bb.y2 += delta.y;
};

var boundingBoxesIntersect = function boundingBoxesIntersect(bb1, bb2) {
  // case: one bb to right of other
  if (bb1.x1 > bb2.x2) {
    return false;
  }

  if (bb2.x1 > bb1.x2) {
    return false;
  } // case: one bb to left of other


  if (bb1.x2 < bb2.x1) {
    return false;
  }

  if (bb2.x2 < bb1.x1) {
    return false;
  } // case: one bb above other


  if (bb1.y2 < bb2.y1) {
    return false;
  }

  if (bb2.y2 < bb1.y1) {
    return false;
  } // case: one bb below other


  if (bb1.y1 > bb2.y2) {
    return false;
  }

  if (bb2.y1 > bb1.y2) {
    return false;
  } // otherwise, must have some overlap


  return true;
};

var inBoundingBox = function inBoundingBox(bb, x, y) {
  return bb.x1 <= x && x <= bb.x2 && bb.y1 <= y && y <= bb.y2;
};

var pointInBoundingBox = function pointInBoundingBox(bb, pt) {
  return inBoundingBox(bb, pt.x, pt.y);
};

var boundingBoxInBoundingBox = function boundingBoxInBoundingBox(bb1, bb2) {
  return inBoundingBox(bb1, bb2.x1, bb2.y1) && inBoundingBox(bb1, bb2.x2, bb2.y2);
};

var roundRectangleIntersectLine = function roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding) {
  var cornerRadius = getRoundRectangleRadius(width, height);
  var halfWidth = width / 2;
  var halfHeight = height / 2; // Check intersections with straight line segments

  var straightLineIntersections; // Top segment, left to right

  {
    var topStartX = nodeX - halfWidth + cornerRadius - padding;
    var topStartY = nodeY - halfHeight - padding;
    var topEndX = nodeX + halfWidth - cornerRadius + padding;
    var topEndY = topStartY;
    straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);

    if (straightLineIntersections.length > 0) {
      return straightLineIntersections;
    }
  } // Right segment, top to bottom

  {
    var rightStartX = nodeX + halfWidth + padding;
    var rightStartY = nodeY - halfHeight + cornerRadius - padding;
    var rightEndX = rightStartX;
    var rightEndY = nodeY + halfHeight - cornerRadius + padding;
    straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);

    if (straightLineIntersections.length > 0) {
      return straightLineIntersections;
    }
  } // Bottom segment, left to right

  {
    var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
    var bottomStartY = nodeY + halfHeight + padding;
    var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
    var bottomEndY = bottomStartY;
    straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);

    if (straightLineIntersections.length > 0) {
      return straightLineIntersections;
    }
  } // Left segment, top to bottom

  {
    var leftStartX = nodeX - halfWidth - padding;
    var leftStartY = nodeY - halfHeight + cornerRadius - padding;
    var leftEndX = leftStartX;
    var leftEndY = nodeY + halfHeight - cornerRadius + padding;
    straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);

    if (straightLineIntersections.length > 0) {
      return straightLineIntersections;
    }
  } // Check intersections with arc segments

  var arcIntersections; // Top Left

  {
    var topLeftCenterX = nodeX - halfWidth + cornerRadius;
    var topLeftCenterY = nodeY - halfHeight + cornerRadius;
    arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, topLeftCenterX, topLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

    if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {
      return [arcIntersections[0], arcIntersections[1]];
    }
  } // Top Right

  {
    var topRightCenterX = nodeX + halfWidth - cornerRadius;
    var topRightCenterY = nodeY - halfHeight + cornerRadius;
    arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, topRightCenterX, topRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

    if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {
      return [arcIntersections[0], arcIntersections[1]];
    }
  } // Bottom Right

  {
    var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
    var bottomRightCenterY = nodeY + halfHeight - cornerRadius;
    arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

    if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {
      return [arcIntersections[0], arcIntersections[1]];
    }
  } // Bottom Left

  {
    var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
    var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;
    arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

    if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {
      return [arcIntersections[0], arcIntersections[1]];
    }
  }
  return []; // if nothing
};

var inLineVicinity = function inLineVicinity(x, y, lx1, ly1, lx2, ly2, tolerance) {
  var t = tolerance;
  var x1 = Math.min(lx1, lx2);
  var x2 = Math.max(lx1, lx2);
  var y1 = Math.min(ly1, ly2);
  var y2 = Math.max(ly1, ly2);
  return x1 - t <= x && x <= x2 + t && y1 - t <= y && y <= y2 + t;
};

var inBezierVicinity = function inBezierVicinity(x, y, x1, y1, x2, y2, x3, y3, tolerance) {
  var bb = {
    x1: Math.min(x1, x3, x2) - tolerance,
    x2: Math.max(x1, x3, x2) + tolerance,
    y1: Math.min(y1, y3, y2) - tolerance,
    y2: Math.max(y1, y3, y2) + tolerance
  }; // if outside the rough bounding box for the bezier, then it can't be a hit

  if (x < bb.x1 || x > bb.x2 || y < bb.y1 || y > bb.y2) {
    // console.log('bezier out of rough bb')
    return false;
  } else {
    // console.log('do more expensive check');
    return true;
  }
};

var solveQuadratic = function solveQuadratic(a, b, c, val) {
  c -= val;
  var r = b * b - 4 * a * c;

  if (r < 0) {
    return [];
  }

  var sqrtR = Math.sqrt(r);
  var denom = 2 * a;
  var root1 = (-b + sqrtR) / denom;
  var root2 = (-b - sqrtR) / denom;
  return [root1, root2];
};

var solveCubic = function solveCubic(a, b, c, d, result) {
  // Solves a cubic function, returns root in form [r1, i1, r2, i2, r3, i3], where
  // r is the real component, i is the imaginary component
  // An implementation of the Cardano method from the year 1545
  // http://en.wikipedia.org/wiki/Cubic_function#The_nature_of_the_roots
  b /= a;
  c /= a;
  d /= a;
  var discriminant, q, r, dum1, s, t, term1, r13;
  q = (3.0 * c - b * b) / 9.0;
  r = -(27.0 * d) + b * (9.0 * c - 2.0 * (b * b));
  r /= 54.0;
  discriminant = q * q * q + r * r;
  result[1] = 0;
  term1 = b / 3.0;

  if (discriminant > 0) {
    s = r + Math.sqrt(discriminant);
    s = s < 0 ? -Math.pow(-s, 1.0 / 3.0) : Math.pow(s, 1.0 / 3.0);
    t = r - Math.sqrt(discriminant);
    t = t < 0 ? -Math.pow(-t, 1.0 / 3.0) : Math.pow(t, 1.0 / 3.0);
    result[0] = -term1 + s + t;
    term1 += (s + t) / 2.0;
    result[4] = result[2] = -term1;
    term1 = Math.sqrt(3.0) * (-t + s) / 2;
    result[3] = term1;
    result[5] = -term1;
    return;
  }

  result[5] = result[3] = 0;

  if (discriminant === 0) {
    r13 = r < 0 ? -Math.pow(-r, 1.0 / 3.0) : Math.pow(r, 1.0 / 3.0);
    result[0] = -term1 + 2.0 * r13;
    result[4] = result[2] = -(r13 + term1);
    return;
  }

  q = -q;
  dum1 = q * q * q;
  dum1 = Math.acos(r / Math.sqrt(dum1));
  r13 = 2.0 * Math.sqrt(q);
  result[0] = -term1 + r13 * Math.cos(dum1 / 3.0);
  result[2] = -term1 + r13 * Math.cos((dum1 + 2.0 * Math.PI) / 3.0);
  result[4] = -term1 + r13 * Math.cos((dum1 + 4.0 * Math.PI) / 3.0);
  return;
};

var sqdistToQuadraticBezier = function sqdistToQuadraticBezier(x, y, x1, y1, x2, y2, x3, y3) {
  // Find minimum distance by using the minimum of the distance
  // function between the given point and the curve
  // This gives the coefficients of the resulting cubic equation
  // whose roots tell us where a possible minimum is
  // (Coefficients are divided by 4)
  var a = 1.0 * x1 * x1 - 4 * x1 * x2 + 2 * x1 * x3 + 4 * x2 * x2 - 4 * x2 * x3 + x3 * x3 + y1 * y1 - 4 * y1 * y2 + 2 * y1 * y3 + 4 * y2 * y2 - 4 * y2 * y3 + y3 * y3;
  var b = 1.0 * 9 * x1 * x2 - 3 * x1 * x1 - 3 * x1 * x3 - 6 * x2 * x2 + 3 * x2 * x3 + 9 * y1 * y2 - 3 * y1 * y1 - 3 * y1 * y3 - 6 * y2 * y2 + 3 * y2 * y3;
  var c = 1.0 * 3 * x1 * x1 - 6 * x1 * x2 + x1 * x3 - x1 * x + 2 * x2 * x2 + 2 * x2 * x - x3 * x + 3 * y1 * y1 - 6 * y1 * y2 + y1 * y3 - y1 * y + 2 * y2 * y2 + 2 * y2 * y - y3 * y;
  var d = 1.0 * x1 * x2 - x1 * x1 + x1 * x - x2 * x + y1 * y2 - y1 * y1 + y1 * y - y2 * y; // debug("coefficients: " + a / a + ", " + b / a + ", " + c / a + ", " + d / a);

  var roots = []; // Use the cubic solving algorithm

  solveCubic(a, b, c, d, roots);
  var zeroThreshold = 0.0000001;
  var params = [];

  for (var index = 0; index < 6; index += 2) {
    if (Math.abs(roots[index + 1]) < zeroThreshold && roots[index] >= 0 && roots[index] <= 1.0) {
      params.push(roots[index]);
    }
  }

  params.push(1.0);
  params.push(0.0);
  var minDistanceSquared = -1;
  var curX, curY, distSquared;

  for (var i = 0; i < params.length; i++) {
    curX = Math.pow(1.0 - params[i], 2.0) * x1 + 2.0 * (1 - params[i]) * params[i] * x2 + params[i] * params[i] * x3;
    curY = Math.pow(1 - params[i], 2.0) * y1 + 2 * (1.0 - params[i]) * params[i] * y2 + params[i] * params[i] * y3;
    distSquared = Math.pow(curX - x, 2) + Math.pow(curY - y, 2); // debug('distance for param ' + params[i] + ": " + Math.sqrt(distSquared));

    if (minDistanceSquared >= 0) {
      if (distSquared < minDistanceSquared) {
        minDistanceSquared = distSquared;
      }
    } else {
      minDistanceSquared = distSquared;
    }
  }

  return minDistanceSquared;
};

var sqdistToFiniteLine = function sqdistToFiniteLine(x, y, x1, y1, x2, y2) {
  var offset = [x - x1, y - y1];
  var line = [x2 - x1, y2 - y1];
  var lineSq = line[0] * line[0] + line[1] * line[1];
  var hypSq = offset[0] * offset[0] + offset[1] * offset[1];
  var dotProduct = offset[0] * line[0] + offset[1] * line[1];
  var adjSq = dotProduct * dotProduct / lineSq;

  if (dotProduct < 0) {
    return hypSq;
  }

  if (adjSq > lineSq) {
    return (x - x2) * (x - x2) + (y - y2) * (y - y2);
  }

  return hypSq - adjSq;
};

var pointInsidePolygonPoints = function pointInsidePolygonPoints(x, y, points) {
  var x1, y1, x2, y2;
  var y3; // Intersect with vertical line through (x, y)

  var up = 0; // let down = 0;

  for (var i = 0; i < points.length / 2; i++) {
    x1 = points[i * 2];
    y1 = points[i * 2 + 1];

    if (i + 1 < points.length / 2) {
      x2 = points[(i + 1) * 2];
      y2 = points[(i + 1) * 2 + 1];
    } else {
      x2 = points[(i + 1 - points.length / 2) * 2];
      y2 = points[(i + 1 - points.length / 2) * 2 + 1];
    }

    if (x1 == x && x2 == x) ;else if (x1 >= x && x >= x2 || x1 <= x && x <= x2) {
      y3 = (x - x1) / (x2 - x1) * (y2 - y1) + y1;

      if (y3 > y) {
        up++;
      } // if( y3 < y ){
      // down++;
      // }

    } else {
      continue;
    }
  }

  if (up % 2 === 0) {
    return false;
  } else {
    return true;
  }
};

var pointInsidePolygon = function pointInsidePolygon(x, y, basePoints, centerX, centerY, width, height, direction, padding) {
  var transformedPoints = new Array(basePoints.length); // Gives negative angle

  var angle;

  if (direction[0] != null) {
    angle = Math.atan(direction[1] / direction[0]);

    if (direction[0] < 0) {
      angle = angle + Math.PI / 2;
    } else {
      angle = -angle - Math.PI / 2;
    }
  } else {
    angle = direction;
  }

  var cos = Math.cos(-angle);
  var sin = Math.sin(-angle); //    console.log("base: " + basePoints);

  for (var i = 0; i < transformedPoints.length / 2; i++) {
    transformedPoints[i * 2] = width / 2 * (basePoints[i * 2] * cos - basePoints[i * 2 + 1] * sin);
    transformedPoints[i * 2 + 1] = height / 2 * (basePoints[i * 2 + 1] * cos + basePoints[i * 2] * sin);
    transformedPoints[i * 2] += centerX;
    transformedPoints[i * 2 + 1] += centerY;
  }

  var points;

  if (padding > 0) {
    var expandedLineSet = expandPolygon(transformedPoints, -padding);
    points = joinLines(expandedLineSet);
  } else {
    points = transformedPoints;
  }

  return pointInsidePolygonPoints(x, y, points);
};

var joinLines = function joinLines(lineSet) {
  var vertices = new Array(lineSet.length / 2);
  var currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY;
  var nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY;

  for (var i = 0; i < lineSet.length / 4; i++) {
    currentLineStartX = lineSet[i * 4];
    currentLineStartY = lineSet[i * 4 + 1];
    currentLineEndX = lineSet[i * 4 + 2];
    currentLineEndY = lineSet[i * 4 + 3];

    if (i < lineSet.length / 4 - 1) {
      nextLineStartX = lineSet[(i + 1) * 4];
      nextLineStartY = lineSet[(i + 1) * 4 + 1];
      nextLineEndX = lineSet[(i + 1) * 4 + 2];
      nextLineEndY = lineSet[(i + 1) * 4 + 3];
    } else {
      nextLineStartX = lineSet[0];
      nextLineStartY = lineSet[1];
      nextLineEndX = lineSet[2];
      nextLineEndY = lineSet[3];
    }

    var intersection = finiteLinesIntersect(currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY, nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY, true);
    vertices[i * 2] = intersection[0];
    vertices[i * 2 + 1] = intersection[1];
  }

  return vertices;
};

var expandPolygon = function expandPolygon(points, pad) {
  var expandedLineSet = new Array(points.length * 2);
  var currentPointX, currentPointY, nextPointX, nextPointY;

  for (var i = 0; i < points.length / 2; i++) {
    currentPointX = points[i * 2];
    currentPointY = points[i * 2 + 1];

    if (i < points.length / 2 - 1) {
      nextPointX = points[(i + 1) * 2];
      nextPointY = points[(i + 1) * 2 + 1];
    } else {
      nextPointX = points[0];
      nextPointY = points[1];
    } // Current line: [currentPointX, currentPointY] to [nextPointX, nextPointY]
    // Assume CCW polygon winding


    var offsetX = nextPointY - currentPointY;
    var offsetY = -(nextPointX - currentPointX); // Normalize

    var offsetLength = Math.sqrt(offsetX * offsetX + offsetY * offsetY);
    var normalizedOffsetX = offsetX / offsetLength;
    var normalizedOffsetY = offsetY / offsetLength;
    expandedLineSet[i * 4] = currentPointX + normalizedOffsetX * pad;
    expandedLineSet[i * 4 + 1] = currentPointY + normalizedOffsetY * pad;
    expandedLineSet[i * 4 + 2] = nextPointX + normalizedOffsetX * pad;
    expandedLineSet[i * 4 + 3] = nextPointY + normalizedOffsetY * pad;
  }

  return expandedLineSet;
};

var intersectLineEllipse = function intersectLineEllipse(x, y, centerX, centerY, ellipseWradius, ellipseHradius) {
  var dispX = centerX - x;
  var dispY = centerY - y;
  dispX /= ellipseWradius;
  dispY /= ellipseHradius;
  var len = Math.sqrt(dispX * dispX + dispY * dispY);
  var newLength = len - 1;

  if (newLength < 0) {
    return [];
  }

  var lenProportion = newLength / len;
  return [(centerX - x) * lenProportion + x, (centerY - y) * lenProportion + y];
};

var checkInEllipse = function checkInEllipse(x, y, width, height, centerX, centerY, padding) {
  x -= centerX;
  y -= centerY;
  x /= width / 2 + padding;
  y /= height / 2 + padding;
  return x * x + y * y <= 1;
}; // Returns intersections of increasing distance from line's start point


var intersectLineCircle = function intersectLineCircle(x1, y1, x2, y2, centerX, centerY, radius) {
  // Calculate d, direction vector of line
  var d = [x2 - x1, y2 - y1]; // Direction vector of line

  var f = [x1 - centerX, y1 - centerY];
  var a = d[0] * d[0] + d[1] * d[1];
  var b = 2 * (f[0] * d[0] + f[1] * d[1]);
  var c = f[0] * f[0] + f[1] * f[1] - radius * radius;
  var discriminant = b * b - 4 * a * c;

  if (discriminant < 0) {
    return [];
  }

  var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);
  var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);
  var tMin = Math.min(t1, t2);
  var tMax = Math.max(t1, t2);
  var inRangeParams = [];

  if (tMin >= 0 && tMin <= 1) {
    inRangeParams.push(tMin);
  }

  if (tMax >= 0 && tMax <= 1) {
    inRangeParams.push(tMax);
  }

  if (inRangeParams.length === 0) {
    return [];
  }

  var nearIntersectionX = inRangeParams[0] * d[0] + x1;
  var nearIntersectionY = inRangeParams[0] * d[1] + y1;

  if (inRangeParams.length > 1) {
    if (inRangeParams[0] == inRangeParams[1]) {
      return [nearIntersectionX, nearIntersectionY];
    } else {
      var farIntersectionX = inRangeParams[1] * d[0] + x1;
      var farIntersectionY = inRangeParams[1] * d[1] + y1;
      return [nearIntersectionX, nearIntersectionY, farIntersectionX, farIntersectionY];
    }
  } else {
    return [nearIntersectionX, nearIntersectionY];
  }
};

var midOfThree = function midOfThree(a, b, c) {
  if (b <= a && a <= c || c <= a && a <= b) {
    return a;
  } else if (a <= b && b <= c || c <= b && b <= a) {
    return b;
  } else {
    return c;
  }
}; // (x1,y1)=>(x2,y2) intersect with (x3,y3)=>(x4,y4)


var finiteLinesIntersect = function finiteLinesIntersect(x1, y1, x2, y2, x3, y3, x4, y4, infiniteLines) {
  var dx13 = x1 - x3;
  var dx21 = x2 - x1;
  var dx43 = x4 - x3;
  var dy13 = y1 - y3;
  var dy21 = y2 - y1;
  var dy43 = y4 - y3;
  var ua_t = dx43 * dy13 - dy43 * dx13;
  var ub_t = dx21 * dy13 - dy21 * dx13;
  var u_b = dy43 * dx21 - dx43 * dy21;

  if (u_b !== 0) {
    var ua = ua_t / u_b;
    var ub = ub_t / u_b;
    var flptThreshold = 0.001;

    var _min = 0 - flptThreshold;

    var _max = 1 + flptThreshold;

    if (_min <= ua && ua <= _max && _min <= ub && ub <= _max) {
      return [x1 + ua * dx21, y1 + ua * dy21];
    } else {
      if (!infiniteLines) {
        return [];
      } else {
        return [x1 + ua * dx21, y1 + ua * dy21];
      }
    }
  } else {
    if (ua_t === 0 || ub_t === 0) {
      // Parallel, coincident lines. Check if overlap
      // Check endpoint of second line
      if (midOfThree(x1, x2, x4) === x4) {
        return [x4, y4];
      } // Check start point of second line


      if (midOfThree(x1, x2, x3) === x3) {
        return [x3, y3];
      } // Endpoint of first line


      if (midOfThree(x3, x4, x2) === x2) {
        return [x2, y2];
      }

      return [];
    } else {
      // Parallel, non-coincident
      return [];
    }
  }
}; // math.polygonIntersectLine( x, y, basePoints, centerX, centerY, width, height, padding )
// intersect a node polygon (pts transformed)
//
// math.polygonIntersectLine( x, y, basePoints, centerX, centerY )
// intersect the points (no transform)


var polygonIntersectLine = function polygonIntersectLine(x, y, basePoints, centerX, centerY, width, height, padding) {
  var intersections = [];
  var intersection;
  var transformedPoints = new Array(basePoints.length);
  var doTransform = true;

  if (width == null) {
    doTransform = false;
  }

  var points;

  if (doTransform) {
    for (var i = 0; i < transformedPoints.length / 2; i++) {
      transformedPoints[i * 2] = basePoints[i * 2] * width + centerX;
      transformedPoints[i * 2 + 1] = basePoints[i * 2 + 1] * height + centerY;
    }

    if (padding > 0) {
      var expandedLineSet = expandPolygon(transformedPoints, -padding);
      points = joinLines(expandedLineSet);
    } else {
      points = transformedPoints;
    }
  } else {
    points = basePoints;
  }

  var currentX, currentY, nextX, nextY;

  for (var _i2 = 0; _i2 < points.length / 2; _i2++) {
    currentX = points[_i2 * 2];
    currentY = points[_i2 * 2 + 1];

    if (_i2 < points.length / 2 - 1) {
      nextX = points[(_i2 + 1) * 2];
      nextY = points[(_i2 + 1) * 2 + 1];
    } else {
      nextX = points[0];
      nextY = points[1];
    }

    intersection = finiteLinesIntersect(x, y, centerX, centerY, currentX, currentY, nextX, nextY);

    if (intersection.length !== 0) {
      intersections.push(intersection[0], intersection[1]);
    }
  }

  return intersections;
};

var shortenIntersection = function shortenIntersection(intersection, offset, amount) {
  var disp = [intersection[0] - offset[0], intersection[1] - offset[1]];
  var length = Math.sqrt(disp[0] * disp[0] + disp[1] * disp[1]);
  var lenRatio = (length - amount) / length;

  if (lenRatio < 0) {
    lenRatio = 0.00001;
  }

  return [offset[0] + lenRatio * disp[0], offset[1] + lenRatio * disp[1]];
};

var generateUnitNgonPointsFitToSquare = function generateUnitNgonPointsFitToSquare(sides, rotationRadians) {
  var points = generateUnitNgonPoints(sides, rotationRadians);
  points = fitPolygonToSquare(points);
  return points;
};

var fitPolygonToSquare = function fitPolygonToSquare(points) {
  var x, y;
  var sides = points.length / 2;
  var minX = Infinity,
      minY = Infinity,
      maxX = -Infinity,
      maxY = -Infinity;

  for (var i = 0; i < sides; i++) {
    x = points[2 * i];
    y = points[2 * i + 1];
    minX = Math.min(minX, x);
    maxX = Math.max(maxX, x);
    minY = Math.min(minY, y);
    maxY = Math.max(maxY, y);
  } // stretch factors


  var sx = 2 / (maxX - minX);
  var sy = 2 / (maxY - minY);

  for (var _i3 = 0; _i3 < sides; _i3++) {
    x = points[2 * _i3] = points[2 * _i3] * sx;
    y = points[2 * _i3 + 1] = points[2 * _i3 + 1] * sy;
    minX = Math.min(minX, x);
    maxX = Math.max(maxX, x);
    minY = Math.min(minY, y);
    maxY = Math.max(maxY, y);
  }

  if (minY < -1) {
    for (var _i4 = 0; _i4 < sides; _i4++) {
      y = points[2 * _i4 + 1] = points[2 * _i4 + 1] + (-1 - minY);
    }
  }

  return points;
};

var generateUnitNgonPoints = function generateUnitNgonPoints(sides, rotationRadians) {
  var increment = 1.0 / sides * 2 * Math.PI;
  var startAngle = sides % 2 === 0 ? Math.PI / 2.0 + increment / 2.0 : Math.PI / 2.0;
  startAngle += rotationRadians;
  var points = new Array(sides * 2);
  var currentAngle;

  for (var i = 0; i < sides; i++) {
    currentAngle = i * increment + startAngle;
    points[2 * i] = Math.cos(currentAngle); // x

    points[2 * i + 1] = Math.sin(-currentAngle); // y
  }

  return points;
}; // Set the default radius, unless half of width or height is smaller than default


var getRoundRectangleRadius = function getRoundRectangleRadius(width, height) {
  return Math.min(width / 4, height / 4, 8);
};

var getCutRectangleCornerLength = function getCutRectangleCornerLength() {
  return 8;
};

var bezierPtsToQuadCoeff = function bezierPtsToQuadCoeff(p0, p1, p2) {
  return [p0 - 2 * p1 + p2, 2 * (p1 - p0), p0];
}; // get curve width, height, and control point position offsets as a percentage of node height / width


var getBarrelCurveConstants = function getBarrelCurveConstants(width, height) {
  return {
    heightOffset: Math.min(15, 0.05 * height),
    widthOffset: Math.min(100, 0.25 * width),
    ctrlPtOffsetPct: 0.05
  };
};

var pageRankDefaults = defaults({
  dampingFactor: 0.8,
  precision: 0.000001,
  iterations: 200,
  weight: function weight(edge) {
    return 1;
  }
});
var elesfn$7 = {
  pageRank: function pageRank(options) {
    var _pageRankDefaults = pageRankDefaults(options),
        dampingFactor = _pageRankDefaults.dampingFactor,
        precision = _pageRankDefaults.precision,
        iterations = _pageRankDefaults.iterations,
        weight = _pageRankDefaults.weight;

    var cy = this._private.cy;

    var _this$byGroup = this.byGroup(),
        nodes = _this$byGroup.nodes,
        edges = _this$byGroup.edges;

    var numNodes = nodes.length;
    var numNodesSqd = numNodes * numNodes;
    var numEdges = edges.length; // Construct transposed adjacency matrix
    // First lets have a zeroed matrix of the right size
    // We'll also keep track of the sum of each column

    var matrix = new Array(numNodesSqd);
    var columnSum = new Array(numNodes);
    var additionalProb = (1 - dampingFactor) / numNodes; // Create null matrix

    for (var i = 0; i < numNodes; i++) {
      for (var j = 0; j < numNodes; j++) {
        var n = i * numNodes + j;
        matrix[n] = 0;
      }

      columnSum[i] = 0;
    } // Now, process edges


    for (var _i = 0; _i < numEdges; _i++) {
      var edge = edges[_i];
      var srcId = edge.data('source');
      var tgtId = edge.data('target'); // Don't include loops in the matrix

      if (srcId === tgtId) {
        continue;
      }

      var s = nodes.indexOfId(srcId);
      var t = nodes.indexOfId(tgtId);
      var w = weight(edge);

      var _n = t * numNodes + s; // Update matrix


      matrix[_n] += w; // Update column sum

      columnSum[s] += w;
    } // Add additional probability based on damping factor
    // Also, take into account columns that have sum = 0


    var p = 1.0 / numNodes + additionalProb; // Shorthand
    // Traverse matrix, column by column

    for (var _j = 0; _j < numNodes; _j++) {
      if (columnSum[_j] === 0) {
        // No 'links' out from node jth, assume equal probability for each possible node
        for (var _i2 = 0; _i2 < numNodes; _i2++) {
          var _n2 = _i2 * numNodes + _j;

          matrix[_n2] = p;
        }
      } else {
        // Node jth has outgoing link, compute normalized probabilities
        for (var _i3 = 0; _i3 < numNodes; _i3++) {
          var _n3 = _i3 * numNodes + _j;

          matrix[_n3] = matrix[_n3] / columnSum[_j] + additionalProb;
        }
      }
    } // Compute dominant eigenvector using power method


    var eigenvector = new Array(numNodes);
    var temp = new Array(numNodes);
    var previous; // Start with a vector of all 1's
    // Also, initialize a null vector which will be used as shorthand

    for (var _i4 = 0; _i4 < numNodes; _i4++) {
      eigenvector[_i4] = 1;
    }

    for (var iter = 0; iter < iterations; iter++) {
      // Temp array with all 0's
      for (var _i5 = 0; _i5 < numNodes; _i5++) {
        temp[_i5] = 0;
      } // Multiply matrix with previous result


      for (var _i6 = 0; _i6 < numNodes; _i6++) {
        for (var _j2 = 0; _j2 < numNodes; _j2++) {
          var _n4 = _i6 * numNodes + _j2;

          temp[_i6] += matrix[_n4] * eigenvector[_j2];
        }
      }

      inPlaceSumNormalize(temp);
      previous = eigenvector;
      eigenvector = temp;
      temp = previous;
      var diff = 0; // Compute difference (squared module) of both vectors

      for (var _i7 = 0; _i7 < numNodes; _i7++) {
        var delta = previous[_i7] - eigenvector[_i7];
        diff += delta * delta;
      } // If difference is less than the desired threshold, stop iterating


      if (diff < precision) {
        break;
      }
    } // Construct result


    var res = {
      rank: function rank(node) {
        node = cy.collection(node)[0];
        return eigenvector[nodes.indexOf(node)];
      }
    };
    return res;
  } // pageRank

}; // elesfn

var defaults$1 = defaults({
  root: null,
  weight: function weight(edge) {
    return 1;
  },
  directed: false,
  alpha: 0
});
var elesfn$8 = {
  degreeCentralityNormalized: function degreeCentralityNormalized(options) {
    options = defaults$1(options);
    var cy = this.cy();
    var nodes = this.nodes();
    var numNodes = nodes.length;

    if (!options.directed) {
      var degrees = {};
      var maxDegree = 0;

      for (var i = 0; i < numNodes; i++) {
        var node = nodes[i]; // add current node to the current options object and call degreeCentrality

        options.root = node;
        var currDegree = this.degreeCentrality(options);

        if (maxDegree < currDegree.degree) {
          maxDegree = currDegree.degree;
        }

        degrees[node.id()] = currDegree.degree;
      }

      return {
        degree: function degree(node) {
          if (maxDegree === 0) {
            return 0;
          }

          if (string(node)) {
            // from is a selector string
            node = cy.filter(node);
          }

          return degrees[node.id()] / maxDegree;
        }
      };
    } else {
      var indegrees = {};
      var outdegrees = {};
      var maxIndegree = 0;
      var maxOutdegree = 0;

      for (var _i = 0; _i < numNodes; _i++) {
        var _node = nodes[_i];

        var id = _node.id(); // add current node to the current options object and call degreeCentrality


        options.root = _node;

        var _currDegree = this.degreeCentrality(options);

        if (maxIndegree < _currDegree.indegree) maxIndegree = _currDegree.indegree;
        if (maxOutdegree < _currDegree.outdegree) maxOutdegree = _currDegree.outdegree;
        indegrees[id] = _currDegree.indegree;
        outdegrees[id] = _currDegree.outdegree;
      }

      return {
        indegree: function indegree(node) {
          if (maxIndegree == 0) {
            return 0;
          }

          if (string(node)) {
            // from is a selector string
            node = cy.filter(node);
          }

          return indegrees[node.id()] / maxIndegree;
        },
        outdegree: function outdegree(node) {
          if (maxOutdegree === 0) {
            return 0;
          }

          if (string(node)) {
            // from is a selector string
            node = cy.filter(node);
          }

          return outdegrees[node.id()] / maxOutdegree;
        }
      };
    }
  },
  // degreeCentralityNormalized
  // Implemented from the algorithm in Opsahl's paper
  // "Node centrality in weighted networks: Generalizing degree and shortest paths"
  // check the heading 2 "Degree"
  degreeCentrality: function degreeCentrality(options) {
    options = defaults$1(options);
    var cy = this.cy();
    var callingEles = this;
    var _options = options,
        root = _options.root,
        weight = _options.weight,
        directed = _options.directed,
        alpha = _options.alpha;
    root = cy.collection(root)[0];

    if (!directed) {
      var connEdges = root.connectedEdges().intersection(callingEles);
      var k = connEdges.length;
      var s = 0; // Now, sum edge weights

      for (var i = 0; i < connEdges.length; i++) {
        s += weight(connEdges[i]);
      }

      return {
        degree: Math.pow(k, 1 - alpha) * Math.pow(s, alpha)
      };
    } else {
      var edges = root.connectedEdges();
      var incoming = edges.filter(function (edge) {
        return edge.target().same(root) && callingEles.has(edge);
      });
      var outgoing = edges.filter(function (edge) {
        return edge.source().same(root) && callingEles.has(edge);
      });
      var k_in = incoming.length;
      var k_out = outgoing.length;
      var s_in = 0;
      var s_out = 0; // Now, sum incoming edge weights

      for (var _i2 = 0; _i2 < incoming.length; _i2++) {
        s_in += weight(incoming[_i2]);
      } // Now, sum outgoing edge weights


      for (var _i3 = 0; _i3 < outgoing.length; _i3++) {
        s_out += weight(outgoing[_i3]);
      }

      return {
        indegree: Math.pow(k_in, 1 - alpha) * Math.pow(s_in, alpha),
        outdegree: Math.pow(k_out, 1 - alpha) * Math.pow(s_out, alpha)
      };
    }
  } // degreeCentrality

}; // elesfn
// nice, short mathemathical alias

elesfn$8.dc = elesfn$8.degreeCentrality;
elesfn$8.dcn = elesfn$8.degreeCentralityNormalised = elesfn$8.degreeCentralityNormalized;
var defaults$2 = defaults({
  harmonic: true,
  weight: function weight() {
    return 1;
  },
  directed: false,
  root: null
});
var elesfn$9 = {
  closenessCentralityNormalized: function closenessCentralityNormalized(options) {
    var _defaults = defaults$2(options),
        harmonic = _defaults.harmonic,
        weight = _defaults.weight,
        directed = _defaults.directed;

    var cy = this.cy();
    var closenesses = {};
    var maxCloseness = 0;
    var nodes = this.nodes();
    var fw = this.floydWarshall({
      weight: weight,
      directed: directed
    }); // Compute closeness for every node and find the maximum closeness

    for (var i = 0; i < nodes.length; i++) {
      var currCloseness = 0;
      var node_i = nodes[i];

      for (var j = 0; j < nodes.length; j++) {
        if (i !== j) {
          var d = fw.distance(node_i, nodes[j]);

          if (harmonic) {
            currCloseness += 1 / d;
          } else {
            currCloseness += d;
          }
        }
      }

      if (!harmonic) {
        currCloseness = 1 / currCloseness;
      }

      if (maxCloseness < currCloseness) {
        maxCloseness = currCloseness;
      }

      closenesses[node_i.id()] = currCloseness;
    }

    return {
      closeness: function closeness(node) {
        if (maxCloseness == 0) {
          return 0;
        }

        if (string(node)) {
          // from is a selector string
          node = cy.filter(node)[0].id();
        } else {
          // from is a node
          node = node.id();
        }

        return closenesses[node] / maxCloseness;
      }
    };
  },
  // Implemented from pseudocode from wikipedia
  closenessCentrality: function closenessCentrality(options) {
    var _defaults2 = defaults$2(options),
        root = _defaults2.root,
        weight = _defaults2.weight,
        directed = _defaults2.directed,
        harmonic = _defaults2.harmonic;

    root = this.filter(root)[0]; // we need distance from this node to every other node

    var dijkstra = this.dijkstra({
      root: root,
      weight: weight,
      directed: directed
    });
    var totalDistance = 0;
    var nodes = this.nodes();

    for (var i = 0; i < nodes.length; i++) {
      var n = nodes[i];

      if (!n.same(root)) {
        var d = dijkstra.distanceTo(n);

        if (harmonic) {
          totalDistance += 1 / d;
        } else {
          totalDistance += d;
        }
      }
    }

    return harmonic ? totalDistance : 1 / totalDistance;
  } // closenessCentrality

}; // elesfn
// nice, short mathemathical alias

elesfn$9.cc = elesfn$9.closenessCentrality;
elesfn$9.ccn = elesfn$9.closenessCentralityNormalised = elesfn$9.closenessCentralityNormalized;
var defaults$3 = defaults({
  weight: null,
  directed: false
});
var elesfn$a = {
  // Implemented from the algorithm in the paper "On Variants of Shortest-Path Betweenness Centrality and their Generic Computation" by Ulrik Brandes
  betweennessCentrality: function betweennessCentrality(options) {
    var _defaults = defaults$3(options),
        directed = _defaults.directed,
        weight = _defaults.weight;

    var weighted = weight != null;
    var cy = this.cy(); // starting

    var V = this.nodes();
    var A = {};
    var _C = {};
    var max = 0;
    var C = {
      set: function set(key, val) {
        _C[key] = val;

        if (val > max) {
          max = val;
        }
      },
      get: function get(key) {
        return _C[key];
      }
    }; // A contains the neighborhoods of every node

    for (var i = 0; i < V.length; i++) {
      var v = V[i];
      var vid = v.id();

      if (directed) {
        A[vid] = v.outgoers().nodes(); // get outgoers of every node
      } else {
        A[vid] = v.openNeighborhood().nodes(); // get neighbors of every node
      }

      C.set(vid, 0);
    }

    var _loop = function _loop(s) {
      var sid = V[s].id();
      var S = []; // stack

      var P = {};
      var g = {};
      var d = {};
      var Q = new Heap(function (a, b) {
        return d[a] - d[b];
      }); // queue
      // init dictionaries

      for (var _i = 0; _i < V.length; _i++) {
        var _vid = V[_i].id();

        P[_vid] = [];
        g[_vid] = 0;
        d[_vid] = Infinity;
      }

      g[sid] = 1; // sigma

      d[sid] = 0; // distance to s

      Q.push(sid);

      while (!Q.empty()) {
        var _v = Q.pop();

        S.push(_v);

        if (weighted) {
          for (var j = 0; j < A[_v].length; j++) {
            var w = A[_v][j];
            var vEle = cy.getElementById(_v);
            var edge = void 0;

            if (vEle.edgesTo(w).length > 0) {
              edge = vEle.edgesTo(w)[0];
            } else {
              edge = w.edgesTo(vEle)[0];
            }

            var edgeWeight = weight(edge);
            w = w.id();

            if (d[w] > d[_v] + edgeWeight) {
              d[w] = d[_v] + edgeWeight;

              if (Q.nodes.indexOf(w) < 0) {
                //if w is not in Q
                Q.push(w);
              } else {
                // update position if w is in Q
                Q.updateItem(w);
              }

              g[w] = 0;
              P[w] = [];
            }

            if (d[w] == d[_v] + edgeWeight) {
              g[w] = g[w] + g[_v];
              P[w].push(_v);
            }
          }
        } else {
          for (var _j = 0; _j < A[_v].length; _j++) {
            var _w = A[_v][_j].id();

            if (d[_w] == Infinity) {
              Q.push(_w);
              d[_w] = d[_v] + 1;
            }

            if (d[_w] == d[_v] + 1) {
              g[_w] = g[_w] + g[_v];

              P[_w].push(_v);
            }
          }
        }
      }

      var e = {};

      for (var _i2 = 0; _i2 < V.length; _i2++) {
        e[V[_i2].id()] = 0;
      }

      while (S.length > 0) {
        var _w2 = S.pop();

        for (var _j2 = 0; _j2 < P[_w2].length; _j2++) {
          var _v2 = P[_w2][_j2];
          e[_v2] = e[_v2] + g[_v2] / g[_w2] * (1 + e[_w2]);

          if (_w2 != V[s].id()) {
            C.set(_w2, C.get(_w2) + e[_w2]);
          }
        }
      }
    };

    for (var s = 0; s < V.length; s++) {
      _loop(s);
    }

    var ret = {
      betweenness: function betweenness(node) {
        var id = cy.collection(node).id();
        return C.get(id);
      },
      betweennessNormalized: function betweennessNormalized(node) {
        if (max == 0) {
          return 0;
        }

        var id = cy.collection(node).id();
        return C.get(id) / max;
      }
    }; // alias

    ret.betweennessNormalised = ret.betweennessNormalized;
    return ret;
  } // betweennessCentrality

}; // elesfn
// nice, short mathemathical alias

elesfn$a.bc = elesfn$a.betweennessCentrality; // Implemented by Zoe Xi @zoexi for GSOC 2016

/* eslint-disable no-unused-vars */

var defaults$4 = defaults({
  expandFactor: 2,
  // affects time of computation and cluster granularity to some extent: M * M
  inflateFactor: 2,
  // affects cluster granularity (the greater the value, the more clusters): M(i,j) / E(j)
  multFactor: 1,
  // optional self loops for each node. Use a neutral value to improve cluster computations.
  maxIterations: 20,
  // maximum number of iterations of the MCL algorithm in a single run
  attributes: [// attributes/features used to group nodes, ie. similarity values between nodes
  function (edge) {
    return 1;
  }]
});
/* eslint-enable */

var setOptions = function setOptions(options) {
  return defaults$4(options);
};
/* eslint-enable */


var getSimilarity = function getSimilarity(edge, attributes) {
  var total = 0;

  for (var i = 0; i < attributes.length; i++) {
    total += attributes[i](edge);
  }

  return total;
};

var addLoops = function addLoops(M, n, val) {
  for (var i = 0; i < n; i++) {
    M[i * n + i] = val;
  }
};

var normalize$1 = function normalize(M, n) {
  var sum;

  for (var col = 0; col < n; col++) {
    sum = 0;

    for (var row = 0; row < n; row++) {
      sum += M[row * n + col];
    }

    for (var _row = 0; _row < n; _row++) {
      M[_row * n + col] = M[_row * n + col] / sum;
    }
  }
}; // TODO: blocked matrix multiplication?


var mmult = function mmult(A, B, n) {
  var C = new Array(n * n);

  for (var i = 0; i < n; i++) {
    for (var j = 0; j < n; j++) {
      C[i * n + j] = 0;
    }

    for (var k = 0; k < n; k++) {
      for (var _j = 0; _j < n; _j++) {
        C[i * n + _j] += A[i * n + k] * B[k * n + _j];
      }
    }
  }

  return C;
};

var expand = function expand(M, n, expandFactor
/** power **/
) {
  var _M = M.slice(0);

  for (var p = 1; p < expandFactor; p++) {
    M = mmult(M, _M, n);
  }

  return M;
};

var inflate = function inflate(M, n, inflateFactor
/** r **/
) {
  var _M = new Array(n * n); // M(i,j) ^ inflatePower


  for (var i = 0; i < n * n; i++) {
    _M[i] = Math.pow(M[i], inflateFactor);
  }

  normalize$1(_M, n);
  return _M;
};

var hasConverged = function hasConverged(M, _M, n2, roundFactor) {
  // Check that both matrices have the same elements (i,j)
  for (var i = 0; i < n2; i++) {
    var v1 = Math.round(M[i] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor); // truncate to 'roundFactor' decimal places

    var v2 = Math.round(_M[i] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor);

    if (v1 !== v2) {
      return false;
    }
  }

  return true;
};

var assign = function assign(M, n, nodes, cy) {
  var clusters = [];

  for (var i = 0; i < n; i++) {
    var cluster = [];

    for (var j = 0; j < n; j++) {
      // Row-wise attractors and elements that they attract belong in same cluster
      if (Math.round(M[i * n + j] * 1000) / 1000 > 0) {
        cluster.push(nodes[j]);
      }
    }

    if (cluster.length !== 0) {
      clusters.push(cy.collection(cluster));
    }
  }

  return clusters;
};

var isDuplicate = function isDuplicate(c1, c2) {
  for (var i = 0; i < c1.length; i++) {
    if (!c2[i] || c1[i].id() !== c2[i].id()) {
      return false;
    }
  }

  return true;
};

var removeDuplicates = function removeDuplicates(clusters) {
  for (var i = 0; i < clusters.length; i++) {
    for (var j = 0; j < clusters.length; j++) {
      if (i != j && isDuplicate(clusters[i], clusters[j])) {
        clusters.splice(j, 1);
      }
    }
  }

  return clusters;
};

var markovClustering = function markovClustering(options) {
  var nodes = this.nodes();
  var edges = this.edges();
  var cy = this.cy(); // Set parameters of algorithm:

  var opts = setOptions(options); // Map each node to its position in node array

  var id2position = {};

  for (var i = 0; i < nodes.length; i++) {
    id2position[nodes[i].id()] = i;
  } // Generate stochastic matrix M from input graph G (should be symmetric/undirected)


  var n = nodes.length,
      n2 = n * n;

  var M = new Array(n2),
      _M;

  for (var _i = 0; _i < n2; _i++) {
    M[_i] = 0;
  }

  for (var e = 0; e < edges.length; e++) {
    var edge = edges[e];
    var _i2 = id2position[edge.source().id()];
    var j = id2position[edge.target().id()];
    var sim = getSimilarity(edge, opts.attributes);
    M[_i2 * n + j] += sim; // G should be symmetric and undirected

    M[j * n + _i2] += sim;
  } // Begin Markov cluster algorithm
  // Step 1: Add self loops to each node, ie. add multFactor to matrix diagonal


  addLoops(M, n, opts.multFactor); // Step 2: M = normalize( M );

  normalize$1(M, n);
  var isStillMoving = true;
  var iterations = 0;

  while (isStillMoving && iterations < opts.maxIterations) {
    isStillMoving = false; // Step 3:

    _M = expand(M, n, opts.expandFactor); // Step 4:

    M = inflate(_M, n, opts.inflateFactor); // Step 5: check to see if ~steady state has been reached

    if (!hasConverged(M, _M, n2, 4)) {
      isStillMoving = true;
    }

    iterations++;
  } // Build clusters from matrix


  var clusters = assign(M, n, nodes, cy); // Remove duplicate clusters due to symmetry of graph and M matrix

  clusters = removeDuplicates(clusters);
  return clusters;
};

var markovClustering$1 = {
  markovClustering: markovClustering,
  mcl: markovClustering
}; // Common distance metrics for clustering algorithms

var identity = function identity(x) {
  return x;
};

var absDiff = function absDiff(p, q) {
  return Math.abs(q - p);
};

var addAbsDiff = function addAbsDiff(total, p, q) {
  return total + absDiff(p, q);
};

var addSquaredDiff = function addSquaredDiff(total, p, q) {
  return total + Math.pow(q - p, 2);
};

var sqrt = function sqrt(x) {
  return Math.sqrt(x);
};

var maxAbsDiff = function maxAbsDiff(currentMax, p, q) {
  return Math.max(currentMax, absDiff(p, q));
};

var getDistance = function getDistance(length, getP, getQ, init, visit) {
  var post = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : identity;
  var ret = init;
  var p, q;

  for (var dim = 0; dim < length; dim++) {
    p = getP(dim);
    q = getQ(dim);
    ret = visit(ret, p, q);
  }

  return post(ret);
};

var distances = {
  euclidean: function euclidean(length, getP, getQ) {
    if (length >= 2) {
      return getDistance(length, getP, getQ, 0, addSquaredDiff, sqrt);
    } else {
      // for single attr case, more efficient to avoid sqrt
      return getDistance(length, getP, getQ, 0, addAbsDiff);
    }
  },
  squaredEuclidean: function squaredEuclidean(length, getP, getQ) {
    return getDistance(length, getP, getQ, 0, addSquaredDiff);
  },
  manhattan: function manhattan(length, getP, getQ) {
    return getDistance(length, getP, getQ, 0, addAbsDiff);
  },
  max: function max(length, getP, getQ) {
    return getDistance(length, getP, getQ, -Infinity, maxAbsDiff);
  }
}; // in case the user accidentally doesn't use camel case

distances['squared-euclidean'] = distances['squaredEuclidean'];
distances['squaredeuclidean'] = distances['squaredEuclidean'];

function clusteringDistance(method, length, getP, getQ, nodeP, nodeQ) {
  var impl;

  if (fn(method)) {
    impl = method;
  } else {
    impl = distances[method] || distances.euclidean;
  }

  if (length === 0 && fn(method)) {
    return impl(nodeP, nodeQ);
  } else {
    return impl(length, getP, getQ, nodeP, nodeQ);
  }
}

var defaults$5 = defaults({
  k: 2,
  m: 2,
  sensitivityThreshold: 0.0001,
  distance: 'euclidean',
  maxIterations: 10,
  attributes: [],
  testMode: false,
  testCentroids: null
});

var setOptions$1 = function setOptions(options) {
  return defaults$5(options);
};
/* eslint-enable */


var getDist = function getDist(type, node, centroid, attributes, mode) {
  var getP = mode === 'kMedoids' ? function (i) {
    return attributes[i](centroid);
  } : function (i) {
    return centroid[i];
  };

  var getQ = function getQ(i) {
    return attributes[i](node);
  };

  return clusteringDistance(type, attributes.length, getP, getQ);
};

var randomCentroids = function randomCentroids(nodes, k, attributes) {
  var ndim = attributes.length;
  var min = new Array(ndim);
  var max = new Array(ndim);
  var centroids = new Array(k);
  var centroid = null; // Find min, max values for each attribute dimension

  for (var i = 0; i < ndim; i++) {
    min[i] = nodes.min(attributes[i]).value;
    max[i] = nodes.max(attributes[i]).value;
  } // Build k centroids, each represented as an n-dim feature vector


  for (var c = 0; c < k; c++) {
    centroid = [];

    for (var _i = 0; _i < ndim; _i++) {
      centroid[_i] = Math.random() * (max[_i] - min[_i]) + min[_i]; // random initial value
    }

    centroids[c] = centroid;
  }

  return centroids;
};

var classify = function classify(node, centroids, distance, attributes, type) {
  var min = Infinity;
  var index = 0;

  for (var i = 0; i < centroids.length; i++) {
    var dist = getDist(distance, node, centroids[i], attributes, type);

    if (dist < min) {
      min = dist;
      index = i;
    }
  }

  return index;
};

var buildCluster = function buildCluster(centroid, nodes, assignment) {
  var cluster = [];
  var node = null;

  for (var n = 0; n < nodes.length; n++) {
    node = nodes[n];

    if (assignment[node.id()] === centroid) {
      //console.log("Node " + node.id() + " is associated with medoid #: " + m);
      cluster.push(node);
    }
  }

  return cluster;
};

var haveValuesConverged = function haveValuesConverged(v1, v2, sensitivityThreshold) {
  return Math.abs(v2 - v1) <= sensitivityThreshold;
};

var haveMatricesConverged = function haveMatricesConverged(v1, v2, sensitivityThreshold) {
  for (var i = 0; i < v1.length; i++) {
    for (var j = 0; j < v1[i].length; j++) {
      var diff = Math.abs(v1[i][j] - v2[i][j]);

      if (diff > sensitivityThreshold) {
        return false;
      }
    }
  }

  return true;
};

var seenBefore = function seenBefore(node, medoids, n) {
  for (var i = 0; i < n; i++) {
    if (node === medoids[i]) return true;
  }

  return false;
};

var randomMedoids = function randomMedoids(nodes, k) {
  var medoids = new Array(k); // For small data sets, the probability of medoid conflict is greater,
  // so we need to check to see if we've already seen or chose this node before.

  if (nodes.length < 50) {
    // Randomly select k medoids from the n nodes
    for (var i = 0; i < k; i++) {
      var node = nodes[Math.floor(Math.random() * nodes.length)]; // If we've already chosen this node to be a medoid, don't choose it again (for small data sets).
      // Instead choose a different random node.

      while (seenBefore(node, medoids, i)) {
        node = nodes[Math.floor(Math.random() * nodes.length)];
      }

      medoids[i] = node;
    }
  } else {
    // Relatively large data set, so pretty safe to not check and just select random nodes
    for (var _i2 = 0; _i2 < k; _i2++) {
      medoids[_i2] = nodes[Math.floor(Math.random() * nodes.length)];
    }
  }

  return medoids;
};

var findCost = function findCost(potentialNewMedoid, cluster, attributes) {
  var cost = 0;

  for (var n = 0; n < cluster.length; n++) {
    cost += getDist('manhattan', cluster[n], potentialNewMedoid, attributes, 'kMedoids');
  }

  return cost;
};

var kMeans = function kMeans(options) {
  var cy = this.cy();
  var nodes = this.nodes();
  var node = null; // Set parameters of algorithm: # of clusters, distance metric, etc.

  var opts = setOptions$1(options); // Begin k-means algorithm

  var clusters = new Array(opts.k);
  var assignment = {};
  var centroids; // Step 1: Initialize centroid positions

  if (opts.testMode) {
    if (typeof opts.testCentroids === 'number') {
      // TODO: implement a seeded random number generator.
      var seed = opts.testCentroids;
      centroids = randomCentroids(nodes, opts.k, opts.attributes, seed);
    } else if (_typeof(opts.testCentroids) === 'object') {
      centroids = opts.testCentroids;
    } else {
      centroids = randomCentroids(nodes, opts.k, opts.attributes);
    }
  } else {
    centroids = randomCentroids(nodes, opts.k, opts.attributes);
  }

  var isStillMoving = true;
  var iterations = 0;

  while (isStillMoving && iterations < opts.maxIterations) {
    // Step 2: Assign nodes to the nearest centroid
    for (var n = 0; n < nodes.length; n++) {
      node = nodes[n]; // Determine which cluster this node belongs to: node id => cluster #

      assignment[node.id()] = classify(node, centroids, opts.distance, opts.attributes, 'kMeans');
    } // Step 3: For each of the k clusters, update its centroid


    isStillMoving = false;

    for (var c = 0; c < opts.k; c++) {
      // Get all nodes that belong to this cluster
      var cluster = buildCluster(c, nodes, assignment);

      if (cluster.length === 0) {
        // If cluster is empty, break out early & move to next cluster
        continue;
      } // Update centroids by calculating avg of all nodes within the cluster.


      var ndim = opts.attributes.length;
      var centroid = centroids[c]; // [ dim_1, dim_2, dim_3, ... , dim_n ]

      var newCentroid = new Array(ndim);
      var sum = new Array(ndim);

      for (var d = 0; d < ndim; d++) {
        sum[d] = 0.0;

        for (var i = 0; i < cluster.length; i++) {
          node = cluster[i];
          sum[d] += opts.attributes[d](node);
        }

        newCentroid[d] = sum[d] / cluster.length; // Check to see if algorithm has converged, i.e. when centroids no longer change

        if (!haveValuesConverged(newCentroid[d], centroid[d], opts.sensitivityThreshold)) {
          isStillMoving = true;
        }
      }

      centroids[c] = newCentroid;
      clusters[c] = cy.collection(cluster);
    }

    iterations++;
  }

  return clusters;
};

var kMedoids = function kMedoids(options) {
  var cy = this.cy();
  var nodes = this.nodes();
  var node = null;
  var opts = setOptions$1(options); // Begin k-medoids algorithm

  var clusters = new Array(opts.k);
  var medoids;
  var assignment = {};
  var curCost;
  var minCosts = new Array(opts.k); // minimum cost configuration for each cluster
  // Step 1: Initialize k medoids

  if (opts.testMode) {
    if (typeof opts.testCentroids === 'number') ;else if (_typeof(opts.testCentroids) === 'object') {
      medoids = opts.testCentroids;
    } else {
      medoids = randomMedoids(nodes, opts.k);
    }
  } else {
    medoids = randomMedoids(nodes, opts.k);
  }

  var isStillMoving = true;
  var iterations = 0;

  while (isStillMoving && iterations < opts.maxIterations) {
    // Step 2: Assign nodes to the nearest medoid
    for (var n = 0; n < nodes.length; n++) {
      node = nodes[n]; // Determine which cluster this node belongs to: node id => cluster #

      assignment[node.id()] = classify(node, medoids, opts.distance, opts.attributes, 'kMedoids');
    }

    isStillMoving = false; // Step 3: For each medoid m, and for each node assciated with mediod m,
    // select the node with the lowest configuration cost as new medoid.

    for (var m = 0; m < medoids.length; m++) {
      // Get all nodes that belong to this medoid
      var cluster = buildCluster(m, nodes, assignment);

      if (cluster.length === 0) {
        // If cluster is empty, break out early & move to next cluster
        continue;
      }

      minCosts[m] = findCost(medoids[m], cluster, opts.attributes); // original cost
      // Select different medoid if its configuration has the lowest cost

      for (var _n = 0; _n < cluster.length; _n++) {
        curCost = findCost(cluster[_n], cluster, opts.attributes);

        if (curCost < minCosts[m]) {
          minCosts[m] = curCost;
          medoids[m] = cluster[_n];
          isStillMoving = true;
        }
      }

      clusters[m] = cy.collection(cluster);
    }

    iterations++;
  }

  return clusters;
};

var updateCentroids = function updateCentroids(centroids, nodes, U, weight, opts) {
  var numerator, denominator;

  for (var n = 0; n < nodes.length; n++) {
    for (var c = 0; c < centroids.length; c++) {
      weight[n][c] = Math.pow(U[n][c], opts.m);
    }
  }

  for (var _c = 0; _c < centroids.length; _c++) {
    for (var dim = 0; dim < opts.attributes.length; dim++) {
      numerator = 0;
      denominator = 0;

      for (var _n2 = 0; _n2 < nodes.length; _n2++) {
        numerator += weight[_n2][_c] * opts.attributes[dim](nodes[_n2]);
        denominator += weight[_n2][_c];
      }

      centroids[_c][dim] = numerator / denominator;
    }
  }
};

var updateMembership = function updateMembership(U, _U, centroids, nodes, opts) {
  // Save previous step
  for (var i = 0; i < U.length; i++) {
    _U[i] = U[i].slice();
  }

  var sum, numerator, denominator;
  var pow = 2 / (opts.m - 1);

  for (var c = 0; c < centroids.length; c++) {
    for (var n = 0; n < nodes.length; n++) {
      sum = 0;

      for (var k = 0; k < centroids.length; k++) {
        // against all other centroids
        numerator = getDist(opts.distance, nodes[n], centroids[c], opts.attributes, 'cmeans');
        denominator = getDist(opts.distance, nodes[n], centroids[k], opts.attributes, 'cmeans');
        sum += Math.pow(numerator / denominator, pow);
      }

      U[n][c] = 1 / sum;
    }
  }
};

var assign$1 = function assign(nodes, U, opts, cy) {
  var clusters = new Array(opts.k);

  for (var c = 0; c < clusters.length; c++) {
    clusters[c] = [];
  }

  var max;
  var index;

  for (var n = 0; n < U.length; n++) {
    // for each node (U is N x C matrix)
    max = -Infinity;
    index = -1; // Determine which cluster the node is most likely to belong in

    for (var _c2 = 0; _c2 < U[0].length; _c2++) {
      if (U[n][_c2] > max) {
        max = U[n][_c2];
        index = _c2;
      }
    }

    clusters[index].push(nodes[n]);
  } // Turn every array into a collection of nodes


  for (var _c3 = 0; _c3 < clusters.length; _c3++) {
    clusters[_c3] = cy.collection(clusters[_c3]);
  }

  return clusters;
};

var fuzzyCMeans = function fuzzyCMeans(options) {
  var cy = this.cy();
  var nodes = this.nodes();
  var opts = setOptions$1(options); // Begin fuzzy c-means algorithm

  var clusters;
  var centroids;
  var U;

  var _U;

  var weight; // Step 1: Initialize letiables.

  _U = new Array(nodes.length);

  for (var i = 0; i < nodes.length; i++) {
    // N x C matrix
    _U[i] = new Array(opts.k);
  }

  U = new Array(nodes.length);

  for (var _i3 = 0; _i3 < nodes.length; _i3++) {
    // N x C matrix
    U[_i3] = new Array(opts.k);
  }

  for (var _i4 = 0; _i4 < nodes.length; _i4++) {
    var total = 0;

    for (var j = 0; j < opts.k; j++) {
      U[_i4][j] = Math.random();
      total += U[_i4][j];
    }

    for (var _j = 0; _j < opts.k; _j++) {
      U[_i4][_j] = U[_i4][_j] / total;
    }
  }

  centroids = new Array(opts.k);

  for (var _i5 = 0; _i5 < opts.k; _i5++) {
    centroids[_i5] = new Array(opts.attributes.length);
  }

  weight = new Array(nodes.length);

  for (var _i6 = 0; _i6 < nodes.length; _i6++) {
    // N x C matrix
    weight[_i6] = new Array(opts.k);
  } // end init FCM


  var isStillMoving = true;
  var iterations = 0;

  while (isStillMoving && iterations < opts.maxIterations) {
    isStillMoving = false; // Step 2: Calculate the centroids for each step.

    updateCentroids(centroids, nodes, U, weight, opts); // Step 3: Update the partition matrix U.

    updateMembership(U, _U, centroids, nodes, opts); // Step 4: Check for convergence.

    if (!haveMatricesConverged(U, _U, opts.sensitivityThreshold)) {
      isStillMoving = true;
    }

    iterations++;
  } // Assign nodes to clusters with highest probability.


  clusters = assign$1(nodes, U, opts, cy);
  return {
    clusters: clusters,
    degreeOfMembership: U
  };
};

var kClustering = {
  kMeans: kMeans,
  kMedoids: kMedoids,
  fuzzyCMeans: fuzzyCMeans,
  fcm: fuzzyCMeans
}; // Implemented by Zoe Xi @zoexi for GSOC 2016

var defaults$6 = defaults({
  distance: 'euclidean',
  // distance metric to compare nodes
  linkage: 'min',
  // linkage criterion : how to determine the distance between clusters of nodes
  mode: 'threshold',
  // mode:'threshold' => clusters must be threshold distance apart
  threshold: Infinity,
  // the distance threshold
  // mode:'dendrogram' => the nodes are organised as leaves in a tree (siblings are close), merging makes clusters
  addDendrogram: false,
  // whether to add the dendrogram to the graph for viz
  dendrogramDepth: 0,
  // depth at which dendrogram branches are merged into the returned clusters
  attributes: [] // array of attr functions

});
var linkageAliases = {
  'single': 'min',
  'complete': 'max'
};

var setOptions$2 = function setOptions(options) {
  var opts = defaults$6(options);
  var preferredAlias = linkageAliases[opts.linkage];

  if (preferredAlias != null) {
    opts.linkage = preferredAlias;
  }

  return opts;
};

var mergeClosest = function mergeClosest(clusters, index, dists, mins, opts) {
  // Find two closest clusters from cached mins
  var minKey = 0;
  var min = Infinity;
  var dist;
  var attrs = opts.attributes;

  var getDist = function getDist(n1, n2) {
    return clusteringDistance(opts.distance, attrs.length, function (i) {
      return attrs[i](n1);
    }, function (i) {
      return attrs[i](n2);
    });
  };

  for (var i = 0; i < clusters.length; i++) {
    var key = clusters[i].key;
    var _dist = dists[key][mins[key]];

    if (_dist < min) {
      minKey = key;
      min = _dist;
    }
  }

  if (opts.mode === 'threshold' && min >= opts.threshold || opts.mode === 'dendrogram' && clusters.length === 1) {
    return false;
  }

  var c1 = index[minKey];
  var c2 = index[mins[minKey]];
  var merged; // Merge two closest clusters

  if (opts.mode === 'dendrogram') {
    merged = {
      left: c1,
      right: c2,
      key: c1.key
    };
  } else {
    merged = {
      value: c1.value.concat(c2.value),
      key: c1.key
    };
  }

  clusters[c1.index] = merged;
  clusters.splice(c2.index, 1);
  index[c1.key] = merged; // Update distances with new merged cluster

  for (var _i = 0; _i < clusters.length; _i++) {
    var cur = clusters[_i];

    if (c1.key === cur.key) {
      dist = Infinity;
    } else if (opts.linkage === 'min') {
      dist = dists[c1.key][cur.key];

      if (dists[c1.key][cur.key] > dists[c2.key][cur.key]) {
        dist = dists[c2.key][cur.key];
      }
    } else if (opts.linkage === 'max') {
      dist = dists[c1.key][cur.key];

      if (dists[c1.key][cur.key] < dists[c2.key][cur.key]) {
        dist = dists[c2.key][cur.key];
      }
    } else if (opts.linkage === 'mean') {
      dist = (dists[c1.key][cur.key] * c1.size + dists[c2.key][cur.key] * c2.size) / (c1.size + c2.size);
    } else {
      if (opts.mode === 'dendrogram') dist = getDist(cur.value, c1.value);else dist = getDist(cur.value[0], c1.value[0]);
    }

    dists[c1.key][cur.key] = dists[cur.key][c1.key] = dist; // distance matrix is symmetric
  } // Update cached mins


  for (var _i2 = 0; _i2 < clusters.length; _i2++) {
    var key1 = clusters[_i2].key;

    if (mins[key1] === c1.key || mins[key1] === c2.key) {
      var _min = key1;

      for (var j = 0; j < clusters.length; j++) {
        var key2 = clusters[j].key;

        if (dists[key1][key2] < dists[key1][_min]) {
          _min = key2;
        }
      }

      mins[key1] = _min;
    }

    clusters[_i2].index = _i2;
  } // Clean up meta data used for clustering


  c1.key = c2.key = c1.index = c2.index = null;
  return true;
};

var getAllChildren = function getAllChildren(root, arr, cy) {
  if (!root) return;

  if (root.value) {
    arr.push(root.value);
  } else {
    if (root.left) getAllChildren(root.left, arr, cy);
    if (root.right) getAllChildren(root.right, arr, cy);
  }
};

var buildDendrogram = function buildDendrogram(root, cy) {
  if (!root) return '';

  if (root.left && root.right) {
    var leftStr = buildDendrogram(root.left, cy);
    var rightStr = buildDendrogram(root.right, cy);
    var node = cy.add({
      group: 'nodes',
      data: {
        id: leftStr + ',' + rightStr
      }
    });
    cy.add({
      group: 'edges',
      data: {
        source: leftStr,
        target: node.id()
      }
    });
    cy.add({
      group: 'edges',
      data: {
        source: rightStr,
        target: node.id()
      }
    });
    return node.id();
  } else if (root.value) {
    return root.value.id();
  }
};

var buildClustersFromTree = function buildClustersFromTree(root, k, cy) {
  if (!root) return [];
  var left = [],
      right = [],
      leaves = [];

  if (k === 0) {
    // don't cut tree, simply return all nodes as 1 single cluster
    if (root.left) getAllChildren(root.left, left, cy);
    if (root.right) getAllChildren(root.right, right, cy);
    leaves = left.concat(right);
    return [cy.collection(leaves)];
  } else if (k === 1) {
    // cut at root
    if (root.value) {
      // leaf node
      return [cy.collection(root.value)];
    } else {
      if (root.left) getAllChildren(root.left, left, cy);
      if (root.right) getAllChildren(root.right, right, cy);
      return [cy.collection(left), cy.collection(right)];
    }
  } else {
    if (root.value) {
      return [cy.collection(root.value)];
    } else {
      if (root.left) left = buildClustersFromTree(root.left, k - 1, cy);
      if (root.right) right = buildClustersFromTree(root.right, k - 1, cy);
      return left.concat(right);
    }
  }
};
/* eslint-enable */


var hierarchicalClustering = function hierarchicalClustering(options) {
  var cy = this.cy();
  var nodes = this.nodes(); // Set parameters of algorithm: linkage type, distance metric, etc.

  var opts = setOptions$2(options);
  var attrs = opts.attributes;

  var getDist = function getDist(n1, n2) {
    return clusteringDistance(opts.distance, attrs.length, function (i) {
      return attrs[i](n1);
    }, function (i) {
      return attrs[i](n2);
    });
  }; // Begin hierarchical algorithm


  var clusters = [];
  var dists = []; // distances between each pair of clusters

  var mins = []; // closest cluster for each cluster

  var index = []; // hash of all clusters by key
  // In agglomerative (bottom-up) clustering, each node starts as its own cluster

  for (var n = 0; n < nodes.length; n++) {
    var cluster = {
      value: opts.mode === 'dendrogram' ? nodes[n] : [nodes[n]],
      key: n,
      index: n
    };
    clusters[n] = cluster;
    index[n] = cluster;
    dists[n] = [];
    mins[n] = 0;
  } // Calculate the distance between each pair of clusters


  for (var i = 0; i < clusters.length; i++) {
    for (var j = 0; j <= i; j++) {
      var dist = void 0;

      if (opts.mode === 'dendrogram') {
        // modes store cluster values differently
        dist = i === j ? Infinity : getDist(clusters[i].value, clusters[j].value);
      } else {
        dist = i === j ? Infinity : getDist(clusters[i].value[0], clusters[j].value[0]);
      }

      dists[i][j] = dist;
      dists[j][i] = dist;

      if (dist < dists[i][mins[i]]) {
        mins[i] = j; // Cache mins: closest cluster to cluster i is cluster j
      }
    }
  } // Find the closest pair of clusters and merge them into a single cluster.
  // Update distances between new cluster and each of the old clusters, and loop until threshold reached.


  var merged = mergeClosest(clusters, index, dists, mins, opts);

  while (merged) {
    merged = mergeClosest(clusters, index, dists, mins, opts);
  }

  var retClusters; // Dendrogram mode builds the hierarchy and adds intermediary nodes + edges
  // in addition to returning the clusters.

  if (opts.mode === 'dendrogram') {
    retClusters = buildClustersFromTree(clusters[0], opts.dendrogramDepth, cy);
    if (opts.addDendrogram) buildDendrogram(clusters[0], cy);
  } else {
    // Regular mode simply returns the clusters
    retClusters = new Array(clusters.length);
    clusters.forEach(function (cluster, i) {
      // Clean up meta data used for clustering
      cluster.key = cluster.index = null;
      retClusters[i] = cy.collection(cluster.value);
    });
  }

  return retClusters;
};

var hierarchicalClustering$1 = {
  hierarchicalClustering: hierarchicalClustering,
  hca: hierarchicalClustering
}; // Implemented by Zoe Xi @zoexi for GSOC 2016

var defaults$7 = defaults({
  distance: 'euclidean',
  // distance metric to compare attributes between two nodes
  preference: 'median',
  // suitability of a data point to serve as an exemplar
  damping: 0.8,
  // damping factor between [0.5, 1)
  maxIterations: 1000,
  // max number of iterations to run
  minIterations: 100,
  // min number of iterations to run in order for clustering to stop
  attributes: [// functions to quantify the similarity between any two points
    // e.g. node => node.data('weight')
  ]
});

var setOptions$3 = function setOptions(options) {
  var dmp = options.damping;
  var pref = options.preference;

  if (!(0.5 <= dmp && dmp < 1)) {
    error("Damping must range on [0.5, 1).  Got: ".concat(dmp));
  }

  var validPrefs = ['median', 'mean', 'min', 'max'];

  if (!(validPrefs.some(function (v) {
    return v === pref;
  }) || number(pref))) {
    error("Preference must be one of [".concat(validPrefs.map(function (p) {
      return "'".concat(p, "'");
    }).join(', '), "] or a number.  Got: ").concat(pref));
  }

  return defaults$7(options);
};
/* eslint-enable */


var getSimilarity$1 = function getSimilarity(type, n1, n2, attributes) {
  var attr = function attr(n, i) {
    return attributes[i](n);
  }; // nb negative because similarity should have an inverse relationship to distance


  return -clusteringDistance(type, attributes.length, function (i) {
    return attr(n1, i);
  }, function (i) {
    return attr(n2, i);
  }, n1, n2);
};

var getPreference = function getPreference(S, preference) {
  // larger preference = greater # of clusters
  var p = null;

  if (preference === 'median') {
    p = median(S);
  } else if (preference === 'mean') {
    p = mean(S);
  } else if (preference === 'min') {
    p = min(S);
  } else if (preference === 'max') {
    p = max(S);
  } else {
    // Custom preference number, as set by user
    p = preference;
  }

  return p;
};

var findExemplars = function findExemplars(n, R, A) {
  var indices = [];

  for (var i = 0; i < n; i++) {
    if (R[i * n + i] + A[i * n + i] > 0) {
      indices.push(i);
    }
  }

  return indices;
};

var assignClusters = function assignClusters(n, S, exemplars) {
  var clusters = [];

  for (var i = 0; i < n; i++) {
    var index = -1;
    var max$$1 = -Infinity;

    for (var ei = 0; ei < exemplars.length; ei++) {
      var e = exemplars[ei];

      if (S[i * n + e] > max$$1) {
        index = e;
        max$$1 = S[i * n + e];
      }
    }

    if (index > 0) {
      clusters.push(index);
    }
  }

  for (var _ei = 0; _ei < exemplars.length; _ei++) {
    clusters[exemplars[_ei]] = exemplars[_ei];
  }

  return clusters;
};

var assign$2 = function assign(n, S, exemplars) {
  var clusters = assignClusters(n, S, exemplars);

  for (var ei = 0; ei < exemplars.length; ei++) {
    var ii = [];

    for (var c = 0; c < clusters.length; c++) {
      if (clusters[c] === exemplars[ei]) {
        ii.push(c);
      }
    }

    var maxI = -1;
    var maxSum = -Infinity;

    for (var i = 0; i < ii.length; i++) {
      var sum = 0;

      for (var j = 0; j < ii.length; j++) {
        sum += S[ii[j] * n + ii[i]];
      }

      if (sum > maxSum) {
        maxI = i;
        maxSum = sum;
      }
    }

    exemplars[ei] = ii[maxI];
  }

  clusters = assignClusters(n, S, exemplars);
  return clusters;
};

var affinityPropagation = function affinityPropagation(options) {
  var cy = this.cy();
  var nodes = this.nodes();
  var opts = setOptions$3(options); // Map each node to its position in node array

  var id2position = {};

  for (var i = 0; i < nodes.length; i++) {
    id2position[nodes[i].id()] = i;
  } // Begin affinity propagation algorithm


  var n; // number of data points

  var n2; // size of matrices

  var S; // similarity matrix (1D array)

  var p; // preference/suitability of a data point to serve as an exemplar

  var R; // responsibility matrix (1D array)

  var A; // availability matrix (1D array)

  n = nodes.length;
  n2 = n * n; // Initialize and build S similarity matrix

  S = new Array(n2);

  for (var _i = 0; _i < n2; _i++) {
    S[_i] = -Infinity; // for cases where two data points shouldn't be linked together
  }

  for (var _i2 = 0; _i2 < n; _i2++) {
    for (var j = 0; j < n; j++) {
      if (_i2 !== j) {
        S[_i2 * n + j] = getSimilarity$1(opts.distance, nodes[_i2], nodes[j], opts.attributes);
      }
    }
  } // Place preferences on the diagonal of S


  p = getPreference(S, opts.preference);

  for (var _i3 = 0; _i3 < n; _i3++) {
    S[_i3 * n + _i3] = p;
  } // Initialize R responsibility matrix


  R = new Array(n2);

  for (var _i4 = 0; _i4 < n2; _i4++) {
    R[_i4] = 0.0;
  } // Initialize A availability matrix


  A = new Array(n2);

  for (var _i5 = 0; _i5 < n2; _i5++) {
    A[_i5] = 0.0;
  }

  var old = new Array(n);
  var Rp = new Array(n);
  var se = new Array(n);

  for (var _i6 = 0; _i6 < n; _i6++) {
    old[_i6] = 0.0;
    Rp[_i6] = 0.0;
    se[_i6] = 0;
  }

  var e = new Array(n * opts.minIterations);

  for (var _i7 = 0; _i7 < e.length; _i7++) {
    e[_i7] = 0;
  }

  var iter;

  for (iter = 0; iter < opts.maxIterations; iter++) {
    // main algorithmic loop
    // Update R responsibility matrix
    for (var _i8 = 0; _i8 < n; _i8++) {
      var max$$1 = -Infinity,
          max2 = -Infinity,
          maxI = -1,
          AS = 0.0;

      for (var _j = 0; _j < n; _j++) {
        old[_j] = R[_i8 * n + _j];
        AS = A[_i8 * n + _j] + S[_i8 * n + _j];

        if (AS >= max$$1) {
          max2 = max$$1;
          max$$1 = AS;
          maxI = _j;
        } else if (AS > max2) {
          max2 = AS;
        }
      }

      for (var _j2 = 0; _j2 < n; _j2++) {
        R[_i8 * n + _j2] = (1 - opts.damping) * (S[_i8 * n + _j2] - max$$1) + opts.damping * old[_j2];
      }

      R[_i8 * n + maxI] = (1 - opts.damping) * (S[_i8 * n + maxI] - max2) + opts.damping * old[maxI];
    } // Update A availability matrix


    for (var _i9 = 0; _i9 < n; _i9++) {
      var sum = 0;

      for (var _j3 = 0; _j3 < n; _j3++) {
        old[_j3] = A[_j3 * n + _i9];
        Rp[_j3] = Math.max(0, R[_j3 * n + _i9]);
        sum += Rp[_j3];
      }

      sum -= Rp[_i9];
      Rp[_i9] = R[_i9 * n + _i9];
      sum += Rp[_i9];

      for (var _j4 = 0; _j4 < n; _j4++) {
        A[_j4 * n + _i9] = (1 - opts.damping) * Math.min(0, sum - Rp[_j4]) + opts.damping * old[_j4];
      }

      A[_i9 * n + _i9] = (1 - opts.damping) * (sum - Rp[_i9]) + opts.damping * old[_i9];
    } // Check for convergence


    var K = 0;

    for (var _i10 = 0; _i10 < n; _i10++) {
      var E = A[_i10 * n + _i10] + R[_i10 * n + _i10] > 0 ? 1 : 0;
      e[iter % opts.minIterations * n + _i10] = E;
      K += E;
    }

    if (K > 0 && (iter >= opts.minIterations - 1 || iter == opts.maxIterations - 1)) {
      var _sum = 0;

      for (var _i11 = 0; _i11 < n; _i11++) {
        se[_i11] = 0;

        for (var _j5 = 0; _j5 < opts.minIterations; _j5++) {
          se[_i11] += e[_j5 * n + _i11];
        }

        if (se[_i11] === 0 || se[_i11] === opts.minIterations) {
          _sum++;
        }
      }

      if (_sum === n) {
        // then we have convergence
        break;
      }
    }
  } // Identify exemplars (cluster centers)


  var exemplarsIndices = findExemplars(n, R, A); // Assign nodes to clusters

  var clusterIndices = assign$2(n, S, exemplarsIndices, nodes, id2position);
  var clusters = {};

  for (var c = 0; c < exemplarsIndices.length; c++) {
    clusters[exemplarsIndices[c]] = [];
  }

  for (var _i12 = 0; _i12 < nodes.length; _i12++) {
    var pos = id2position[nodes[_i12].id()];

    var clusterIndex = clusterIndices[pos];

    if (clusterIndex != null) {
      // the node may have not been assigned a cluster if no valid attributes were specified
      clusters[clusterIndex].push(nodes[_i12]);
    }
  }

  var retClusters = new Array(exemplarsIndices.length);

  for (var _c = 0; _c < exemplarsIndices.length; _c++) {
    retClusters[_c] = cy.collection(clusters[exemplarsIndices[_c]]);
  }

  return retClusters;
};

var affinityPropagation$1 = {
  affinityPropagation: affinityPropagation,
  ap: affinityPropagation
};
var elesfn$b = {};
[elesfn, elesfn$1, elesfn$2, elesfn$3, elesfn$4, elesfn$5, elesfn$6, elesfn$7, elesfn$8, elesfn$9, elesfn$a, markovClustering$1, kClustering, hierarchicalClustering$1, affinityPropagation$1].forEach(function (props) {
  extend(elesfn$b, props);
});
/*!
Embeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable
Copyright (c) 2013-2014 Ralf S. Engelschall (http://engelschall.com)
Licensed under The MIT License (http://opensource.org/licenses/MIT)
*/

/*  promise states [Promises/A+ 2.1]  */

var STATE_PENDING = 0;
/*  [Promises/A+ 2.1.1]  */

var STATE_FULFILLED = 1;
/*  [Promises/A+ 2.1.2]  */

var STATE_REJECTED = 2;
/*  [Promises/A+ 2.1.3]  */

/*  promise object constructor  */

var api = function api(executor) {
  /*  optionally support non-constructor/plain-function call  */
  if (!(this instanceof api)) return new api(executor);
  /*  initialize object  */

  this.id = 'Thenable/1.0.7';
  this.state = STATE_PENDING;
  /*  initial state  */

  this.fulfillValue = undefined;
  /*  initial value  */

  /*  [Promises/A+ 1.3, 2.1.2.2]  */

  this.rejectReason = undefined;
  /*  initial reason */

  /*  [Promises/A+ 1.5, 2.1.3.2]  */

  this.onFulfilled = [];
  /*  initial handlers  */

  this.onRejected = [];
  /*  initial handlers  */

  /*  provide optional information-hiding proxy  */

  this.proxy = {
    then: this.then.bind(this)
  };
  /*  support optional executor function  */

  if (typeof executor === 'function') executor.call(this, this.fulfill.bind(this), this.reject.bind(this));
};
/*  promise API methods  */


api.prototype = {
  /*  promise resolving methods  */
  fulfill: function fulfill(value) {
    return deliver(this, STATE_FULFILLED, 'fulfillValue', value);
  },
  reject: function reject(value) {
    return deliver(this, STATE_REJECTED, 'rejectReason', value);
  },

  /*  "The then Method" [Promises/A+ 1.1, 1.2, 2.2]  */
  then: function then(onFulfilled, onRejected) {
    var curr = this;
    var next = new api();
    /*  [Promises/A+ 2.2.7]  */

    curr.onFulfilled.push(resolver(onFulfilled, next, 'fulfill'));
    /*  [Promises/A+ 2.2.2/2.2.6]  */

    curr.onRejected.push(resolver(onRejected, next, 'reject'));
    /*  [Promises/A+ 2.2.3/2.2.6]  */

    execute(curr);
    return next.proxy;
    /*  [Promises/A+ 2.2.7, 3.3]  */
  }
};
/*  deliver an action  */

var deliver = function deliver(curr, state, name, value) {
  if (curr.state === STATE_PENDING) {
    curr.state = state;
    /*  [Promises/A+ 2.1.2.1, 2.1.3.1]  */

    curr[name] = value;
    /*  [Promises/A+ 2.1.2.2, 2.1.3.2]  */

    execute(curr);
  }

  return curr;
};
/*  execute all handlers  */


var execute = function execute(curr) {
  if (curr.state === STATE_FULFILLED) execute_handlers(curr, 'onFulfilled', curr.fulfillValue);else if (curr.state === STATE_REJECTED) execute_handlers(curr, 'onRejected', curr.rejectReason);
};
/*  execute particular set of handlers  */


var execute_handlers = function execute_handlers(curr, name, value) {
  /* global setImmediate: true */

  /* global setTimeout: true */

  /*  short-circuit processing  */
  if (curr[name].length === 0) return;
  /*  iterate over all handlers, exactly once  */

  var handlers = curr[name];
  curr[name] = [];
  /*  [Promises/A+ 2.2.2.3, 2.2.3.3]  */

  var func = function func() {
    for (var i = 0; i < handlers.length; i++) {
      handlers[i](value);
    }
    /*  [Promises/A+ 2.2.5]  */

  };
  /*  execute procedure asynchronously  */

  /*  [Promises/A+ 2.2.4, 3.1]  */


  if (typeof setImmediate === 'function') setImmediate(func);else setTimeout(func, 0);
};
/*  generate a resolver function  */


var resolver = function resolver(cb, next, method) {
  return function (value) {
    if (typeof cb !== 'function')
      /*  [Promises/A+ 2.2.1, 2.2.7.3, 2.2.7.4]  */
      next[method].call(next, value);
      /*  [Promises/A+ 2.2.7.3, 2.2.7.4]  */
    else {
        var result;

        try {
          result = cb(value);
        }
        /*  [Promises/A+ 2.2.2.1, 2.2.3.1, 2.2.5, 3.2]  */
        catch (e) {
          next.reject(e);
          /*  [Promises/A+ 2.2.7.2]  */

          return;
        }

        resolve(next, result);
        /*  [Promises/A+ 2.2.7.1]  */
      }
  };
};
/*  "Promise Resolution Procedure"  */

/*  [Promises/A+ 2.3]  */


var resolve = function resolve(promise, x) {
  /*  sanity check arguments  */

  /*  [Promises/A+ 2.3.1]  */
  if (promise === x || promise.proxy === x) {
    promise.reject(new TypeError('cannot resolve promise with itself'));
    return;
  }
  /*  surgically check for a "then" method
    (mainly to just call the "getter" of "then" only once)  */


  var then;

  if (_typeof(x) === 'object' && x !== null || typeof x === 'function') {
    try {
      then = x.then;
    }
    /*  [Promises/A+ 2.3.3.1, 3.5]  */
    catch (e) {
      promise.reject(e);
      /*  [Promises/A+ 2.3.3.2]  */

      return;
    }
  }
  /*  handle own Thenables    [Promises/A+ 2.3.2]
    and similar "thenables" [Promises/A+ 2.3.3]  */


  if (typeof then === 'function') {
    var resolved = false;

    try {
      /*  call retrieved "then" method */

      /*  [Promises/A+ 2.3.3.3]  */
      then.call(x,
      /*  resolvePromise  */

      /*  [Promises/A+ 2.3.3.3.1]  */
      function (y) {
        if (resolved) return;
        resolved = true;
        /*  [Promises/A+ 2.3.3.3.3]  */

        if (y === x)
          /*  [Promises/A+ 3.6]  */
          promise.reject(new TypeError('circular thenable chain'));else resolve(promise, y);
      },
      /*  rejectPromise  */

      /*  [Promises/A+ 2.3.3.3.2]  */
      function (r) {
        if (resolved) return;
        resolved = true;
        /*  [Promises/A+ 2.3.3.3.3]  */

        promise.reject(r);
      });
    } catch (e) {
      if (!resolved)
        /*  [Promises/A+ 2.3.3.3.3]  */
        promise.reject(e);
      /*  [Promises/A+ 2.3.3.3.4]  */
    }

    return;
  }
  /*  handle other values  */


  promise.fulfill(x);
  /*  [Promises/A+ 2.3.4, 2.3.3.4]  */
}; // so we always have Promise.all()


api.all = function (ps) {
  return new api(function (resolveAll, rejectAll) {
    var vals = new Array(ps.length);
    var doneCount = 0;

    var fulfill = function fulfill(i, val) {
      vals[i] = val;
      doneCount++;

      if (doneCount === ps.length) {
        resolveAll(vals);
      }
    };

    for (var i = 0; i < ps.length; i++) {
      (function (i) {
        var p = ps[i];
        var isPromise = p != null && p.then != null;

        if (isPromise) {
          p.then(function (val) {
            fulfill(i, val);
          }, function (err) {
            rejectAll(err);
          });
        } else {
          var val = p;
          fulfill(i, val);
        }
      })(i);
    }
  });
};

api.resolve = function (val) {
  return new api(function (resolve, reject) {
    resolve(val);
  });
};

api.reject = function (val) {
  return new api(function (resolve, reject) {
    reject(val);
  });
};

var Promise$1 = typeof Promise !== 'undefined' ? Promise : api; // eslint-disable-line no-undef

var Animation = function Animation(target, opts, opts2) {
  var isCore = core(target);
  var isEle = !isCore;

  var _p = this._private = extend({
    duration: 1000
  }, opts, opts2);

  _p.target = target;
  _p.style = _p.style || _p.css;
  _p.started = false;
  _p.playing = false;
  _p.hooked = false;
  _p.applying = false;
  _p.progress = 0;
  _p.completes = [];
  _p.frames = [];

  if (_p.complete && fn(_p.complete)) {
    _p.completes.push(_p.complete);
  }

  if (isEle) {
    var pos = target.position();
    _p.startPosition = _p.startPosition || {
      x: pos.x,
      y: pos.y
    };
    _p.startStyle = _p.startStyle || target.cy().style().getAnimationStartStyle(target, _p.style);
  }

  if (isCore) {
    var pan = target.pan();
    _p.startPan = {
      x: pan.x,
      y: pan.y
    };
    _p.startZoom = target.zoom();
  } // for future timeline/animations impl


  this.length = 1;
  this[0] = this;
};

var anifn = Animation.prototype;
extend(anifn, {
  instanceString: function instanceString() {
    return 'animation';
  },
  hook: function hook() {
    var _p = this._private;

    if (!_p.hooked) {
      // add to target's animation queue
      var q;
      var tAni = _p.target._private.animation;

      if (_p.queue) {
        q = tAni.queue;
      } else {
        q = tAni.current;
      }

      q.push(this); // add to the animation loop pool

      if (elementOrCollection(_p.target)) {
        _p.target.cy().addToAnimationPool(_p.target);
      }

      _p.hooked = true;
    }

    return this;
  },
  play: function play() {
    var _p = this._private; // autorewind

    if (_p.progress === 1) {
      _p.progress = 0;
    }

    _p.playing = true;
    _p.started = false; // needs to be started by animation loop

    _p.stopped = false;
    this.hook(); // the animation loop will start the animation...

    return this;
  },
  playing: function playing() {
    return this._private.playing;
  },
  apply: function apply() {
    var _p = this._private;
    _p.applying = true;
    _p.started = false; // needs to be started by animation loop

    _p.stopped = false;
    this.hook(); // the animation loop will apply the animation at this progress

    return this;
  },
  applying: function applying() {
    return this._private.applying;
  },
  pause: function pause() {
    var _p = this._private;
    _p.playing = false;
    _p.started = false;
    return this;
  },
  stop: function stop() {
    var _p = this._private;
    _p.playing = false;
    _p.started = false;
    _p.stopped = true; // to be removed from animation queues

    return this;
  },
  rewind: function rewind() {
    return this.progress(0);
  },
  fastforward: function fastforward() {
    return this.progress(1);
  },
  time: function time(t) {
    var _p = this._private;

    if (t === undefined) {
      return _p.progress * _p.duration;
    } else {
      return this.progress(t / _p.duration);
    }
  },
  progress: function progress(p) {
    var _p = this._private;
    var wasPlaying = _p.playing;

    if (p === undefined) {
      return _p.progress;
    } else {
      if (wasPlaying) {
        this.pause();
      }

      _p.progress = p;
      _p.started = false;

      if (wasPlaying) {
        this.play();
      }
    }

    return this;
  },
  completed: function completed() {
    return this._private.progress === 1;
  },
  reverse: function reverse() {
    var _p = this._private;
    var wasPlaying = _p.playing;

    if (wasPlaying) {
      this.pause();
    }

    _p.progress = 1 - _p.progress;
    _p.started = false;

    var swap = function swap(a, b) {
      var _pa = _p[a];

      if (_pa == null) {
        return;
      }

      _p[a] = _p[b];
      _p[b] = _pa;
    };

    swap('zoom', 'startZoom');
    swap('pan', 'startPan');
    swap('position', 'startPosition'); // swap styles

    if (_p.style) {
      for (var i = 0; i < _p.style.length; i++) {
        var prop = _p.style[i];
        var name = prop.name;
        var startStyleProp = _p.startStyle[name];
        _p.startStyle[name] = prop;
        _p.style[i] = startStyleProp;
      }
    }

    if (wasPlaying) {
      this.play();
    }

    return this;
  },
  promise: function promise$$1(type) {
    var _p = this._private;
    var arr;

    switch (type) {
      case 'frame':
        arr = _p.frames;
        break;

      default:
      case 'complete':
      case 'completed':
        arr = _p.completes;
    }

    return new Promise$1(function (resolve, reject) {
      arr.push(function () {
        resolve();
      });
    });
  }
});
anifn.complete = anifn.completed;
anifn.run = anifn.play;
anifn.running = anifn.playing;
var define = {
  animated: function animated() {
    return function animatedImpl() {
      var self = this;
      var selfIsArrayLike = self.length !== undefined;
      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

      var cy = this._private.cy || this;

      if (!cy.styleEnabled()) {
        return false;
      }

      var ele = all[0];

      if (ele) {
        return ele._private.animation.current.length > 0;
      }
    };
  },
  // animated
  clearQueue: function clearQueue() {
    return function clearQueueImpl() {
      var self = this;
      var selfIsArrayLike = self.length !== undefined;
      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

      var cy = this._private.cy || this;

      if (!cy.styleEnabled()) {
        return this;
      }

      for (var i = 0; i < all.length; i++) {
        var ele = all[i];
        ele._private.animation.queue = [];
      }

      return this;
    };
  },
  // clearQueue
  delay: function delay() {
    return function delayImpl(time, complete) {
      var cy = this._private.cy || this;

      if (!cy.styleEnabled()) {
        return this;
      }

      return this.animate({
        delay: time,
        duration: time,
        complete: complete
      });
    };
  },
  // delay
  delayAnimation: function delayAnimation() {
    return function delayAnimationImpl(time, complete) {
      var cy = this._private.cy || this;

      if (!cy.styleEnabled()) {
        return this;
      }

      return this.animation({
        delay: time,
        duration: time,
        complete: complete
      });
    };
  },
  // delay
  animation: function animation() {
    return function animationImpl(properties, params) {
      var self = this;
      var selfIsArrayLike = self.length !== undefined;
      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

      var cy = this._private.cy || this;
      var isCore = !selfIsArrayLike;
      var isEles = !isCore;

      if (!cy.styleEnabled()) {
        return this;
      }

      var style$$1 = cy.style();
      properties = extend({}, properties, params);
      var propertiesEmpty = Object.keys(properties).length === 0;

      if (propertiesEmpty) {
        return new Animation(all[0], properties); // nothing to animate
      }

      if (properties.duration === undefined) {
        properties.duration = 400;
      }

      switch (properties.duration) {
        case 'slow':
          properties.duration = 600;
          break;

        case 'fast':
          properties.duration = 200;
          break;
      }

      if (isEles) {
        properties.style = style$$1.getPropsList(properties.style || properties.css);
        properties.css = undefined;
      }

      if (isEles && properties.renderedPosition != null) {
        var rpos = properties.renderedPosition;
        var pan = cy.pan();
        var zoom = cy.zoom();
        properties.position = renderedToModelPosition(rpos, zoom, pan);
      } // override pan w/ panBy if set


      if (isCore && properties.panBy != null) {
        var panBy = properties.panBy;
        var cyPan = cy.pan();
        properties.pan = {
          x: cyPan.x + panBy.x,
          y: cyPan.y + panBy.y
        };
      } // override pan w/ center if set


      var center = properties.center || properties.centre;

      if (isCore && center != null) {
        var centerPan = cy.getCenterPan(center.eles, properties.zoom);

        if (centerPan != null) {
          properties.pan = centerPan;
        }
      } // override pan & zoom w/ fit if set


      if (isCore && properties.fit != null) {
        var fit = properties.fit;
        var fitVp = cy.getFitViewport(fit.eles || fit.boundingBox, fit.padding);

        if (fitVp != null) {
          properties.pan = fitVp.pan;
          properties.zoom = fitVp.zoom;
        }
      } // override zoom (& potentially pan) w/ zoom obj if set


      if (isCore && plainObject(properties.zoom)) {
        var vp = cy.getZoomedViewport(properties.zoom);

        if (vp != null) {
          if (vp.zoomed) {
            properties.zoom = vp.zoom;
          }

          if (vp.panned) {
            properties.pan = vp.pan;
          }
        }
      }

      return new Animation(all[0], properties);
    };
  },
  // animate
  animate: function animate() {
    return function animateImpl(properties, params) {
      var self = this;
      var selfIsArrayLike = self.length !== undefined;
      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

      var cy = this._private.cy || this;

      if (!cy.styleEnabled()) {
        return this;
      }

      if (params) {
        properties = extend({}, properties, params);
      } // manually hook and run the animation


      for (var i = 0; i < all.length; i++) {
        var ele = all[i];
        var queue = ele.animated() && (properties.queue === undefined || properties.queue);
        var ani = ele.animation(properties, queue ? {
          queue: true
        } : undefined);
        ani.play();
      }

      return this; // chaining
    };
  },
  // animate
  stop: function stop() {
    return function stopImpl(clearQueue, jumpToEnd) {
      var self = this;
      var selfIsArrayLike = self.length !== undefined;
      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

      var cy = this._private.cy || this;

      if (!cy.styleEnabled()) {
        return this;
      }

      for (var i = 0; i < all.length; i++) {
        var ele = all[i];
        var _p = ele._private;
        var anis = _p.animation.current;

        for (var j = 0; j < anis.length; j++) {
          var ani = anis[j];
          var ani_p = ani._private;

          if (jumpToEnd) {
            // next iteration of the animation loop, the animation
            // will go straight to the end and be removed
            ani_p.duration = 0;
          }
        } // clear the queue of future animations


        if (clearQueue) {
          _p.animation.queue = [];
        }

        if (!jumpToEnd) {
          _p.animation.current = [];
        }
      } // we have to notify (the animation loop doesn't do it for us on `stop`)


      cy.notify('draw');
      return this;
    };
  } // stop

}; // define

var define$1 = {
  // access data field
  data: function data(params) {
    var defaults$$1 = {
      field: 'data',
      bindingEvent: 'data',
      allowBinding: false,
      allowSetting: false,
      allowGetting: false,
      settingEvent: 'data',
      settingTriggersEvent: false,
      triggerFnName: 'trigger',
      immutableKeys: {},
      // key => true if immutable
      updateStyle: false,
      beforeGet: function beforeGet(self) {},
      beforeSet: function beforeSet(self, obj) {},
      onSet: function onSet(self) {},
      canSet: function canSet(self) {
        return true;
      }
    };
    params = extend({}, defaults$$1, params);
    return function dataImpl(name, value) {
      var p = params;
      var self = this;
      var selfIsArrayLike = self.length !== undefined;
      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

      var single = selfIsArrayLike ? self[0] : self; // .data('foo', ...)

      if (string(name)) {
        // set or get property
        // .data('foo')
        if (p.allowGetting && value === undefined) {
          // get
          var ret;

          if (single) {
            p.beforeGet(single);
            ret = single._private[p.field][name];
          }

          return ret; // .data('foo', 'bar')
        } else if (p.allowSetting && value !== undefined) {
          // set
          var valid = !p.immutableKeys[name];

          if (valid) {
            var change = _defineProperty({}, name, value);

            p.beforeSet(self, change);

            for (var i = 0, l = all.length; i < l; i++) {
              var ele = all[i];

              if (p.canSet(ele)) {
                ele._private[p.field][name] = value;
              }
            } // update mappers if asked


            if (p.updateStyle) {
              self.updateStyle();
            } // call onSet callback


            p.onSet(self);

            if (p.settingTriggersEvent) {
              self[p.triggerFnName](p.settingEvent);
            }
          }
        } // .data({ 'foo': 'bar' })

      } else if (p.allowSetting && plainObject(name)) {
        // extend
        var obj = name;
        var k, v;
        var keys = Object.keys(obj);
        p.beforeSet(self, obj);

        for (var _i = 0; _i < keys.length; _i++) {
          k = keys[_i];
          v = obj[k];

          var _valid = !p.immutableKeys[k];

          if (_valid) {
            for (var j = 0; j < all.length; j++) {
              var _ele = all[j];

              if (p.canSet(_ele)) {
                _ele._private[p.field][k] = v;
              }
            }
          }
        } // update mappers if asked


        if (p.updateStyle) {
          self.updateStyle();
        } // call onSet callback


        p.onSet(self);

        if (p.settingTriggersEvent) {
          self[p.triggerFnName](p.settingEvent);
        } // .data(function(){ ... })

      } else if (p.allowBinding && fn(name)) {
        // bind to event
        var fn$$1 = name;
        self.on(p.bindingEvent, fn$$1); // .data()
      } else if (p.allowGetting && name === undefined) {
        // get whole object
        var _ret;

        if (single) {
          p.beforeGet(single);
          _ret = single._private[p.field];
        }

        return _ret;
      }

      return self; // maintain chainability
    }; // function
  },
  // data
  // remove data field
  removeData: function removeData(params) {
    var defaults$$1 = {
      field: 'data',
      event: 'data',
      triggerFnName: 'trigger',
      triggerEvent: false,
      immutableKeys: {} // key => true if immutable

    };
    params = extend({}, defaults$$1, params);
    return function removeDataImpl(names) {
      var p = params;
      var self = this;
      var selfIsArrayLike = self.length !== undefined;
      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
      // .removeData('foo bar')

      if (string(names)) {
        // then get the list of keys, and delete them
        var keys = names.split(/\s+/);
        var l = keys.length;

        for (var i = 0; i < l; i++) {
          // delete each non-empty key
          var key = keys[i];

          if (emptyString(key)) {
            continue;
          }

          var valid = !p.immutableKeys[key]; // not valid if immutable

          if (valid) {
            for (var i_a = 0, l_a = all.length; i_a < l_a; i_a++) {
              all[i_a]._private[p.field][key] = undefined;
            }
          }
        }

        if (p.triggerEvent) {
          self[p.triggerFnName](p.event);
        } // .removeData()

      } else if (names === undefined) {
        // then delete all keys
        for (var _i_a = 0, _l_a = all.length; _i_a < _l_a; _i_a++) {
          var _privateFields = all[_i_a]._private[p.field];

          var _keys = Object.keys(_privateFields);

          for (var _i2 = 0; _i2 < _keys.length; _i2++) {
            var _key = _keys[_i2];
            var validKeyToDelete = !p.immutableKeys[_key];

            if (validKeyToDelete) {
              _privateFields[_key] = undefined;
            }
          }
        }

        if (p.triggerEvent) {
          self[p.triggerFnName](p.event);
        }
      }

      return self; // maintain chaining
    }; // function
  } // removeData

}; // define

var define$2 = {
  eventAliasesOn: function eventAliasesOn(proto) {
    var p = proto;
    p.addListener = p.listen = p.bind = p.on;
    p.unlisten = p.unbind = p.off = p.removeListener;
    p.trigger = p.emit; // this is just a wrapper alias of .on()

    p.pon = p.promiseOn = function (events, selector) {
      var self = this;
      var args = Array.prototype.slice.call(arguments, 0);
      return new Promise$1(function (resolve, reject) {
        var callback = function callback(e) {
          self.off.apply(self, offArgs);
          resolve(e);
        };

        var onArgs = args.concat([callback]);
        var offArgs = onArgs.concat([]);
        self.on.apply(self, onArgs);
      });
    };
  }
}; // define
// use this module to cherry pick functions into your prototype

var define$3 = {};
[define, define$1, define$2].forEach(function (m) {
  extend(define$3, m);
});
var elesfn$c = {
  animate: define$3.animate(),
  animation: define$3.animation(),
  animated: define$3.animated(),
  clearQueue: define$3.clearQueue(),
  delay: define$3.delay(),
  delayAnimation: define$3.delayAnimation(),
  stop: define$3.stop()
};
var elesfn$d = {
  classes: function classes(_classes) {
    if (!array(_classes)) {
      // extract classes from string
      _classes = (_classes || '').match(/\S+/g) || [];
    }

    var self = this;
    var changed = [];
    var classesSet = new Set$1(_classes); // check and update each ele

    for (var j = 0; j < self.length; j++) {
      var ele = self[j];
      var _p = ele._private;
      var eleClasses = _p.classes;
      var changedEle = false; // check if ele has all of the passed classes

      for (var i = 0; i < _classes.length; i++) {
        var cls = _classes[i];
        var eleHasClass = eleClasses.has(cls);

        if (!eleHasClass) {
          changedEle = true;
          break;
        }
      } // check if ele has classes outside of those passed


      if (!changedEle) {
        changedEle = eleClasses.size !== _classes.length;
      }

      if (changedEle) {
        _p.classes = classesSet;
        changed.push(ele);
      }
    } // trigger update style on those eles that had class changes


    if (changed.length > 0) {
      this.spawn(changed).updateStyle().emit('class');
    }

    return self;
  },
  addClass: function addClass(classes) {
    return this.toggleClass(classes, true);
  },
  hasClass: function hasClass(className) {
    var ele = this[0];
    return ele != null && ele._private.classes.has(className);
  },
  toggleClass: function toggleClass(classes, toggle) {
    if (!array(classes)) {
      // extract classes from string
      classes = classes.match(/\S+/g) || [];
    }

    var self = this;
    var toggleUndefd = toggle === undefined;
    var changed = []; // eles who had classes changed

    for (var i = 0, il = self.length; i < il; i++) {
      var ele = self[i];
      var eleClasses = ele._private.classes;
      var changedEle = false;

      for (var j = 0; j < classes.length; j++) {
        var cls = classes[j];
        var hasClass = eleClasses.has(cls);
        var changedNow = false;

        if (toggle || toggleUndefd && !hasClass) {
          eleClasses.add(cls);
          changedNow = true;
        } else if (!toggle || toggleUndefd && hasClass) {
          eleClasses.delete(cls);
          changedNow = true;
        }

        if (!changedEle && changedNow) {
          changed.push(ele);
          changedEle = true;
        }
      } // for j classes

    } // for i eles
    // trigger update style on those eles that had class changes


    if (changed.length > 0) {
      this.spawn(changed).updateStyle().emit('class');
    }

    return self;
  },
  removeClass: function removeClass(classes) {
    return this.toggleClass(classes, false);
  },
  flashClass: function flashClass(classes, duration) {
    var self = this;

    if (duration == null) {
      duration = 250;
    } else if (duration === 0) {
      return self; // nothing to do really
    }

    self.addClass(classes);
    setTimeout(function () {
      self.removeClass(classes);
    }, duration);
    return self;
  }
};
var tokens = {
  metaChar: '[\\!\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\]\\^\\`\\{\\|\\}\\~]',
  // chars we need to escape in let names, etc
  comparatorOp: '=|\\!=|>|>=|<|<=|\\$=|\\^=|\\*=',
  // binary comparison op (used in data selectors)
  boolOp: '\\?|\\!|\\^',
  // boolean (unary) operators (used in data selectors)
  string: '"(?:\\\\"|[^"])*"' + '|' + "'(?:\\\\'|[^'])*'",
  // string literals (used in data selectors) -- doublequotes | singlequotes
  number: number$1,
  // number literal (used in data selectors) --- e.g. 0.1234, 1234, 12e123
  meta: 'degree|indegree|outdegree',
  // allowed metadata fields (i.e. allowed functions to use from Collection)
  separator: '\\s*,\\s*',
  // queries are separated by commas, e.g. edge[foo = 'bar'], node.someClass
  descendant: '\\s+',
  child: '\\s+>\\s+',
  subject: '\\$',
  group: 'node|edge|\\*',
  directedEdge: '\\s+->\\s+',
  undirectedEdge: '\\s+<->\\s+'
};
tokens.variable = '(?:[\\w-]|(?:\\\\' + tokens.metaChar + '))+'; // a variable name

tokens.value = tokens.string + '|' + tokens.number; // a value literal, either a string or number

tokens.className = tokens.variable; // a class name (follows variable conventions)

tokens.id = tokens.variable; // an element id (follows variable conventions)

(function () {
  var ops, op, i; // add @ variants to comparatorOp

  ops = tokens.comparatorOp.split('|');

  for (i = 0; i < ops.length; i++) {
    op = ops[i];
    tokens.comparatorOp += '|@' + op;
  } // add ! variants to comparatorOp


  ops = tokens.comparatorOp.split('|');

  for (i = 0; i < ops.length; i++) {
    op = ops[i];

    if (op.indexOf('!') >= 0) {
      continue;
    } // skip ops that explicitly contain !


    if (op === '=') {
      continue;
    } // skip = b/c != is explicitly defined


    tokens.comparatorOp += '|\\!' + op;
  }
})();
/**
 * Make a new query object
 *
 * @prop type {Type} The type enum (int) of the query
 * @prop checks List of checks to make against an ele to test for a match
 */


var newQuery = function newQuery() {
  return {
    checks: []
  };
};
/**
 * A check type enum-like object.  Uses integer values for fast match() lookup.
 * The ordering does not matter as long as the ints are unique.
 */


var Type = {
  /** E.g. node */
  GROUP: 0,

  /** A collection of elements */
  COLLECTION: 1,

  /** A filter(ele) function */
  FILTER: 2,

  /** E.g. [foo > 1] */
  DATA_COMPARE: 3,

  /** E.g. [foo] */
  DATA_EXIST: 4,

  /** E.g. [?foo] */
  DATA_BOOL: 5,

  /** E.g. [[degree > 2]] */
  META_COMPARE: 6,

  /** E.g. :selected */
  STATE: 7,

  /** E.g. #foo */
  ID: 8,

  /** E.g. .foo */
  CLASS: 9,

  /** E.g. #foo <-> #bar */
  UNDIRECTED_EDGE: 10,

  /** E.g. #foo -> #bar */
  DIRECTED_EDGE: 11,

  /** E.g. $#foo -> #bar */
  NODE_SOURCE: 12,

  /** E.g. #foo -> $#bar */
  NODE_TARGET: 13,

  /** E.g. $#foo <-> #bar */
  NODE_NEIGHBOR: 14,

  /** E.g. #foo > #bar */
  CHILD: 15,

  /** E.g. #foo #bar */
  DESCENDANT: 16,

  /** E.g. $#foo > #bar */
  PARENT: 17,

  /** E.g. $#foo #bar */
  ANCESTOR: 18,

  /** E.g. #foo > $bar > #baz */
  COMPOUND_SPLIT: 19,

  /** Always matches, useful placeholder for subject in `COMPOUND_SPLIT` */
  TRUE: 20
};
var stateSelectors = [{
  selector: ':selected',
  matches: function matches(ele) {
    return ele.selected();
  }
}, {
  selector: ':unselected',
  matches: function matches(ele) {
    return !ele.selected();
  }
}, {
  selector: ':selectable',
  matches: function matches(ele) {
    return ele.selectable();
  }
}, {
  selector: ':unselectable',
  matches: function matches(ele) {
    return !ele.selectable();
  }
}, {
  selector: ':locked',
  matches: function matches(ele) {
    return ele.locked();
  }
}, {
  selector: ':unlocked',
  matches: function matches(ele) {
    return !ele.locked();
  }
}, {
  selector: ':visible',
  matches: function matches(ele) {
    return ele.visible();
  }
}, {
  selector: ':hidden',
  matches: function matches(ele) {
    return !ele.visible();
  }
}, {
  selector: ':transparent',
  matches: function matches(ele) {
    return ele.transparent();
  }
}, {
  selector: ':grabbed',
  matches: function matches(ele) {
    return ele.grabbed();
  }
}, {
  selector: ':free',
  matches: function matches(ele) {
    return !ele.grabbed();
  }
}, {
  selector: ':removed',
  matches: function matches(ele) {
    return ele.removed();
  }
}, {
  selector: ':inside',
  matches: function matches(ele) {
    return !ele.removed();
  }
}, {
  selector: ':grabbable',
  matches: function matches(ele) {
    return ele.grabbable();
  }
}, {
  selector: ':ungrabbable',
  matches: function matches(ele) {
    return !ele.grabbable();
  }
}, {
  selector: ':animated',
  matches: function matches(ele) {
    return ele.animated();
  }
}, {
  selector: ':unanimated',
  matches: function matches(ele) {
    return !ele.animated();
  }
}, {
  selector: ':parent',
  matches: function matches(ele) {
    return ele.isParent();
  }
}, {
  selector: ':childless',
  matches: function matches(ele) {
    return ele.isChildless();
  }
}, {
  selector: ':child',
  matches: function matches(ele) {
    return ele.isChild();
  }
}, {
  selector: ':orphan',
  matches: function matches(ele) {
    return ele.isOrphan();
  }
}, {
  selector: ':nonorphan',
  matches: function matches(ele) {
    return ele.isChild();
  }
}, {
  selector: ':compound',
  matches: function matches(ele) {
    if (ele.isNode()) {
      return ele.isParent();
    } else {
      return ele.source().isParent() || ele.target().isParent();
    }
  }
}, {
  selector: ':loop',
  matches: function matches(ele) {
    return ele.isLoop();
  }
}, {
  selector: ':simple',
  matches: function matches(ele) {
    return ele.isSimple();
  }
}, {
  selector: ':active',
  matches: function matches(ele) {
    return ele.active();
  }
}, {
  selector: ':inactive',
  matches: function matches(ele) {
    return !ele.active();
  }
}, {
  selector: ':backgrounding',
  matches: function matches(ele) {
    return ele.backgrounding();
  }
}, {
  selector: ':nonbackgrounding',
  matches: function matches(ele) {
    return !ele.backgrounding();
  }
}].sort(function (a, b) {
  // n.b. selectors that are starting substrings of others must have the longer ones first
  return descending(a.selector, b.selector);
});

var lookup = function () {
  var selToFn = {};
  var s;

  for (var i = 0; i < stateSelectors.length; i++) {
    s = stateSelectors[i];
    selToFn[s.selector] = s.matches;
  }

  return selToFn;
}();

var stateSelectorMatches = function stateSelectorMatches(sel, ele) {
  return lookup[sel](ele);
};

var stateSelectorRegex = '(' + stateSelectors.map(function (s) {
  return s.selector;
}).join('|') + ')'; // so that values get compared properly in Selector.filter()

var cleanMetaChars = function cleanMetaChars(str) {
  return str.replace(new RegExp('\\\\(' + tokens.metaChar + ')', 'g'), function (match, $1) {
    return $1;
  });
};

var replaceLastQuery = function replaceLastQuery(selector, examiningQuery, replacementQuery) {
  selector[selector.length - 1] = replacementQuery;
}; // NOTE: add new expression syntax here to have it recognised by the parser;
// - a query contains all adjacent (i.e. no separator in between) expressions;
// - the current query is stored in selector[i]
// - you need to check the query objects in match() for it actually filter properly, but that's pretty straight forward


var exprs = [{
  name: 'group',
  // just used for identifying when debugging
  query: true,
  regex: '(' + tokens.group + ')',
  populate: function populate(selector, query, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        group = _ref2[0];

    query.checks.push({
      type: Type.GROUP,
      value: group === '*' ? group : group + 's'
    });
  }
}, {
  name: 'state',
  query: true,
  regex: stateSelectorRegex,
  populate: function populate(selector, query, _ref3) {
    var _ref4 = _slicedToArray(_ref3, 1),
        state = _ref4[0];

    query.checks.push({
      type: Type.STATE,
      value: state
    });
  }
}, {
  name: 'id',
  query: true,
  regex: '\\#(' + tokens.id + ')',
  populate: function populate(selector, query, _ref5) {
    var _ref6 = _slicedToArray(_ref5, 1),
        id = _ref6[0];

    query.checks.push({
      type: Type.ID,
      value: cleanMetaChars(id)
    });
  }
}, {
  name: 'className',
  query: true,
  regex: '\\.(' + tokens.className + ')',
  populate: function populate(selector, query, _ref7) {
    var _ref8 = _slicedToArray(_ref7, 1),
        className = _ref8[0];

    query.checks.push({
      type: Type.CLASS,
      value: cleanMetaChars(className)
    });
  }
}, {
  name: 'dataExists',
  query: true,
  regex: '\\[\\s*(' + tokens.variable + ')\\s*\\]',
  populate: function populate(selector, query, _ref9) {
    var _ref10 = _slicedToArray(_ref9, 1),
        variable = _ref10[0];

    query.checks.push({
      type: Type.DATA_EXIST,
      field: cleanMetaChars(variable)
    });
  }
}, {
  name: 'dataCompare',
  query: true,
  regex: '\\[\\s*(' + tokens.variable + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.value + ')\\s*\\]',
  populate: function populate(selector, query, _ref11) {
    var _ref12 = _slicedToArray(_ref11, 3),
        variable = _ref12[0],
        comparatorOp = _ref12[1],
        value = _ref12[2];

    var valueIsString = new RegExp('^' + tokens.string + '$').exec(value) != null;

    if (valueIsString) {
      value = value.substring(1, value.length - 1);
    } else {
      value = parseFloat(value);
    }

    query.checks.push({
      type: Type.DATA_COMPARE,
      field: cleanMetaChars(variable),
      operator: comparatorOp,
      value: value
    });
  }
}, {
  name: 'dataBool',
  query: true,
  regex: '\\[\\s*(' + tokens.boolOp + ')\\s*(' + tokens.variable + ')\\s*\\]',
  populate: function populate(selector, query, _ref13) {
    var _ref14 = _slicedToArray(_ref13, 2),
        boolOp = _ref14[0],
        variable = _ref14[1];

    query.checks.push({
      type: Type.DATA_BOOL,
      field: cleanMetaChars(variable),
      operator: boolOp
    });
  }
}, {
  name: 'metaCompare',
  query: true,
  regex: '\\[\\[\\s*(' + tokens.meta + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.number + ')\\s*\\]\\]',
  populate: function populate(selector, query, _ref15) {
    var _ref16 = _slicedToArray(_ref15, 3),
        meta = _ref16[0],
        comparatorOp = _ref16[1],
        number = _ref16[2];

    query.checks.push({
      type: Type.META_COMPARE,
      field: cleanMetaChars(meta),
      operator: comparatorOp,
      value: parseFloat(number)
    });
  }
}, {
  name: 'nextQuery',
  separator: true,
  regex: tokens.separator,
  populate: function populate(selector, query) {
    var currentSubject = selector.currentSubject;
    var edgeCount = selector.edgeCount;
    var compoundCount = selector.compoundCount;
    var lastQ = selector[selector.length - 1];

    if (currentSubject != null) {
      lastQ.subject = currentSubject;
      selector.currentSubject = null;
    }

    lastQ.edgeCount = edgeCount;
    lastQ.compoundCount = compoundCount;
    selector.edgeCount = 0;
    selector.compoundCount = 0; // go on to next query

    var nextQuery = selector[selector.length++] = newQuery();
    return nextQuery; // this is the new query to be filled by the following exprs
  }
}, {
  name: 'directedEdge',
  separator: true,
  regex: tokens.directedEdge,
  populate: function populate(selector, query) {
    if (selector.currentSubject == null) {
      // undirected edge
      var edgeQuery = newQuery();
      var source = query;
      var target = newQuery();
      edgeQuery.checks.push({
        type: Type.DIRECTED_EDGE,
        source: source,
        target: target
      }); // the query in the selector should be the edge rather than the source

      replaceLastQuery(selector, query, edgeQuery);
      selector.edgeCount++; // we're now populating the target query with expressions that follow

      return target;
    } else {
      // source/target
      var srcTgtQ = newQuery();
      var _source = query;

      var _target = newQuery();

      srcTgtQ.checks.push({
        type: Type.NODE_SOURCE,
        source: _source,
        target: _target
      }); // the query in the selector should be the neighbourhood rather than the node

      replaceLastQuery(selector, query, srcTgtQ);
      selector.edgeCount++;
      return _target; // now populating the target with the following expressions
    }
  }
}, {
  name: 'undirectedEdge',
  separator: true,
  regex: tokens.undirectedEdge,
  populate: function populate(selector, query) {
    if (selector.currentSubject == null) {
      // undirected edge
      var edgeQuery = newQuery();
      var source = query;
      var target = newQuery();
      edgeQuery.checks.push({
        type: Type.UNDIRECTED_EDGE,
        nodes: [source, target]
      }); // the query in the selector should be the edge rather than the source

      replaceLastQuery(selector, query, edgeQuery);
      selector.edgeCount++; // we're now populating the target query with expressions that follow

      return target;
    } else {
      // neighbourhood
      var nhoodQ = newQuery();
      var node = query;
      var neighbor = newQuery();
      nhoodQ.checks.push({
        type: Type.NODE_NEIGHBOR,
        node: node,
        neighbor: neighbor
      }); // the query in the selector should be the neighbourhood rather than the node

      replaceLastQuery(selector, query, nhoodQ);
      return neighbor; // now populating the neighbor with following expressions
    }
  }
}, {
  name: 'child',
  separator: true,
  regex: tokens.child,
  populate: function populate(selector, query) {
    if (selector.currentSubject == null) {
      // default: child query
      var parentChildQuery = newQuery();
      var child = newQuery();
      var parent = selector[selector.length - 1];
      parentChildQuery.checks.push({
        type: Type.CHILD,
        parent: parent,
        child: child
      }); // the query in the selector should be the '>' itself

      replaceLastQuery(selector, query, parentChildQuery);
      selector.compoundCount++; // we're now populating the child query with expressions that follow

      return child;
    } else if (selector.currentSubject === query) {
      // compound split query
      var compound = newQuery();
      var left = selector[selector.length - 1];
      var right = newQuery();
      var subject = newQuery();

      var _child = newQuery();

      var _parent = newQuery(); // set up the root compound q


      compound.checks.push({
        type: Type.COMPOUND_SPLIT,
        left: left,
        right: right,
        subject: subject
      }); // populate the subject and replace the q at the old spot (within left) with TRUE

      subject.checks = query.checks; // take the checks from the left

      query.checks = [{
        type: Type.TRUE
      }]; // checks under left refs the subject implicitly
      // set up the right q

      _parent.checks.push({
        type: Type.TRUE
      }); // parent implicitly refs the subject


      right.checks.push({
        type: Type.PARENT,
        // type is swapped on right side queries
        parent: _parent,
        child: _child // empty for now

      });
      replaceLastQuery(selector, left, compound); // update the ref since we moved things around for `query`

      selector.currentSubject = subject;
      selector.compoundCount++;
      return _child; // now populating the right side's child
    } else {
      // parent query
      // info for parent query
      var _parent2 = newQuery();

      var _child2 = newQuery();

      var pcQChecks = [{
        type: Type.PARENT,
        parent: _parent2,
        child: _child2
      }]; // the parent-child query takes the place of the query previously being populated

      _parent2.checks = query.checks; // the previous query contains the checks for the parent

      query.checks = pcQChecks; // pc query takes over

      selector.compoundCount++;
      return _child2; // we're now populating the child
    }
  }
}, {
  name: 'descendant',
  separator: true,
  regex: tokens.descendant,
  populate: function populate(selector, query) {
    if (selector.currentSubject == null) {
      // default: descendant query
      var ancChQuery = newQuery();
      var descendant = newQuery();
      var ancestor = selector[selector.length - 1];
      ancChQuery.checks.push({
        type: Type.DESCENDANT,
        ancestor: ancestor,
        descendant: descendant
      }); // the query in the selector should be the '>' itself

      replaceLastQuery(selector, query, ancChQuery);
      selector.compoundCount++; // we're now populating the descendant query with expressions that follow

      return descendant;
    } else if (selector.currentSubject === query) {
      // compound split query
      var compound = newQuery();
      var left = selector[selector.length - 1];
      var right = newQuery();
      var subject = newQuery();

      var _descendant = newQuery();

      var _ancestor = newQuery(); // set up the root compound q


      compound.checks.push({
        type: Type.COMPOUND_SPLIT,
        left: left,
        right: right,
        subject: subject
      }); // populate the subject and replace the q at the old spot (within left) with TRUE

      subject.checks = query.checks; // take the checks from the left

      query.checks = [{
        type: Type.TRUE
      }]; // checks under left refs the subject implicitly
      // set up the right q

      _ancestor.checks.push({
        type: Type.TRUE
      }); // ancestor implicitly refs the subject


      right.checks.push({
        type: Type.ANCESTOR,
        // type is swapped on right side queries
        ancestor: _ancestor,
        descendant: _descendant // empty for now

      });
      replaceLastQuery(selector, left, compound); // update the ref since we moved things around for `query`

      selector.currentSubject = subject;
      selector.compoundCount++;
      return _descendant; // now populating the right side's descendant
    } else {
      // ancestor query
      // info for parent query
      var _ancestor2 = newQuery();

      var _descendant2 = newQuery();

      var adQChecks = [{
        type: Type.ANCESTOR,
        ancestor: _ancestor2,
        descendant: _descendant2
      }]; // the parent-child query takes the place of the query previously being populated

      _ancestor2.checks = query.checks; // the previous query contains the checks for the parent

      query.checks = adQChecks; // pc query takes over

      selector.compoundCount++;
      return _descendant2; // we're now populating the child
    }
  }
}, {
  name: 'subject',
  modifier: true,
  regex: tokens.subject,
  populate: function populate(selector, query) {
    if (selector.currentSubject != null && selector.currentSubject !== query) {
      warn('Redefinition of subject in selector `' + selector.toString() + '`');
      return false;
    }

    selector.currentSubject = query;
    var topQ = selector[selector.length - 1];
    var topChk = topQ.checks[0];
    var topType = topChk == null ? null : topChk.type;

    if (topType === Type.DIRECTED_EDGE) {
      // directed edge with subject on the target
      // change to target node check
      topChk.type = Type.NODE_TARGET;
    } else if (topType === Type.UNDIRECTED_EDGE) {
      // undirected edge with subject on the second node
      // change to neighbor check
      topChk.type = Type.NODE_NEIGHBOR;
      topChk.node = topChk.nodes[1]; // second node is subject

      topChk.neighbor = topChk.nodes[0]; // clean up unused fields for new type

      topChk.nodes = null;
    }
  }
}];
exprs.forEach(function (e) {
  return e.regexObj = new RegExp('^' + e.regex);
});
/**
 * Of all the expressions, find the first match in the remaining text.
 * @param {string} remaining The remaining text to parse
 * @returns The matched expression and the newly remaining text `{ expr, match, name, remaining }`
 */

var consumeExpr = function consumeExpr(remaining) {
  var expr;
  var match;
  var name;

  for (var j = 0; j < exprs.length; j++) {
    var e = exprs[j];
    var n = e.name;
    var m = remaining.match(e.regexObj);

    if (m != null) {
      match = m;
      expr = e;
      name = n;
      var consumed = m[0];
      remaining = remaining.substring(consumed.length);
      break; // we've consumed one expr, so we can return now
    }
  }

  return {
    expr: expr,
    match: match,
    name: name,
    remaining: remaining
  };
};
/**
 * Consume all the leading whitespace
 * @param {string} remaining The text to consume
 * @returns The text with the leading whitespace removed
 */


var consumeWhitespace = function consumeWhitespace(remaining) {
  var match = remaining.match(/^\s+/);

  if (match) {
    var consumed = match[0];
    remaining = remaining.substring(consumed.length);
  }

  return remaining;
};
/**
 * Parse the string and store the parsed representation in the Selector.
 * @param {string} selector The selector string
 * @returns `true` if the selector was successfully parsed, `false` otherwise
 */


var parse = function parse(selector) {
  var self = this;
  var remaining = self.inputText = selector;
  var currentQuery = self[0] = newQuery();
  self.length = 1;
  remaining = consumeWhitespace(remaining); // get rid of leading whitespace

  for (;;) {
    var exprInfo = consumeExpr(remaining);

    if (exprInfo.expr == null) {
      warn('The selector `' + selector + '`is invalid');
      return false;
    } else {
      var args = exprInfo.match.slice(1); // let the token populate the selector object in currentQuery

      var ret = exprInfo.expr.populate(self, currentQuery, args);

      if (ret === false) {
        return false; // exit if population failed
      } else if (ret != null) {
        currentQuery = ret; // change the current query to be filled if the expr specifies
      }
    }

    remaining = exprInfo.remaining; // we're done when there's nothing left to parse

    if (remaining.match(/^\s*$/)) {
      break;
    }
  }

  var lastQ = self[self.length - 1];

  if (self.currentSubject != null) {
    lastQ.subject = self.currentSubject;
  }

  lastQ.edgeCount = self.edgeCount;
  lastQ.compoundCount = self.compoundCount;

  for (var i = 0; i < self.length; i++) {
    var q = self[i]; // in future, this could potentially be allowed if there were operator precedence and detection of invalid combinations

    if (q.compoundCount > 0 && q.edgeCount > 0) {
      warn('The selector `' + selector + '` is invalid because it uses both a compound selector and an edge selector');
      return false;
    }

    if (q.edgeCount > 1) {
      warn('The selector `' + selector + '` is invalid because it uses multiple edge selectors');
      return false;
    } else if (q.edgeCount === 1) {
      warn('The selector `' + selector + '` is deprecated.  Edge selectors do not take effect on changes to source and target nodes after an edge is added, for performance reasons.  Use a class or data selector on edges instead, updating the class or data of an edge when your app detects a change in source or target nodes.');
    }
  }

  return true; // success
};
/**
 * Get the selector represented as a string.  This value uses default formatting,
 * so things like spacing may differ from the input text passed to the constructor.
 * @returns {string} The selector string
 */


var toString = function toString() {
  if (this.toStringCache != null) {
    return this.toStringCache;
  }

  var clean = function clean(obj) {
    if (obj == null) {
      return '';
    } else {
      return obj;
    }
  };

  var cleanVal = function cleanVal(val) {
    if (string(val)) {
      return '"' + val + '"';
    } else {
      return clean(val);
    }
  };

  var space = function space(val) {
    return ' ' + val + ' ';
  };

  var checkToString = function checkToString(check, subject) {
    var type = check.type,
        value = check.value;

    switch (type) {
      case Type.GROUP:
        {
          var group = clean(value);
          return group.substring(0, group.length - 1);
        }

      case Type.DATA_COMPARE:
        {
          var field = check.field,
              operator = check.operator;
          return '[' + field + space(clean(operator)) + cleanVal(value) + ']';
        }

      case Type.DATA_BOOL:
        {
          var _operator = check.operator,
              _field = check.field;
          return '[' + clean(_operator) + _field + ']';
        }

      case Type.DATA_EXIST:
        {
          var _field2 = check.field;
          return '[' + _field2 + ']';
        }

      case Type.META_COMPARE:
        {
          var _operator2 = check.operator,
              _field3 = check.field;
          return '[[' + _field3 + space(clean(_operator2)) + cleanVal(value) + ']]';
        }

      case Type.STATE:
        {
          return value;
        }

      case Type.ID:
        {
          return '#' + value;
        }

      case Type.CLASS:
        {
          return '.' + value;
        }

      case Type.PARENT:
      case Type.CHILD:
        {
          return queryToString(check.parent, subject) + space('>') + queryToString(check.child, subject);
        }

      case Type.ANCESTOR:
      case Type.DESCENDANT:
        {
          return queryToString(check.ancestor, subject) + ' ' + queryToString(check.descendant, subject);
        }

      case Type.COMPOUND_SPLIT:
        {
          var lhs = queryToString(check.left, subject);
          var sub = queryToString(check.subject, subject);
          var rhs = queryToString(check.right, subject);
          return lhs + (lhs.length > 0 ? ' ' : '') + sub + rhs;
        }

      case Type.TRUE:
        {
          return '';
        }
    }
  };

  var queryToString = function queryToString(query, subject) {
    return query.checks.reduce(function (str, chk, i) {
      return str + (subject === query && i === 0 ? '$' : '') + checkToString(chk, subject);
    }, '');
  };

  var str = '';

  for (var i = 0; i < this.length; i++) {
    var query = this[i];
    str += queryToString(query, query.subject);

    if (this.length > 1 && i < this.length - 1) {
      str += ', ';
    }
  }

  this.toStringCache = str;
  return str;
};

var parse$1 = {
  parse: parse,
  toString: toString
};

var valCmp = function valCmp(fieldVal, operator, value) {
  var matches;
  var isFieldStr = string(fieldVal);
  var isFieldNum = number(fieldVal);
  var isValStr = string(value);
  var fieldStr, valStr;
  var caseInsensitive = false;
  var notExpr = false;
  var isIneqCmp = false;

  if (operator.indexOf('!') >= 0) {
    operator = operator.replace('!', '');
    notExpr = true;
  }

  if (operator.indexOf('@') >= 0) {
    operator = operator.replace('@', '');
    caseInsensitive = true;
  }

  if (isFieldStr || isValStr || caseInsensitive) {
    fieldStr = !isFieldStr && !isFieldNum ? '' : '' + fieldVal;
    valStr = '' + value;
  } // if we're doing a case insensitive comparison, then we're using a STRING comparison
  // even if we're comparing numbers


  if (caseInsensitive) {
    fieldVal = fieldStr = fieldStr.toLowerCase();
    value = valStr = valStr.toLowerCase();
  }

  switch (operator) {
    case '*=':
      matches = fieldStr.indexOf(valStr) >= 0;
      break;

    case '$=':
      matches = fieldStr.indexOf(valStr, fieldStr.length - valStr.length) >= 0;
      break;

    case '^=':
      matches = fieldStr.indexOf(valStr) === 0;
      break;

    case '=':
      matches = fieldVal === value;
      break;

    case '>':
      isIneqCmp = true;
      matches = fieldVal > value;
      break;

    case '>=':
      isIneqCmp = true;
      matches = fieldVal >= value;
      break;

    case '<':
      isIneqCmp = true;
      matches = fieldVal < value;
      break;

    case '<=':
      isIneqCmp = true;
      matches = fieldVal <= value;
      break;

    default:
      matches = false;
      break;
  } // apply the not op, but null vals for inequalities should always stay non-matching


  if (notExpr && (fieldVal != null || !isIneqCmp)) {
    matches = !matches;
  }

  return matches;
};

var boolCmp = function boolCmp(fieldVal, operator) {
  switch (operator) {
    case '?':
      return fieldVal ? true : false;

    case '!':
      return fieldVal ? false : true;

    case '^':
      return fieldVal === undefined;
  }
};

var existCmp = function existCmp(fieldVal) {
  return fieldVal !== undefined;
};

var data = function data(ele, field) {
  return ele.data(field);
};

var meta = function meta(ele, field) {
  return ele[field]();
};
/** A lookup of `match(check, ele)` functions by `Type` int */


var match = [];
/**
 * Returns whether the query matches for the element
 * @param query The `{ type, value, ... }` query object
 * @param ele The element to compare against
*/

var matches = function matches(query, ele) {
  return query.checks.every(function (chk) {
    return match[chk.type](chk, ele);
  });
};

match[Type.GROUP] = function (check, ele) {
  var group = check.value;
  return group === '*' || group === ele.group();
};

match[Type.STATE] = function (check, ele) {
  var stateSelector = check.value;
  return stateSelectorMatches(stateSelector, ele);
};

match[Type.ID] = function (check, ele) {
  var id = check.value;
  return ele.id() === id;
};

match[Type.CLASS] = function (check, ele) {
  var cls = check.value;
  return ele.hasClass(cls);
};

match[Type.META_COMPARE] = function (check, ele) {
  var field = check.field,
      operator = check.operator,
      value = check.value;
  return valCmp(meta(ele, field), operator, value);
};

match[Type.DATA_COMPARE] = function (check, ele) {
  var field = check.field,
      operator = check.operator,
      value = check.value;
  return valCmp(data(ele, field), operator, value);
};

match[Type.DATA_BOOL] = function (check, ele) {
  var field = check.field,
      operator = check.operator;
  return boolCmp(data(ele, field), operator);
};

match[Type.DATA_EXIST] = function (check, ele) {
  var field = check.field,
      operator = check.operator;
  return existCmp(data(ele, field), operator);
};

match[Type.UNDIRECTED_EDGE] = function (check, ele) {
  var qA = check.nodes[0];
  var qB = check.nodes[1];
  var src = ele.source();
  var tgt = ele.target();
  return matches(qA, src) && matches(qB, tgt) || matches(qB, src) && matches(qA, tgt);
};

match[Type.NODE_NEIGHBOR] = function (check, ele) {
  return matches(check.node, ele) && ele.neighborhood().some(function (n) {
    return n.isNode() && matches(check.neighbor, n);
  });
};

match[Type.DIRECTED_EDGE] = function (check, ele) {
  return matches(check.source, ele.source()) && matches(check.target, ele.target());
};

match[Type.NODE_SOURCE] = function (check, ele) {
  return matches(check.source, ele) && ele.outgoers().some(function (n) {
    return n.isNode() && matches(check.target, n);
  });
};

match[Type.NODE_TARGET] = function (check, ele) {
  return matches(check.target, ele) && ele.incomers().some(function (n) {
    return n.isNode() && matches(check.source, n);
  });
};

match[Type.CHILD] = function (check, ele) {
  return matches(check.child, ele) && matches(check.parent, ele.parent());
};

match[Type.PARENT] = function (check, ele) {
  return matches(check.parent, ele) && ele.children().some(function (c) {
    return matches(check.child, c);
  });
};

match[Type.DESCENDANT] = function (check, ele) {
  return matches(check.descendant, ele) && ele.ancestors().some(function (a) {
    return matches(check.ancestor, a);
  });
};

match[Type.ANCESTOR] = function (check, ele) {
  return matches(check.ancestor, ele) && ele.descendants().some(function (d) {
    return matches(check.descendant, d);
  });
};

match[Type.COMPOUND_SPLIT] = function (check, ele) {
  return matches(check.subject, ele) && matches(check.left, ele) && matches(check.right, ele);
};

match[Type.TRUE] = function () {
  return true;
};

match[Type.COLLECTION] = function (check, ele) {
  var collection = check.value;
  return collection.has(ele);
};

match[Type.FILTER] = function (check, ele) {
  var filter = check.value;
  return filter(ele);
};

var filter = function filter(collection) {
  var self = this; // for 1 id #foo queries, just get the element

  if (self.length === 1 && self[0].checks.length === 1 && self[0].checks[0].type === Type.ID) {
    return collection.getElementById(self[0].checks[0].value).collection();
  }

  var selectorFunction = function selectorFunction(element) {
    for (var j = 0; j < self.length; j++) {
      var query = self[j];

      if (matches(query, element)) {
        return true;
      }
    }

    return false;
  };

  if (self.text() == null) {
    selectorFunction = function selectorFunction() {
      return true;
    };
  }

  return collection.filter(selectorFunction);
}; // filter
// does selector match a single element?


var matches$1 = function matches$$1(ele) {
  var self = this;

  for (var j = 0; j < self.length; j++) {
    var query = self[j];

    if (matches(query, ele)) {
      return true;
    }
  }

  return false;
}; // matches


var matching = {
  matches: matches$1,
  filter: filter
};

var Selector = function Selector(selector) {
  this.inputText = selector;
  this.currentSubject = null;
  this.compoundCount = 0;
  this.edgeCount = 0;
  this.length = 0;
  if (selector == null || string(selector) && selector.match(/^\s*$/)) ;else if (elementOrCollection(selector)) {
    this.addQuery({
      checks: [{
        type: Type.COLLECTION,
        value: selector.collection()
      }]
    });
  } else if (fn(selector)) {
    this.addQuery({
      checks: [{
        type: Type.FILTER,
        value: selector
      }]
    });
  } else if (string(selector)) {
    if (!this.parse(selector)) {
      this.invalid = true;
    }
  } else {
    error('A selector must be created from a string; found ', selector);
  }
};

var selfn = Selector.prototype;
[parse$1, matching].forEach(function (p) {
  return extend(selfn, p);
});

selfn.text = function () {
  return this.inputText;
};

selfn.size = function () {
  return this.length;
};

selfn.eq = function (i) {
  return this[i];
};

selfn.sameText = function (otherSel) {
  return !this.invalid && !otherSel.invalid && this.text() === otherSel.text();
};

selfn.addQuery = function (q) {
  this[this.length++] = q;
};

selfn.selector = selfn.toString;
var elesfn$e = {
  allAre: function allAre(selector) {
    var selObj = new Selector(selector);
    return this.every(function (ele) {
      return selObj.matches(ele);
    });
  },
  is: function is(selector) {
    var selObj = new Selector(selector);
    return this.some(function (ele) {
      return selObj.matches(ele);
    });
  },
  some: function some(fn, thisArg) {
    for (var i = 0; i < this.length; i++) {
      var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);

      if (ret) {
        return true;
      }
    }

    return false;
  },
  every: function every(fn, thisArg) {
    for (var i = 0; i < this.length; i++) {
      var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);

      if (!ret) {
        return false;
      }
    }

    return true;
  },
  same: function same(collection) {
    // cheap collection ref check
    if (this === collection) {
      return true;
    }

    collection = this.cy().collection(collection);
    var thisLength = this.length;
    var collectionLength = collection.length; // cheap length check

    if (thisLength !== collectionLength) {
      return false;
    } // cheap element ref check


    if (thisLength === 1) {
      return this[0] === collection[0];
    }

    return this.every(function (ele) {
      return collection.hasElementWithId(ele.id());
    });
  },
  anySame: function anySame(collection) {
    collection = this.cy().collection(collection);
    return this.some(function (ele) {
      return collection.hasElementWithId(ele.id());
    });
  },
  allAreNeighbors: function allAreNeighbors(collection) {
    collection = this.cy().collection(collection);
    var nhood = this.neighborhood();
    return collection.every(function (ele) {
      return nhood.hasElementWithId(ele.id());
    });
  },
  contains: function contains(collection) {
    collection = this.cy().collection(collection);
    var self = this;
    return collection.every(function (ele) {
      return self.hasElementWithId(ele.id());
    });
  }
};
elesfn$e.allAreNeighbours = elesfn$e.allAreNeighbors;
elesfn$e.has = elesfn$e.contains;
elesfn$e.equal = elesfn$e.equals = elesfn$e.same;

var cache = function cache(fn$$1, name) {
  return function traversalCache(arg1, arg2, arg3, arg4) {
    var selectorOrEles = arg1;
    var eles = this;
    var key;

    if (selectorOrEles == null) {
      key = '';
    } else if (elementOrCollection(selectorOrEles) && selectorOrEles.length === 1) {
      key = selectorOrEles.id();
    }

    if (eles.length === 1 && key) {
      var _p = eles[0]._private;
      var tch = _p.traversalCache = _p.traversalCache || {};
      var ch = tch[name] = tch[name] || [];
      var hash = hashString(key);
      var cacheHit = ch[hash];

      if (cacheHit) {
        return cacheHit;
      } else {
        return ch[hash] = fn$$1.call(eles, arg1, arg2, arg3, arg4);
      }
    } else {
      return fn$$1.call(eles, arg1, arg2, arg3, arg4);
    }
  };
};

var elesfn$f = {
  parent: function parent(selector) {
    var parents = []; // optimisation for single ele call

    if (this.length === 1) {
      var parent = this[0]._private.parent;

      if (parent) {
        return parent;
      }
    }

    for (var i = 0; i < this.length; i++) {
      var ele = this[i];
      var _parent = ele._private.parent;

      if (_parent) {
        parents.push(_parent);
      }
    }

    return this.spawn(parents, {
      unique: true
    }).filter(selector);
  },
  parents: function parents(selector) {
    var parents = [];
    var eles = this.parent();

    while (eles.nonempty()) {
      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        parents.push(ele);
      }

      eles = eles.parent();
    }

    return this.spawn(parents, {
      unique: true
    }).filter(selector);
  },
  commonAncestors: function commonAncestors(selector) {
    var ancestors;

    for (var i = 0; i < this.length; i++) {
      var ele = this[i];
      var parents = ele.parents();
      ancestors = ancestors || parents;
      ancestors = ancestors.intersect(parents); // current list must be common with current ele parents set
    }

    return ancestors.filter(selector);
  },
  orphans: function orphans(selector) {
    return this.stdFilter(function (ele) {
      return ele.isOrphan();
    }).filter(selector);
  },
  nonorphans: function nonorphans(selector) {
    return this.stdFilter(function (ele) {
      return ele.isChild();
    }).filter(selector);
  },
  children: cache(function (selector) {
    var children = [];

    for (var i = 0; i < this.length; i++) {
      var ele = this[i];
      var eleChildren = ele._private.children;

      for (var j = 0; j < eleChildren.length; j++) {
        children.push(eleChildren[j]);
      }
    }

    return this.spawn(children, {
      unique: true
    }).filter(selector);
  }, 'children'),
  siblings: function siblings(selector) {
    return this.parent().children().not(this).filter(selector);
  },
  isParent: function isParent() {
    var ele = this[0];

    if (ele) {
      return ele.isNode() && ele._private.children.length !== 0;
    }
  },
  isChildless: function isChildless() {
    var ele = this[0];

    if (ele) {
      return ele.isNode() && ele._private.children.length === 0;
    }
  },
  isChild: function isChild() {
    var ele = this[0];

    if (ele) {
      return ele.isNode() && ele._private.parent != null;
    }
  },
  isOrphan: function isOrphan() {
    var ele = this[0];

    if (ele) {
      return ele.isNode() && ele._private.parent == null;
    }
  },
  descendants: function descendants(selector) {
    var elements = [];

    function add(eles) {
      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        elements.push(ele);

        if (ele.children().nonempty()) {
          add(ele.children());
        }
      }
    }

    add(this.children());
    return this.spawn(elements, {
      unique: true
    }).filter(selector);
  }
};

function forEachCompound(eles, fn, includeSelf, recursiveStep) {
  var q = [];
  var did = new Set$1();
  var cy = eles.cy();
  var hasCompounds = cy.hasCompoundNodes();

  for (var i = 0; i < eles.length; i++) {
    var ele = eles[i];

    if (includeSelf) {
      q.push(ele);
    } else if (hasCompounds) {
      recursiveStep(q, did, ele);
    }
  }

  while (q.length > 0) {
    var _ele = q.shift();

    fn(_ele);
    did.add(_ele.id());

    if (hasCompounds) {
      recursiveStep(q, did, _ele);
    }
  }

  return eles;
}

function addChildren(q, did, ele) {
  if (ele.isParent()) {
    var children = ele._private.children;

    for (var i = 0; i < children.length; i++) {
      var child = children[i];

      if (!did.has(child.id())) {
        q.push(child);
      }
    }
  }
} // very efficient version of eles.add( eles.descendants() ).forEach()
// for internal use


elesfn$f.forEachDown = function (fn) {
  var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  return forEachCompound(this, fn, includeSelf, addChildren);
};

function addParent(q, did, ele) {
  if (ele.isChild()) {
    var parent = ele._private.parent;

    if (!did.has(parent.id())) {
      q.push(parent);
    }
  }
}

elesfn$f.forEachUp = function (fn) {
  var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  return forEachCompound(this, fn, includeSelf, addParent);
};

function addParentAndChildren(q, did, ele) {
  addParent(q, did, ele);
  addChildren(q, did, ele);
}

elesfn$f.forEachUpAndDown = function (fn) {
  var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  return forEachCompound(this, fn, includeSelf, addParentAndChildren);
}; // aliases


elesfn$f.ancestors = elesfn$f.parents;
var fn$1, elesfn$g;
fn$1 = elesfn$g = {
  data: define$3.data({
    field: 'data',
    bindingEvent: 'data',
    allowBinding: true,
    allowSetting: true,
    settingEvent: 'data',
    settingTriggersEvent: true,
    triggerFnName: 'trigger',
    allowGetting: true,
    immutableKeys: {
      'id': true,
      'source': true,
      'target': true,
      'parent': true
    },
    updateStyle: true
  }),
  removeData: define$3.removeData({
    field: 'data',
    event: 'data',
    triggerFnName: 'trigger',
    triggerEvent: true,
    immutableKeys: {
      'id': true,
      'source': true,
      'target': true,
      'parent': true
    },
    updateStyle: true
  }),
  scratch: define$3.data({
    field: 'scratch',
    bindingEvent: 'scratch',
    allowBinding: true,
    allowSetting: true,
    settingEvent: 'scratch',
    settingTriggersEvent: true,
    triggerFnName: 'trigger',
    allowGetting: true,
    updateStyle: true
  }),
  removeScratch: define$3.removeData({
    field: 'scratch',
    event: 'scratch',
    triggerFnName: 'trigger',
    triggerEvent: true,
    updateStyle: true
  }),
  rscratch: define$3.data({
    field: 'rscratch',
    allowBinding: false,
    allowSetting: true,
    settingTriggersEvent: false,
    allowGetting: true
  }),
  removeRscratch: define$3.removeData({
    field: 'rscratch',
    triggerEvent: false
  }),
  id: function id() {
    var ele = this[0];

    if (ele) {
      return ele._private.data.id;
    }
  }
}; // aliases

fn$1.attr = fn$1.data;
fn$1.removeAttr = fn$1.removeData;
var data$1 = elesfn$g;
var elesfn$h = {};

function defineDegreeFunction(callback) {
  return function (includeLoops) {
    var self = this;

    if (includeLoops === undefined) {
      includeLoops = true;
    }

    if (self.length === 0) {
      return;
    }

    if (self.isNode() && !self.removed()) {
      var degree = 0;
      var node = self[0];
      var connectedEdges = node._private.edges;

      for (var i = 0; i < connectedEdges.length; i++) {
        var edge = connectedEdges[i];

        if (!includeLoops && edge.isLoop()) {
          continue;
        }

        degree += callback(node, edge);
      }

      return degree;
    } else {
      return;
    }
  };
}

extend(elesfn$h, {
  degree: defineDegreeFunction(function (node, edge) {
    if (edge.source().same(edge.target())) {
      return 2;
    } else {
      return 1;
    }
  }),
  indegree: defineDegreeFunction(function (node, edge) {
    if (edge.target().same(node)) {
      return 1;
    } else {
      return 0;
    }
  }),
  outdegree: defineDegreeFunction(function (node, edge) {
    if (edge.source().same(node)) {
      return 1;
    } else {
      return 0;
    }
  })
});

function defineDegreeBoundsFunction(degreeFn, callback) {
  return function (includeLoops) {
    var ret;
    var nodes = this.nodes();

    for (var i = 0; i < nodes.length; i++) {
      var ele = nodes[i];
      var degree = ele[degreeFn](includeLoops);

      if (degree !== undefined && (ret === undefined || callback(degree, ret))) {
        ret = degree;
      }
    }

    return ret;
  };
}

extend(elesfn$h, {
  minDegree: defineDegreeBoundsFunction('degree', function (degree, min) {
    return degree < min;
  }),
  maxDegree: defineDegreeBoundsFunction('degree', function (degree, max) {
    return degree > max;
  }),
  minIndegree: defineDegreeBoundsFunction('indegree', function (degree, min) {
    return degree < min;
  }),
  maxIndegree: defineDegreeBoundsFunction('indegree', function (degree, max) {
    return degree > max;
  }),
  minOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, min) {
    return degree < min;
  }),
  maxOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, max) {
    return degree > max;
  })
});
extend(elesfn$h, {
  totalDegree: function totalDegree(includeLoops) {
    var total = 0;
    var nodes = this.nodes();

    for (var i = 0; i < nodes.length; i++) {
      total += nodes[i].degree(includeLoops);
    }

    return total;
  }
});
var fn$2, elesfn$i;

var beforePositionSet = function beforePositionSet(eles, newPos, silent) {
  for (var i = 0; i < eles.length; i++) {
    var ele = eles[i];

    if (!ele.locked()) {
      var oldPos = ele._private.position;
      var delta = {
        x: newPos.x != null ? newPos.x - oldPos.x : 0,
        y: newPos.y != null ? newPos.y - oldPos.y : 0
      };

      if (ele.isParent() && !(delta.x === 0 && delta.y === 0)) {
        ele.children().shift(delta, silent);
      }

      ele.shiftCachedBoundingBox(delta);
    }
  }
};

var positionDef = {
  field: 'position',
  bindingEvent: 'position',
  allowBinding: true,
  allowSetting: true,
  settingEvent: 'position',
  settingTriggersEvent: true,
  triggerFnName: 'emitAndNotify',
  allowGetting: true,
  validKeys: ['x', 'y'],
  beforeGet: function beforeGet(ele) {
    ele.updateCompoundBounds();
  },
  beforeSet: function beforeSet(eles, newPos) {
    beforePositionSet(eles, newPos, false);
  },
  onSet: function onSet(eles) {
    eles.dirtyCompoundBoundsCache();
  },
  canSet: function canSet(ele) {
    return !ele.locked();
  }
};
fn$2 = elesfn$i = {
  position: define$3.data(positionDef),
  // position but no notification to renderer
  silentPosition: define$3.data(extend({}, positionDef, {
    allowBinding: false,
    allowSetting: true,
    settingTriggersEvent: false,
    allowGetting: false,
    beforeSet: function beforeSet(eles, newPos) {
      beforePositionSet(eles, newPos, true);
    }
  })),
  positions: function positions(pos, silent) {
    if (plainObject(pos)) {
      if (silent) {
        this.silentPosition(pos);
      } else {
        this.position(pos);
      }
    } else if (fn(pos)) {
      var _fn = pos;
      var cy = this.cy();
      cy.startBatch();

      for (var i = 0; i < this.length; i++) {
        var ele = this[i];

        var _pos = void 0;

        if (_pos = _fn(ele, i)) {
          if (silent) {
            ele.silentPosition(_pos);
          } else {
            ele.position(_pos);
          }
        }
      }

      cy.endBatch();
    }

    return this; // chaining
  },
  silentPositions: function silentPositions(pos) {
    return this.positions(pos, true);
  },
  shift: function shift(dim, val, silent) {
    var delta;

    if (plainObject(dim)) {
      delta = dim;
      silent = val;
    } else if (string(dim) && number(val)) {
      delta = {
        x: 0,
        y: 0
      };
      delta[dim] = val;
    }

    if (delta != null) {
      var cy = this.cy();
      cy.startBatch();

      for (var i = 0; i < this.length; i++) {
        var ele = this[i];
        var pos = ele.position();
        var newPos = {
          x: pos.x + delta.x,
          y: pos.y + delta.y
        };

        if (silent) {
          ele.silentPosition(newPos);
        } else {
          ele.position(newPos);
        }
      }

      cy.endBatch();
    }

    return this;
  },
  silentShift: function silentShift(dim, val) {
    if (plainObject(dim)) {
      this.shift(dim, true);
    } else if (string(dim) && number(val)) {
      this.shift(dim, val, true);
    }

    return this;
  },
  // get/set the rendered (i.e. on screen) positon of the element
  renderedPosition: function renderedPosition(dim, val) {
    var ele = this[0];
    var cy = this.cy();
    var zoom = cy.zoom();
    var pan = cy.pan();
    var rpos = plainObject(dim) ? dim : undefined;
    var setting = rpos !== undefined || val !== undefined && string(dim);

    if (ele && ele.isNode()) {
      // must have an element and must be a node to return position
      if (setting) {
        for (var i = 0; i < this.length; i++) {
          var _ele = this[i];

          if (val !== undefined) {
            // set one dimension
            _ele.position(dim, (val - pan[dim]) / zoom);
          } else if (rpos !== undefined) {
            // set whole position
            _ele.position(renderedToModelPosition(rpos, zoom, pan));
          }
        }
      } else {
        // getting
        var pos = ele.position();
        rpos = modelToRenderedPosition(pos, zoom, pan);

        if (dim === undefined) {
          // then return the whole rendered position
          return rpos;
        } else {
          // then return the specified dimension
          return rpos[dim];
        }
      }
    } else if (!setting) {
      return undefined; // for empty collection case
    }

    return this; // chaining
  },
  // get/set the position relative to the parent
  relativePosition: function relativePosition(dim, val) {
    var ele = this[0];
    var cy = this.cy();
    var ppos = plainObject(dim) ? dim : undefined;
    var setting = ppos !== undefined || val !== undefined && string(dim);
    var hasCompoundNodes = cy.hasCompoundNodes();

    if (ele && ele.isNode()) {
      // must have an element and must be a node to return position
      if (setting) {
        for (var i = 0; i < this.length; i++) {
          var _ele2 = this[i];
          var parent = hasCompoundNodes ? _ele2.parent() : null;
          var hasParent = parent && parent.length > 0;
          var relativeToParent = hasParent;

          if (hasParent) {
            parent = parent[0];
          }

          var origin = relativeToParent ? parent.position() : {
            x: 0,
            y: 0
          };

          if (val !== undefined) {
            // set one dimension
            _ele2.position(dim, val + origin[dim]);
          } else if (ppos !== undefined) {
            // set whole position
            _ele2.position({
              x: ppos.x + origin.x,
              y: ppos.y + origin.y
            });
          }
        }
      } else {
        // getting
        var pos = ele.position();

        var _parent = hasCompoundNodes ? ele.parent() : null;

        var _hasParent = _parent && _parent.length > 0;

        var _relativeToParent = _hasParent;

        if (_hasParent) {
          _parent = _parent[0];
        }

        var _origin = _relativeToParent ? _parent.position() : {
          x: 0,
          y: 0
        };

        ppos = {
          x: pos.x - _origin.x,
          y: pos.y - _origin.y
        };

        if (dim === undefined) {
          // then return the whole rendered position
          return ppos;
        } else {
          // then return the specified dimension
          return ppos[dim];
        }
      }
    } else if (!setting) {
      return undefined; // for empty collection case
    }

    return this; // chaining
  }
}; // aliases

fn$2.modelPosition = fn$2.point = fn$2.position;
fn$2.modelPositions = fn$2.points = fn$2.positions;
fn$2.renderedPoint = fn$2.renderedPosition;
fn$2.relativePoint = fn$2.relativePosition;
var position = elesfn$i;
var fn$3, elesfn$j;
fn$3 = elesfn$j = {};

elesfn$j.renderedBoundingBox = function (options) {
  var bb = this.boundingBox(options);
  var cy = this.cy();
  var zoom = cy.zoom();
  var pan = cy.pan();
  var x1 = bb.x1 * zoom + pan.x;
  var x2 = bb.x2 * zoom + pan.x;
  var y1 = bb.y1 * zoom + pan.y;
  var y2 = bb.y2 * zoom + pan.y;
  return {
    x1: x1,
    x2: x2,
    y1: y1,
    y2: y2,
    w: x2 - x1,
    h: y2 - y1
  };
};

elesfn$j.dirtyCompoundBoundsCache = function () {
  var cy = this.cy();

  if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
    return this;
  }

  this.forEachUp(function (ele) {
    if (ele.isParent()) {
      var _p = ele._private;
      _p.compoundBoundsClean = false;
      _p.bbCache = null;
      ele.emitAndNotify('bounds');
    }
  });
  return this;
};

elesfn$j.updateCompoundBounds = function () {
  var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var cy = this.cy(); // not possible to do on non-compound graphs or with the style disabled

  if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
    return this;
  } // save cycles when batching -- but bounds will be stale (or not exist yet)


  if (!force && cy.batching()) {
    return this;
  }

  function update(parent) {
    if (!parent.isParent()) {
      return;
    }

    var _p = parent._private;
    var children = parent.children();
    var includeLabels = parent.pstyle('compound-sizing-wrt-labels').value === 'include';
    var min$$1 = {
      width: {
        val: parent.pstyle('min-width').pfValue,
        left: parent.pstyle('min-width-bias-left'),
        right: parent.pstyle('min-width-bias-right')
      },
      height: {
        val: parent.pstyle('min-height').pfValue,
        top: parent.pstyle('min-height-bias-top'),
        bottom: parent.pstyle('min-height-bias-bottom')
      }
    };
    var bb = children.boundingBox({
      includeLabels: includeLabels,
      includeOverlays: false,
      // updating the compound bounds happens outside of the regular
      // cache cycle (i.e. before fired events)
      useCache: false
    });
    var pos = _p.position; // if children take up zero area then keep position and fall back on stylesheet w/h

    if (bb.w === 0 || bb.h === 0) {
      bb = {
        w: parent.pstyle('width').pfValue,
        h: parent.pstyle('height').pfValue
      };
      bb.x1 = pos.x - bb.w / 2;
      bb.x2 = pos.x + bb.w / 2;
      bb.y1 = pos.y - bb.h / 2;
      bb.y2 = pos.y + bb.h / 2;
    }

    function computeBiasValues(propDiff, propBias, propBiasComplement) {
      var biasDiff = 0;
      var biasComplementDiff = 0;
      var biasTotal = propBias + propBiasComplement;

      if (propDiff > 0 && biasTotal > 0) {
        biasDiff = propBias / biasTotal * propDiff;
        biasComplementDiff = propBiasComplement / biasTotal * propDiff;
      }

      return {
        biasDiff: biasDiff,
        biasComplementDiff: biasComplementDiff
      };
    }

    function computePaddingValues(width, height, paddingObject, relativeTo) {
      // Assuming percentage is number from 0 to 1
      if (paddingObject.units === '%') {
        switch (relativeTo) {
          case 'width':
            return width > 0 ? paddingObject.pfValue * width : 0;

          case 'height':
            return height > 0 ? paddingObject.pfValue * height : 0;

          case 'average':
            return width > 0 && height > 0 ? paddingObject.pfValue * (width + height) / 2 : 0;

          case 'min':
            return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * height : paddingObject.pfValue * width : 0;

          case 'max':
            return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * width : paddingObject.pfValue * height : 0;

          default:
            return 0;
        }
      } else if (paddingObject.units === 'px') {
        return paddingObject.pfValue;
      } else {
        return 0;
      }
    }

    var leftVal = min$$1.width.left.value;

    if (min$$1.width.left.units === 'px' && min$$1.width.val > 0) {
      leftVal = leftVal * 100 / min$$1.width.val;
    }

    var rightVal = min$$1.width.right.value;

    if (min$$1.width.right.units === 'px' && min$$1.width.val > 0) {
      rightVal = rightVal * 100 / min$$1.width.val;
    }

    var topVal = min$$1.height.top.value;

    if (min$$1.height.top.units === 'px' && min$$1.height.val > 0) {
      topVal = topVal * 100 / min$$1.height.val;
    }

    var bottomVal = min$$1.height.bottom.value;

    if (min$$1.height.bottom.units === 'px' && min$$1.height.val > 0) {
      bottomVal = bottomVal * 100 / min$$1.height.val;
    }

    var widthBiasDiffs = computeBiasValues(min$$1.width.val - bb.w, leftVal, rightVal);
    var diffLeft = widthBiasDiffs.biasDiff;
    var diffRight = widthBiasDiffs.biasComplementDiff;
    var heightBiasDiffs = computeBiasValues(min$$1.height.val - bb.h, topVal, bottomVal);
    var diffTop = heightBiasDiffs.biasDiff;
    var diffBottom = heightBiasDiffs.biasComplementDiff;
    _p.autoPadding = computePaddingValues(bb.w, bb.h, parent.pstyle('padding'), parent.pstyle('padding-relative-to').value);
    _p.autoWidth = Math.max(bb.w, min$$1.width.val);
    pos.x = (-diffLeft + bb.x1 + bb.x2 + diffRight) / 2;
    _p.autoHeight = Math.max(bb.h, min$$1.height.val);
    pos.y = (-diffTop + bb.y1 + bb.y2 + diffBottom) / 2;
  }

  for (var i = 0; i < this.length; i++) {
    var ele = this[i];
    var _p = ele._private;

    if (!_p.compoundBoundsClean) {
      update(ele);

      if (!cy.batching()) {
        _p.compoundBoundsClean = true;
      }
    }
  }

  return this;
};

var noninf = function noninf(x) {
  if (x === Infinity || x === -Infinity) {
    return 0;
  }

  return x;
};

var updateBounds = function updateBounds(b, x1, y1, x2, y2) {
  // don't update with zero area boxes
  if (x2 - x1 === 0 || y2 - y1 === 0) {
    return;
  } // don't update with null dim


  if (x1 == null || y1 == null || x2 == null || y2 == null) {
    return;
  }

  b.x1 = x1 < b.x1 ? x1 : b.x1;
  b.x2 = x2 > b.x2 ? x2 : b.x2;
  b.y1 = y1 < b.y1 ? y1 : b.y1;
  b.y2 = y2 > b.y2 ? y2 : b.y2;
  b.w = b.x2 - b.x1;
  b.h = b.y2 - b.y1;
};

var updateBoundsFromBox = function updateBoundsFromBox(b, b2) {
  return updateBounds(b, b2.x1, b2.y1, b2.x2, b2.y2);
};

var prefixedProperty = function prefixedProperty(obj, field, prefix) {
  return getPrefixedProperty(obj, field, prefix);
};

var updateBoundsFromArrow = function updateBoundsFromArrow(bounds, ele, prefix) {
  if (ele.cy().headless()) {
    return;
  }

  var _p = ele._private;
  var rstyle = _p.rstyle;
  var halfArW = rstyle.arrowWidth / 2;
  var arrowType = ele.pstyle(prefix + '-arrow-shape').value;
  var x;
  var y;

  if (arrowType !== 'none') {
    if (prefix === 'source') {
      x = rstyle.srcX;
      y = rstyle.srcY;
    } else if (prefix === 'target') {
      x = rstyle.tgtX;
      y = rstyle.tgtY;
    } else {
      x = rstyle.midX;
      y = rstyle.midY;
    } // always store the individual arrow bounds


    var bbs = _p.arrowBounds = _p.arrowBounds || {};
    var bb = bbs[prefix] = bbs[prefix] || {};
    bb.x1 = x - halfArW;
    bb.y1 = y - halfArW;
    bb.x2 = x + halfArW;
    bb.y2 = y + halfArW;
    bb.w = bb.x2 - bb.x1;
    bb.h = bb.y2 - bb.y1;
    expandBoundingBox(bb, 1);
    updateBounds(bounds, bb.x1, bb.y1, bb.x2, bb.y2);
  }
};

var updateBoundsFromLabel = function updateBoundsFromLabel(bounds, ele, prefix) {
  if (ele.cy().headless()) {
    return;
  }

  var prefixDash;

  if (prefix) {
    prefixDash = prefix + '-';
  } else {
    prefixDash = '';
  }

  var _p = ele._private;
  var rstyle = _p.rstyle;
  var label = ele.pstyle(prefixDash + 'label').strValue;

  if (label) {
    var halign = ele.pstyle('text-halign');
    var valign = ele.pstyle('text-valign');
    var labelWidth = prefixedProperty(rstyle, 'labelWidth', prefix);
    var labelHeight = prefixedProperty(rstyle, 'labelHeight', prefix);
    var labelX = prefixedProperty(rstyle, 'labelX', prefix);
    var labelY = prefixedProperty(rstyle, 'labelY', prefix);
    var marginX = ele.pstyle(prefixDash + 'text-margin-x').pfValue;
    var marginY = ele.pstyle(prefixDash + 'text-margin-y').pfValue;
    var isEdge = ele.isEdge();
    var rotation = ele.pstyle(prefixDash + 'text-rotation');
    var outlineWidth = ele.pstyle('text-outline-width').pfValue;
    var borderWidth = ele.pstyle('text-border-width').pfValue;
    var halfBorderWidth = borderWidth / 2;
    var padding = ele.pstyle('text-background-padding').pfValue;
    var lh = labelHeight + 2 * padding;
    var lw = labelWidth + 2 * padding;
    var lw_2 = lw / 2;
    var lh_2 = lh / 2;
    var lx1, lx2, ly1, ly2;

    if (isEdge) {
      lx1 = labelX - lw_2;
      lx2 = labelX + lw_2;
      ly1 = labelY - lh_2;
      ly2 = labelY + lh_2;
    } else {
      switch (halign.value) {
        case 'left':
          lx1 = labelX - lw;
          lx2 = labelX;
          break;

        case 'center':
          lx1 = labelX - lw_2;
          lx2 = labelX + lw_2;
          break;

        case 'right':
          lx1 = labelX;
          lx2 = labelX + lw;
          break;
      }

      switch (valign.value) {
        case 'top':
          ly1 = labelY - lh;
          ly2 = labelY;
          break;

        case 'center':
          ly1 = labelY - lh_2;
          ly2 = labelY + lh_2;
          break;

        case 'bottom':
          ly1 = labelY;
          ly2 = labelY + lh;
          break;
      }
    } // shift by margin and expand by outline and border


    lx1 += marginX - Math.max(outlineWidth, halfBorderWidth);
    lx2 += marginX + Math.max(outlineWidth, halfBorderWidth);
    ly1 += marginY - Math.max(outlineWidth, halfBorderWidth);
    ly2 += marginY + Math.max(outlineWidth, halfBorderWidth); // always store the unrotated label bounds separately

    var bbPrefix = prefix || 'main';
    var bbs = _p.labelBounds;
    var bb = bbs[bbPrefix] = bbs[bbPrefix] || {};
    bb.x1 = lx1;
    bb.y1 = ly1;
    bb.x2 = lx2;
    bb.y2 = ly2;
    bb.w = lx2 - lx1;
    bb.h = ly2 - ly1;
    expandBoundingBox(bb, 1); // expand to work around browser dimension inaccuracies

    var isAutorotate = isEdge && rotation.strValue === 'autorotate';
    var isPfValue = rotation.pfValue != null && rotation.pfValue !== 0;

    if (isAutorotate || isPfValue) {
      var theta = isAutorotate ? prefixedProperty(_p.rstyle, 'labelAngle', prefix) : rotation.pfValue;
      var cos = Math.cos(theta);
      var sin = Math.sin(theta); // rotation point (default value for center-center)

      var xo = (lx1 + lx2) / 2;
      var yo = (ly1 + ly2) / 2;

      if (!isEdge) {
        switch (halign.value) {
          case 'left':
            xo = lx2;
            break;

          case 'right':
            xo = lx1;
            break;
        }

        switch (valign.value) {
          case 'top':
            yo = ly2;
            break;

          case 'bottom':
            yo = ly1;
            break;
        }
      }

      var rotate = function rotate(x, y) {
        x = x - xo;
        y = y - yo;
        return {
          x: x * cos - y * sin + xo,
          y: x * sin + y * cos + yo
        };
      };

      var px1y1 = rotate(lx1, ly1);
      var px1y2 = rotate(lx1, ly2);
      var px2y1 = rotate(lx2, ly1);
      var px2y2 = rotate(lx2, ly2);
      lx1 = Math.min(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
      lx2 = Math.max(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
      ly1 = Math.min(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
      ly2 = Math.max(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
    }

    updateBounds(bounds, lx1, ly1, lx2, ly2);
    updateBounds(_p.labelBounds.all, lx1, ly1, lx2, ly2);
  }

  return bounds;
}; // get the bounding box of the elements (in raw model position)


var boundingBoxImpl = function boundingBoxImpl(ele, options) {
  var cy = ele._private.cy;
  var styleEnabled = cy.styleEnabled();
  var headless = cy.headless();
  var bounds = makeBoundingBox();
  var _p = ele._private;
  var display = styleEnabled ? ele.pstyle('display').value : 'element';
  var isNode = ele.isNode();
  var isEdge = ele.isEdge();
  var ex1, ex2, ey1, ey2; // extrema of body / lines

  var x, y; // node pos

  var displayed = display !== 'none';
  var rstyle = _p.rstyle;
  var manualExpansion = isNode && styleEnabled ? ele.pstyle('bounds-expansion').pfValue : 0;

  if (displayed) {
    var overlayOpacity = 0;
    var overlayPadding = 0;

    if (styleEnabled && options.includeOverlays) {
      overlayOpacity = ele.pstyle('overlay-opacity').value;

      if (overlayOpacity !== 0) {
        overlayPadding = ele.pstyle('overlay-padding').value;
      }
    }

    var w = 0;
    var wHalf = 0;

    if (styleEnabled) {
      w = ele.pstyle('width').pfValue;
      wHalf = w / 2;
    }

    if (isNode && options.includeNodes) {
      var pos = ele.position();
      x = pos.x;
      y = pos.y;

      var _w = ele.outerWidth();

      var halfW = _w / 2;
      var h = ele.outerHeight();
      var halfH = h / 2; // handle node dimensions
      /////////////////////////

      ex1 = x - halfW;
      ex2 = x + halfW;
      ey1 = y - halfH;
      ey2 = y + halfH;
      updateBounds(bounds, ex1, ey1, ex2, ey2);
    } else if (isEdge && options.includeEdges) {
      // handle edge dimensions (rough box estimate)
      //////////////////////////////////////////////
      if (styleEnabled && !headless) {
        ex1 = Math.min(rstyle.srcX, rstyle.midX, rstyle.tgtX);
        ex2 = Math.max(rstyle.srcX, rstyle.midX, rstyle.tgtX);
        ey1 = Math.min(rstyle.srcY, rstyle.midY, rstyle.tgtY);
        ey2 = Math.max(rstyle.srcY, rstyle.midY, rstyle.tgtY); // take into account edge width

        ex1 -= wHalf;
        ex2 += wHalf;
        ey1 -= wHalf;
        ey2 += wHalf;
        updateBounds(bounds, ex1, ey1, ex2, ey2);
      } // precise haystacks
      ////////////////////


      if (styleEnabled && !headless && ele.pstyle('curve-style').strValue === 'haystack') {
        var hpts = rstyle.haystackPts || [];
        ex1 = hpts[0].x;
        ey1 = hpts[0].y;
        ex2 = hpts[1].x;
        ey2 = hpts[1].y;

        if (ex1 > ex2) {
          var temp = ex1;
          ex1 = ex2;
          ex2 = temp;
        }

        if (ey1 > ey2) {
          var _temp = ey1;
          ey1 = ey2;
          ey2 = _temp;
        }

        updateBounds(bounds, ex1 - wHalf, ey1 - wHalf, ex2 + wHalf, ey2 + wHalf); // handle points along edge
        ///////////////////////////
      } else {
        var pts = rstyle.bezierPts || rstyle.linePts || [];

        for (var j = 0; j < pts.length; j++) {
          var pt = pts[j];
          ex1 = pt.x - wHalf;
          ex2 = pt.x + wHalf;
          ey1 = pt.y - wHalf;
          ey2 = pt.y + wHalf;
          updateBounds(bounds, ex1, ey1, ex2, ey2);
        } // fallback on source and target positions
        //////////////////////////////////////////


        if (pts.length === 0) {
          var n1 = ele.source();
          var n1pos = n1.position();
          var n2 = ele.target();
          var n2pos = n2.position();
          ex1 = n1pos.x;
          ex2 = n2pos.x;
          ey1 = n1pos.y;
          ey2 = n2pos.y;

          if (ex1 > ex2) {
            var _temp2 = ex1;
            ex1 = ex2;
            ex2 = _temp2;
          }

          if (ey1 > ey2) {
            var _temp3 = ey1;
            ey1 = ey2;
            ey2 = _temp3;
          } // take into account edge width


          ex1 -= wHalf;
          ex2 += wHalf;
          ey1 -= wHalf;
          ey2 += wHalf;
          updateBounds(bounds, ex1, ey1, ex2, ey2);
        }
      }
    } // edges
    // handle edge arrow size
    /////////////////////////


    if (styleEnabled && options.includeEdges && isEdge) {
      updateBoundsFromArrow(bounds, ele, 'mid-source', options);
      updateBoundsFromArrow(bounds, ele, 'mid-target', options);
      updateBoundsFromArrow(bounds, ele, 'source', options);
      updateBoundsFromArrow(bounds, ele, 'target', options);
    } // ghost
    ////////


    if (styleEnabled) {
      var ghost = ele.pstyle('ghost').value === 'yes';

      if (ghost) {
        var gx = ele.pstyle('ghost-offset-x').pfValue;
        var gy = ele.pstyle('ghost-offset-y').pfValue;
        updateBounds(bounds, bounds.x1 + gx, bounds.y1 + gy, bounds.x2 + gx, bounds.y2 + gy);
      }
    } // always store the body bounds separately from the labels


    var bbBody = _p.bodyBounds = _p.bodyBounds || {};
    assignBoundingBox(bbBody, bounds);
    expandBoundingBox(bbBody, manualExpansion);
    expandBoundingBox(bbBody, 1); // expand to work around browser dimension inaccuracies
    // overlay
    //////////

    if (styleEnabled) {
      ex1 = bounds.x1;
      ex2 = bounds.x2;
      ey1 = bounds.y1;
      ey2 = bounds.y2;
      updateBounds(bounds, ex1 - overlayPadding, ey1 - overlayPadding, ex2 + overlayPadding, ey2 + overlayPadding);
    } // always store the body bounds separately from the labels


    var bbOverlay = _p.overlayBounds = _p.overlayBounds || {};
    assignBoundingBox(bbOverlay, bounds);
    expandBoundingBox(bbOverlay, manualExpansion);
    expandBoundingBox(bbOverlay, 1); // expand to work around browser dimension inaccuracies
    // handle label dimensions
    //////////////////////////

    var bbLabels = _p.labelBounds = _p.labelBounds || {};

    if (bbLabels.all != null) {
      clearBoundingBox(bbLabels.all);
    } else {
      bbLabels.all = makeBoundingBox();
    }

    if (styleEnabled && options.includeLabels) {
      updateBoundsFromLabel(bounds, ele, null, options);

      if (isEdge) {
        updateBoundsFromLabel(bounds, ele, 'source', options);
        updateBoundsFromLabel(bounds, ele, 'target', options);
      }
    } // style enabled for labels

  } // if displayed


  bounds.x1 = noninf(bounds.x1);
  bounds.y1 = noninf(bounds.y1);
  bounds.x2 = noninf(bounds.x2);
  bounds.y2 = noninf(bounds.y2);
  bounds.w = noninf(bounds.x2 - bounds.x1);
  bounds.h = noninf(bounds.y2 - bounds.y1);

  if (bounds.w > 0 && bounds.h > 0 && displayed) {
    expandBoundingBox(bounds, manualExpansion); // expand bounds by 1 because antialiasing can increase the visual/effective size by 1 on all sides

    expandBoundingBox(bounds, 1);
  }

  return bounds;
};

var getKey = function getKey(opts) {
  var i = 0;

  var tf = function tf(val) {
    return (val ? 1 : 0) << i++;
  };

  var key = 0;
  key += tf(opts.incudeNodes);
  key += tf(opts.includeEdges);
  key += tf(opts.includeLabels);
  key += tf(opts.includeOverlays);
  return key;
};

var getBoundingBoxPosKey = function getBoundingBoxPosKey(ele) {
  if (ele.isEdge()) {
    var p1 = ele.source().position();
    var p2 = ele.target().position();

    var r = function r(x) {
      return Math.round(x);
    };

    return hashIntsArray([r(p1.x), r(p1.y), r(p2.x), r(p2.y)]);
  } else {
    return 0;
  }
};

var cachedBoundingBoxImpl = function cachedBoundingBoxImpl(ele, opts) {
  var _p = ele._private;
  var bb;
  var key = opts == null ? defBbOptsKey : getKey(opts);
  var usingDefOpts = key === defBbOptsKey;
  var currPosKey = getBoundingBoxPosKey(ele);
  var isPosKeySame = _p.bbCachePosKey === currPosKey;
  var useCache = opts.useCache && isPosKeySame;
  var needRecalc = !useCache || _p.bbCache == null;

  if (needRecalc) {
    if (!isPosKeySame) {
      ele.recalculateRenderedStyle(false);
    }

    bb = boundingBoxImpl(ele, defBbOpts);
    _p.bbCache = bb;
    _p.bbCacheShift.x = _p.bbCacheShift.y = 0;
    _p.bbCachePosKey = currPosKey;
  } else {
    bb = _p.bbCache;
  }

  if (!needRecalc && (_p.bbCacheShift.x !== 0 || _p.bbCacheShift.y !== 0)) {
    var shift = assignShiftToBoundingBox;
    var delta = _p.bbCacheShift;

    var safeShift = function safeShift(bb, delta) {
      if (bb != null) {
        shift(bb, delta);
      }
    };

    shift(bb, delta);
    var bodyBounds = _p.bodyBounds,
        overlayBounds = _p.overlayBounds,
        labelBounds = _p.labelBounds,
        arrowBounds = _p.arrowBounds;
    safeShift(bodyBounds, delta);
    safeShift(overlayBounds, delta);

    if (arrowBounds != null) {
      safeShift(arrowBounds.source, delta);
      safeShift(arrowBounds.target, delta);
      safeShift(arrowBounds['mid-source'], delta);
      safeShift(arrowBounds['mid-target'], delta);
    }

    if (labelBounds != null) {
      safeShift(labelBounds.main, delta);
      safeShift(labelBounds.all, delta);
      safeShift(labelBounds.source, delta);
      safeShift(labelBounds.target, delta);
    }
  } // always reset the shift, because we either applied the shift or cleared it by doing a fresh recalc


  _p.bbCacheShift.x = _p.bbCacheShift.y = 0; // not using def opts => need to build up bb from combination of sub bbs

  if (!usingDefOpts) {
    var isNode = ele.isNode();
    bb = makeBoundingBox();

    if (opts.includeNodes && isNode || opts.includeEdges && !isNode) {
      if (opts.includeOverlays) {
        updateBoundsFromBox(bb, _p.overlayBounds);
      } else {
        updateBoundsFromBox(bb, _p.bodyBounds);
      }
    }

    if (opts.includeLabels) {
      updateBoundsFromBox(bb, _p.labelBounds.all);
    }

    bb.w = bb.x2 - bb.x1;
    bb.h = bb.y2 - bb.y1;
  }

  return bb;
};

var defBbOpts = {
  includeNodes: true,
  includeEdges: true,
  includeLabels: true,
  includeOverlays: true,
  useCache: true
};
var defBbOptsKey = getKey(defBbOpts);
var filledBbOpts = defaults(defBbOpts);

elesfn$j.boundingBox = function (options) {
  // the main usecase is ele.boundingBox() for a single element with no/def options
  // specified s.t. the cache is used, so check for this case to make it faster by
  // avoiding the overhead of the rest of the function
  if (this.length === 1 && this[0]._private.bbCache != null && (options === undefined || options.useCache === undefined || options.useCache === true)) {
    if (options === undefined) {
      options = defBbOpts;
    } else {
      options = filledBbOpts(options);
    }

    return cachedBoundingBoxImpl(this[0], options);
  }

  var bounds = makeBoundingBox();
  options = options || defBbOpts;
  var opts = filledBbOpts(options);
  var eles = this;
  var cy = eles.cy();
  var styleEnabled = cy.styleEnabled();

  if (styleEnabled) {
    for (var i = 0; i < eles.length; i++) {
      var ele = eles[i];
      var _p = ele._private;
      var currPosKey = getBoundingBoxPosKey(ele);
      var isPosKeySame = _p.bbCachePosKey === currPosKey;
      var useCache = opts.useCache && isPosKeySame;
      ele.recalculateRenderedStyle(useCache);
    }
  }

  this.updateCompoundBounds();

  for (var _i = 0; _i < eles.length; _i++) {
    var _ele = eles[_i];
    updateBoundsFromBox(bounds, cachedBoundingBoxImpl(_ele, opts));
  }

  bounds.x1 = noninf(bounds.x1);
  bounds.y1 = noninf(bounds.y1);
  bounds.x2 = noninf(bounds.x2);
  bounds.y2 = noninf(bounds.y2);
  bounds.w = noninf(bounds.x2 - bounds.x1);
  bounds.h = noninf(bounds.y2 - bounds.y1);
  return bounds;
};

elesfn$j.dirtyBoundingBoxCache = function () {
  for (var i = 0; i < this.length; i++) {
    var _p = this[i]._private;
    _p.bbCache = null;
    _p.bbCacheShift.x = _p.bbCacheShift.y = 0;
    _p.bbCachePosKey = null;
  }

  this.emitAndNotify('bounds');
  return this;
};

elesfn$j.shiftCachedBoundingBox = function (delta) {
  for (var i = 0; i < this.length; i++) {
    var ele = this[i];
    var _p = ele._private;
    var bb = _p.bbCache;

    if (bb != null) {
      _p.bbCacheShift.x += delta.x;
      _p.bbCacheShift.y += delta.y;
    }
  }

  this.emitAndNotify('bounds');
  return this;
}; // private helper to get bounding box for custom node positions
// - good for perf in certain cases but currently requires dirtying the rendered style
// - would be better to not modify the nodes but the nodes are read directly everywhere in the renderer...
// - try to use for only things like discrete layouts where the node position would change anyway


elesfn$j.boundingBoxAt = function (fn$$1) {
  var nodes = this.nodes();
  var cy = this.cy();
  var hasCompoundNodes = cy.hasCompoundNodes();

  if (hasCompoundNodes) {
    nodes = nodes.filter(function (node) {
      return !node.isParent();
    });
  }

  if (plainObject(fn$$1)) {
    var obj = fn$$1;

    fn$$1 = function fn$$1() {
      return obj;
    };
  }

  var storeOldPos = function storeOldPos(node, i) {
    return node._private.bbAtOldPos = fn$$1(node, i);
  };

  var getOldPos = function getOldPos(node) {
    return node._private.bbAtOldPos;
  };

  cy.startBatch();
  nodes.forEach(storeOldPos).silentPositions(fn$$1);

  if (hasCompoundNodes) {
    this.updateCompoundBounds(true); // force update b/c we're inside a batch cycle
  }

  var bb = this.boundingBox({
    useCache: false
  });
  nodes.silentPositions(getOldPos);
  cy.endBatch();
  return bb;
};

fn$3.boundingbox = fn$3.bb = fn$3.boundingBox;
fn$3.renderedBoundingbox = fn$3.renderedBoundingBox;
var bounds = elesfn$j;
var fn$4, elesfn$k;
fn$4 = elesfn$k = {};

var defineDimFns = function defineDimFns(opts) {
  opts.uppercaseName = capitalize(opts.name);
  opts.autoName = 'auto' + opts.uppercaseName;
  opts.labelName = 'label' + opts.uppercaseName;
  opts.outerName = 'outer' + opts.uppercaseName;
  opts.uppercaseOuterName = capitalize(opts.outerName);

  fn$4[opts.name] = function dimImpl() {
    var ele = this[0];
    var _p = ele._private;
    var cy = _p.cy;
    var styleEnabled = cy._private.styleEnabled;

    if (ele) {
      if (styleEnabled) {
        if (ele.isParent()) {
          ele.updateCompoundBounds();
          return _p[opts.autoName] || 0;
        }

        var d = ele.pstyle(opts.name);

        switch (d.strValue) {
          case 'label':
            ele.recalculateRenderedStyle();
            return _p.rstyle[opts.labelName] || 0;

          default:
            return d.pfValue;
        }
      } else {
        return 1;
      }
    }
  };

  fn$4['outer' + opts.uppercaseName] = function outerDimImpl() {
    var ele = this[0];
    var _p = ele._private;
    var cy = _p.cy;
    var styleEnabled = cy._private.styleEnabled;

    if (ele) {
      if (styleEnabled) {
        var dim = ele[opts.name]();
        var border = ele.pstyle('border-width').pfValue; // n.b. 1/2 each side

        var padding = 2 * ele.padding();
        return dim + border + padding;
      } else {
        return 1;
      }
    }
  };

  fn$4['rendered' + opts.uppercaseName] = function renderedDimImpl() {
    var ele = this[0];

    if (ele) {
      var d = ele[opts.name]();
      return d * this.cy().zoom();
    }
  };

  fn$4['rendered' + opts.uppercaseOuterName] = function renderedOuterDimImpl() {
    var ele = this[0];

    if (ele) {
      var od = ele[opts.outerName]();
      return od * this.cy().zoom();
    }
  };
};

defineDimFns({
  name: 'width'
});
defineDimFns({
  name: 'height'
});

elesfn$k.padding = function () {
  var ele = this[0];
  var _p = ele._private;

  if (ele.isParent()) {
    ele.updateCompoundBounds();

    if (_p.autoPadding !== undefined) {
      return _p.autoPadding;
    } else {
      return ele.pstyle('padding').pfValue;
    }
  } else {
    return ele.pstyle('padding').pfValue;
  }
};

var widthHeight = elesfn$k;

var ifEdge = function ifEdge(ele, getValue) {
  if (ele.isEdge()) {
    return getValue(ele);
  }
};

var ifEdgeRenderedPosition = function ifEdgeRenderedPosition(ele, getPoint) {
  if (ele.isEdge()) {
    var cy = ele.cy();
    return modelToRenderedPosition(getPoint(ele), cy.zoom(), cy.pan());
  }
};

var ifEdgeRenderedPositions = function ifEdgeRenderedPositions(ele, getPoints) {
  if (ele.isEdge()) {
    var cy = ele.cy();
    var pan = cy.pan();
    var zoom = cy.zoom();
    return getPoints(ele).map(function (p) {
      return modelToRenderedPosition(p, zoom, pan);
    });
  }
};

var controlPoints = function controlPoints(ele) {
  return ele.renderer().getControlPoints(ele);
};

var segmentPoints = function segmentPoints(ele) {
  return ele.renderer().getSegmentPoints(ele);
};

var sourceEndpoint = function sourceEndpoint(ele) {
  return ele.renderer().getSourceEndpoint(ele);
};

var targetEndpoint = function targetEndpoint(ele) {
  return ele.renderer().getTargetEndpoint(ele);
};

var midpoint = function midpoint(ele) {
  return ele.renderer().getEdgeMidpoint(ele);
};

var pts = {
  controlPoints: {
    get: controlPoints,
    mult: true
  },
  segmentPoints: {
    get: segmentPoints,
    mult: true
  },
  sourceEndpoint: {
    get: sourceEndpoint
  },
  targetEndpoint: {
    get: targetEndpoint
  },
  midpoint: {
    get: midpoint
  }
};

var renderedName = function renderedName(name) {
  return 'rendered' + name[0].toUpperCase() + name.substr(1);
};

var edgePoints = Object.keys(pts).reduce(function (obj, name) {
  var spec = pts[name];
  var rName = renderedName(name);

  obj[name] = function () {
    return ifEdge(this, spec.get);
  };

  if (spec.mult) {
    obj[rName] = function () {
      return ifEdgeRenderedPositions(this, spec.get);
    };
  } else {
    obj[rName] = function () {
      return ifEdgeRenderedPosition(this, spec.get);
    };
  }

  return obj;
}, {});
var dimensions = extend({}, position, bounds, widthHeight, edgePoints);
/*!
Event object based on jQuery events, MIT license

https://jquery.org/license/
https://tldrlegal.com/license/mit-license
https://github.com/jquery/jquery/blob/master/src/event.js
*/

var Event = function Event(src, props) {
  this.recycle(src, props);
};

function returnFalse() {
  return false;
}

function returnTrue() {
  return true;
} // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html


Event.prototype = {
  instanceString: function instanceString() {
    return 'event';
  },
  recycle: function recycle(src, props) {
    this.isImmediatePropagationStopped = this.isPropagationStopped = this.isDefaultPrevented = returnFalse;

    if (src != null && src.preventDefault) {
      // Browser Event object
      this.type = src.type; // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.

      this.isDefaultPrevented = src.defaultPrevented ? returnTrue : returnFalse;
    } else if (src != null && src.type) {
      // Plain object containing all event details
      props = src;
    } else {
      // Event string
      this.type = src;
    } // Put explicitly provided properties onto the event object


    if (props != null) {
      // more efficient to manually copy fields we use
      this.originalEvent = props.originalEvent;
      this.type = props.type != null ? props.type : this.type;
      this.cy = props.cy;
      this.target = props.target;
      this.position = props.position;
      this.renderedPosition = props.renderedPosition;
      this.namespace = props.namespace;
      this.layout = props.layout;
    }

    if (this.cy != null && this.position != null && this.renderedPosition == null) {
      // create a rendered position based on the passed position
      var pos = this.position;
      var zoom = this.cy.zoom();
      var pan = this.cy.pan();
      this.renderedPosition = {
        x: pos.x * zoom + pan.x,
        y: pos.y * zoom + pan.y
      };
    } // Create a timestamp if incoming event doesn't have one


    this.timeStamp = src && src.timeStamp || Date.now();
  },
  preventDefault: function preventDefault() {
    this.isDefaultPrevented = returnTrue;
    var e = this.originalEvent;

    if (!e) {
      return;
    } // if preventDefault exists run it on the original event


    if (e.preventDefault) {
      e.preventDefault();
    }
  },
  stopPropagation: function stopPropagation() {
    this.isPropagationStopped = returnTrue;
    var e = this.originalEvent;

    if (!e) {
      return;
    } // if stopPropagation exists run it on the original event


    if (e.stopPropagation) {
      e.stopPropagation();
    }
  },
  stopImmediatePropagation: function stopImmediatePropagation() {
    this.isImmediatePropagationStopped = returnTrue;
    this.stopPropagation();
  },
  isDefaultPrevented: returnFalse,
  isPropagationStopped: returnFalse,
  isImmediatePropagationStopped: returnFalse
};
var eventRegex = /^([^.]+)(\.(?:[^.]+))?$/; // regex for matching event strings (e.g. "click.namespace")

var universalNamespace = '.*'; // matches as if no namespace specified and prevents users from unbinding accidentally

var defaults$8 = {
  qualifierCompare: function qualifierCompare(q1, q2) {
    return q1 === q2;
  },
  eventMatches: function eventMatches()
  /*context, listener, eventObj*/
  {
    return true;
  },
  addEventFields: function addEventFields()
  /*context, evt*/
  {},
  callbackContext: function callbackContext(context
  /*, listener, eventObj*/
  ) {
    return context;
  },
  beforeEmit: function beforeEmit()
  /* context, listener, eventObj */
  {},
  afterEmit: function afterEmit()
  /* context, listener, eventObj */
  {},
  bubble: function bubble()
  /*context*/
  {
    return false;
  },
  parent: function parent()
  /*context*/
  {
    return null;
  },
  context: null
};
var defaultsKeys = Object.keys(defaults$8);

function Emitter(opts, context) {
  // micro-optimisation vs Object.assign() -- reduces Element instantiation time
  for (var i = 0; i < defaultsKeys.length; i++) {
    var key = defaultsKeys[i];
    this[key] = opts[key] || defaults$8[key];
  }

  this.context = context || this.context;
  this.listeners = [];
  this.emitting = 0;
}

var p = Emitter.prototype;

var forEachEvent = function forEachEvent(self, handler, events, qualifier, callback, conf, confOverrides) {
  if (fn(qualifier)) {
    callback = qualifier;
    qualifier = null;
  }

  if (confOverrides) {
    if (conf == null) {
      conf = confOverrides;
    } else {
      conf = extend({}, conf, confOverrides);
    }
  }

  var eventList = array(events) ? events : events.split(/\s+/);

  for (var i = 0; i < eventList.length; i++) {
    var evt = eventList[i];

    if (emptyString(evt)) {
      continue;
    }

    var match = evt.match(eventRegex); // type[.namespace]

    if (match) {
      var type = match[1];
      var namespace = match[2] ? match[2] : null;
      var ret = handler(self, evt, type, namespace, qualifier, callback, conf);

      if (ret === false) {
        break;
      } // allow exiting early

    }
  }
};

var makeEventObj = function makeEventObj(self, obj) {
  self.addEventFields(self.context, obj);
  return new Event(obj.type, obj);
};

var forEachEventObj = function forEachEventObj(self, handler, events) {
  if (event(events)) {
    handler(self, events);
    return;
  } else if (plainObject(events)) {
    handler(self, makeEventObj(self, events));
    return;
  }

  var eventList = array(events) ? events : events.split(/\s+/);

  for (var i = 0; i < eventList.length; i++) {
    var evt = eventList[i];

    if (emptyString(evt)) {
      continue;
    }

    var match = evt.match(eventRegex); // type[.namespace]

    if (match) {
      var type = match[1];
      var namespace = match[2] ? match[2] : null;
      var eventObj = makeEventObj(self, {
        type: type,
        namespace: namespace,
        target: self.context
      });
      handler(self, eventObj);
    }
  }
};

p.on = p.addListener = function (events, qualifier, callback, conf, confOverrides) {
  forEachEvent(this, function (self, event$$1, type, namespace, qualifier, callback, conf) {
    if (fn(callback)) {
      self.listeners.push({
        event: event$$1,
        // full event string
        callback: callback,
        // callback to run
        type: type,
        // the event type (e.g. 'click')
        namespace: namespace,
        // the event namespace (e.g. ".foo")
        qualifier: qualifier,
        // a restriction on whether to match this emitter
        conf: conf // additional configuration

      });
    }
  }, events, qualifier, callback, conf, confOverrides);
  return this;
};

p.one = function (events, qualifier, callback, conf) {
  return this.on(events, qualifier, callback, conf, {
    one: true
  });
};

p.removeListener = p.off = function (events, qualifier, callback, conf) {
  var _this = this;

  if (this.emitting !== 0) {
    this.listeners = copyArray(this.listeners);
  }

  var listeners = this.listeners;

  var _loop = function _loop(i) {
    var listener = listeners[i];
    forEachEvent(_this, function (self, event$$1, type, namespace, qualifier, callback
    /*, conf*/
    ) {
      if (listener.type === type && (!namespace || listener.namespace === namespace) && (!qualifier || self.qualifierCompare(listener.qualifier, qualifier)) && (!callback || listener.callback === callback)) {
        listeners.splice(i, 1);
        return false;
      }
    }, events, qualifier, callback, conf);
  };

  for (var i = listeners.length - 1; i >= 0; i--) {
    _loop(i);
  }

  return this;
};

p.emit = p.trigger = function (events, extraParams, manualCallback) {
  var listeners = this.listeners;
  var numListenersBeforeEmit = listeners.length;
  this.emitting++;

  if (!array(extraParams)) {
    extraParams = [extraParams];
  }

  forEachEventObj(this, function (self, eventObj) {
    if (manualCallback != null) {
      listeners = [{
        event: eventObj.event,
        type: eventObj.type,
        namespace: eventObj.namespace,
        callback: manualCallback
      }];
      numListenersBeforeEmit = listeners.length;
    }

    var _loop2 = function _loop2(i) {
      var listener = listeners[i];

      if (listener.type === eventObj.type && (!listener.namespace || listener.namespace === eventObj.namespace || listener.namespace === universalNamespace) && self.eventMatches(self.context, listener, eventObj)) {
        var args = [eventObj];

        if (extraParams != null) {
          push(args, extraParams);
        }

        self.beforeEmit(self.context, listener, eventObj);

        if (listener.conf && listener.conf.one) {
          self.listeners = self.listeners.filter(function (l) {
            return l !== listener;
          });
        }

        var context = self.callbackContext(self.context, listener, eventObj);
        var ret = listener.callback.apply(context, args);
        self.afterEmit(self.context, listener, eventObj);

        if (ret === false) {
          eventObj.stopPropagation();
          eventObj.preventDefault();
        }
      } // if listener matches

    };

    for (var i = 0; i < numListenersBeforeEmit; i++) {
      _loop2(i);
    } // for listener


    if (self.bubble(self.context) && !eventObj.isPropagationStopped()) {
      self.parent(self.context).emit(eventObj, extraParams);
    }
  }, events);
  this.emitting--;
  return this;
};

var emitterOptions = {
  qualifierCompare: function qualifierCompare(selector1, selector2) {
    if (selector1 == null || selector2 == null) {
      return selector1 == null && selector2 == null;
    } else {
      return selector1.sameText(selector2);
    }
  },
  eventMatches: function eventMatches(ele, listener, eventObj) {
    var selector = listener.qualifier;

    if (selector != null) {
      return ele !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);
    }

    return true;
  },
  addEventFields: function addEventFields(ele, evt) {
    evt.cy = ele.cy();
    evt.target = ele;
  },
  callbackContext: function callbackContext(ele, listener, eventObj) {
    return listener.qualifier != null ? eventObj.target : ele;
  },
  beforeEmit: function beforeEmit(context, listener
  /*, eventObj*/
  ) {
    if (listener.conf && listener.conf.once) {
      listener.conf.onceCollection.removeListener(listener.event, listener.qualifier, listener.callback);
    }
  },
  bubble: function bubble() {
    return true;
  },
  parent: function parent(ele) {
    return ele.isChild() ? ele.parent() : ele.cy();
  }
};

var argSelector = function argSelector(arg) {
  if (string(arg)) {
    return new Selector(arg);
  } else {
    return arg;
  }
};

var elesfn$l = {
  createEmitter: function createEmitter() {
    for (var i = 0; i < this.length; i++) {
      var ele = this[i];
      var _p = ele._private;

      if (!_p.emitter) {
        _p.emitter = new Emitter(emitterOptions, ele);
      }
    }

    return this;
  },
  emitter: function emitter() {
    return this._private.emitter;
  },
  on: function on(events, selector, callback) {
    var argSel = argSelector(selector);

    for (var i = 0; i < this.length; i++) {
      var ele = this[i];
      ele.emitter().on(events, argSel, callback);
    }

    return this;
  },
  removeListener: function removeListener(events, selector, callback) {
    var argSel = argSelector(selector);

    for (var i = 0; i < this.length; i++) {
      var ele = this[i];
      ele.emitter().removeListener(events, argSel, callback);
    }

    return this;
  },
  one: function one(events, selector, callback) {
    var argSel = argSelector(selector);

    for (var i = 0; i < this.length; i++) {
      var ele = this[i];
      ele.emitter().one(events, argSel, callback);
    }

    return this;
  },
  once: function once(events, selector, callback) {
    var argSel = argSelector(selector);

    for (var i = 0; i < this.length; i++) {
      var ele = this[i];
      ele.emitter().on(events, argSel, callback, {
        once: true,
        onceCollection: this
      });
    }
  },
  emit: function emit(events, extraParams) {
    for (var i = 0; i < this.length; i++) {
      var ele = this[i];
      ele.emitter().emit(events, extraParams);
    }

    return this;
  },
  emitAndNotify: function emitAndNotify(event$$1, extraParams) {
    // for internal use only
    if (this.length === 0) {
      return;
    } // empty collections don't need to notify anything
    // notify renderer


    this.cy().notify(event$$1, this);
    this.emit(event$$1, extraParams);
    return this;
  }
};
define$3.eventAliasesOn(elesfn$l);
var elesfn$m = {
  nodes: function nodes(selector) {
    return this.filter(function (ele) {
      return ele.isNode();
    }).filter(selector);
  },
  edges: function edges(selector) {
    return this.filter(function (ele) {
      return ele.isEdge();
    }).filter(selector);
  },
  // internal helper to get nodes and edges as separate collections with single iteration over elements
  byGroup: function byGroup() {
    var nodes = this.spawn();
    var edges = this.spawn();

    for (var i = 0; i < this.length; i++) {
      var ele = this[i];

      if (ele.isNode()) {
        nodes.merge(ele);
      } else {
        edges.merge(ele);
      }
    }

    return {
      nodes: nodes,
      edges: edges
    };
  },
  filter: function filter(_filter, thisArg) {
    if (_filter === undefined) {
      // check this first b/c it's the most common/performant case
      return this;
    } else if (string(_filter) || elementOrCollection(_filter)) {
      return new Selector(_filter).filter(this);
    } else if (fn(_filter)) {
      var filterEles = this.spawn();
      var eles = this;

      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        var include = thisArg ? _filter.apply(thisArg, [ele, i, eles]) : _filter(ele, i, eles);

        if (include) {
          filterEles.merge(ele);
        }
      }

      return filterEles;
    }

    return this.spawn(); // if not handled by above, give 'em an empty collection
  },
  not: function not(toRemove) {
    if (!toRemove) {
      return this;
    } else {
      if (string(toRemove)) {
        toRemove = this.filter(toRemove);
      }

      var elements = [];
      var rMap = toRemove._private.map;

      for (var i = 0; i < this.length; i++) {
        var element$$1 = this[i];
        var remove = rMap.has(element$$1.id());

        if (!remove) {
          elements.push(element$$1);
        }
      }

      return this.spawn(elements);
    }
  },
  absoluteComplement: function absoluteComplement() {
    var cy = this.cy();
    return cy.mutableElements().not(this);
  },
  intersect: function intersect(other) {
    // if a selector is specified, then filter by it instead
    if (string(other)) {
      var selector = other;
      return this.filter(selector);
    }

    var elements = [];
    var col1 = this;
    var col2 = other;
    var col1Smaller = this.length < other.length;
    var map2 = col1Smaller ? col2._private.map : col1._private.map;
    var col = col1Smaller ? col1 : col2;

    for (var i = 0; i < col.length; i++) {
      var id = col[i]._private.data.id;
      var entry = map2.get(id);

      if (entry) {
        elements.push(entry.ele);
      }
    }

    return this.spawn(elements);
  },
  xor: function xor(other) {
    var cy = this._private.cy;

    if (string(other)) {
      other = cy.$(other);
    }

    var elements = [];
    var col1 = this;
    var col2 = other;

    var add = function add(col, other) {
      for (var i = 0; i < col.length; i++) {
        var ele = col[i];
        var id = ele._private.data.id;
        var inOther = other.hasElementWithId(id);

        if (!inOther) {
          elements.push(ele);
        }
      }
    };

    add(col1, col2);
    add(col2, col1);
    return this.spawn(elements);
  },
  diff: function diff(other) {
    var cy = this._private.cy;

    if (string(other)) {
      other = cy.$(other);
    }

    var left = [];
    var right = [];
    var both = [];
    var col1 = this;
    var col2 = other;

    var add = function add(col, other, retEles) {
      for (var i = 0; i < col.length; i++) {
        var ele = col[i];
        var id = ele._private.data.id;
        var inOther = other.hasElementWithId(id);

        if (inOther) {
          both.push(ele);
        } else {
          retEles.push(ele);
        }
      }
    };

    add(col1, col2, left);
    add(col2, col1, right);
    return {
      left: this.spawn(left, {
        unique: true
      }),
      right: this.spawn(right, {
        unique: true
      }),
      both: this.spawn(both, {
        unique: true
      })
    };
  },
  add: function add(toAdd) {
    var cy = this._private.cy;

    if (!toAdd) {
      return this;
    }

    if (string(toAdd)) {
      var selector = toAdd;
      toAdd = cy.mutableElements().filter(selector);
    }

    var elements = [];

    for (var i = 0; i < this.length; i++) {
      elements.push(this[i]);
    }

    var map = this._private.map;

    for (var _i = 0; _i < toAdd.length; _i++) {
      var add = !map.has(toAdd[_i].id());

      if (add) {
        elements.push(toAdd[_i]);
      }
    }

    return this.spawn(elements);
  },
  // in place merge on calling collection
  merge: function merge(toAdd) {
    var _p = this._private;
    var cy = _p.cy;

    if (!toAdd) {
      return this;
    }

    if (toAdd && string(toAdd)) {
      var selector = toAdd;
      toAdd = cy.mutableElements().filter(selector);
    }

    var map = _p.map;

    for (var i = 0; i < toAdd.length; i++) {
      var toAddEle = toAdd[i];
      var id = toAddEle._private.data.id;
      var add = !map.has(id);

      if (add) {
        var index = this.length++;
        this[index] = toAddEle;
        map.set(id, {
          ele: toAddEle,
          index: index
        });
      } else {
        // replace
        var _index = map.get(id).index;
        this[_index] = toAddEle;
        map.set(id, {
          ele: toAddEle,
          index: _index
        });
      }
    }

    return this; // chaining
  },
  unmergeAt: function unmergeAt(i) {
    var ele = this[i];
    var id = ele.id();
    var _p = this._private;
    var map = _p.map; // remove ele

    this[i] = undefined;
    map.delete(id);
    var unmergedLastEle = i === this.length - 1; // replace empty spot with last ele in collection

    if (this.length > 1 && !unmergedLastEle) {
      var lastEleI = this.length - 1;
      var lastEle = this[lastEleI];
      var lastEleId = lastEle._private.data.id;
      this[lastEleI] = undefined;
      this[i] = lastEle;
      map.set(lastEleId, {
        ele: lastEle,
        index: i
      });
    } // the collection is now 1 ele smaller


    this.length--;
    return this;
  },
  // remove single ele in place in calling collection
  unmergeOne: function unmergeOne(ele) {
    ele = ele[0];
    var _p = this._private;
    var id = ele._private.data.id;
    var map = _p.map;
    var entry = map.get(id);

    if (!entry) {
      return this; // no need to remove
    }

    var i = entry.index;
    this.unmergeAt(i);
    return this;
  },
  // remove eles in place on calling collection
  unmerge: function unmerge(toRemove) {
    var cy = this._private.cy;

    if (!toRemove) {
      return this;
    }

    if (toRemove && string(toRemove)) {
      var selector = toRemove;
      toRemove = cy.mutableElements().filter(selector);
    }

    for (var i = 0; i < toRemove.length; i++) {
      this.unmergeOne(toRemove[i]);
    }

    return this; // chaining
  },
  unmergeBy: function unmergeBy(toRmFn) {
    for (var i = this.length - 1; i >= 0; i--) {
      var ele = this[i];

      if (toRmFn(ele)) {
        this.unmergeAt(i);
      }
    }

    return this;
  },
  map: function map(mapFn, thisArg) {
    var arr = [];
    var eles = this;

    for (var i = 0; i < eles.length; i++) {
      var ele = eles[i];
      var ret = thisArg ? mapFn.apply(thisArg, [ele, i, eles]) : mapFn(ele, i, eles);
      arr.push(ret);
    }

    return arr;
  },
  reduce: function reduce(fn$$1, initialValue) {
    var val = initialValue;
    var eles = this;

    for (var i = 0; i < eles.length; i++) {
      val = fn$$1(val, eles[i], i, eles);
    }

    return val;
  },
  max: function max(valFn, thisArg) {
    var max = -Infinity;
    var maxEle;
    var eles = this;

    for (var i = 0; i < eles.length; i++) {
      var ele = eles[i];
      var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);

      if (val > max) {
        max = val;
        maxEle = ele;
      }
    }

    return {
      value: max,
      ele: maxEle
    };
  },
  min: function min(valFn, thisArg) {
    var min = Infinity;
    var minEle;
    var eles = this;

    for (var i = 0; i < eles.length; i++) {
      var ele = eles[i];
      var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);

      if (val < min) {
        min = val;
        minEle = ele;
      }
    }

    return {
      value: min,
      ele: minEle
    };
  }
}; // aliases

var fn$5 = elesfn$m;
fn$5['u'] = fn$5['|'] = fn$5['+'] = fn$5.union = fn$5.or = fn$5.add;
fn$5['\\'] = fn$5['!'] = fn$5['-'] = fn$5.difference = fn$5.relativeComplement = fn$5.subtract = fn$5.not;
fn$5['n'] = fn$5['&'] = fn$5['.'] = fn$5.and = fn$5.intersection = fn$5.intersect;
fn$5['^'] = fn$5['(+)'] = fn$5['(-)'] = fn$5.symmetricDifference = fn$5.symdiff = fn$5.xor;
fn$5.fnFilter = fn$5.filterFn = fn$5.stdFilter = fn$5.filter;
fn$5.complement = fn$5.abscomp = fn$5.absoluteComplement;
var elesfn$n = {
  isNode: function isNode() {
    return this.group() === 'nodes';
  },
  isEdge: function isEdge() {
    return this.group() === 'edges';
  },
  isLoop: function isLoop() {
    return this.isEdge() && this.source()[0] === this.target()[0];
  },
  isSimple: function isSimple() {
    return this.isEdge() && this.source()[0] !== this.target()[0];
  },
  group: function group() {
    var ele = this[0];

    if (ele) {
      return ele._private.group;
    }
  }
};
/**
 *  Elements are drawn in a specific order based on compound depth (low to high), the element type (nodes above edges),
 *  and z-index (low to high).  These styles affect how this applies:
 *
 *  z-compound-depth: May be `bottom | orphan | auto | top`.  The first drawn is `bottom`, then `orphan` which is the
 *      same depth as the root of the compound graph, followed by the default value `auto` which draws in order from
 *      root to leaves of the compound graph.  The last drawn is `top`.
 *  z-index-compare: May be `auto | manual`.  The default value is `auto` which always draws edges under nodes.
 *      `manual` ignores this convention and draws based on the `z-index` value setting.
 *  z-index: An integer value that affects the relative draw order of elements.  In general, an element with a higher
 *      `z-index` will be drawn on top of an element with a lower `z-index`.
 */

var zIndexSort = function zIndexSort(a, b) {
  var cy = a.cy();
  var hasCompoundNodes = cy.hasCompoundNodes();

  function getDepth(ele) {
    var style = ele.pstyle('z-compound-depth');

    if (style.value === 'auto') {
      return hasCompoundNodes ? ele.zDepth() : 0;
    } else if (style.value === 'bottom') {
      return -1;
    } else if (style.value === 'top') {
      return MAX_INT;
    } // 'orphan'


    return 0;
  }

  var depthDiff = getDepth(a) - getDepth(b);

  if (depthDiff !== 0) {
    return depthDiff;
  }

  function getEleDepth(ele) {
    var style = ele.pstyle('z-index-compare');

    if (style.value === 'auto') {
      return ele.isNode() ? 1 : 0;
    } // 'manual'


    return 0;
  }

  var eleDiff = getEleDepth(a) - getEleDepth(b);

  if (eleDiff !== 0) {
    return eleDiff;
  }

  var zDiff = a.pstyle('z-index').value - b.pstyle('z-index').value;

  if (zDiff !== 0) {
    return zDiff;
  } // compare indices in the core (order added to graph w/ last on top)


  return a.poolIndex() - b.poolIndex();
};

var elesfn$o = {
  forEach: function forEach(fn$$1, thisArg) {
    if (fn(fn$$1)) {
      var N = this.length;

      for (var i = 0; i < N; i++) {
        var ele = this[i];
        var ret = thisArg ? fn$$1.apply(thisArg, [ele, i, this]) : fn$$1(ele, i, this);

        if (ret === false) {
          break;
        } // exit each early on return false

      }
    }

    return this;
  },
  toArray: function toArray() {
    var array$$1 = [];

    for (var i = 0; i < this.length; i++) {
      array$$1.push(this[i]);
    }

    return array$$1;
  },
  slice: function slice(start, end) {
    var array$$1 = [];
    var thisSize = this.length;

    if (end == null) {
      end = thisSize;
    }

    if (start == null) {
      start = 0;
    }

    if (start < 0) {
      start = thisSize + start;
    }

    if (end < 0) {
      end = thisSize + end;
    }

    for (var i = start; i >= 0 && i < end && i < thisSize; i++) {
      array$$1.push(this[i]);
    }

    return this.spawn(array$$1);
  },
  size: function size() {
    return this.length;
  },
  eq: function eq(i) {
    return this[i] || this.spawn();
  },
  first: function first() {
    return this[0] || this.spawn();
  },
  last: function last() {
    return this[this.length - 1] || this.spawn();
  },
  empty: function empty() {
    return this.length === 0;
  },
  nonempty: function nonempty() {
    return !this.empty();
  },
  sort: function sort$$1(sortFn) {
    if (!fn(sortFn)) {
      return this;
    }

    var sorted = this.toArray().sort(sortFn);
    return this.spawn(sorted);
  },
  sortByZIndex: function sortByZIndex() {
    return this.sort(zIndexSort);
  },
  zDepth: function zDepth() {
    var ele = this[0];

    if (!ele) {
      return undefined;
    } // let cy = ele.cy();


    var _p = ele._private;
    var group = _p.group;

    if (group === 'nodes') {
      var depth = _p.data.parent ? ele.parents().size() : 0;

      if (!ele.isParent()) {
        return MAX_INT - 1; // childless nodes always on top
      }

      return depth;
    } else {
      var src = _p.source;
      var tgt = _p.target;
      var srcDepth = src.zDepth();
      var tgtDepth = tgt.zDepth();
      return Math.max(srcDepth, tgtDepth, 0); // depth of deepest parent
    }
  }
};
elesfn$o.each = elesfn$o.forEach;
var getLayoutDimensionOptions = defaults({
  nodeDimensionsIncludeLabels: false
});
var elesfn$p = {
  // Calculates and returns node dimensions { x, y } based on options given
  layoutDimensions: function layoutDimensions(options) {
    options = getLayoutDimensionOptions(options);

    if (options.nodeDimensionsIncludeLabels) {
      var bbDim = this.boundingBox();
      return {
        w: bbDim.w,
        h: bbDim.h
      };
    } else {
      return {
        w: this.outerWidth(),
        h: this.outerHeight()
      };
    }
  },
  // using standard layout options, apply position function (w/ or w/o animation)
  layoutPositions: function layoutPositions(layout, options, fn) {
    var nodes = this.nodes();
    var cy = this.cy();
    var layoutEles = options.eles; // nodes & edges

    var getMemoizeKey = function getMemoizeKey(node) {
      return node.id();
    };

    var fnMem = memoize(fn, getMemoizeKey); // memoized version of position function

    layout.emit({
      type: 'layoutstart',
      layout: layout
    });
    layout.animations = [];

    var calculateSpacing = function calculateSpacing(spacing, nodesBb, pos) {
      var center = {
        x: nodesBb.x1 + nodesBb.w / 2,
        y: nodesBb.y1 + nodesBb.h / 2
      };
      var spacingVector = {
        // scale from center of bounding box (not necessarily 0,0)
        x: (pos.x - center.x) * spacing,
        y: (pos.y - center.y) * spacing
      };
      return {
        x: center.x + spacingVector.x,
        y: center.y + spacingVector.y
      };
    };

    var useSpacingFactor = options.spacingFactor && options.spacingFactor !== 1;

    var spacingBb = function spacingBb() {
      if (!useSpacingFactor) {
        return null;
      }

      var bb = makeBoundingBox();

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var pos = fnMem(node, i);
        expandBoundingBoxByPoint(bb, pos.x, pos.y);
      }

      return bb;
    };

    var bb = spacingBb();
    var getFinalPos = memoize(function (node, i) {
      var newPos = fnMem(node, i);

      if (useSpacingFactor) {
        var spacing = Math.abs(options.spacingFactor);
        newPos = calculateSpacing(spacing, bb, newPos);
      }

      if (options.transform != null) {
        newPos = options.transform(node, newPos);
      }

      return newPos;
    }, getMemoizeKey);

    if (options.animate) {
      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var newPos = getFinalPos(node, i);
        var animateNode = options.animateFilter == null || options.animateFilter(node, i);

        if (animateNode) {
          var ani = node.animation({
            position: newPos,
            duration: options.animationDuration,
            easing: options.animationEasing
          });
          layout.animations.push(ani);
        } else {
          node.position(newPos);
        }
      }

      if (options.fit) {
        var fitAni = cy.animation({
          fit: {
            boundingBox: layoutEles.boundingBoxAt(getFinalPos),
            padding: options.padding
          },
          duration: options.animationDuration,
          easing: options.animationEasing
        });
        layout.animations.push(fitAni);
      } else if (options.zoom !== undefined && options.pan !== undefined) {
        var zoomPanAni = cy.animation({
          zoom: options.zoom,
          pan: options.pan,
          duration: options.animationDuration,
          easing: options.animationEasing
        });
        layout.animations.push(zoomPanAni);
      }

      layout.animations.forEach(function (ani) {
        return ani.play();
      });
      layout.one('layoutready', options.ready);
      layout.emit({
        type: 'layoutready',
        layout: layout
      });
      Promise$1.all(layout.animations.map(function (ani) {
        return ani.promise();
      })).then(function () {
        layout.one('layoutstop', options.stop);
        layout.emit({
          type: 'layoutstop',
          layout: layout
        });
      });
    } else {
      nodes.positions(getFinalPos);

      if (options.fit) {
        cy.fit(options.eles, options.padding);
      }

      if (options.zoom != null) {
        cy.zoom(options.zoom);
      }

      if (options.pan) {
        cy.pan(options.pan);
      }

      layout.one('layoutready', options.ready);
      layout.emit({
        type: 'layoutready',
        layout: layout
      });
      layout.one('layoutstop', options.stop);
      layout.emit({
        type: 'layoutstop',
        layout: layout
      });
    }

    return this; // chaining
  },
  layout: function layout(options) {
    var cy = this.cy();
    return cy.makeLayout(extend({}, options, {
      eles: this
    }));
  }
}; // aliases:

elesfn$p.createLayout = elesfn$p.makeLayout = elesfn$p.layout;

function styleCache(key, fn$$1, ele) {
  var _p = ele._private;
  var cache = _p.styleCache = _p.styleCache || [];
  var val;

  if ((val = cache[key]) != null) {
    return val;
  } else {
    val = cache[key] = fn$$1(ele);
    return val;
  }
}

function cacheStyleFunction(key, fn$$1) {
  key = hashString(key);
  return function cachedStyleFunction(ele) {
    return styleCache(key, fn$$1, ele);
  };
}

function cachePrototypeStyleFunction(key, fn$$1) {
  key = hashString(key);

  var selfFn = function selfFn(ele) {
    return fn$$1.call(ele);
  };

  return function cachedPrototypeStyleFunction() {
    var ele = this[0];

    if (ele) {
      return styleCache(key, selfFn, ele);
    }
  };
}

var elesfn$q = {
  recalculateRenderedStyle: function recalculateRenderedStyle(useCache) {
    var cy = this.cy();
    var renderer = cy.renderer();
    var styleEnabled = cy.styleEnabled();

    if (renderer && styleEnabled) {
      renderer.recalculateRenderedStyle(this, useCache);
    }

    return this;
  },
  dirtyStyleCache: function dirtyStyleCache() {
    var cy = this.cy();

    var dirty = function dirty(ele) {
      return ele._private.styleCache = null;
    };

    if (cy.hasCompoundNodes()) {
      var eles;
      eles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
      eles.merge(eles.connectedEdges());
      eles.forEach(dirty);
    } else {
      this.forEach(function (ele) {
        dirty(ele);
        ele.connectedEdges().forEach(dirty);
      });
    }

    return this;
  },
  // fully updates (recalculates) the style for the elements
  updateStyle: function updateStyle(notifyRenderer) {
    var cy = this._private.cy;

    if (!cy.styleEnabled()) {
      return this;
    }

    if (cy.batching()) {
      var bEles = cy._private.batchStyleEles;
      bEles.merge(this);
      return this; // chaining and exit early when batching
    }

    var hasCompounds = cy.hasCompoundNodes();
    var style$$1 = cy.style();
    var updatedEles = this;
    notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;

    if (hasCompounds) {
      // then add everything up and down for compound selector checks
      updatedEles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
    }

    var changedEles = style$$1.apply(updatedEles);

    if (notifyRenderer) {
      changedEles.emitAndNotify('style'); // let renderer know we changed style
    } else {
      changedEles.emit('style'); // just fire the event
    }

    return this; // chaining
  },
  // get the internal parsed style object for the specified property
  parsedStyle: function parsedStyle(property) {
    var includeNonDefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var ele = this[0];
    var cy = ele.cy();

    if (!cy.styleEnabled()) {
      return;
    }

    if (ele) {
      var overriddenStyle = ele._private.style[property];

      if (overriddenStyle != null) {
        return overriddenStyle;
      } else if (includeNonDefault) {
        return cy.style().getDefaultProperty(property);
      } else {
        return null;
      }
    }
  },
  numericStyle: function numericStyle(property) {
    var ele = this[0];

    if (!ele.cy().styleEnabled()) {
      return;
    }

    if (ele) {
      var pstyle = ele.pstyle(property);
      return pstyle.pfValue !== undefined ? pstyle.pfValue : pstyle.value;
    }
  },
  numericStyleUnits: function numericStyleUnits(property) {
    var ele = this[0];

    if (!ele.cy().styleEnabled()) {
      return;
    }

    if (ele) {
      return ele.pstyle(property).units;
    }
  },
  // get the specified css property as a rendered value (i.e. on-screen value)
  // or get the whole rendered style if no property specified (NB doesn't allow setting)
  renderedStyle: function renderedStyle(property) {
    var cy = this.cy();

    if (!cy.styleEnabled()) {
      return this;
    }

    var ele = this[0];

    if (ele) {
      return cy.style().getRenderedStyle(ele, property);
    }
  },
  // read the calculated css style of the element or override the style (via a bypass)
  style: function style$$1(name, value) {
    var cy = this.cy();

    if (!cy.styleEnabled()) {
      return this;
    }

    var updateTransitions = false;
    var style$$1 = cy.style();

    if (plainObject(name)) {
      // then extend the bypass
      var props = name;
      style$$1.applyBypass(this, props, updateTransitions);
      this.emitAndNotify('style'); // let the renderer know we've updated style
    } else if (string(name)) {
      if (value === undefined) {
        // then get the property from the style
        var ele = this[0];

        if (ele) {
          return style$$1.getStylePropertyValue(ele, name);
        } else {
          // empty collection => can't get any value
          return;
        }
      } else {
        // then set the bypass with the property value
        style$$1.applyBypass(this, name, value, updateTransitions);
        this.emitAndNotify('style'); // let the renderer know we've updated style
      }
    } else if (name === undefined) {
      var _ele = this[0];

      if (_ele) {
        return style$$1.getRawStyle(_ele);
      } else {
        // empty collection => can't get any value
        return;
      }
    }

    return this; // chaining
  },
  removeStyle: function removeStyle(names) {
    var cy = this.cy();

    if (!cy.styleEnabled()) {
      return this;
    }

    var updateTransitions = false;
    var style$$1 = cy.style();
    var eles = this;

    if (names === undefined) {
      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        style$$1.removeAllBypasses(ele, updateTransitions);
      }
    } else {
      names = names.split(/\s+/);

      for (var _i = 0; _i < eles.length; _i++) {
        var _ele2 = eles[_i];
        style$$1.removeBypasses(_ele2, names, updateTransitions);
      }
    }

    this.emitAndNotify('style'); // let the renderer know we've updated style

    return this; // chaining
  },
  show: function show() {
    this.css('display', 'element');
    return this; // chaining
  },
  hide: function hide() {
    this.css('display', 'none');
    return this; // chaining
  },
  effectiveOpacity: function effectiveOpacity() {
    var cy = this.cy();

    if (!cy.styleEnabled()) {
      return 1;
    }

    var hasCompoundNodes = cy.hasCompoundNodes();
    var ele = this[0];

    if (ele) {
      var _p = ele._private;
      var parentOpacity = ele.pstyle('opacity').value;

      if (!hasCompoundNodes) {
        return parentOpacity;
      }

      var parents = !_p.data.parent ? null : ele.parents();

      if (parents) {
        for (var i = 0; i < parents.length; i++) {
          var parent = parents[i];
          var opacity = parent.pstyle('opacity').value;
          parentOpacity = opacity * parentOpacity;
        }
      }

      return parentOpacity;
    }
  },
  transparent: function transparent() {
    var cy = this.cy();

    if (!cy.styleEnabled()) {
      return false;
    }

    var ele = this[0];
    var hasCompoundNodes = ele.cy().hasCompoundNodes();

    if (ele) {
      if (!hasCompoundNodes) {
        return ele.pstyle('opacity').value === 0;
      } else {
        return ele.effectiveOpacity() === 0;
      }
    }
  },
  backgrounding: function backgrounding() {
    var cy = this.cy();

    if (!cy.styleEnabled()) {
      return false;
    }

    var ele = this[0];
    return ele._private.backgrounding ? true : false;
  }
};

function checkCompound(ele, parentOk) {
  var _p = ele._private;
  var parents = _p.data.parent ? ele.parents() : null;

  if (parents) {
    for (var i = 0; i < parents.length; i++) {
      var parent = parents[i];

      if (!parentOk(parent)) {
        return false;
      }
    }
  }

  return true;
}

function defineDerivedStateFunction(specs) {
  var ok = specs.ok;
  var edgeOkViaNode = specs.edgeOkViaNode || specs.ok;
  var parentOk = specs.parentOk || specs.ok;
  return function () {
    var cy = this.cy();

    if (!cy.styleEnabled()) {
      return true;
    }

    var ele = this[0];
    var hasCompoundNodes = cy.hasCompoundNodes();

    if (ele) {
      var _p = ele._private;

      if (!ok(ele)) {
        return false;
      }

      if (ele.isNode()) {
        return !hasCompoundNodes || checkCompound(ele, parentOk);
      } else {
        var src = _p.source;
        var tgt = _p.target;
        return edgeOkViaNode(src) && (!hasCompoundNodes || checkCompound(src, edgeOkViaNode)) && (src === tgt || edgeOkViaNode(tgt) && (!hasCompoundNodes || checkCompound(tgt, edgeOkViaNode)));
      }
    }
  };
}

var eleTakesUpSpace = cacheStyleFunction('eleTakesUpSpace', function (ele) {
  return ele.pstyle('display').value === 'element' && ele.width() !== 0 && (ele.isNode() ? ele.height() !== 0 : true);
});
elesfn$q.takesUpSpace = cachePrototypeStyleFunction('takesUpSpace', defineDerivedStateFunction({
  ok: eleTakesUpSpace
}));
var eleInteractive = cacheStyleFunction('eleInteractive', function (ele) {
  return ele.pstyle('events').value === 'yes' && ele.pstyle('visibility').value === 'visible' && eleTakesUpSpace(ele);
});
var parentInteractive = cacheStyleFunction('parentInteractive', function (parent) {
  return parent.pstyle('visibility').value === 'visible' && eleTakesUpSpace(parent);
});
elesfn$q.interactive = cachePrototypeStyleFunction('interactive', defineDerivedStateFunction({
  ok: eleInteractive,
  parentOk: parentInteractive,
  edgeOkViaNode: eleTakesUpSpace
}));

elesfn$q.noninteractive = function () {
  var ele = this[0];

  if (ele) {
    return !ele.interactive();
  }
};

var eleVisible = cacheStyleFunction('eleVisible', function (ele) {
  return ele.pstyle('visibility').value === 'visible' && ele.pstyle('opacity').pfValue !== 0 && eleTakesUpSpace(ele);
});
var edgeVisibleViaNode = eleTakesUpSpace;
elesfn$q.visible = cachePrototypeStyleFunction('visible', defineDerivedStateFunction({
  ok: eleVisible,
  edgeOkViaNode: edgeVisibleViaNode
}));

elesfn$q.hidden = function () {
  var ele = this[0];

  if (ele) {
    return !ele.visible();
  }
};

elesfn$q.bypass = elesfn$q.css = elesfn$q.style;
elesfn$q.renderedCss = elesfn$q.renderedStyle;
elesfn$q.removeBypass = elesfn$q.removeCss = elesfn$q.removeStyle;
elesfn$q.pstyle = elesfn$q.parsedStyle;
var elesfn$r = {};

function defineSwitchFunction(params) {
  return function () {
    var args = arguments;
    var changedEles = []; // e.g. cy.nodes().select( data, handler )

    if (args.length === 2) {
      var data = args[0];
      var handler = args[1];
      this.on(params.event, data, handler);
    } // e.g. cy.nodes().select( handler )
    else if (args.length === 1 && fn(args[0])) {
        var _handler = args[0];
        this.on(params.event, _handler);
      } // e.g. cy.nodes().select()
      // e.g. (private) cy.nodes().select(['tapselect'])
      else if (args.length === 0 || args.length === 1 && array(args[0])) {
          var addlEvents = args.length === 1 ? args[0] : null;

          for (var i = 0; i < this.length; i++) {
            var ele = this[i];
            var able = !params.ableField || ele._private[params.ableField];
            var changed = ele._private[params.field] != params.value;

            if (params.overrideAble) {
              var overrideAble = params.overrideAble(ele);

              if (overrideAble !== undefined) {
                able = overrideAble;

                if (!overrideAble) {
                  return this;
                } // to save cycles assume not able for all on override

              }
            }

            if (able) {
              ele._private[params.field] = params.value;

              if (changed) {
                changedEles.push(ele);
              }
            }
          }

          var changedColl = this.spawn(changedEles);
          changedColl.updateStyle(); // change of state => possible change of style

          changedColl.emit(params.event);

          if (addlEvents) {
            changedColl.emit(addlEvents);
          }
        }

    return this;
  };
}

function defineSwitchSet(params) {
  elesfn$r[params.field] = function () {
    var ele = this[0];

    if (ele) {
      if (params.overrideField) {
        var val = params.overrideField(ele);

        if (val !== undefined) {
          return val;
        }
      }

      return ele._private[params.field];
    }
  };

  elesfn$r[params.on] = defineSwitchFunction({
    event: params.on,
    field: params.field,
    ableField: params.ableField,
    overrideAble: params.overrideAble,
    value: true
  });
  elesfn$r[params.off] = defineSwitchFunction({
    event: params.off,
    field: params.field,
    ableField: params.ableField,
    overrideAble: params.overrideAble,
    value: false
  });
}

defineSwitchSet({
  field: 'locked',
  overrideField: function overrideField(ele) {
    return ele.cy().autolock() ? true : undefined;
  },
  on: 'lock',
  off: 'unlock'
});
defineSwitchSet({
  field: 'grabbable',
  overrideField: function overrideField(ele) {
    return ele.cy().autoungrabify() ? false : undefined;
  },
  on: 'grabify',
  off: 'ungrabify'
});
defineSwitchSet({
  field: 'selected',
  ableField: 'selectable',
  overrideAble: function overrideAble(ele) {
    return ele.cy().autounselectify() ? false : undefined;
  },
  on: 'select',
  off: 'unselect'
});
defineSwitchSet({
  field: 'selectable',
  overrideField: function overrideField(ele) {
    return ele.cy().autounselectify() ? false : undefined;
  },
  on: 'selectify',
  off: 'unselectify'
});
elesfn$r.deselect = elesfn$r.unselect;

elesfn$r.grabbed = function () {
  var ele = this[0];

  if (ele) {
    return ele._private.grabbed;
  }
};

defineSwitchSet({
  field: 'active',
  on: 'activate',
  off: 'unactivate'
});

elesfn$r.inactive = function () {
  var ele = this[0];

  if (ele) {
    return !ele._private.active;
  }
};

var elesfn$s = {}; // DAG functions
////////////////

var defineDagExtremity = function defineDagExtremity(params) {
  return function dagExtremityImpl(selector) {
    var eles = this;
    var ret = [];

    for (var i = 0; i < eles.length; i++) {
      var ele = eles[i];

      if (!ele.isNode()) {
        continue;
      }

      var disqualified = false;
      var edges = ele.connectedEdges();

      for (var j = 0; j < edges.length; j++) {
        var edge = edges[j];
        var src = edge.source();
        var tgt = edge.target();

        if (params.noIncomingEdges && tgt === ele && src !== ele || params.noOutgoingEdges && src === ele && tgt !== ele) {
          disqualified = true;
          break;
        }
      }

      if (!disqualified) {
        ret.push(ele);
      }
    }

    return this.spawn(ret, {
      unique: true
    }).filter(selector);
  };
};

var defineDagOneHop = function defineDagOneHop(params) {
  return function (selector) {
    var eles = this;
    var oEles = [];

    for (var i = 0; i < eles.length; i++) {
      var ele = eles[i];

      if (!ele.isNode()) {
        continue;
      }

      var edges = ele.connectedEdges();

      for (var j = 0; j < edges.length; j++) {
        var edge = edges[j];
        var src = edge.source();
        var tgt = edge.target();

        if (params.outgoing && src === ele) {
          oEles.push(edge);
          oEles.push(tgt);
        } else if (params.incoming && tgt === ele) {
          oEles.push(edge);
          oEles.push(src);
        }
      }
    }

    return this.spawn(oEles, {
      unique: true
    }).filter(selector);
  };
};

var defineDagAllHops = function defineDagAllHops(params) {
  return function (selector) {
    var eles = this;
    var sEles = [];
    var sElesIds = {};

    for (;;) {
      var next = params.outgoing ? eles.outgoers() : eles.incomers();

      if (next.length === 0) {
        break;
      } // done if none left


      var newNext = false;

      for (var i = 0; i < next.length; i++) {
        var n = next[i];
        var nid = n.id();

        if (!sElesIds[nid]) {
          sElesIds[nid] = true;
          sEles.push(n);
          newNext = true;
        }
      }

      if (!newNext) {
        break;
      } // done if touched all outgoers already


      eles = next;
    }

    return this.spawn(sEles, {
      unique: true
    }).filter(selector);
  };
};

elesfn$s.clearTraversalCache = function () {
  for (var i = 0; i < this.length; i++) {
    this[i]._private.traversalCache = null;
  }
};

extend(elesfn$s, {
  // get the root nodes in the DAG
  roots: defineDagExtremity({
    noIncomingEdges: true
  }),
  // get the leaf nodes in the DAG
  leaves: defineDagExtremity({
    noOutgoingEdges: true
  }),
  // normally called children in graph theory
  // these nodes =edges=> outgoing nodes
  outgoers: cache(defineDagOneHop({
    outgoing: true
  }), 'outgoers'),
  // aka DAG descendants
  successors: defineDagAllHops({
    outgoing: true
  }),
  // normally called parents in graph theory
  // these nodes <=edges= incoming nodes
  incomers: cache(defineDagOneHop({
    incoming: true
  }), 'incomers'),
  // aka DAG ancestors
  predecessors: defineDagAllHops({
    incoming: true
  })
}); // Neighbourhood functions
//////////////////////////

extend(elesfn$s, {
  neighborhood: cache(function (selector) {
    var elements = [];
    var nodes = this.nodes();

    for (var i = 0; i < nodes.length; i++) {
      // for all nodes
      var node = nodes[i];
      var connectedEdges = node.connectedEdges(); // for each connected edge, add the edge and the other node

      for (var j = 0; j < connectedEdges.length; j++) {
        var edge = connectedEdges[j];
        var src = edge.source();
        var tgt = edge.target();
        var otherNode = node === src ? tgt : src; // need check in case of loop

        if (otherNode.length > 0) {
          elements.push(otherNode[0]); // add node 1 hop away
        } // add connected edge


        elements.push(edge[0]);
      }
    }

    return this.spawn(elements, {
      unique: true
    }).filter(selector);
  }, 'neighborhood'),
  closedNeighborhood: function closedNeighborhood(selector) {
    return this.neighborhood().add(this).filter(selector);
  },
  openNeighborhood: function openNeighborhood(selector) {
    return this.neighborhood(selector);
  }
}); // aliases

elesfn$s.neighbourhood = elesfn$s.neighborhood;
elesfn$s.closedNeighbourhood = elesfn$s.closedNeighborhood;
elesfn$s.openNeighbourhood = elesfn$s.openNeighborhood; // Edge functions
/////////////////

extend(elesfn$s, {
  source: cache(function sourceImpl(selector) {
    var ele = this[0];
    var src;

    if (ele) {
      src = ele._private.source || ele.cy().collection();
    }

    return src && selector ? src.filter(selector) : src;
  }, 'source'),
  target: cache(function targetImpl(selector) {
    var ele = this[0];
    var tgt;

    if (ele) {
      tgt = ele._private.target || ele.cy().collection();
    }

    return tgt && selector ? tgt.filter(selector) : tgt;
  }, 'target'),
  sources: defineSourceFunction({
    attr: 'source'
  }),
  targets: defineSourceFunction({
    attr: 'target'
  })
});

function defineSourceFunction(params) {
  return function sourceImpl(selector) {
    var sources = [];

    for (var i = 0; i < this.length; i++) {
      var ele = this[i];
      var src = ele._private[params.attr];

      if (src) {
        sources.push(src);
      }
    }

    return this.spawn(sources, {
      unique: true
    }).filter(selector);
  };
}

extend(elesfn$s, {
  edgesWith: cache(defineEdgesWithFunction(), 'edgesWith'),
  edgesTo: cache(defineEdgesWithFunction({
    thisIsSrc: true
  }), 'edgesTo')
});

function defineEdgesWithFunction(params) {
  return function edgesWithImpl(otherNodes) {
    var elements = [];
    var cy = this._private.cy;
    var p = params || {}; // get elements if a selector is specified

    if (string(otherNodes)) {
      otherNodes = cy.$(otherNodes);
    }

    for (var h = 0; h < otherNodes.length; h++) {
      var edges = otherNodes[h]._private.edges;

      for (var i = 0; i < edges.length; i++) {
        var edge = edges[i];
        var edgeData = edge._private.data;
        var thisToOther = this.hasElementWithId(edgeData.source) && otherNodes.hasElementWithId(edgeData.target);
        var otherToThis = otherNodes.hasElementWithId(edgeData.source) && this.hasElementWithId(edgeData.target);
        var edgeConnectsThisAndOther = thisToOther || otherToThis;

        if (!edgeConnectsThisAndOther) {
          continue;
        }

        if (p.thisIsSrc || p.thisIsTgt) {
          if (p.thisIsSrc && !thisToOther) {
            continue;
          }

          if (p.thisIsTgt && !otherToThis) {
            continue;
          }
        }

        elements.push(edge);
      }
    }

    return this.spawn(elements, {
      unique: true
    });
  };
}

extend(elesfn$s, {
  connectedEdges: cache(function (selector) {
    var retEles = [];
    var eles = this;

    for (var i = 0; i < eles.length; i++) {
      var node = eles[i];

      if (!node.isNode()) {
        continue;
      }

      var edges = node._private.edges;

      for (var j = 0; j < edges.length; j++) {
        var edge = edges[j];
        retEles.push(edge);
      }
    }

    return this.spawn(retEles, {
      unique: true
    }).filter(selector);
  }, 'connectedEdges'),
  connectedNodes: cache(function (selector) {
    var retEles = [];
    var eles = this;

    for (var i = 0; i < eles.length; i++) {
      var edge = eles[i];

      if (!edge.isEdge()) {
        continue;
      }

      retEles.push(edge.source()[0]);
      retEles.push(edge.target()[0]);
    }

    return this.spawn(retEles, {
      unique: true
    }).filter(selector);
  }, 'connectedNodes'),
  parallelEdges: cache(defineParallelEdgesFunction(), 'parallelEdges'),
  codirectedEdges: cache(defineParallelEdgesFunction({
    codirected: true
  }), 'codirectedEdges')
});

function defineParallelEdgesFunction(params) {
  var defaults$$1 = {
    codirected: false
  };
  params = extend({}, defaults$$1, params);
  return function parallelEdgesImpl(selector) {
    // micro-optimised for renderer
    var elements = [];
    var edges = this.edges();
    var p = params; // look at all the edges in the collection

    for (var i = 0; i < edges.length; i++) {
      var edge1 = edges[i];
      var edge1_p = edge1._private;
      var src1 = edge1_p.source;
      var srcid1 = src1._private.data.id;
      var tgtid1 = edge1_p.data.target;
      var srcEdges1 = src1._private.edges; // look at edges connected to the src node of this edge

      for (var j = 0; j < srcEdges1.length; j++) {
        var edge2 = srcEdges1[j];
        var edge2data = edge2._private.data;
        var tgtid2 = edge2data.target;
        var srcid2 = edge2data.source;
        var codirected = tgtid2 === tgtid1 && srcid2 === srcid1;
        var oppdirected = srcid1 === tgtid2 && tgtid1 === srcid2;

        if (p.codirected && codirected || !p.codirected && (codirected || oppdirected)) {
          elements.push(edge2);
        }
      }
    }

    return this.spawn(elements, {
      unique: true
    }).filter(selector);
  };
} // Misc functions
/////////////////


extend(elesfn$s, {
  components: function components(root) {
    var self = this;
    var cy = self.cy();
    var visited = cy.collection();
    var unvisited = root == null ? self.nodes() : root.nodes();
    var components = [];

    if (root != null && unvisited.empty()) {
      // root may contain only edges
      unvisited = root.sources(); // doesn't matter which node to use (undirected), so just use the source sides
    }

    var visitInComponent = function visitInComponent(node, component) {
      visited.merge(node);
      unvisited.unmerge(node);
      component.merge(node);
    };

    if (unvisited.empty()) {
      return self.spawn();
    }

    var _loop = function _loop() {
      // each iteration yields a component
      var cmpt = cy.collection();
      components.push(cmpt);
      var root = unvisited[0];
      visitInComponent(root, cmpt);
      self.bfs({
        directed: false,
        roots: root,
        visit: function visit(v) {
          return visitInComponent(v, cmpt);
        }
      });
      cmpt.forEach(function (node) {
        node.connectedEdges().forEach(function (e) {
          // connectedEdges() usually cached
          if (cmpt.has(e.source()) && cmpt.has(e.target())) {
            // has() is cheap
            cmpt.merge(e); // forEach() only considers nodes -- sets N at call time
          }
        });
      });
    };

    do {
      _loop();
    } while (unvisited.length > 0);

    return components;
  },
  component: function component() {
    var ele = this[0];
    return ele.cy().mutableElements().components(ele)[0];
  }
});
elesfn$s.componentsOf = elesfn$s.components;
var idFactory = {
  generate: function generate(cy, element$$1, tryThisId) {
    var id = tryThisId != null ? tryThisId : uuid();

    while (cy.hasElementWithId(id)) {
      id = uuid();
    }

    return id;
  }
}; // represents a set of nodes, edges, or both together

var Collection = function Collection(cy, elements, options) {
  if (cy === undefined || !core(cy)) {
    error('A collection must have a reference to the core');
    return;
  }

  var map = new Map$1();
  var createdElements = false;

  if (!elements) {
    elements = [];
  } else if (elements.length > 0 && plainObject(elements[0]) && !element(elements[0])) {
    createdElements = true; // make elements from json and restore all at once later

    var eles = [];
    var elesIds = new Set$1();

    for (var i = 0, l = elements.length; i < l; i++) {
      var json = elements[i];

      if (json.data == null) {
        json.data = {};
      }

      var _data = json.data; // make sure newly created elements have valid ids

      if (_data.id == null) {
        _data.id = idFactory.generate(cy, json);
      } else if (cy.hasElementWithId(_data.id) || elesIds.has(_data.id)) {
        continue; // can't create element if prior id already exists
      }

      var ele = new Element(cy, json, false);
      eles.push(ele);
      elesIds.add(_data.id);
    }

    elements = eles;
  }

  this.length = 0;

  for (var _i = 0, _l = elements.length; _i < _l; _i++) {
    var element$$1 = elements[_i];

    if (element$$1 == null) {
      continue;
    }

    var id = element$$1._private.data.id;

    if (options == null || options.unique && !map.has(id)) {
      map.set(id, {
        index: this.length,
        ele: element$$1
      });
      this[this.length] = element$$1;
      this.length++;
    }
  }

  this._private = {
    cy: cy,
    map: map
  }; // restore the elements if we created them from json

  if (createdElements) {
    this.restore();
  }
}; // Functions
////////////////////////////////////////////////////////////////////////////////////////////////////
// keep the prototypes in sync (an element has the same functions as a collection)
// and use elefn and elesfn as shorthands to the prototypes


var elesfn$t = Element.prototype = Collection.prototype;

elesfn$t.instanceString = function () {
  return 'collection';
};

elesfn$t.spawn = function (cy, eles, opts) {
  if (!core(cy)) {
    // cy is optional
    opts = eles;
    eles = cy;
    cy = this.cy();
  }

  return new Collection(cy, eles, opts);
};

elesfn$t.spawnSelf = function () {
  return this.spawn(this);
};

elesfn$t.cy = function () {
  return this._private.cy;
};

elesfn$t.renderer = function () {
  return this._private.cy.renderer();
};

elesfn$t.element = function () {
  return this[0];
};

elesfn$t.collection = function () {
  if (collection(this)) {
    return this;
  } else {
    // an element
    return new Collection(this._private.cy, [this]);
  }
};

elesfn$t.unique = function () {
  return new Collection(this._private.cy, this, {
    unique: true
  });
};

elesfn$t.hasElementWithId = function (id) {
  return this._private.map.has(id);
};

elesfn$t.getElementById = function (id) {
  var cy = this._private.cy;

  var entry = this._private.map.get(id);

  return entry ? entry.ele : new Collection(cy); // get ele or empty collection
};

elesfn$t.$id = elesfn$t.getElementById;

elesfn$t.poolIndex = function () {
  var cy = this._private.cy;
  var eles = cy._private.elements;
  var id = this[0]._private.data.id;
  return eles._private.map.get(id).index;
};

elesfn$t.indexOf = function (ele) {
  var id = ele[0]._private.data.id;
  return this._private.map.get(id).index;
};

elesfn$t.indexOfId = function (id) {
  return this._private.map.get(id).index;
};

elesfn$t.json = function (obj) {
  var ele = this.element();
  var cy = this.cy();

  if (ele == null && obj) {
    return this;
  } // can't set to no eles


  if (ele == null) {
    return undefined;
  } // can't get from no eles


  var p = ele._private;

  if (plainObject(obj)) {
    // set
    cy.startBatch();

    if (obj.data) {
      ele.data(obj.data);
      var _data2 = p.data;

      if (ele.isEdge()) {
        // source and target are immutable via data()
        var move = false;
        var spec = {};
        var src = obj.data.source;
        var tgt = obj.data.target;

        if (src != null && src !== _data2.source) {
          spec.source = src;
          move = true;
        }

        if (tgt != null && tgt !== _data2.target) {
          spec.target = tgt;
          move = true;
        }

        if (move) {
          ele = ele.move(spec);
        }
      } else {
        // parent is immutable via data()
        var parent = obj.data.parent;

        if ((parent != null || _data2.parent != null) && parent !== _data2.parent) {
          if (parent === undefined) {
            // can't set undefined imperatively, so use null
            parent = null;
          }

          ele = ele.move({
            parent: parent
          });
        }
      }
    }

    if (obj.position) {
      ele.position(obj.position);
    } // ignore group -- immutable


    var checkSwitch = function checkSwitch(k, trueFnName, falseFnName) {
      var obj_k = obj[k];

      if (obj_k != null && obj_k !== p[k]) {
        if (obj_k) {
          ele[trueFnName]();
        } else {
          ele[falseFnName]();
        }
      }
    };

    checkSwitch('removed', 'remove', 'restore');
    checkSwitch('selected', 'select', 'unselect');
    checkSwitch('selectable', 'selectify', 'unselectify');
    checkSwitch('locked', 'lock', 'unlock');
    checkSwitch('grabbable', 'grabify', 'ungrabify');

    if (obj.classes != null) {
      ele.classes(obj.classes);
    }

    cy.endBatch();
    return this;
  } else if (obj === undefined) {
    // get
    var json = {
      data: copy(p.data),
      position: copy(p.position),
      group: p.group,
      removed: p.removed,
      selected: p.selected,
      selectable: p.selectable,
      locked: p.locked,
      grabbable: p.grabbable,
      classes: null
    };
    json.classes = '';
    var i = 0;
    p.classes.forEach(function (cls) {
      return json.classes += i++ === 0 ? cls : ' ' + cls;
    });
    return json;
  }
};

elesfn$t.jsons = function () {
  var jsons = [];

  for (var i = 0; i < this.length; i++) {
    var ele = this[i];
    var json = ele.json();
    jsons.push(json);
  }

  return jsons;
};

elesfn$t.clone = function () {
  var cy = this.cy();
  var elesArr = [];

  for (var i = 0; i < this.length; i++) {
    var ele = this[i];
    var json = ele.json();
    var clone$$1 = new Element(cy, json, false); // NB no restore

    elesArr.push(clone$$1);
  }

  return new Collection(cy, elesArr);
};

elesfn$t.copy = elesfn$t.clone;

elesfn$t.restore = function () {
  var notifyRenderer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var addToPool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var self = this;
  var cy = self.cy();
  var cy_p = cy._private; // create arrays of nodes and edges, since we need to
  // restore the nodes first

  var nodes = [];
  var edges = [];
  var elements;

  for (var _i2 = 0, l = self.length; _i2 < l; _i2++) {
    var ele = self[_i2];

    if (addToPool && !ele.removed()) {
      // don't need to handle this ele
      continue;
    } // keep nodes first in the array and edges after


    if (ele.isNode()) {
      // put to front of array if node
      nodes.push(ele);
    } else {
      // put to end of array if edge
      edges.push(ele);
    }
  }

  elements = nodes.concat(edges);
  var i;

  var removeFromElements = function removeFromElements() {
    elements.splice(i, 1);
    i--;
  }; // now, restore each element


  for (i = 0; i < elements.length; i++) {
    var _ele = elements[i];
    var _private = _ele._private;
    var _data3 = _private.data; // the traversal cache should start fresh when ele is added

    _ele.clearTraversalCache(); // set id and validate


    if (!addToPool && !_private.removed) ;else if (_data3.id === undefined) {
      _data3.id = idFactory.generate(cy, _ele);
    } else if (number(_data3.id)) {
      _data3.id = '' + _data3.id; // now it's a string
    } else if (emptyString(_data3.id) || !string(_data3.id)) {
      error('Can not create element with invalid string ID `' + _data3.id + '`'); // can't create element if it has empty string as id or non-string id

      removeFromElements();
      continue;
    } else if (cy.hasElementWithId(_data3.id)) {
      error('Can not create second element with ID `' + _data3.id + '`'); // can't create element if one already has that id

      removeFromElements();
      continue;
    }
    var id = _data3.id; // id is finalised, now let's keep a ref

    if (_ele.isNode()) {
      // extra checks for nodes
      var pos = _private.position; // make sure the nodes have a defined position

      if (pos.x == null) {
        pos.x = 0;
      }

      if (pos.y == null) {
        pos.y = 0;
      }
    }

    if (_ele.isEdge()) {
      // extra checks for edges
      var edge = _ele;
      var fields = ['source', 'target'];
      var fieldsLength = fields.length;
      var badSourceOrTarget = false;

      for (var j = 0; j < fieldsLength; j++) {
        var field = fields[j];
        var val = _data3[field];

        if (number(val)) {
          val = _data3[field] = '' + _data3[field]; // now string
        }

        if (val == null || val === '') {
          // can't create if source or target is not defined properly
          error('Can not create edge `' + id + '` with unspecified ' + field);
          badSourceOrTarget = true;
        } else if (!cy.hasElementWithId(val)) {
          // can't create edge if one of its nodes doesn't exist
          error('Can not create edge `' + id + '` with nonexistant ' + field + ' `' + val + '`');
          badSourceOrTarget = true;
        }
      }

      if (badSourceOrTarget) {
        removeFromElements();
        continue;
      } // can't create this


      var src = cy.getElementById(_data3.source);
      var tgt = cy.getElementById(_data3.target);

      src._private.edges.push(edge);

      tgt._private.edges.push(edge);

      edge._private.source = src;
      edge._private.target = tgt;
    } // if is edge
    // create mock ids / indexes maps for element so it can be used like collections


    _private.map = new Map$1();

    _private.map.set(id, {
      ele: _ele,
      index: 0
    });

    _private.removed = false;

    if (addToPool) {
      cy.addToPool(_ele);
    }
  } // for each element
  // do compound node sanity checks


  for (var _i3 = 0; _i3 < nodes.length; _i3++) {
    // each node
    var node = nodes[_i3];
    var _data4 = node._private.data;

    if (number(_data4.parent)) {
      // then automake string
      _data4.parent = '' + _data4.parent;
    }

    var parentId = _data4.parent;
    var specifiedParent = parentId != null;

    if (specifiedParent) {
      var parent = cy.getElementById(parentId);

      if (parent.empty()) {
        // non-existant parent; just remove it
        _data4.parent = undefined;
      } else {
        var selfAsParent = false;
        var ancestor = parent;

        while (!ancestor.empty()) {
          if (node.same(ancestor)) {
            // mark self as parent and remove from data
            selfAsParent = true;
            _data4.parent = undefined; // remove parent reference
            // exit or we loop forever

            break;
          }

          ancestor = ancestor.parent();
        }

        if (!selfAsParent) {
          // connect with children
          parent[0]._private.children.push(node);

          node._private.parent = parent[0]; // let the core know we have a compound graph

          cy_p.hasCompoundNodes = true;
        }
      } // else

    } // if specified parent

  } // for each node


  if (elements.length > 0) {
    var restored = new Collection(cy, elements);

    for (var _i4 = 0; _i4 < restored.length; _i4++) {
      var _ele2 = restored[_i4];

      if (_ele2.isNode()) {
        continue;
      } // adding an edge invalidates the traversal caches for the parallel edges


      _ele2.parallelEdges().clearTraversalCache(); // adding an edge invalidates the traversal cache for the connected nodes


      _ele2.source().clearTraversalCache();

      _ele2.target().clearTraversalCache();
    }

    var toUpdateStyle;

    if (cy_p.hasCompoundNodes) {
      toUpdateStyle = cy.collection().merge(restored).merge(restored.connectedNodes()).merge(restored.parent());
    } else {
      toUpdateStyle = restored;
    }

    toUpdateStyle.dirtyCompoundBoundsCache().dirtyBoundingBoxCache().updateStyle(notifyRenderer);

    if (notifyRenderer) {
      restored.emitAndNotify('add');
    } else if (addToPool) {
      restored.emit('add');
    }
  }

  return self; // chainability
};

elesfn$t.removed = function () {
  var ele = this[0];
  return ele && ele._private.removed;
};

elesfn$t.inside = function () {
  var ele = this[0];
  return ele && !ele._private.removed;
};

elesfn$t.remove = function () {
  var notifyRenderer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var removeFromPool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var self = this;
  var removed = [];
  var elesToRemove = [];
  var elesToRemoveIds = {};
  var cy = self._private.cy; // add connected edges

  function addConnectedEdges(node) {
    var edges = node._private.edges;

    for (var i = 0; i < edges.length; i++) {
      add(edges[i]);
    }
  } // add descendant nodes


  function addChildren(node) {
    var children = node._private.children;

    for (var i = 0; i < children.length; i++) {
      add(children[i]);
    }
  }

  function add(ele) {
    var alreadyAdded = elesToRemoveIds[ele.id()];

    if (removeFromPool && ele.removed() || alreadyAdded) {
      return;
    } else {
      elesToRemoveIds[ele.id()] = true;
    }

    if (ele.isNode()) {
      elesToRemove.push(ele); // nodes are removed last

      addConnectedEdges(ele);
      addChildren(ele);
    } else {
      elesToRemove.unshift(ele); // edges are removed first
    }
  } // make the list of elements to remove
  // (may be removing more than specified due to connected edges etc)


  for (var i = 0, l = self.length; i < l; i++) {
    var ele = self[i];
    add(ele);
  }

  function removeEdgeRef(node, edge) {
    var connectedEdges = node._private.edges;
    removeFromArray(connectedEdges, edge); // removing an edges invalidates the traversal cache for its nodes

    node.clearTraversalCache();
  }

  function removeParallelRefs(edge) {
    // removing an edge invalidates the traversal caches for the parallel edges
    edge.parallelEdges().clearTraversalCache();
  }

  var alteredParents = [];
  alteredParents.ids = {};

  function removeChildRef(parent, ele) {
    ele = ele[0];
    parent = parent[0];
    var children = parent._private.children;
    var pid = parent.id();
    removeFromArray(children, ele); // remove parent => child ref

    ele._private.parent = null; // remove child => parent ref

    if (!alteredParents.ids[pid]) {
      alteredParents.ids[pid] = true;
      alteredParents.push(parent);
    }
  }

  self.dirtyCompoundBoundsCache();

  if (removeFromPool) {
    cy.removeFromPool(elesToRemove); // remove from core pool
  }

  for (var _i5 = 0; _i5 < elesToRemove.length; _i5++) {
    var _ele3 = elesToRemove[_i5];

    if (removeFromPool) {
      // mark as removed
      _ele3._private.removed = true;
    } // add to list of removed elements


    removed.push(_ele3);

    if (_ele3.isEdge()) {
      // remove references to this edge in its connected nodes
      var src = _ele3.source()[0];

      var tgt = _ele3.target()[0];

      removeEdgeRef(src, _ele3);
      removeEdgeRef(tgt, _ele3);
      removeParallelRefs(_ele3);
    } else {
      // remove reference to parent
      var parent = _ele3.parent();

      if (parent.length !== 0) {
        removeChildRef(parent, _ele3);
      }
    }
  } // check to see if we have a compound graph or not


  var elesStillInside = cy._private.elements;
  cy._private.hasCompoundNodes = false;

  for (var _i6 = 0; _i6 < elesStillInside.length; _i6++) {
    var _ele4 = elesStillInside[_i6];

    if (_ele4.isParent()) {
      cy._private.hasCompoundNodes = true;
      break;
    }
  }

  var removedElements = new Collection(this.cy(), removed);

  if (removedElements.size() > 0) {
    // must manually notify since trigger won't do this automatically once removed
    if (notifyRenderer) {
      removedElements.emitAndNotify('remove');
    } else if (removeFromPool) {
      removedElements.emit('remove');
    }
  } // the parents who were modified by the removal need their style updated


  for (var _i7 = 0; _i7 < alteredParents.length; _i7++) {
    var _ele5 = alteredParents[_i7];

    if (!removeFromPool || !_ele5.removed()) {
      _ele5.updateStyle();
    }
  }

  return removedElements;
};

elesfn$t.move = function (struct) {
  var cy = this._private.cy;
  var eles = this; // just clean up refs, caches, etc. in the same way as when removing and then restoring
  // (our calls to remove/restore do not remove from the graph or make events)

  var notifyRenderer = false;
  var modifyPool = false;

  if (struct.source !== undefined || struct.target !== undefined) {
    var srcId = struct.source;
    var tgtId = struct.target;
    var srcExists = srcId != null && cy.hasElementWithId(srcId);
    var tgtExists = tgtId != null && cy.hasElementWithId(tgtId);

    if (srcExists || tgtExists) {
      cy.batch(function () {
        // avoid duplicate style updates
        eles.remove(notifyRenderer, modifyPool); // clean up refs etc.

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          var _data5 = ele._private.data;

          if (ele.isEdge()) {
            if (srcExists) {
              _data5.source = srcId;
            }

            if (tgtExists) {
              _data5.target = tgtId;
            }
          }
        }

        eles.restore(notifyRenderer, modifyPool); // make new refs, style, etc.
      });
      eles.emitAndNotify('move');
    }
  } else if (struct.parent !== undefined) {
    // move node to new parent
    var parentId = struct.parent;
    var parentExists = parentId === null || cy.hasElementWithId(parentId);

    if (parentExists) {
      var pidToAssign = parentId === null ? undefined : parentId;
      cy.batch(function () {
        // avoid duplicate style updates
        var updated = eles.remove(notifyRenderer, modifyPool); // clean up refs etc.

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          var _data6 = ele._private.data;

          if (ele.isNode()) {
            _data6.parent = pidToAssign;
          }
        }

        updated.restore(notifyRenderer, modifyPool); // make new refs, style, etc.
      });
      eles.emitAndNotify('move');
    }
  }

  return this;
};

[elesfn$b, elesfn$c, elesfn$d, elesfn$e, elesfn$f, data$1, elesfn$h, dimensions, elesfn$l, elesfn$m, elesfn$n, elesfn$o, elesfn$p, elesfn$q, elesfn$r, elesfn$s].forEach(function (props) {
  extend(elesfn$t, props);
});
var corefn = {
  add: function add(opts) {
    var elements;
    var cy = this; // add the elements

    if (elementOrCollection(opts)) {
      var eles = opts;

      if (eles._private.cy === cy) {
        // same instance => just restore
        elements = eles.restore();
      } else {
        // otherwise, copy from json
        var jsons = [];

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          jsons.push(ele.json());
        }

        elements = new Collection(cy, jsons);
      }
    } // specify an array of options
    else if (array(opts)) {
        var _jsons = opts;
        elements = new Collection(cy, _jsons);
      } // specify via opts.nodes and opts.edges
      else if (plainObject(opts) && (array(opts.nodes) || array(opts.edges))) {
          var elesByGroup = opts;
          var _jsons2 = [];
          var grs = ['nodes', 'edges'];

          for (var _i = 0, il = grs.length; _i < il; _i++) {
            var group = grs[_i];
            var elesArray = elesByGroup[group];

            if (array(elesArray)) {
              for (var j = 0, jl = elesArray.length; j < jl; j++) {
                var json = extend({
                  group: group
                }, elesArray[j]);

                _jsons2.push(json);
              }
            }
          }

          elements = new Collection(cy, _jsons2);
        } // specify options for one element
        else {
            var _json = opts;
            elements = new Element(cy, _json).collection();
          }

    return elements;
  },
  remove: function remove(collection$$1) {
    if (elementOrCollection(collection$$1)) ;else if (string(collection$$1)) {
      var selector = collection$$1;
      collection$$1 = this.$(selector);
    }
    return collection$$1.remove();
  }
};
/* global Float32Array */

/*! Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */

function generateCubicBezier(mX1, mY1, mX2, mY2) {
  var NEWTON_ITERATIONS = 4,
      NEWTON_MIN_SLOPE = 0.001,
      SUBDIVISION_PRECISION = 0.0000001,
      SUBDIVISION_MAX_ITERATIONS = 10,
      kSplineTableSize = 11,
      kSampleStepSize = 1.0 / (kSplineTableSize - 1.0),
      float32ArraySupported = typeof Float32Array !== 'undefined';
  /* Must contain four arguments. */

  if (arguments.length !== 4) {
    return false;
  }
  /* Arguments must be numbers. */


  for (var i = 0; i < 4; ++i) {
    if (typeof arguments[i] !== "number" || isNaN(arguments[i]) || !isFinite(arguments[i])) {
      return false;
    }
  }
  /* X values must be in the [0, 1] range. */


  mX1 = Math.min(mX1, 1);
  mX2 = Math.min(mX2, 1);
  mX1 = Math.max(mX1, 0);
  mX2 = Math.max(mX2, 0);
  var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

  function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
  }

  function B(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
  }

  function C(aA1) {
    return 3.0 * aA1;
  }

  function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
  }

  function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
  }

  function newtonRaphsonIterate(aX, aGuessT) {
    for (var _i = 0; _i < NEWTON_ITERATIONS; ++_i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);

      if (currentSlope === 0.0) {
        return aGuessT;
      }

      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }

    return aGuessT;
  }

  function calcSampleValues() {
    for (var _i2 = 0; _i2 < kSplineTableSize; ++_i2) {
      mSampleValues[_i2] = calcBezier(_i2 * kSampleStepSize, mX1, mX2);
    }
  }

  function binarySubdivide(aX, aA, aB) {
    var currentX,
        currentT,
        i = 0;

    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;

      if (currentX > 0.0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

    return currentT;
  }

  function getTForX(aX) {
    var intervalStart = 0.0,
        currentSample = 1,
        lastSample = kSplineTableSize - 1;

    for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }

    --currentSample;
    var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]),
        guessForT = intervalStart + dist * kSampleStepSize,
        initialSlope = getSlope(guessForT, mX1, mX2);

    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT);
    } else if (initialSlope === 0.0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);
    }
  }

  var _precomputed = false;

  function precompute() {
    _precomputed = true;

    if (mX1 !== mY1 || mX2 !== mY2) {
      calcSampleValues();
    }
  }

  var f = function f(aX) {
    if (!_precomputed) {
      precompute();
    }

    if (mX1 === mY1 && mX2 === mY2) {
      return aX;
    }

    if (aX === 0) {
      return 0;
    }

    if (aX === 1) {
      return 1;
    }

    return calcBezier(getTForX(aX), mY1, mY2);
  };

  f.getControlPoints = function () {
    return [{
      x: mX1,
      y: mY1
    }, {
      x: mX2,
      y: mY2
    }];
  };

  var str = "generateBezier(" + [mX1, mY1, mX2, mY2] + ")";

  f.toString = function () {
    return str;
  };

  return f;
}
/*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */

/* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
   then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */


var generateSpringRK4 = function () {
  function springAccelerationForState(state) {
    return -state.tension * state.x - state.friction * state.v;
  }

  function springEvaluateStateWithDerivative(initialState, dt, derivative) {
    var state = {
      x: initialState.x + derivative.dx * dt,
      v: initialState.v + derivative.dv * dt,
      tension: initialState.tension,
      friction: initialState.friction
    };
    return {
      dx: state.v,
      dv: springAccelerationForState(state)
    };
  }

  function springIntegrateState(state, dt) {
    var a = {
      dx: state.v,
      dv: springAccelerationForState(state)
    },
        b = springEvaluateStateWithDerivative(state, dt * 0.5, a),
        c = springEvaluateStateWithDerivative(state, dt * 0.5, b),
        d = springEvaluateStateWithDerivative(state, dt, c),
        dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),
        dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);
    state.x = state.x + dxdt * dt;
    state.v = state.v + dvdt * dt;
    return state;
  }

  return function springRK4Factory(tension, friction, duration) {
    var initState = {
      x: -1,
      v: 0,
      tension: null,
      friction: null
    },
        path = [0],
        time_lapsed = 0,
        tolerance = 1 / 10000,
        DT = 16 / 1000,
        have_duration,
        dt,
        last_state;
    tension = parseFloat(tension) || 500;
    friction = parseFloat(friction) || 20;
    duration = duration || null;
    initState.tension = tension;
    initState.friction = friction;
    have_duration = duration !== null;
    /* Calculate the actual time it takes for this animation to complete with the provided conditions. */

    if (have_duration) {
      /* Run the simulation without a duration. */
      time_lapsed = springRK4Factory(tension, friction);
      /* Compute the adjusted time delta. */

      dt = time_lapsed / duration * DT;
    } else {
      dt = DT;
    }

    for (;;) {
      /* Next/step function .*/
      last_state = springIntegrateState(last_state || initState, dt);
      /* Store the position. */

      path.push(1 + last_state.x);
      time_lapsed += 16;
      /* If the change threshold is reached, break. */

      if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {
        break;
      }
    }
    /* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the
       computed path and returns a snapshot of the position according to a given percentComplete. */


    return !have_duration ? time_lapsed : function (percentComplete) {
      return path[percentComplete * (path.length - 1) | 0];
    };
  };
}();

var cubicBezier = function cubicBezier(t1, p1, t2, p2) {
  var bezier = generateCubicBezier(t1, p1, t2, p2);
  return function (start, end, percent) {
    return start + (end - start) * bezier(percent);
  };
};

var easings = {
  'linear': function linear(start, end, percent) {
    return start + (end - start) * percent;
  },
  // default easings
  'ease': cubicBezier(0.25, 0.1, 0.25, 1),
  'ease-in': cubicBezier(0.42, 0, 1, 1),
  'ease-out': cubicBezier(0, 0, 0.58, 1),
  'ease-in-out': cubicBezier(0.42, 0, 0.58, 1),
  // sine
  'ease-in-sine': cubicBezier(0.47, 0, 0.745, 0.715),
  'ease-out-sine': cubicBezier(0.39, 0.575, 0.565, 1),
  'ease-in-out-sine': cubicBezier(0.445, 0.05, 0.55, 0.95),
  // quad
  'ease-in-quad': cubicBezier(0.55, 0.085, 0.68, 0.53),
  'ease-out-quad': cubicBezier(0.25, 0.46, 0.45, 0.94),
  'ease-in-out-quad': cubicBezier(0.455, 0.03, 0.515, 0.955),
  // cubic
  'ease-in-cubic': cubicBezier(0.55, 0.055, 0.675, 0.19),
  'ease-out-cubic': cubicBezier(0.215, 0.61, 0.355, 1),
  'ease-in-out-cubic': cubicBezier(0.645, 0.045, 0.355, 1),
  // quart
  'ease-in-quart': cubicBezier(0.895, 0.03, 0.685, 0.22),
  'ease-out-quart': cubicBezier(0.165, 0.84, 0.44, 1),
  'ease-in-out-quart': cubicBezier(0.77, 0, 0.175, 1),
  // quint
  'ease-in-quint': cubicBezier(0.755, 0.05, 0.855, 0.06),
  'ease-out-quint': cubicBezier(0.23, 1, 0.32, 1),
  'ease-in-out-quint': cubicBezier(0.86, 0, 0.07, 1),
  // expo
  'ease-in-expo': cubicBezier(0.95, 0.05, 0.795, 0.035),
  'ease-out-expo': cubicBezier(0.19, 1, 0.22, 1),
  'ease-in-out-expo': cubicBezier(1, 0, 0, 1),
  // circ
  'ease-in-circ': cubicBezier(0.6, 0.04, 0.98, 0.335),
  'ease-out-circ': cubicBezier(0.075, 0.82, 0.165, 1),
  'ease-in-out-circ': cubicBezier(0.785, 0.135, 0.15, 0.86),
  // user param easings...
  'spring': function spring(tension, friction, duration) {
    if (duration === 0) {
      // can't get a spring w/ duration 0
      return easings.linear; // duration 0 => jump to end so impl doesn't matter
    }

    var spring = generateSpringRK4(tension, friction, duration);
    return function (start, end, percent) {
      return start + (end - start) * spring(percent);
    };
  },
  'cubic-bezier': cubicBezier
};

function getEasedValue(type, start, end, percent, easingFn) {
  if (percent === 1) {
    return end;
  }

  var val = easingFn(start, end, percent);

  if (type == null) {
    return val;
  }

  if (type.roundValue || type.color) {
    val = Math.round(val);
  }

  if (type.min !== undefined) {
    val = Math.max(val, type.min);
  }

  if (type.max !== undefined) {
    val = Math.min(val, type.max);
  }

  return val;
}

function getValue(prop, spec) {
  if (prop.pfValue != null || prop.value != null) {
    if (prop.pfValue != null && (spec == null || spec.type.units !== '%')) {
      return prop.pfValue;
    } else {
      return prop.value;
    }
  } else {
    return prop;
  }
}

function ease(startProp, endProp, percent, easingFn, propSpec) {
  var type = propSpec != null ? propSpec.type : null;

  if (percent < 0) {
    percent = 0;
  } else if (percent > 1) {
    percent = 1;
  }

  var start = getValue(startProp, propSpec);
  var end = getValue(endProp, propSpec);

  if (number(start) && number(end)) {
    return getEasedValue(type, start, end, percent, easingFn);
  } else if (array(start) && array(end)) {
    var easedArr = [];

    for (var i = 0; i < end.length; i++) {
      var si = start[i];
      var ei = end[i];

      if (si != null && ei != null) {
        var val = getEasedValue(type, si, ei, percent, easingFn);
        easedArr.push(val);
      } else {
        easedArr.push(ei);
      }
    }

    return easedArr;
  }

  return undefined;
}

function step(self, ani, now, isCore) {
  var isEles = !isCore;
  var _p = self._private;
  var ani_p = ani._private;
  var pEasing = ani_p.easing;
  var startTime = ani_p.startTime;
  var cy = isCore ? self : self.cy();
  var style$$1 = cy.style();

  if (!ani_p.easingImpl) {
    if (pEasing == null) {
      // use default
      ani_p.easingImpl = easings['linear'];
    } else {
      // then define w/ name
      var easingVals;

      if (string(pEasing)) {
        var easingProp = style$$1.parse('transition-timing-function', pEasing);
        easingVals = easingProp.value;
      } else {
        // then assume preparsed array
        easingVals = pEasing;
      }

      var name, args;

      if (string(easingVals)) {
        name = easingVals;
        args = [];
      } else {
        name = easingVals[1];
        args = easingVals.slice(2).map(function (n) {
          return +n;
        });
      }

      if (args.length > 0) {
        // create with args
        if (name === 'spring') {
          args.push(ani_p.duration); // need duration to generate spring
        }

        ani_p.easingImpl = easings[name].apply(null, args);
      } else {
        // static impl by name
        ani_p.easingImpl = easings[name];
      }
    }
  }

  var easing = ani_p.easingImpl;
  var percent;

  if (ani_p.duration === 0) {
    percent = 1;
  } else {
    percent = (now - startTime) / ani_p.duration;
  }

  if (ani_p.applying) {
    percent = ani_p.progress;
  }

  if (percent < 0) {
    percent = 0;
  } else if (percent > 1) {
    percent = 1;
  }

  if (ani_p.delay == null) {
    // then update
    var startPos = ani_p.startPosition;
    var endPos = ani_p.position;

    if (endPos && isEles && !self.locked()) {
      var newPos = {};

      if (valid(startPos.x, endPos.x)) {
        newPos.x = ease(startPos.x, endPos.x, percent, easing);
      }

      if (valid(startPos.y, endPos.y)) {
        newPos.y = ease(startPos.y, endPos.y, percent, easing);
      }

      self.position(newPos);
    }

    var startPan = ani_p.startPan;
    var endPan = ani_p.pan;
    var pan = _p.pan;
    var animatingPan = endPan != null && isCore;

    if (animatingPan) {
      if (valid(startPan.x, endPan.x)) {
        pan.x = ease(startPan.x, endPan.x, percent, easing);
      }

      if (valid(startPan.y, endPan.y)) {
        pan.y = ease(startPan.y, endPan.y, percent, easing);
      }

      self.emit('pan');
    }

    var startZoom = ani_p.startZoom;
    var endZoom = ani_p.zoom;
    var animatingZoom = endZoom != null && isCore;

    if (animatingZoom) {
      if (valid(startZoom, endZoom)) {
        _p.zoom = ease(startZoom, endZoom, percent, easing);
      }

      self.emit('zoom');
    }

    if (animatingPan || animatingZoom) {
      self.emit('viewport');
    }

    var props = ani_p.style;

    if (props && props.length > 0 && isEles) {
      for (var i = 0; i < props.length; i++) {
        var prop = props[i];
        var _name = prop.name;
        var end = prop;
        var start = ani_p.startStyle[_name];
        var propSpec = style$$1.properties[start.name];
        var easedVal = ease(start, end, percent, easing, propSpec);
        style$$1.overrideBypass(self, _name, easedVal);
      } // for props


      self.emit('style');
    } // if

  }

  ani_p.progress = percent;
  return percent;
}

function valid(start, end) {
  if (start == null || end == null) {
    return false;
  }

  if (number(start) && number(end)) {
    return true;
  } else if (start && end) {
    return true;
  }

  return false;
}

function startAnimation(self, ani, now, isCore) {
  var ani_p = ani._private;
  ani_p.started = true;
  ani_p.startTime = now - ani_p.progress * ani_p.duration;
}

function stepAll(now, cy) {
  var eles = cy._private.aniEles;
  var doneEles = [];

  function stepOne(ele, isCore) {
    var _p = ele._private;
    var current = _p.animation.current;
    var queue = _p.animation.queue;
    var ranAnis = false; // cancel all animations on display:none ele

    if (!isCore && ele.pstyle('display').value === 'none') {
      // put all current and queue animations in this tick's current list
      // and empty the lists for the element
      current = current.splice(0, current.length).concat(queue.splice(0, queue.length)); // stop all animations

      for (var i = 0; i < current.length; i++) {
        current[i].stop();
      }
    } // if nothing currently animating, get something from the queue


    if (current.length === 0) {
      var next = queue.shift();

      if (next) {
        current.push(next);
      }
    }

    var callbacks = function callbacks(_callbacks) {
      for (var j = _callbacks.length - 1; j >= 0; j--) {
        var cb = _callbacks[j];
        cb();
      }

      _callbacks.splice(0, _callbacks.length);
    }; // step and remove if done


    for (var _i = current.length - 1; _i >= 0; _i--) {
      var ani = current[_i];
      var ani_p = ani._private;

      if (ani_p.stopped) {
        current.splice(_i, 1);
        ani_p.hooked = false;
        ani_p.playing = false;
        ani_p.started = false;
        callbacks(ani_p.frames);
        continue;
      }

      if (!ani_p.playing && !ani_p.applying) {
        continue;
      } // an apply() while playing shouldn't do anything


      if (ani_p.playing && ani_p.applying) {
        ani_p.applying = false;
      }

      if (!ani_p.started) {
        startAnimation(ele, ani, now, isCore);
      }

      step(ele, ani, now, isCore);

      if (ani_p.applying) {
        ani_p.applying = false;
      }

      callbacks(ani_p.frames);

      if (ani_p.step != null) {
        ani_p.step(now);
      }

      if (ani.completed()) {
        current.splice(_i, 1);
        ani_p.hooked = false;
        ani_p.playing = false;
        ani_p.started = false;
        callbacks(ani_p.completes);
      }

      ranAnis = true;
    }

    if (!isCore && current.length === 0 && queue.length === 0) {
      doneEles.push(ele);
    }

    return ranAnis;
  } // stepElement
  // handle all eles


  var ranEleAni = false;

  for (var e = 0; e < eles.length; e++) {
    var ele = eles[e];
    var handledThisEle = stepOne(ele);
    ranEleAni = ranEleAni || handledThisEle;
  } // each element


  var ranCoreAni = stepOne(cy, true); // notify renderer

  if (ranEleAni || ranCoreAni) {
    if (eles.length > 0) {
      cy.notify('draw', eles);
    } else {
      cy.notify('draw');
    }
  } // remove elements from list of currently animating if its queues are empty


  eles.unmerge(doneEles);
  cy.emit('step');
} // stepAll


var corefn$1 = {
  // pull in animation functions
  animate: define$3.animate(),
  animation: define$3.animation(),
  animated: define$3.animated(),
  clearQueue: define$3.clearQueue(),
  delay: define$3.delay(),
  delayAnimation: define$3.delayAnimation(),
  stop: define$3.stop(),
  addToAnimationPool: function addToAnimationPool(eles) {
    var cy = this;

    if (!cy.styleEnabled()) {
      return;
    } // save cycles when no style used


    cy._private.aniEles.merge(eles);
  },
  stopAnimationLoop: function stopAnimationLoop() {
    this._private.animationsRunning = false;
  },
  startAnimationLoop: function startAnimationLoop() {
    var cy = this;
    cy._private.animationsRunning = true;

    if (!cy.styleEnabled()) {
      return;
    } // save cycles when no style used
    // NB the animation loop will exec in headless environments if style enabled
    // and explicit cy.destroy() is necessary to stop the loop


    function headlessStep() {
      if (!cy._private.animationsRunning) {
        return;
      }

      requestAnimationFrame(function animationStep(now$$1) {
        stepAll(now$$1, cy);
        headlessStep();
      });
    }

    var renderer = cy.renderer();

    if (renderer && renderer.beforeRender) {
      // let the renderer schedule animations
      renderer.beforeRender(function rendererAnimationStep(willDraw, now$$1) {
        stepAll(now$$1, cy);
      }, renderer.beforeRenderPriorities.animations);
    } else {
      // manage the animation loop ourselves
      headlessStep(); // first call
    }
  }
};
var emitterOptions$1 = {
  qualifierCompare: function qualifierCompare(selector1, selector2) {
    if (selector1 == null || selector2 == null) {
      return selector1 == null && selector2 == null;
    } else {
      return selector1.sameText(selector2);
    }
  },
  eventMatches: function eventMatches(cy, listener, eventObj) {
    var selector = listener.qualifier;

    if (selector != null) {
      return cy !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);
    }

    return true;
  },
  addEventFields: function addEventFields(cy, evt) {
    evt.cy = cy;
    evt.target = cy;
  },
  callbackContext: function callbackContext(cy, listener, eventObj) {
    return listener.qualifier != null ? eventObj.target : cy;
  }
};

var argSelector$1 = function argSelector(arg) {
  if (string(arg)) {
    return new Selector(arg);
  } else {
    return arg;
  }
};

var elesfn$u = {
  createEmitter: function createEmitter() {
    var _p = this._private;

    if (!_p.emitter) {
      _p.emitter = new Emitter(emitterOptions$1, this);
    }

    return this;
  },
  emitter: function emitter() {
    return this._private.emitter;
  },
  on: function on(events, selector, callback) {
    this.emitter().on(events, argSelector$1(selector), callback);
    return this;
  },
  removeListener: function removeListener(events, selector, callback) {
    this.emitter().removeListener(events, argSelector$1(selector), callback);
    return this;
  },
  one: function one(events, selector, callback) {
    this.emitter().one(events, argSelector$1(selector), callback);
    return this;
  },
  once: function once(events, selector, callback) {
    this.emitter().one(events, argSelector$1(selector), callback);
    return this;
  },
  emit: function emit(events, extraParams) {
    this.emitter().emit(events, extraParams);
    return this;
  },
  emitAndNotify: function emitAndNotify(event$$1, eles) {
    this.emit(event$$1);
    this.notify(event$$1, eles);
    return this;
  }
};
define$3.eventAliasesOn(elesfn$u);
var corefn$2 = {
  png: function png(options) {
    var renderer = this._private.renderer;
    options = options || {};
    return renderer.png(options);
  },
  jpg: function jpg(options) {
    var renderer = this._private.renderer;
    options = options || {};
    options.bg = options.bg || '#fff';
    return renderer.jpg(options);
  }
};
corefn$2.jpeg = corefn$2.jpg;
var corefn$3 = {
  layout: function layout(options) {
    var cy = this;

    if (options == null) {
      error('Layout options must be specified to make a layout');
      return;
    }

    if (options.name == null) {
      error('A `name` must be specified to make a layout');
      return;
    }

    var name = options.name;
    var Layout = cy.extension('layout', name);

    if (Layout == null) {
      error('No such layout `' + name + '` found.  Did you forget to import it and `cytoscape.use()` it?');
      return;
    }

    var eles;

    if (string(options.eles)) {
      eles = cy.$(options.eles);
    } else {
      eles = options.eles != null ? options.eles : cy.$();
    }

    var layout = new Layout(extend({}, options, {
      cy: cy,
      eles: eles
    }));
    return layout;
  }
};
corefn$3.createLayout = corefn$3.makeLayout = corefn$3.layout;
var corefn$4 = {
  notify: function notify(eventName, eventEles) {
    var _p = this._private;

    if (this.batching()) {
      _p.batchNotifications = _p.batchNotifications || {};
      var eles = _p.batchNotifications[eventName] = _p.batchNotifications[eventName] || this.collection();

      if (eventEles != null) {
        eles.merge(eventEles);
      }

      return; // notifications are disabled during batching
    }

    if (!_p.notificationsEnabled) {
      return;
    } // exit on disabled


    var renderer = this.renderer(); // exit if destroy() called on core or renderer in between frames #1499 #1528

    if (this.isDestroyed() || !renderer) {
      return;
    }

    renderer.notify(eventName, eventEles);
  },
  notifications: function notifications(bool) {
    var p = this._private;

    if (bool === undefined) {
      return p.notificationsEnabled;
    } else {
      p.notificationsEnabled = bool ? true : false;
    }

    return this;
  },
  noNotifications: function noNotifications(callback) {
    this.notifications(false);
    callback();
    this.notifications(true);
  },
  batching: function batching() {
    return this._private.batchCount > 0;
  },
  startBatch: function startBatch() {
    var _p = this._private;

    if (_p.batchCount == null) {
      _p.batchCount = 0;
    }

    if (_p.batchCount === 0) {
      _p.batchStyleEles = this.collection();
      _p.batchNotifications = {};
    }

    _p.batchCount++;
    return this;
  },
  endBatch: function endBatch() {
    var _p = this._private;

    if (_p.batchCount === 0) {
      return this;
    }

    _p.batchCount--;

    if (_p.batchCount === 0) {
      // update style for dirty eles
      _p.batchStyleEles.updateStyle();

      var renderer = this.renderer(); // notify the renderer of queued eles and event types

      Object.keys(_p.batchNotifications).forEach(function (eventName) {
        var eles = _p.batchNotifications[eventName];

        if (eles.empty()) {
          renderer.notify(eventName);
        } else {
          renderer.notify(eventName, eles);
        }
      });
    }

    return this;
  },
  batch: function batch(callback) {
    this.startBatch();
    callback();
    this.endBatch();
    return this;
  },
  // for backwards compatibility
  batchData: function batchData(map) {
    var cy = this;
    return this.batch(function () {
      var ids = Object.keys(map);

      for (var i = 0; i < ids.length; i++) {
        var id = ids[i];
        var data = map[id];
        var ele = cy.getElementById(id);
        ele.data(data);
      }
    });
  }
};
var rendererDefaults = defaults({
  hideEdgesOnViewport: false,
  textureOnViewport: false,
  motionBlur: false,
  motionBlurOpacity: 0.05,
  pixelRatio: undefined,
  desktopTapThreshold: 4,
  touchTapThreshold: 8,
  wheelSensitivity: 1
});
var corefn$5 = {
  renderTo: function renderTo(context, zoom, pan, pxRatio) {
    var r = this._private.renderer;
    r.renderTo(context, zoom, pan, pxRatio);
    return this;
  },
  renderer: function renderer() {
    return this._private.renderer;
  },
  forceRender: function forceRender() {
    this.notify('draw');
    return this;
  },
  resize: function resize() {
    this.invalidateSize();
    this.emitAndNotify('resize');
    return this;
  },
  initRenderer: function initRenderer(options) {
    var cy = this;
    var RendererProto = cy.extension('renderer', options.name);

    if (RendererProto == null) {
      error("Can not initialise: No such renderer `".concat(options.name, "` found. Did you forget to import it and `cytoscape.use()` it?"));
      return;
    }

    if (options.wheelSensitivity !== undefined) {
      warn("You have set a custom wheel sensitivity.  This will make your app zoom unnaturally when using mainstream mice.  You should change this value from the default only if you can guarantee that all your users will use the same hardware and OS configuration as your current machine.");
    }

    var rOpts = rendererDefaults(options);
    rOpts.cy = cy;
    cy._private.renderer = new RendererProto(rOpts);
    this.notify('init');
  },
  destroyRenderer: function destroyRenderer() {
    var cy = this;
    cy.notify('destroy'); // destroy the renderer

    var domEle = cy.container();

    if (domEle) {
      domEle._cyreg = null;

      while (domEle.childNodes.length > 0) {
        domEle.removeChild(domEle.childNodes[0]);
      }
    }

    cy._private.renderer = null; // to be extra safe, remove the ref

    cy.mutableElements().forEach(function (ele) {
      var _p = ele._private;
      _p.rscratch = {};
      _p.rstyle = {};
      _p.animation.current = [];
      _p.animation.queue = [];
    });
  },
  onRender: function onRender(fn) {
    return this.on('render', fn);
  },
  offRender: function offRender(fn) {
    return this.off('render', fn);
  }
};
corefn$5.invalidateDimensions = corefn$5.resize;
var corefn$6 = {
  // get a collection
  // - empty collection on no args
  // - collection of elements in the graph on selector arg
  // - guarantee a returned collection when elements or collection specified
  collection: function collection$$1(eles, opts) {
    if (string(eles)) {
      return this.$(eles);
    } else if (elementOrCollection(eles)) {
      return eles.collection();
    } else if (array(eles)) {
      return new Collection(this, eles, opts);
    }

    return new Collection(this);
  },
  nodes: function nodes(selector) {
    var nodes = this.$(function (ele) {
      return ele.isNode();
    });

    if (selector) {
      return nodes.filter(selector);
    }

    return nodes;
  },
  edges: function edges(selector) {
    var edges = this.$(function (ele) {
      return ele.isEdge();
    });

    if (selector) {
      return edges.filter(selector);
    }

    return edges;
  },
  // search the graph like jQuery
  $: function $(selector) {
    var eles = this._private.elements;

    if (selector) {
      return eles.filter(selector);
    } else {
      return eles.spawnSelf();
    }
  },
  mutableElements: function mutableElements() {
    return this._private.elements;
  }
}; // aliases

corefn$6.elements = corefn$6.filter = corefn$6.$;
var styfn = {}; // keys for style blocks, e.g. ttfftt

var TRUE = 't';
var FALSE = 'f'; // (potentially expensive calculation)
// apply the style to the element based on
// - its bypass
// - what selectors match it

styfn.apply = function (eles) {
  var self = this;
  var _p = self._private;
  var cy = _p.cy;
  var updatedEles = cy.collection();

  if (_p.newStyle) {
    // clear style caches
    _p.contextStyles = {};
    _p.propDiffs = {};
    self.cleanElements(eles, true);
  }

  for (var ie = 0; ie < eles.length; ie++) {
    var ele = eles[ie];
    var cxtMeta = self.getContextMeta(ele);

    if (cxtMeta.empty) {
      continue;
    }

    var cxtStyle = self.getContextStyle(cxtMeta);
    var app = self.applyContextStyle(cxtMeta, cxtStyle, ele);

    if (!_p.newStyle) {
      self.updateTransitions(ele, app.diffProps);
    }

    var hintsDiff = self.updateStyleHints(ele);

    if (hintsDiff) {
      updatedEles.merge(ele);
    }
  } // for elements


  _p.newStyle = false;
  return updatedEles;
};

styfn.getPropertiesDiff = function (oldCxtKey, newCxtKey) {
  var self = this;
  var cache = self._private.propDiffs = self._private.propDiffs || {};
  var dualCxtKey = oldCxtKey + '-' + newCxtKey;
  var cachedVal = cache[dualCxtKey];

  if (cachedVal) {
    return cachedVal;
  }

  var diffProps = [];
  var addedProp = {};

  for (var i = 0; i < self.length; i++) {
    var cxt = self[i];
    var oldHasCxt = oldCxtKey[i] === TRUE;
    var newHasCxt = newCxtKey[i] === TRUE;
    var cxtHasDiffed = oldHasCxt !== newHasCxt;
    var cxtHasMappedProps = cxt.mappedProperties.length > 0;

    if (cxtHasDiffed || newHasCxt && cxtHasMappedProps) {
      var props = void 0;

      if (cxtHasDiffed && cxtHasMappedProps) {
        props = cxt.properties; // suffices b/c mappedProperties is a subset of properties
      } else if (cxtHasDiffed) {
        props = cxt.properties; // need to check them all
      } else if (cxtHasMappedProps) {
        props = cxt.mappedProperties; // only need to check mapped
      }

      for (var j = 0; j < props.length; j++) {
        var prop = props[j];
        var name = prop.name; // if a later context overrides this property, then the fact that this context has switched/diffed doesn't matter
        // (semi expensive check since it makes this function O(n^2) on context length, but worth it since overall result
        // is cached)

        var laterCxtOverrides = false;

        for (var k = i + 1; k < self.length; k++) {
          var laterCxt = self[k];
          var hasLaterCxt = newCxtKey[k] === TRUE;

          if (!hasLaterCxt) {
            continue;
          } // can't override unless the context is active


          laterCxtOverrides = laterCxt.properties[prop.name] != null;

          if (laterCxtOverrides) {
            break;
          } // exit early as long as one later context overrides

        }

        if (!addedProp[name] && !laterCxtOverrides) {
          addedProp[name] = true;
          diffProps.push(name);
        }
      } // for props

    } // if

  } // for contexts


  cache[dualCxtKey] = diffProps;
  return diffProps;
};

styfn.getContextMeta = function (ele) {
  var self = this;
  var cxtKey = '';
  var diffProps;
  var prevKey = ele._private.styleCxtKey || '';

  if (self._private.newStyle) {
    prevKey = ''; // since we need to apply all style if a fresh stylesheet
  } // get the cxt key


  for (var i = 0; i < self.length; i++) {
    var context = self[i];
    var contextSelectorMatches = context.selector && context.selector.matches(ele); // NB: context.selector may be null for 'core'

    if (contextSelectorMatches) {
      cxtKey += TRUE;
    } else {
      cxtKey += FALSE;
    }
  } // for context


  diffProps = self.getPropertiesDiff(prevKey, cxtKey);
  ele._private.styleCxtKey = cxtKey;
  return {
    key: cxtKey,
    diffPropNames: diffProps,
    empty: diffProps.length === 0
  };
}; // gets a computed ele style object based on matched contexts


styfn.getContextStyle = function (cxtMeta) {
  var cxtKey = cxtMeta.key;
  var self = this;
  var cxtStyles = this._private.contextStyles = this._private.contextStyles || {}; // if already computed style, returned cached copy

  if (cxtStyles[cxtKey]) {
    return cxtStyles[cxtKey];
  }

  var style$$1 = {
    _private: {
      key: cxtKey
    }
  };

  for (var i = 0; i < self.length; i++) {
    var cxt = self[i];
    var hasCxt = cxtKey[i] === TRUE;

    if (!hasCxt) {
      continue;
    }

    for (var j = 0; j < cxt.properties.length; j++) {
      var prop = cxt.properties[j];
      style$$1[prop.name] = prop;
    }
  }

  cxtStyles[cxtKey] = style$$1;
  return style$$1;
};

styfn.applyContextStyle = function (cxtMeta, cxtStyle, ele) {
  var self = this;
  var diffProps = cxtMeta.diffPropNames;
  var retDiffProps = {};
  var types = self.types;

  for (var i = 0; i < diffProps.length; i++) {
    var diffPropName = diffProps[i];
    var cxtProp = cxtStyle[diffPropName];
    var eleProp = ele.pstyle(diffPropName);

    if (!cxtProp) {
      // no context prop means delete
      if (!eleProp) {
        continue; // no existing prop means nothing needs to be removed
        // nb affects initial application on mapped values like control-point-distances
      } else if (eleProp.bypass) {
        cxtProp = {
          name: diffPropName,
          deleteBypassed: true
        };
      } else {
        cxtProp = {
          name: diffPropName,
          delete: true
        };
      }
    } // save cycles when the context prop doesn't need to be applied


    if (eleProp === cxtProp) {
      continue;
    } // save cycles when a mapped context prop doesn't need to be applied


    if (cxtProp.mapped === types.fn // context prop is function mapper
    && eleProp.mapping != null // ele prop is a concrete value from from a mapper
    && eleProp.mapping.value === cxtProp.value // the current prop on the ele is a flat prop value for the function mapper
    ) {
        // NB don't write to cxtProp, as it's shared among eles (stored in stylesheet)
        var mapping = eleProp.mapping; // can write to mapping, as it's a per-ele copy

        var fnValue = mapping.fnValue = cxtProp.value(ele); // temporarily cache the value in case of a miss

        if (fnValue === mapping.prevFnValue) {
          continue;
        }
      }

    var retDiffProp = retDiffProps[diffPropName] = {
      prev: eleProp
    };
    self.applyParsedProperty(ele, cxtProp);
    retDiffProp.next = ele.pstyle(diffPropName);

    if (retDiffProp.next && retDiffProp.next.bypass) {
      retDiffProp.next = retDiffProp.next.bypassed;
    }
  }

  return {
    diffProps: retDiffProps
  };
};

styfn.updateStyleHints = function (ele) {
  var _p = ele._private;
  var self = this;
  var propNames = self.propertyGroupNames;
  var propGrKeys = self.propertyGroupKeys;

  var propHash = function propHash(ele, propNames, seedKey) {
    return self.getPropertiesHash(ele, propNames, seedKey);
  };

  var oldStyleKey = _p.styleKey;

  if (ele.removed()) {
    return false;
  }

  var isNode = _p.group === 'nodes'; // get the style key hashes per prop group
  // but lazily -- only use non-default prop values to reduce the number of hashes
  //

  var overriddenStyles = ele._private.style;
  propNames = Object.keys(overriddenStyles);

  for (var i = 0; i < propGrKeys.length; i++) {
    var grKey = propGrKeys[i];
    _p.styleKeys[grKey] = 0;
  }

  var updateGrKey = function updateGrKey(val, grKey) {
    return _p.styleKeys[grKey] = hashInt(val, _p.styleKeys[grKey]);
  }; // - hashing works on 32 bit ints b/c we use bitwise ops
  // - small numbers get cut off (e.g. 0.123 is seen as 0 by the hashing function)
  // - raise up small numbers so more significant digits are seen by hashing
  // - make small numbers negative to avoid collisions -- most style values are positive numbers
  // - works in practice and it's relatively cheap


  var cleanNum = function cleanNum(val) {
    return -128 < val && val < 128 && Math.floor(val) !== val ? -(val * 1024 | 0) : val;
  };

  for (var _i = 0; _i < propNames.length; _i++) {
    var name = propNames[_i];
    var parsedProp = overriddenStyles[name];

    if (parsedProp == null) {
      continue;
    }

    var propInfo = this.properties[name];
    var type = propInfo.type;
    var _grKey = propInfo.groupKey; // numbers are cheaper to hash than strings
    // 1 hash op vs n hash ops (for length n string)

    if (type.number) {
      // use pfValue if available (e.g. normalised units)
      var v = parsedProp.pfValue != null ? parsedProp.pfValue : parsedProp.value;

      if (type.multiple) {
        for (var _i2 = 0; _i2 < v.length; _i2++) {
          updateGrKey(cleanNum(v[_i2]), _grKey);
        }
      } else {
        updateGrKey(cleanNum(v), _grKey);
      }
    } else {
      var strVal = parsedProp.strValue;

      for (var j = 0; j < strVal.length; j++) {
        updateGrKey(strVal.charCodeAt(j), _grKey);
      }
    }
  } // overall style key
  //


  var hash = 0;

  for (var _i3 = 0; _i3 < propGrKeys.length; _i3++) {
    var _grKey2 = propGrKeys[_i3];
    var grHash = _p.styleKeys[_grKey2];
    hash = hashInt(grHash, hash);
  }

  _p.styleKey = hash; // label dims
  //

  var labelDimsKey = _p.labelDimsKey = _p.styleKeys.labelDimensions;
  _p.labelKey = propHash(ele, ['label'], labelDimsKey);
  _p.labelStyleKey = hashInt(_p.styleKeys.commonLabel, _p.labelKey);

  if (!isNode) {
    _p.sourceLabelKey = propHash(ele, ['source-label'], labelDimsKey);
    _p.sourceLabelStyleKey = hashInt(_p.styleKeys.commonLabel, _p.sourceLabelKey);
    _p.targetLabelKey = propHash(ele, ['target-label'], labelDimsKey);
    _p.targetLabelStyleKey = hashInt(_p.styleKeys.commonLabel, _p.targetLabelKey);
  } // node
  //


  if (isNode) {
    var _p$styleKeys = _p.styleKeys,
        nodeBody = _p$styleKeys.nodeBody,
        nodeBorder = _p$styleKeys.nodeBorder,
        backgroundImage = _p$styleKeys.backgroundImage,
        compound = _p$styleKeys.compound,
        pie = _p$styleKeys.pie;
    _p.nodeKey = hashIntsArray([nodeBorder, backgroundImage, compound, pie], nodeBody);
    _p.hasPie = pie != 0;
  }

  return oldStyleKey !== _p.styleKey;
};

styfn.clearStyleHints = function (ele) {
  var _p = ele._private;
  _p.styleKeys = {};
  _p.styleKey = null;
  _p.labelKey = null;
  _p.labelStyleKey = null;
  _p.sourceLabelKey = null;
  _p.sourceLabelStyleKey = null;
  _p.targetLabelKey = null;
  _p.targetLabelStyleKey = null;
  _p.nodeKey = null;
  _p.hasPie = null;
}; // apply a property to the style (for internal use)
// returns whether application was successful
//
// now, this function flattens the property, and here's how:
//
// for parsedProp:{ bypass: true, deleteBypass: true }
// no property is generated, instead the bypass property in the
// element's style is replaced by what's pointed to by the `bypassed`
// field in the bypass property (i.e. restoring the property the
// bypass was overriding)
//
// for parsedProp:{ mapped: truthy }
// the generated flattenedProp:{ mapping: prop }
//
// for parsedProp:{ bypass: true }
// the generated flattenedProp:{ bypassed: parsedProp }


styfn.applyParsedProperty = function (ele, parsedProp) {
  var self = this;
  var prop = parsedProp;
  var style$$1 = ele._private.style;
  var flatProp;
  var types = self.types;
  var type = self.properties[prop.name].type;
  var propIsBypass = prop.bypass;
  var origProp = style$$1[prop.name];
  var origPropIsBypass = origProp && origProp.bypass;
  var _p = ele._private;
  var flatPropMapping = 'mapping';

  var getVal = function getVal(p) {
    if (p == null) {
      return null;
    } else if (p.pfValue != null) {
      return p.pfValue;
    } else {
      return p.value;
    }
  };

  var checkTriggers = function checkTriggers() {
    var fromVal = getVal(origProp);
    var toVal = getVal(prop);
    self.checkTriggers(ele, prop.name, fromVal, toVal);
  }; // edge sanity checks to prevent the client from making serious mistakes


  if (parsedProp.name === 'curve-style' && ele.isEdge() && ( // loops must be bundled beziers
  parsedProp.value !== 'bezier' && ele.isLoop() || // edges connected to compound nodes can not be haystacks
  parsedProp.value === 'haystack' && (ele.source().isParent() || ele.target().isParent()))) {
    prop = parsedProp = this.parse(parsedProp.name, 'bezier', propIsBypass);
  }

  if (prop.delete) {
    // delete the property and use the default value on falsey value
    style$$1[prop.name] = undefined;
    checkTriggers();
    return true;
  }

  if (prop.deleteBypassed) {
    // delete the property that the
    if (!origProp) {
      checkTriggers();
      return true; // can't delete if no prop
    } else if (origProp.bypass) {
      // delete bypassed
      origProp.bypassed = undefined;
      checkTriggers();
      return true;
    } else {
      return false; // we're unsuccessful deleting the bypassed
    }
  } // check if we need to delete the current bypass


  if (prop.deleteBypass) {
    // then this property is just here to indicate we need to delete
    if (!origProp) {
      checkTriggers();
      return true; // property is already not defined
    } else if (origProp.bypass) {
      // then replace the bypass property with the original
      // because the bypassed property was already applied (and therefore parsed), we can just replace it (no reapplying necessary)
      style$$1[prop.name] = origProp.bypassed;
      checkTriggers();
      return true;
    } else {
      return false; // we're unsuccessful deleting the bypass
    }
  }

  var printMappingErr = function printMappingErr() {
    warn('Do not assign mappings to elements without corresponding data (i.e. ele `' + ele.id() + '` has no mapping for property `' + prop.name + '` with data field `' + prop.field + '`); try a `[' + prop.field + ']` selector to limit scope to elements with `' + prop.field + '` defined');
  }; // put the property in the style objects


  switch (prop.mapped) {
    // flatten the property if mapped
    case types.mapData:
      {
        // flatten the field (e.g. data.foo.bar)
        var fields = prop.field.split('.');
        var fieldVal = _p.data;

        for (var i = 0; i < fields.length && fieldVal; i++) {
          var field = fields[i];
          fieldVal = fieldVal[field];
        }

        if (fieldVal == null) {
          printMappingErr();
          return false;
        }

        var percent;

        if (!number(fieldVal)) {
          // then don't apply and fall back on the existing style
          warn('Do not use continuous mappers without specifying numeric data (i.e. `' + prop.field + ': ' + fieldVal + '` for `' + ele.id() + '` is non-numeric)');
          return false;
        } else {
          var fieldWidth = prop.fieldMax - prop.fieldMin;

          if (fieldWidth === 0) {
            // safety check -- not strictly necessary as no props of zero range should be passed here
            percent = 0;
          } else {
            percent = (fieldVal - prop.fieldMin) / fieldWidth;
          }
        } // make sure to bound percent value


        if (percent < 0) {
          percent = 0;
        } else if (percent > 1) {
          percent = 1;
        }

        if (type.color) {
          var r1 = prop.valueMin[0];
          var r2 = prop.valueMax[0];
          var g1 = prop.valueMin[1];
          var g2 = prop.valueMax[1];
          var b1 = prop.valueMin[2];
          var b2 = prop.valueMax[2];
          var a1 = prop.valueMin[3] == null ? 1 : prop.valueMin[3];
          var a2 = prop.valueMax[3] == null ? 1 : prop.valueMax[3];
          var clr = [Math.round(r1 + (r2 - r1) * percent), Math.round(g1 + (g2 - g1) * percent), Math.round(b1 + (b2 - b1) * percent), Math.round(a1 + (a2 - a1) * percent)];
          flatProp = {
            // colours are simple, so just create the flat property instead of expensive string parsing
            bypass: prop.bypass,
            // we're a bypass if the mapping property is a bypass
            name: prop.name,
            value: clr,
            strValue: 'rgb(' + clr[0] + ', ' + clr[1] + ', ' + clr[2] + ')'
          };
        } else if (type.number) {
          var calcValue = prop.valueMin + (prop.valueMax - prop.valueMin) * percent;
          flatProp = this.parse(prop.name, calcValue, prop.bypass, flatPropMapping);
        } else {
          return false; // can only map to colours and numbers
        }

        if (!flatProp) {
          // if we can't flatten the property, then don't apply the property and fall back on the existing style
          printMappingErr();
          return false;
        }

        flatProp.mapping = prop; // keep a reference to the mapping

        prop = flatProp; // the flattened (mapped) property is the one we want

        break;
      }
    // direct mapping

    case types.data:
      {
        // flatten the field (e.g. data.foo.bar)
        var _fields = prop.field.split('.');

        var _fieldVal = _p.data;

        for (var _i4 = 0; _i4 < _fields.length && _fieldVal; _i4++) {
          var _field = _fields[_i4];
          _fieldVal = _fieldVal[_field];
        }

        if (_fieldVal != null) {
          flatProp = this.parse(prop.name, _fieldVal, prop.bypass, flatPropMapping);
        }

        if (!flatProp) {
          // if we can't flatten the property, then don't apply and fall back on the existing style
          printMappingErr();
          return false;
        }

        flatProp.mapping = prop; // keep a reference to the mapping

        prop = flatProp; // the flattened (mapped) property is the one we want

        break;
      }

    case types.fn:
      {
        var fn$$1 = prop.value;
        var fnRetVal = prop.fnValue != null ? prop.fnValue : fn$$1(ele); // check for cached value before calling function

        prop.prevFnValue = fnRetVal;

        if (fnRetVal == null) {
          warn('Custom function mappers may not return null (i.e. `' + prop.name + '` for ele `' + ele.id() + '` is null)');
          return false;
        }

        flatProp = this.parse(prop.name, fnRetVal, prop.bypass, flatPropMapping);

        if (!flatProp) {
          warn('Custom function mappers may not return invalid values for the property type (i.e. `' + prop.name + '` for ele `' + ele.id() + '` is invalid)');
          return false;
        }

        flatProp.mapping = copy(prop); // keep a reference to the mapping

        prop = flatProp; // the flattened (mapped) property is the one we want

        break;
      }

    case undefined:
      break;
    // just set the property

    default:
      return false;
    // not a valid mapping
  } // if the property is a bypass property, then link the resultant property to the original one


  if (propIsBypass) {
    if (origPropIsBypass) {
      // then this bypass overrides the existing one
      prop.bypassed = origProp.bypassed; // steal bypassed prop from old bypass
    } else {
      // then link the orig prop to the new bypass
      prop.bypassed = origProp;
    }

    style$$1[prop.name] = prop; // and set
  } else {
    // prop is not bypass
    if (origPropIsBypass) {
      // then keep the orig prop (since it's a bypass) and link to the new prop
      origProp.bypassed = prop;
    } else {
      // then just replace the old prop with the new one
      style$$1[prop.name] = prop;
    }
  }

  checkTriggers();
  return true;
};

styfn.cleanElements = function (eles, keepBypasses) {
  for (var i = 0; i < eles.length; i++) {
    var ele = eles[i];
    this.clearStyleHints(ele);
    ele.dirtyCompoundBoundsCache();
    ele.dirtyBoundingBoxCache();

    if (!keepBypasses) {
      ele._private.style = {};
    } else {
      var style$$1 = ele._private.style;
      var propNames = Object.keys(style$$1);

      for (var j = 0; j < propNames.length; j++) {
        var propName = propNames[j];
        var eleProp = style$$1[propName];

        if (eleProp != null) {
          if (eleProp.bypass) {
            eleProp.bypassed = null;
          } else {
            style$$1[propName] = null;
          }
        }
      }
    }
  }
}; // updates the visual style for all elements (useful for manual style modification after init)


styfn.update = function () {
  var cy = this._private.cy;
  var eles = cy.mutableElements();
  eles.updateStyle();
}; // diffProps : { name => { prev, next } }


styfn.updateTransitions = function (ele, diffProps) {
  var self = this;
  var _p = ele._private;
  var props = ele.pstyle('transition-property').value;
  var duration = ele.pstyle('transition-duration').pfValue;
  var delay = ele.pstyle('transition-delay').pfValue;

  if (props.length > 0 && duration > 0) {
    var style$$1 = {}; // build up the style to animate towards

    var anyPrev = false;

    for (var i = 0; i < props.length; i++) {
      var prop = props[i];
      var styProp = ele.pstyle(prop);
      var diffProp = diffProps[prop];

      if (!diffProp) {
        continue;
      }

      var prevProp = diffProp.prev;
      var fromProp = prevProp;
      var toProp = diffProp.next != null ? diffProp.next : styProp;
      var diff = false;
      var initVal = void 0;
      var initDt = 0.000001; // delta time % value for initVal (allows animating out of init zero opacity)

      if (!fromProp) {
        continue;
      } // consider px values


      if (number(fromProp.pfValue) && number(toProp.pfValue)) {
        diff = toProp.pfValue - fromProp.pfValue; // nonzero is truthy

        initVal = fromProp.pfValue + initDt * diff; // consider numerical values
      } else if (number(fromProp.value) && number(toProp.value)) {
        diff = toProp.value - fromProp.value; // nonzero is truthy

        initVal = fromProp.value + initDt * diff; // consider colour values
      } else if (array(fromProp.value) && array(toProp.value)) {
        diff = fromProp.value[0] !== toProp.value[0] || fromProp.value[1] !== toProp.value[1] || fromProp.value[2] !== toProp.value[2];
        initVal = fromProp.strValue;
      } // the previous value is good for an animation only if it's different


      if (diff) {
        style$$1[prop] = toProp.strValue; // to val

        this.applyBypass(ele, prop, initVal); // from val

        anyPrev = true;
      }
    } // end if props allow ani
    // can't transition if there's nothing previous to transition from


    if (!anyPrev) {
      return;
    }

    _p.transitioning = true;
    new Promise$1(function (resolve) {
      if (delay > 0) {
        ele.delayAnimation(delay).play().promise().then(resolve);
      } else {
        resolve();
      }
    }).then(function () {
      return ele.animation({
        style: style$$1,
        duration: duration,
        easing: ele.pstyle('transition-timing-function').value,
        queue: false
      }).play().promise();
    }).then(function () {
      // if( !isBypass ){
      self.removeBypasses(ele, props);
      ele.emitAndNotify('style'); // }

      _p.transitioning = false;
    });
  } else if (_p.transitioning) {
    this.removeBypasses(ele, props);
    ele.emitAndNotify('style');
    _p.transitioning = false;
  }
};

styfn.checkTrigger = function (ele, name, fromValue, toValue, getTrigger, onTrigger) {
  var prop = this.properties[name];
  var triggerCheck = getTrigger(prop);

  if (triggerCheck != null && triggerCheck(fromValue, toValue)) {
    onTrigger();
  }
};

styfn.checkZOrderTrigger = function (ele, name, fromValue, toValue) {
  var _this = this;

  this.checkTrigger(ele, name, fromValue, toValue, function (prop) {
    return prop.triggersZOrder;
  }, function () {
    _this._private.cy.notify('zorder', ele);
  });
};

styfn.checkBoundsTrigger = function (ele, name, fromValue, toValue) {
  this.checkTrigger(ele, name, fromValue, toValue, function (prop) {
    return prop.triggersBounds;
  }, function () {
    ele.dirtyCompoundBoundsCache();
    ele.dirtyBoundingBoxCache();
  });
};

styfn.checkTriggers = function (ele, name, fromValue, toValue) {
  ele.dirtyStyleCache();
  this.checkZOrderTrigger(ele, name, fromValue, toValue);
  this.checkBoundsTrigger(ele, name, fromValue, toValue);
};

var styfn$1 = {}; // bypasses are applied to an existing style on an element, and just tacked on temporarily
// returns true iff application was successful for at least 1 specified property

styfn$1.applyBypass = function (eles, name, value, updateTransitions) {
  var self = this;
  var props = [];
  var isBypass = true; // put all the properties (can specify one or many) in an array after parsing them

  if (name === '*' || name === '**') {
    // apply to all property names
    if (value !== undefined) {
      for (var i = 0; i < self.properties.length; i++) {
        var prop = self.properties[i];
        var _name = prop.name;
        var parsedProp = this.parse(_name, value, true);

        if (parsedProp) {
          props.push(parsedProp);
        }
      }
    }
  } else if (string(name)) {
    // then parse the single property
    var _parsedProp = this.parse(name, value, true);

    if (_parsedProp) {
      props.push(_parsedProp);
    }
  } else if (plainObject(name)) {
    // then parse each property
    var specifiedProps = name;
    updateTransitions = value;
    var names = Object.keys(specifiedProps);

    for (var _i = 0; _i < names.length; _i++) {
      var _name2 = names[_i];
      var _value = specifiedProps[_name2];

      if (_value === undefined) {
        // try camel case name too
        _value = specifiedProps[dash2camel(_name2)];
      }

      if (_value !== undefined) {
        var _parsedProp2 = this.parse(_name2, _value, true);

        if (_parsedProp2) {
          props.push(_parsedProp2);
        }
      }
    }
  } else {
    // can't do anything without well defined properties
    return false;
  } // we've failed if there are no valid properties


  if (props.length === 0) {
    return false;
  } // now, apply the bypass properties on the elements


  var ret = false; // return true if at least one succesful bypass applied

  for (var _i2 = 0; _i2 < eles.length; _i2++) {
    // for each ele
    var ele = eles[_i2];
    var diffProps = {};
    var diffProp = void 0;

    for (var j = 0; j < props.length; j++) {
      // for each prop
      var _prop = props[j];

      if (updateTransitions) {
        var prevProp = ele.pstyle(_prop.name);
        diffProp = diffProps[_prop.name] = {
          prev: prevProp
        };
      }

      ret = this.applyParsedProperty(ele, _prop) || ret;

      if (updateTransitions) {
        diffProp.next = ele.pstyle(_prop.name);
      }
    } // for props


    if (ret) {
      this.updateStyleHints(ele);
    }

    if (updateTransitions) {
      this.updateTransitions(ele, diffProps, isBypass);
    }
  } // for eles


  return ret;
}; // only useful in specific cases like animation


styfn$1.overrideBypass = function (eles, name, value) {
  name = camel2dash(name);

  for (var i = 0; i < eles.length; i++) {
    var ele = eles[i];
    var prop = ele._private.style[name];
    var type = this.properties[name].type;
    var isColor = type.color;
    var isMulti = type.mutiple;
    var oldValue = !prop ? null : prop.pfValue != null ? prop.pfValue : prop.value;

    if (!prop || !prop.bypass) {
      // need a bypass if one doesn't exist
      this.applyBypass(ele, name, value);
    } else {
      prop.value = value;

      if (prop.pfValue != null) {
        prop.pfValue = value;
      }

      if (isColor) {
        prop.strValue = 'rgb(' + value.join(',') + ')';
      } else if (isMulti) {
        prop.strValue = value.join(' ');
      } else {
        prop.strValue = '' + value;
      }

      this.updateStyleHints(ele);
    }

    this.checkTriggers(ele, name, oldValue, value);
  }
};

styfn$1.removeAllBypasses = function (eles, updateTransitions) {
  return this.removeBypasses(eles, this.propertyNames, updateTransitions);
};

styfn$1.removeBypasses = function (eles, props, updateTransitions) {
  var isBypass = true;

  for (var j = 0; j < eles.length; j++) {
    var ele = eles[j];
    var diffProps = {};

    for (var i = 0; i < props.length; i++) {
      var name = props[i];
      var prop = this.properties[name];
      var prevProp = ele.pstyle(prop.name);

      if (!prevProp || !prevProp.bypass) {
        // if a bypass doesn't exist for the prop, nothing needs to be removed
        continue;
      }

      var value = ''; // empty => remove bypass

      var parsedProp = this.parse(name, value, true);
      var diffProp = diffProps[prop.name] = {
        prev: prevProp
      };
      this.applyParsedProperty(ele, parsedProp);
      diffProp.next = ele.pstyle(prop.name);
    } // for props


    this.updateStyleHints(ele);

    if (updateTransitions) {
      this.updateTransitions(ele, diffProps, isBypass);
    }
  } // for eles

};

var styfn$2 = {}; // gets what an em size corresponds to in pixels relative to a dom element

styfn$2.getEmSizeInPixels = function () {
  var px = this.containerCss('font-size');

  if (px != null) {
    return parseFloat(px);
  } else {
    return 1; // for headless
  }
}; // gets css property from the core container


styfn$2.containerCss = function (propName) {
  var cy = this._private.cy;
  var domElement = cy.container();

  if (window$1 && domElement && window$1.getComputedStyle) {
    return window$1.getComputedStyle(domElement).getPropertyValue(propName);
  }
};

var styfn$3 = {}; // gets the rendered style for an element

styfn$3.getRenderedStyle = function (ele, prop) {
  if (prop) {
    return this.getStylePropertyValue(ele, prop, true);
  } else {
    return this.getRawStyle(ele, true);
  }
}; // gets the raw style for an element


styfn$3.getRawStyle = function (ele, isRenderedVal) {
  var self = this;
  ele = ele[0]; // insure it's an element

  if (ele) {
    var rstyle = {};

    for (var i = 0; i < self.properties.length; i++) {
      var prop = self.properties[i];
      var val = self.getStylePropertyValue(ele, prop.name, isRenderedVal);

      if (val != null) {
        rstyle[prop.name] = val;
        rstyle[dash2camel(prop.name)] = val;
      }
    }

    return rstyle;
  }
};

styfn$3.getIndexedStyle = function (ele, property, subproperty, index) {
  var pstyle = ele.pstyle(property)[subproperty][index];
  return pstyle != null ? pstyle : ele.cy().style().getDefaultProperty(property)[subproperty][0];
};

styfn$3.getStylePropertyValue = function (ele, propName, isRenderedVal) {
  var self = this;
  ele = ele[0]; // insure it's an element

  if (ele) {
    var prop = self.properties[propName];

    if (prop.alias) {
      prop = prop.pointsTo;
    }

    var type = prop.type;
    var styleProp = ele.pstyle(prop.name);

    if (styleProp) {
      var value = styleProp.value,
          units = styleProp.units,
          strValue = styleProp.strValue;

      if (isRenderedVal && type.number && value != null && number(value)) {
        var zoom = ele.cy().zoom();

        var getRenderedValue = function getRenderedValue(val) {
          return val * zoom;
        };

        var getValueStringWithUnits = function getValueStringWithUnits(val, units) {
          return getRenderedValue(val) + units;
        };

        var isArrayValue = array(value);
        var haveUnits = isArrayValue ? units.every(function (u) {
          return u != null;
        }) : units != null;

        if (haveUnits) {
          if (isArrayValue) {
            return value.map(function (v, i) {
              return getValueStringWithUnits(v, units[i]);
            }).join(' ');
          } else {
            return getValueStringWithUnits(value, units);
          }
        } else {
          if (isArrayValue) {
            return value.map(function (v) {
              return string(v) ? v : '' + getRenderedValue(v);
            }).join(' ');
          } else {
            return '' + getRenderedValue(value);
          }
        }
      } else if (strValue != null) {
        return strValue;
      }
    }

    return null;
  }
};

styfn$3.getAnimationStartStyle = function (ele, aniProps) {
  var rstyle = {};

  for (var i = 0; i < aniProps.length; i++) {
    var aniProp = aniProps[i];
    var name = aniProp.name;
    var styleProp = ele.pstyle(name);

    if (styleProp !== undefined) {
      // then make a prop of it
      if (plainObject(styleProp)) {
        styleProp = this.parse(name, styleProp.strValue);
      } else {
        styleProp = this.parse(name, styleProp);
      }
    }

    if (styleProp) {
      rstyle[name] = styleProp;
    }
  }

  return rstyle;
};

styfn$3.getPropsList = function (propsObj) {
  var self = this;
  var rstyle = [];
  var style$$1 = propsObj;
  var props = self.properties;

  if (style$$1) {
    var names = Object.keys(style$$1);

    for (var i = 0; i < names.length; i++) {
      var name = names[i];
      var val = style$$1[name];
      var prop = props[name] || props[camel2dash(name)];
      var styleProp = this.parse(prop.name, val);

      if (styleProp) {
        rstyle.push(styleProp);
      }
    }
  }

  return rstyle;
};

styfn$3.getNonDefaultPropertiesHash = function (ele, propNames, seed) {
  var hash = seed;
  var name, val, strVal, chVal;
  var i, j;

  for (i = 0; i < propNames.length; i++) {
    name = propNames[i];
    val = ele.pstyle(name, false);

    if (val == null) {
      continue;
    } else if (val.pfValue != null) {
      hash = hashInt(chVal, hash);
    } else {
      strVal = val.strValue;

      for (j = 0; j < strVal.length; j++) {
        chVal = strVal.charCodeAt(j);
        hash = hashInt(chVal, hash);
      }
    }
  }

  return hash;
};

styfn$3.getPropertiesHash = styfn$3.getNonDefaultPropertiesHash;
var styfn$4 = {};

styfn$4.appendFromJson = function (json) {
  var style = this;

  for (var i = 0; i < json.length; i++) {
    var context = json[i];
    var selector = context.selector;
    var props = context.style || context.css;
    var names = Object.keys(props);
    style.selector(selector); // apply selector

    for (var j = 0; j < names.length; j++) {
      var name = names[j];
      var value = props[name];
      style.css(name, value); // apply property
    }
  }

  return style;
}; // accessible cy.style() function


styfn$4.fromJson = function (json) {
  var style = this;
  style.resetToDefault();
  style.appendFromJson(json);
  return style;
}; // get json from cy.style() api


styfn$4.json = function () {
  var json = [];

  for (var i = this.defaultLength; i < this.length; i++) {
    var cxt = this[i];
    var selector = cxt.selector;
    var props = cxt.properties;
    var css = {};

    for (var j = 0; j < props.length; j++) {
      var prop = props[j];
      css[prop.name] = prop.strValue;
    }

    json.push({
      selector: !selector ? 'core' : selector.toString(),
      style: css
    });
  }

  return json;
};

var styfn$5 = {};

styfn$5.appendFromString = function (string) {
  var self = this;
  var style = this;
  var remaining = '' + string;
  var selAndBlockStr;
  var blockRem;
  var propAndValStr; // remove comments from the style string

  remaining = remaining.replace(/[/][*](\s|.)+?[*][/]/g, '');

  function removeSelAndBlockFromRemaining() {
    // remove the parsed selector and block from the remaining text to parse
    if (remaining.length > selAndBlockStr.length) {
      remaining = remaining.substr(selAndBlockStr.length);
    } else {
      remaining = '';
    }
  }

  function removePropAndValFromRem() {
    // remove the parsed property and value from the remaining block text to parse
    if (blockRem.length > propAndValStr.length) {
      blockRem = blockRem.substr(propAndValStr.length);
    } else {
      blockRem = '';
    }
  }

  for (;;) {
    var nothingLeftToParse = remaining.match(/^\s*$/);

    if (nothingLeftToParse) {
      break;
    }

    var selAndBlock = remaining.match(/^\s*((?:.|\s)+?)\s*\{((?:.|\s)+?)\}/);

    if (!selAndBlock) {
      warn('Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: ' + remaining);
      break;
    }

    selAndBlockStr = selAndBlock[0]; // parse the selector

    var selectorStr = selAndBlock[1];

    if (selectorStr !== 'core') {
      var selector = new Selector(selectorStr);

      if (selector.invalid) {
        warn('Skipping parsing of block: Invalid selector found in string stylesheet: ' + selectorStr); // skip this selector and block

        removeSelAndBlockFromRemaining();
        continue;
      }
    } // parse the block of properties and values


    var blockStr = selAndBlock[2];
    var invalidBlock = false;
    blockRem = blockStr;
    var props = [];

    for (;;) {
      var _nothingLeftToParse = blockRem.match(/^\s*$/);

      if (_nothingLeftToParse) {
        break;
      }

      var propAndVal = blockRem.match(/^\s*(.+?)\s*:\s*(.+?)\s*;/);

      if (!propAndVal) {
        warn('Skipping parsing of block: Invalid formatting of style property and value definitions found in:' + blockStr);
        invalidBlock = true;
        break;
      }

      propAndValStr = propAndVal[0];
      var propStr = propAndVal[1];
      var valStr = propAndVal[2];
      var prop = self.properties[propStr];

      if (!prop) {
        warn('Skipping property: Invalid property name in: ' + propAndValStr); // skip this property in the block

        removePropAndValFromRem();
        continue;
      }

      var parsedProp = style.parse(propStr, valStr);

      if (!parsedProp) {
        warn('Skipping property: Invalid property definition in: ' + propAndValStr); // skip this property in the block

        removePropAndValFromRem();
        continue;
      }

      props.push({
        name: propStr,
        val: valStr
      });
      removePropAndValFromRem();
    }

    if (invalidBlock) {
      removeSelAndBlockFromRemaining();
      break;
    } // put the parsed block in the style


    style.selector(selectorStr);

    for (var i = 0; i < props.length; i++) {
      var _prop = props[i];
      style.css(_prop.name, _prop.val);
    }

    removeSelAndBlockFromRemaining();
  }

  return style;
};

styfn$5.fromString = function (string) {
  var style = this;
  style.resetToDefault();
  style.appendFromString(string);
  return style;
};

var styfn$6 = {};

(function () {
  var number$$1 = number$1;
  var rgba$$1 = rgbaNoBackRefs;
  var hsla$$1 = hslaNoBackRefs;
  var hex3$$1 = hex3;
  var hex6$$1 = hex6;

  var data = function data(prefix) {
    return '^' + prefix + '\\s*\\(\\s*([\\w\\.]+)\\s*\\)$';
  };

  var mapData = function mapData(prefix) {
    var mapArg = number$$1 + '|\\w+|' + rgba$$1 + '|' + hsla$$1 + '|' + hex3$$1 + '|' + hex6$$1;
    return '^' + prefix + '\\s*\\(([\\w\\.]+)\\s*\\,\\s*(' + number$$1 + ')\\s*\\,\\s*(' + number$$1 + ')\\s*,\\s*(' + mapArg + ')\\s*\\,\\s*(' + mapArg + ')\\)$';
  };

  var urlRegexes = ['^url\\s*\\(\\s*[\'"]?(.+?)[\'"]?\\s*\\)$', '^(none)$', '^(.+)$']; // each visual style property has a type and needs to be validated according to it

  styfn$6.types = {
    time: {
      number: true,
      min: 0,
      units: 's|ms',
      implicitUnits: 'ms'
    },
    percent: {
      number: true,
      min: 0,
      max: 100,
      units: '%',
      implicitUnits: '%'
    },
    percentages: {
      number: true,
      min: 0,
      max: 100,
      units: '%',
      implicitUnits: '%',
      multiple: true
    },
    zeroOneNumber: {
      number: true,
      min: 0,
      max: 1,
      unitless: true
    },
    zeroOneNumbers: {
      number: true,
      min: 0,
      max: 1,
      unitless: true,
      multiple: true
    },
    nOneOneNumber: {
      number: true,
      min: -1,
      max: 1,
      unitless: true
    },
    nonNegativeInt: {
      number: true,
      min: 0,
      integer: true,
      unitless: true
    },
    position: {
      enums: ['parent', 'origin']
    },
    nodeSize: {
      number: true,
      min: 0,
      enums: ['label']
    },
    number: {
      number: true,
      unitless: true
    },
    numbers: {
      number: true,
      unitless: true,
      multiple: true
    },
    positiveNumber: {
      number: true,
      unitless: true,
      min: 0,
      strictMin: true
    },
    size: {
      number: true,
      min: 0
    },
    bidirectionalSize: {
      number: true
    },
    // allows negative
    bidirectionalSizes: {
      number: true,
      multiple: true
    },
    // allows negative
    sizeMaybePercent: {
      number: true,
      min: 0,
      allowPercent: true
    },
    paddingRelativeTo: {
      enums: ['width', 'height', 'average', 'min', 'max']
    },
    bgWH: {
      number: true,
      min: 0,
      allowPercent: true,
      enums: ['auto'],
      multiple: true
    },
    bgPos: {
      number: true,
      allowPercent: true,
      multiple: true
    },
    bgRelativeTo: {
      enums: ['inner', 'include-padding'],
      multiple: true
    },
    bgRepeat: {
      enums: ['repeat', 'repeat-x', 'repeat-y', 'no-repeat'],
      multiple: true
    },
    bgFit: {
      enums: ['none', 'contain', 'cover'],
      multiple: true
    },
    bgCrossOrigin: {
      enums: ['anonymous', 'use-credentials'],
      multiple: true
    },
    bgClip: {
      enums: ['none', 'node']
    },
    color: {
      color: true
    },
    colors: {
      color: true,
      multiple: true
    },
    fill: {
      enums: ['solid', 'linear-gradient', 'radial-gradient']
    },
    bool: {
      enums: ['yes', 'no']
    },
    lineStyle: {
      enums: ['solid', 'dotted', 'dashed']
    },
    lineCap: {
      enums: ['butt', 'round', 'square']
    },
    borderStyle: {
      enums: ['solid', 'dotted', 'dashed', 'double']
    },
    curveStyle: {
      enums: ['bezier', 'unbundled-bezier', 'haystack', 'segments', 'straight']
    },
    fontFamily: {
      regex: '^([\\w- \\"]+(?:\\s*,\\s*[\\w- \\"]+)*)$'
    },
    fontStyle: {
      enums: ['italic', 'normal', 'oblique']
    },
    fontWeight: {
      enums: ['normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '800', '900', 100, 200, 300, 400, 500, 600, 700, 800, 900]
    },
    textDecoration: {
      enums: ['none', 'underline', 'overline', 'line-through']
    },
    textTransform: {
      enums: ['none', 'uppercase', 'lowercase']
    },
    textWrap: {
      enums: ['none', 'wrap', 'ellipsis']
    },
    textBackgroundShape: {
      enums: ['rectangle', 'roundrectangle', 'round-rectangle']
    },
    nodeShape: {
      enums: ['rectangle', 'roundrectangle', 'round-rectangle', 'cutrectangle', 'cut-rectangle', 'bottomroundrectangle', 'bottom-round-rectangle', 'barrel', 'ellipse', 'triangle', 'square', 'pentagon', 'hexagon', 'concavehexagon', 'concave-hexagon', 'heptagon', 'octagon', 'tag', 'star', 'diamond', 'vee', 'rhomboid', 'polygon']
    },
    compoundIncludeLabels: {
      enums: ['include', 'exclude']
    },
    arrowShape: {
      enums: ['tee', 'triangle', 'triangle-tee', 'triangle-cross', 'triangle-backcurve', 'vee', 'square', 'circle', 'diamond', 'chevron', 'none']
    },
    arrowFill: {
      enums: ['filled', 'hollow']
    },
    display: {
      enums: ['element', 'none']
    },
    visibility: {
      enums: ['hidden', 'visible']
    },
    zCompoundDepth: {
      enums: ['bottom', 'orphan', 'auto', 'top']
    },
    zIndexCompare: {
      enums: ['auto', 'manual']
    },
    valign: {
      enums: ['top', 'center', 'bottom']
    },
    halign: {
      enums: ['left', 'center', 'right']
    },
    text: {
      string: true
    },
    data: {
      mapping: true,
      regex: data('data')
    },
    layoutData: {
      mapping: true,
      regex: data('layoutData')
    },
    scratch: {
      mapping: true,
      regex: data('scratch')
    },
    mapData: {
      mapping: true,
      regex: mapData('mapData')
    },
    mapLayoutData: {
      mapping: true,
      regex: mapData('mapLayoutData')
    },
    mapScratch: {
      mapping: true,
      regex: mapData('mapScratch')
    },
    fn: {
      mapping: true,
      fn: true
    },
    url: {
      regexes: urlRegexes,
      singleRegexMatchValue: true
    },
    urls: {
      regexes: urlRegexes,
      singleRegexMatchValue: true,
      multiple: true
    },
    propList: {
      propList: true
    },
    angle: {
      number: true,
      units: 'deg|rad',
      implicitUnits: 'rad'
    },
    textRotation: {
      number: true,
      units: 'deg|rad',
      implicitUnits: 'rad',
      enums: ['none', 'autorotate']
    },
    polygonPointList: {
      number: true,
      multiple: true,
      evenMultiple: true,
      min: -1,
      max: 1,
      unitless: true
    },
    edgeDistances: {
      enums: ['intersection', 'node-position']
    },
    edgeEndpoint: {
      number: true,
      multiple: true,
      units: '%|px|em|deg|rad',
      implicitUnits: 'px',
      enums: ['inside-to-node', 'outside-to-node', 'outside-to-node-or-label', 'outside-to-line', 'outside-to-line-or-label'],
      singleEnum: true,
      validate: function validate(valArr, unitsArr) {
        switch (valArr.length) {
          case 2:
            // can be % or px only
            return unitsArr[0] !== 'deg' && unitsArr[0] !== 'rad' && unitsArr[1] !== 'deg' && unitsArr[1] !== 'rad';

          case 1:
            // can be enum, deg, or rad only
            return string(valArr[0]) || unitsArr[0] === 'deg' || unitsArr[0] === 'rad';

          default:
            return false;
        }
      }
    },
    easing: {
      regexes: ['^(spring)\\s*\\(\\s*(' + number$$1 + ')\\s*,\\s*(' + number$$1 + ')\\s*\\)$', '^(cubic-bezier)\\s*\\(\\s*(' + number$$1 + ')\\s*,\\s*(' + number$$1 + ')\\s*,\\s*(' + number$$1 + ')\\s*,\\s*(' + number$$1 + ')\\s*\\)$'],
      enums: ['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'ease-in-sine', 'ease-out-sine', 'ease-in-out-sine', 'ease-in-quad', 'ease-out-quad', 'ease-in-out-quad', 'ease-in-cubic', 'ease-out-cubic', 'ease-in-out-cubic', 'ease-in-quart', 'ease-out-quart', 'ease-in-out-quart', 'ease-in-quint', 'ease-out-quint', 'ease-in-out-quint', 'ease-in-expo', 'ease-out-expo', 'ease-in-out-expo', 'ease-in-circ', 'ease-out-circ', 'ease-in-out-circ']
    },
    gradientDirection: {
      enums: ['to-bottom', 'to-top', 'to-left', 'to-right', 'to-bottom-right', 'to-bottom-left', 'to-top-right', 'to-top-left', 'to-right-bottom', 'to-left-bottom', 'to-right-top', 'to-left-top']
    }
  };
  var diff = {
    zeroNonZero: function zeroNonZero(val1, val2) {
      if ((val1 == null || val2 == null) && val1 !== val2) {
        return true; // null cases could represent any value
      }

      if (val1 == 0 && val2 != 0) {
        return true;
      } else if (val1 != 0 && val2 == 0) {
        return true;
      } else {
        return false;
      }
    },
    any: function any(val1, val2) {
      return val1 != val2;
    }
  }; // define visual style properties
  //
  // - n.b. adding a new group of props may require updates to updateStyleHints()
  // - adding new props to an existing group gets handled automatically

  var t = styfn$6.types;
  var mainLabel = [{
    name: 'label',
    type: t.text,
    triggersBounds: diff.any
  }, {
    name: 'text-rotation',
    type: t.textRotation,
    triggersBounds: diff.any
  }, {
    name: 'text-margin-x',
    type: t.bidirectionalSize,
    triggersBounds: diff.any
  }, {
    name: 'text-margin-y',
    type: t.bidirectionalSize,
    triggersBounds: diff.any
  }];
  var sourceLabel = [{
    name: 'source-label',
    type: t.text,
    triggersBounds: diff.any
  }, {
    name: 'source-text-rotation',
    type: t.textRotation,
    triggersBounds: diff.any
  }, {
    name: 'source-text-margin-x',
    type: t.bidirectionalSize,
    triggersBounds: diff.any
  }, {
    name: 'source-text-margin-y',
    type: t.bidirectionalSize,
    triggersBounds: diff.any
  }, {
    name: 'source-text-offset',
    type: t.size,
    triggersBounds: diff.any
  }];
  var targetLabel = [{
    name: 'target-label',
    type: t.text,
    triggersBounds: diff.any
  }, {
    name: 'target-text-rotation',
    type: t.textRotation,
    triggersBounds: diff.any
  }, {
    name: 'target-text-margin-x',
    type: t.bidirectionalSize,
    triggersBounds: diff.any
  }, {
    name: 'target-text-margin-y',
    type: t.bidirectionalSize,
    triggersBounds: diff.any
  }, {
    name: 'target-text-offset',
    type: t.size,
    triggersBounds: diff.any
  }];
  var labelDimensions = [{
    name: 'font-family',
    type: t.fontFamily,
    triggersBounds: diff.any
  }, {
    name: 'font-style',
    type: t.fontStyle,
    triggersBounds: diff.any
  }, {
    name: 'font-weight',
    type: t.fontWeight,
    triggersBounds: diff.any
  }, {
    name: 'font-size',
    type: t.size,
    triggersBounds: diff.any
  }, {
    name: 'text-transform',
    type: t.textTransform,
    triggersBounds: diff.any
  }, {
    name: 'text-wrap',
    type: t.textWrap,
    triggersBounds: diff.any
  }, {
    name: 'text-max-width',
    type: t.size,
    triggersBounds: diff.any
  }, {
    name: 'text-outline-width',
    type: t.size,
    triggersBounds: diff.any
  }];
  var commonLabel = [{
    name: 'text-valign',
    type: t.valign,
    triggersBounds: diff.any
  }, {
    name: 'text-halign',
    type: t.halign,
    triggersBounds: diff.any
  }, {
    name: 'color',
    type: t.color
  }, {
    name: 'text-outline-color',
    type: t.color
  }, {
    name: 'text-outline-opacity',
    type: t.zeroOneNumber
  }, {
    name: 'text-background-color',
    type: t.color
  }, {
    name: 'text-background-opacity',
    type: t.zeroOneNumber
  }, {
    name: 'text-background-padding',
    type: t.size,
    triggersBounds: diff.any
  }, {
    name: 'text-border-opacity',
    type: t.zeroOneNumber
  }, {
    name: 'text-border-color',
    type: t.color
  }, {
    name: 'text-border-width',
    type: t.size,
    triggersBounds: diff.any
  }, {
    name: 'text-border-style',
    type: t.borderStyle,
    triggersBounds: diff.any
  }, {
    name: 'text-background-shape',
    type: t.textBackgroundShape,
    triggersBounds: diff.any
  }];
  var behavior = [{
    name: 'events',
    type: t.bool
  }, {
    name: 'text-events',
    type: t.bool
  }];
  var visibility = [{
    name: 'display',
    type: t.display,
    triggersZOrder: diff.any,
    triggersBounds: diff.any
  }, {
    name: 'visibility',
    type: t.visibility,
    triggersZOrder: diff.any
  }, {
    name: 'opacity',
    type: t.zeroOneNumber,
    triggersZOrder: diff.zeroNonZero
  }, {
    name: 'text-opacity',
    type: t.zeroOneNumber
  }, {
    name: 'min-zoomed-font-size',
    type: t.size
  }, {
    name: 'z-compound-depth',
    type: t.zCompoundDepth,
    triggersZOrder: diff.any
  }, {
    name: 'z-index-compare',
    type: t.zIndexCompare,
    triggersZOrder: diff.any
  }, {
    name: 'z-index',
    type: t.nonNegativeInt,
    triggersZOrder: diff.any
  }];
  var overlay = [{
    name: 'overlay-padding',
    type: t.size,
    triggersBounds: diff.any
  }, {
    name: 'overlay-color',
    type: t.color
  }, {
    name: 'overlay-opacity',
    type: t.zeroOneNumber,
    triggersBounds: diff.zeroNonZero
  }];
  var transition = [{
    name: 'transition-property',
    type: t.propList
  }, {
    name: 'transition-duration',
    type: t.time
  }, {
    name: 'transition-delay',
    type: t.time
  }, {
    name: 'transition-timing-function',
    type: t.easing
  }];
  var nodeBody = [{
    name: 'height',
    type: t.nodeSize,
    triggersBounds: diff.any
  }, {
    name: 'width',
    type: t.nodeSize,
    triggersBounds: diff.any
  }, {
    name: 'shape',
    type: t.nodeShape,
    triggersBounds: diff.any
  }, {
    name: 'shape-polygon-points',
    type: t.polygonPointList,
    triggersBounds: diff.any
  }, {
    name: 'background-color',
    type: t.color
  }, {
    name: 'background-fill',
    type: t.fill
  }, {
    name: 'background-opacity',
    type: t.zeroOneNumber
  }, {
    name: 'background-blacken',
    type: t.nOneOneNumber
  }, {
    name: 'background-gradient-stop-colors',
    type: t.colors
  }, {
    name: 'background-gradient-stop-positions',
    type: t.percentages
  }, {
    name: 'background-gradient-direction',
    type: t.gradientDirection
  }, {
    name: 'padding',
    type: t.sizeMaybePercent,
    triggersBounds: diff.any
  }, {
    name: 'padding-relative-to',
    type: t.paddingRelativeTo,
    triggersBounds: diff.any
  }, {
    name: 'bounds-expansion',
    type: t.size,
    triggersBounds: diff.any
  }];
  var nodeBorder = [{
    name: 'border-color',
    type: t.color
  }, {
    name: 'border-opacity',
    type: t.zeroOneNumber
  }, {
    name: 'border-width',
    type: t.size,
    triggersBounds: diff.any
  }, {
    name: 'border-style',
    type: t.borderStyle
  }];
  var backgroundImage = [{
    name: 'background-image',
    type: t.urls
  }, {
    name: 'background-image-crossorigin',
    type: t.bgCrossOrigin
  }, {
    name: 'background-image-opacity',
    type: t.zeroOneNumbers
  }, {
    name: 'background-position-x',
    type: t.bgPos
  }, {
    name: 'background-position-y',
    type: t.bgPos
  }, {
    name: 'background-width-relative-to',
    type: t.bgRelativeTo
  }, {
    name: 'background-height-relative-to',
    type: t.bgRelativeTo
  }, {
    name: 'background-repeat',
    type: t.bgRepeat
  }, {
    name: 'background-fit',
    type: t.bgFit
  }, {
    name: 'background-clip',
    type: t.bgClip
  }, {
    name: 'background-width',
    type: t.bgWH
  }, {
    name: 'background-height',
    type: t.bgWH
  }, {
    name: 'background-offset-x',
    type: t.bgPos
  }, {
    name: 'background-offset-y',
    type: t.bgPos
  }];
  var compound = [{
    name: 'position',
    type: t.position,
    triggersBounds: diff.any
  }, {
    name: 'compound-sizing-wrt-labels',
    type: t.compoundIncludeLabels,
    triggersBounds: diff.any
  }, {
    name: 'min-width',
    type: t.size,
    triggersBounds: diff.any
  }, {
    name: 'min-width-bias-left',
    type: t.sizeMaybePercent,
    triggersBounds: diff.any
  }, {
    name: 'min-width-bias-right',
    type: t.sizeMaybePercent,
    triggersBounds: diff.any
  }, {
    name: 'min-height',
    type: t.size,
    triggersBounds: diff.any
  }, {
    name: 'min-height-bias-top',
    type: t.sizeMaybePercent,
    triggersBounds: diff.any
  }, {
    name: 'min-height-bias-bottom',
    type: t.sizeMaybePercent,
    triggersBounds: diff.any
  }];
  var edgeLine = [{
    name: 'line-style',
    type: t.lineStyle
  }, {
    name: 'line-color',
    type: t.color
  }, {
    name: 'line-fill',
    type: t.fill
  }, {
    name: 'line-cap',
    type: t.lineCap
  }, {
    name: 'line-dash-pattern',
    type: t.numbers
  }, {
    name: 'line-dash-offset',
    type: t.number
  }, {
    name: 'line-gradient-stop-colors',
    type: t.colors
  }, {
    name: 'line-gradient-stop-positions',
    type: t.percentages
  }, {
    name: 'curve-style',
    type: t.curveStyle,
    triggersBounds: diff.any
  }, {
    name: 'haystack-radius',
    type: t.zeroOneNumber,
    triggersBounds: diff.any
  }, {
    name: 'source-endpoint',
    type: t.edgeEndpoint,
    triggersBounds: diff.any
  }, {
    name: 'target-endpoint',
    type: t.edgeEndpoint,
    triggersBounds: diff.any
  }, {
    name: 'control-point-step-size',
    type: t.size,
    triggersBounds: diff.any
  }, {
    name: 'control-point-distances',
    type: t.bidirectionalSizes,
    triggersBounds: diff.any
  }, {
    name: 'control-point-weights',
    type: t.numbers,
    triggersBounds: diff.any
  }, {
    name: 'segment-distances',
    type: t.bidirectionalSizes,
    triggersBounds: diff.any
  }, {
    name: 'segment-weights',
    type: t.numbers,
    triggersBounds: diff.any
  }, {
    name: 'edge-distances',
    type: t.edgeDistances,
    triggersBounds: diff.any
  }, {
    name: 'arrow-scale',
    type: t.positiveNumber,
    triggersBounds: diff.any
  }, {
    name: 'loop-direction',
    type: t.angle,
    triggersBounds: diff.any
  }, {
    name: 'loop-sweep',
    type: t.angle,
    triggersBounds: diff.any
  }, {
    name: 'source-distance-from-node',
    type: t.size,
    triggersBounds: diff.any
  }, {
    name: 'target-distance-from-node',
    type: t.size,
    triggersBounds: diff.any
  }];
  var ghost = [{
    name: 'ghost',
    type: t.bool,
    triggersBounds: diff.any
  }, {
    name: 'ghost-offset-x',
    type: t.bidirectionalSize,
    triggersBounds: diff.any
  }, {
    name: 'ghost-offset-y',
    type: t.bidirectionalSize,
    triggersBounds: diff.any
  }, {
    name: 'ghost-opacity',
    type: t.zeroOneNumber
  }];
  var core$$1 = [{
    name: 'selection-box-color',
    type: t.color
  }, {
    name: 'selection-box-opacity',
    type: t.zeroOneNumber
  }, {
    name: 'selection-box-border-color',
    type: t.color
  }, {
    name: 'selection-box-border-width',
    type: t.size
  }, {
    name: 'active-bg-color',
    type: t.color
  }, {
    name: 'active-bg-opacity',
    type: t.zeroOneNumber
  }, {
    name: 'active-bg-size',
    type: t.size
  }, {
    name: 'outside-texture-bg-color',
    type: t.color
  }, {
    name: 'outside-texture-bg-opacity',
    type: t.zeroOneNumber
  }]; // pie backgrounds for nodes

  var pie = [];
  styfn$6.pieBackgroundN = 16; // because the pie properties are numbered, give access to a constant N (for renderer use)

  pie.push({
    name: 'pie-size',
    type: t.sizeMaybePercent
  });

  for (var i = 1; i <= styfn$6.pieBackgroundN; i++) {
    pie.push({
      name: 'pie-' + i + '-background-color',
      type: t.color
    });
    pie.push({
      name: 'pie-' + i + '-background-size',
      type: t.percent
    });
    pie.push({
      name: 'pie-' + i + '-background-opacity',
      type: t.zeroOneNumber
    });
  } // edge arrows


  var edgeArrow = [];
  var arrowPrefixes = styfn$6.arrowPrefixes = ['source', 'mid-source', 'target', 'mid-target'];
  [{
    name: 'arrow-shape',
    type: t.arrowShape
  }, {
    name: 'arrow-color',
    type: t.color
  }, {
    name: 'arrow-fill',
    type: t.arrowFill
  }].forEach(function (prop) {
    arrowPrefixes.forEach(function (prefix) {
      var name = prefix + '-' + prop.name;
      var type = prop.type;
      edgeArrow.push({
        name: name,
        type: type
      });
    });
  }, {});
  var props = styfn$6.properties = behavior.concat(transition, visibility, overlay, ghost, commonLabel, labelDimensions, mainLabel, sourceLabel, targetLabel, nodeBody, nodeBorder, backgroundImage, pie, compound, edgeLine, edgeArrow, core$$1);
  var propGroups = styfn$6.propertyGroups = {
    // common to all eles
    behavior: behavior,
    transition: transition,
    visibility: visibility,
    overlay: overlay,
    ghost: ghost,
    // labels
    commonLabel: commonLabel,
    labelDimensions: labelDimensions,
    mainLabel: mainLabel,
    sourceLabel: sourceLabel,
    targetLabel: targetLabel,
    // node props
    nodeBody: nodeBody,
    nodeBorder: nodeBorder,
    backgroundImage: backgroundImage,
    pie: pie,
    compound: compound,
    // edge props
    edgeLine: edgeLine,
    edgeArrow: edgeArrow,
    core: core$$1
  };
  var propGroupNames = styfn$6.propertyGroupNames = {};
  var propGroupKeys = styfn$6.propertyGroupKeys = Object.keys(propGroups);
  propGroupKeys.forEach(function (key) {
    propGroupNames[key] = propGroups[key].map(function (prop) {
      return prop.name;
    });
    propGroups[key].forEach(function (prop) {
      return prop.groupKey = key;
    });
  }); // define aliases

  var aliases = styfn$6.aliases = [{
    name: 'content',
    pointsTo: 'label'
  }, {
    name: 'control-point-distance',
    pointsTo: 'control-point-distances'
  }, {
    name: 'control-point-weight',
    pointsTo: 'control-point-weights'
  }, {
    name: 'edge-text-rotation',
    pointsTo: 'text-rotation'
  }, {
    name: 'padding-left',
    pointsTo: 'padding'
  }, {
    name: 'padding-right',
    pointsTo: 'padding'
  }, {
    name: 'padding-top',
    pointsTo: 'padding'
  }, {
    name: 'padding-bottom',
    pointsTo: 'padding'
  }]; // list of property names

  styfn$6.propertyNames = props.map(function (p) {
    return p.name;
  }); // allow access of properties by name ( e.g. style.properties.height )

  for (var _i = 0; _i < props.length; _i++) {
    var prop = props[_i];
    props[prop.name] = prop; // allow lookup by name
  } // map aliases


  for (var _i2 = 0; _i2 < aliases.length; _i2++) {
    var alias = aliases[_i2];
    var pointsToProp = props[alias.pointsTo];
    var aliasProp = {
      name: alias.name,
      alias: true,
      pointsTo: pointsToProp
    }; // add alias prop for parsing

    props.push(aliasProp);
    props[alias.name] = aliasProp; // allow lookup by name
  }
})();

styfn$6.getDefaultProperty = function (name) {
  return this.getDefaultProperties()[name];
};

styfn$6.getDefaultProperties = function () {
  var _p = this._private;

  if (_p.defaultProperties != null) {
    return _p.defaultProperties;
  }

  var rawProps = extend({
    // core props
    'selection-box-color': '#ddd',
    'selection-box-opacity': 0.65,
    'selection-box-border-color': '#aaa',
    'selection-box-border-width': 1,
    'active-bg-color': 'black',
    'active-bg-opacity': 0.15,
    'active-bg-size': 30,
    'outside-texture-bg-color': '#000',
    'outside-texture-bg-opacity': 0.125,
    // common node/edge props
    'events': 'yes',
    'text-events': 'no',
    'text-valign': 'top',
    'text-halign': 'center',
    'color': '#000',
    'text-outline-color': '#000',
    'text-outline-width': 0,
    'text-outline-opacity': 1,
    'text-opacity': 1,
    'text-decoration': 'none',
    'text-transform': 'none',
    'text-wrap': 'none',
    'text-max-width': 9999,
    'text-background-color': '#000',
    'text-background-opacity': 0,
    'text-background-shape': 'rectangle',
    'text-background-padding': 0,
    'text-border-opacity': 0,
    'text-border-width': 0,
    'text-border-style': 'solid',
    'text-border-color': '#000',
    'font-family': 'Helvetica Neue, Helvetica, sans-serif',
    'font-style': 'normal',
    'font-weight': 'normal',
    'font-size': 16,
    'min-zoomed-font-size': 0,
    'text-rotation': 'none',
    'source-text-rotation': 'none',
    'target-text-rotation': 'none',
    'visibility': 'visible',
    'display': 'element',
    'opacity': 1,
    'z-compound-depth': 'auto',
    'z-index-compare': 'auto',
    'z-index': 0,
    'label': '',
    'text-margin-x': 0,
    'text-margin-y': 0,
    'source-label': '',
    'source-text-offset': 0,
    'source-text-margin-x': 0,
    'source-text-margin-y': 0,
    'target-label': '',
    'target-text-offset': 0,
    'target-text-margin-x': 0,
    'target-text-margin-y': 0,
    'overlay-opacity': 0,
    'overlay-color': '#000',
    'overlay-padding': 10,
    'transition-property': 'none',
    'transition-duration': 0,
    'transition-delay': 0,
    'transition-timing-function': 'linear',
    // node props
    'background-blacken': 0,
    'background-color': '#999',
    'background-fill': 'solid',
    'background-opacity': 1,
    'background-image': 'none',
    'background-image-crossorigin': 'anonymous',
    'background-image-opacity': 1,
    'background-position-x': '50%',
    'background-position-y': '50%',
    'background-offset-x': 0,
    'background-offset-y': 0,
    'background-width-relative-to': 'include-padding',
    'background-height-relative-to': 'include-padding',
    'background-repeat': 'no-repeat',
    'background-fit': 'none',
    'background-clip': 'node',
    'background-width': 'auto',
    'background-height': 'auto',
    'border-color': '#000',
    'border-opacity': 1,
    'border-width': 0,
    'border-style': 'solid',
    'height': 30,
    'width': 30,
    'shape': 'ellipse',
    'shape-polygon-points': '-1, -1,   1, -1,   1, 1,   -1, 1',
    'bounds-expansion': 0,
    // node gradient
    'background-gradient-direction': 'to-bottom',
    'background-gradient-stop-colors': '#999',
    'background-gradient-stop-positions': '0%',
    // ghost props
    'ghost': 'no',
    'ghost-offset-y': 0,
    'ghost-offset-x': 0,
    'ghost-opacity': 0,
    // compound props
    'padding': 0,
    'padding-relative-to': 'width',
    'position': 'origin',
    'compound-sizing-wrt-labels': 'include',
    'min-width': 0,
    'min-width-bias-left': 0,
    'min-width-bias-right': 0,
    'min-height': 0,
    'min-height-bias-top': 0,
    'min-height-bias-bottom': 0
  }, {
    // node pie bg
    'pie-size': '100%'
  }, [{
    name: 'pie-{{i}}-background-color',
    value: 'black'
  }, {
    name: 'pie-{{i}}-background-size',
    value: '0%'
  }, {
    name: 'pie-{{i}}-background-opacity',
    value: 1
  }].reduce(function (css, prop) {
    for (var i = 1; i <= styfn$6.pieBackgroundN; i++) {
      var name = prop.name.replace('{{i}}', i);
      var val = prop.value;
      css[name] = val;
    }

    return css;
  }, {}), {
    // edge props
    'line-style': 'solid',
    'line-color': '#999',
    'line-fill': 'solid',
    'line-cap': 'butt',
    'line-gradient-stop-colors': '#999',
    'line-gradient-stop-positions': '0%',
    'control-point-step-size': 40,
    'control-point-weights': 0.5,
    'segment-weights': 0.5,
    'segment-distances': 20,
    'edge-distances': 'intersection',
    'curve-style': 'haystack',
    'haystack-radius': 0,
    'arrow-scale': 1,
    'loop-direction': '-45deg',
    'loop-sweep': '-90deg',
    'source-distance-from-node': 0,
    'target-distance-from-node': 0,
    'source-endpoint': 'outside-to-node',
    'target-endpoint': 'outside-to-node',
    'line-dash-pattern': [6, 3],
    'line-dash-offset': 0
  }, [{
    name: 'arrow-shape',
    value: 'none'
  }, {
    name: 'arrow-color',
    value: '#999'
  }, {
    name: 'arrow-fill',
    value: 'filled'
  }].reduce(function (css, prop) {
    styfn$6.arrowPrefixes.forEach(function (prefix) {
      var name = prefix + '-' + prop.name;
      var val = prop.value;
      css[name] = val;
    });
    return css;
  }, {}));
  var parsedProps = {};

  for (var i = 0; i < this.properties.length; i++) {
    var prop = this.properties[i];

    if (prop.pointsTo) {
      continue;
    }

    var name = prop.name;
    var val = rawProps[name];
    var parsedProp = this.parse(name, val);
    parsedProps[name] = parsedProp;
  }

  _p.defaultProperties = parsedProps;
  return _p.defaultProperties;
};

styfn$6.addDefaultStylesheet = function () {
  this.selector(':parent').css({
    'shape': 'rectangle',
    'padding': 10,
    'background-color': '#eee',
    'border-color': '#ccc',
    'border-width': 1
  }).selector('edge').css({
    'width': 3
  }).selector(':loop').css({
    'curve-style': 'bezier'
  }).selector('edge:compound').css({
    'curve-style': 'bezier',
    'source-endpoint': 'outside-to-line',
    'target-endpoint': 'outside-to-line'
  }).selector(':selected').css({
    'background-color': '#0169D9',
    'line-color': '#0169D9',
    'source-arrow-color': '#0169D9',
    'target-arrow-color': '#0169D9',
    'mid-source-arrow-color': '#0169D9',
    'mid-target-arrow-color': '#0169D9'
  }).selector(':parent:selected').css({
    'background-color': '#CCE1F9',
    'border-color': '#aec8e5'
  }).selector(':active').css({
    'overlay-color': 'black',
    'overlay-padding': 10,
    'overlay-opacity': 0.25
  });
  this.defaultLength = this.length;
};

var styfn$7 = {}; // a caching layer for property parsing

styfn$7.parse = function (name, value, propIsBypass, propIsFlat) {
  var self = this; // function values can't be cached in all cases, and there isn't much benefit of caching them anyway

  if (fn(value)) {
    return self.parseImplWarn(name, value, propIsBypass, propIsFlat);
  }

  var flatKey = propIsFlat === 'mapping' || propIsFlat === true || propIsFlat === false || propIsFlat == null ? 'dontcare' : propIsFlat;
  var bypassKey = propIsBypass ? 't' : 'f';
  var valueKey = '' + value;
  var argHash = hashStrings(name, valueKey, bypassKey, flatKey);
  var propCache = self.propCache = self.propCache || [];
  var ret;

  if (!(ret = propCache[argHash])) {
    ret = propCache[argHash] = self.parseImplWarn(name, value, propIsBypass, propIsFlat);
  } // - bypasses can't be shared b/c the value can be changed by animations or otherwise overridden
  // - mappings can't be shared b/c mappings are per-element


  if (propIsBypass || propIsFlat === 'mapping') {
    // need a copy since props are mutated later in their lifecycles
    ret = copy(ret);

    if (ret) {
      ret.value = copy(ret.value); // because it could be an array, e.g. colour
    }
  }

  return ret;
};

styfn$7.parseImplWarn = function (name, value, propIsBypass, propIsFlat) {
  var prop = this.parseImpl(name, value, propIsBypass, propIsFlat);

  if (!prop && value != null) {
    warn("The style property `".concat(name, ": ").concat(value, "` is invalid"));
  }

  return prop;
}; // parse a property; return null on invalid; return parsed property otherwise
// fields :
// - name : the name of the property
// - value : the parsed, native-typed value of the property
// - strValue : a string value that represents the property value in valid css
// - bypass : true iff the property is a bypass property


styfn$7.parseImpl = function (name, value, propIsBypass, propIsFlat) {
  var self = this;
  name = camel2dash(name); // make sure the property name is in dash form (e.g. 'property-name' not 'propertyName')

  var property = self.properties[name];
  var passedValue = value;
  var types = self.types;

  if (!property) {
    return null;
  } // return null on property of unknown name


  if (value === undefined) {
    return null;
  } // can't assign undefined
  // the property may be an alias


  if (property.alias) {
    property = property.pointsTo;
    name = property.name;
  }

  var valueIsString = string(value);

  if (valueIsString) {
    // trim the value to make parsing easier
    value = value.trim();
  }

  var type = property.type;

  if (!type) {
    return null;
  } // no type, no luck
  // check if bypass is null or empty string (i.e. indication to delete bypass property)


  if (propIsBypass && (value === '' || value === null)) {
    return {
      name: name,
      value: value,
      bypass: true,
      deleteBypass: true
    };
  } // check if value is a function used as a mapper


  if (fn(value)) {
    return {
      name: name,
      value: value,
      strValue: 'fn',
      mapped: types.fn,
      bypass: propIsBypass
    };
  } // check if value is mapped


  var data, mapData;
  if (!valueIsString || propIsFlat || value.length < 7 || value[1] !== 'a') ;else if (value.length >= 7 && value[0] === 'd' && (data = new RegExp(types.data.regex).exec(value))) {
    if (propIsBypass) {
      return false;
    } // mappers not allowed in bypass


    var mapped = types.data;
    return {
      name: name,
      value: data,
      strValue: '' + value,
      mapped: mapped,
      field: data[1],
      bypass: propIsBypass
    };
  } else if (value.length >= 10 && value[0] === 'm' && (mapData = new RegExp(types.mapData.regex).exec(value))) {
    if (propIsBypass) {
      return false;
    } // mappers not allowed in bypass


    if (type.multiple) {
      return false;
    } // impossible to map to num


    var _mapped = types.mapData; // we can map only if the type is a colour or a number

    if (!(type.color || type.number)) {
      return false;
    }

    var valueMin = this.parse(name, mapData[4]); // parse to validate

    if (!valueMin || valueMin.mapped) {
      return false;
    } // can't be invalid or mapped


    var valueMax = this.parse(name, mapData[5]); // parse to validate

    if (!valueMax || valueMax.mapped) {
      return false;
    } // can't be invalid or mapped
    // check if valueMin and valueMax are the same


    if (valueMin.pfValue === valueMax.pfValue || valueMin.strValue === valueMax.strValue) {
      warn('`' + name + ': ' + value + '` is not a valid mapper because the output range is zero; converting to `' + name + ': ' + valueMin.strValue + '`');
      return this.parse(name, valueMin.strValue); // can't make much of a mapper without a range
    } else if (type.color) {
      var c1 = valueMin.value;
      var c2 = valueMax.value;
      var same = c1[0] === c2[0] // red
      && c1[1] === c2[1] // green
      && c1[2] === c2[2] // blue
      && ( // optional alpha
      c1[3] === c2[3] // same alpha outright
      || (c1[3] == null || c1[3] === 1) && ( // full opacity for colour 1?
      c2[3] == null || c2[3] === 1) // full opacity for colour 2?
      );

      if (same) {
        return false;
      } // can't make a mapper without a range

    }

    return {
      name: name,
      value: mapData,
      strValue: '' + value,
      mapped: _mapped,
      field: mapData[1],
      fieldMin: parseFloat(mapData[2]),
      // min & max are numeric
      fieldMax: parseFloat(mapData[3]),
      valueMin: valueMin.value,
      valueMax: valueMax.value,
      bypass: propIsBypass
    };
  }

  if (type.multiple && propIsFlat !== 'multiple') {
    var vals;

    if (valueIsString) {
      vals = value.split(/\s+/);
    } else if (array(value)) {
      vals = value;
    } else {
      vals = [value];
    }

    if (type.evenMultiple && vals.length % 2 !== 0) {
      return null;
    }

    var valArr = [];
    var unitsArr = [];
    var pfValArr = [];
    var strVal = '';
    var hasEnum = false;

    for (var i = 0; i < vals.length; i++) {
      var p = self.parse(name, vals[i], propIsBypass, 'multiple');
      hasEnum = hasEnum || string(p.value);
      valArr.push(p.value);
      pfValArr.push(p.pfValue != null ? p.pfValue : p.value);
      unitsArr.push(p.units);
      strVal += (i > 0 ? ' ' : '') + p.strValue;
    }

    if (type.validate && !type.validate(valArr, unitsArr)) {
      return null;
    }

    if (type.singleEnum && hasEnum) {
      if (valArr.length === 1 && string(valArr[0])) {
        return {
          name: name,
          value: valArr[0],
          strValue: valArr[0],
          bypass: propIsBypass
        };
      } else {
        return null;
      }
    }

    return {
      name: name,
      value: valArr,
      pfValue: pfValArr,
      strValue: strVal,
      bypass: propIsBypass,
      units: unitsArr
    };
  } // several types also allow enums


  var checkEnums = function checkEnums() {
    for (var _i = 0; _i < type.enums.length; _i++) {
      var en = type.enums[_i];

      if (en === value) {
        return {
          name: name,
          value: value,
          strValue: '' + value,
          bypass: propIsBypass
        };
      }
    }

    return null;
  }; // check the type and return the appropriate object


  if (type.number) {
    var units;
    var implicitUnits = 'px'; // not set => px

    if (type.units) {
      // use specified units if set
      units = type.units;
    }

    if (type.implicitUnits) {
      implicitUnits = type.implicitUnits;
    }

    if (!type.unitless) {
      if (valueIsString) {
        var unitsRegex = 'px|em' + (type.allowPercent ? '|\\%' : '');

        if (units) {
          unitsRegex = units;
        } // only allow explicit units if so set


        var match = value.match('^(' + number$1 + ')(' + unitsRegex + ')?' + '$');

        if (match) {
          value = match[1];
          units = match[2] || implicitUnits;
        }
      } else if (!units || type.implicitUnits) {
        units = implicitUnits; // implicitly px if unspecified
      }
    }

    value = parseFloat(value); // if not a number and enums not allowed, then the value is invalid

    if (isNaN(value) && type.enums === undefined) {
      return null;
    } // check if this number type also accepts special keywords in place of numbers
    // (i.e. `left`, `auto`, etc)


    if (isNaN(value) && type.enums !== undefined) {
      value = passedValue;
      return checkEnums();
    } // check if value must be an integer


    if (type.integer && !integer(value)) {
      return null;
    } // check value is within range


    if (type.min !== undefined && (value < type.min || type.strictMin && value === type.min) || type.max !== undefined && (value > type.max || type.strictMax && value === type.max)) {
      return null;
    }

    var ret = {
      name: name,
      value: value,
      strValue: '' + value + (units ? units : ''),
      units: units,
      bypass: propIsBypass
    }; // normalise value in pixels

    if (type.unitless || units !== 'px' && units !== 'em') {
      ret.pfValue = value;
    } else {
      ret.pfValue = units === 'px' || !units ? value : this.getEmSizeInPixels() * value;
    } // normalise value in ms


    if (units === 'ms' || units === 's') {
      ret.pfValue = units === 'ms' ? value : 1000 * value;
    } // normalise value in rad


    if (units === 'deg' || units === 'rad') {
      ret.pfValue = units === 'rad' ? value : deg2rad(value);
    } // normalize value in %


    if (units === '%') {
      ret.pfValue = value / 100;
    }

    return ret;
  } else if (type.propList) {
    var props = [];
    var propsStr = '' + value;
    if (propsStr === 'none') ;else {
      // go over each prop
      var propsSplit = propsStr.split(/\s*,\s*|\s+/);

      for (var _i2 = 0; _i2 < propsSplit.length; _i2++) {
        var propName = propsSplit[_i2].trim();

        if (self.properties[propName]) {
          props.push(propName);
        } else {
          warn('`' + propName + '` is not a valid property name');
        }
      }

      if (props.length === 0) {
        return null;
      }
    }
    return {
      name: name,
      value: props,
      strValue: props.length === 0 ? 'none' : props.join(' '),
      bypass: propIsBypass
    };
  } else if (type.color) {
    var tuple = color2tuple(value);

    if (!tuple) {
      return null;
    }

    return {
      name: name,
      value: tuple,
      pfValue: tuple,
      strValue: 'rgb(' + tuple[0] + ',' + tuple[1] + ',' + tuple[2] + ')',
      // n.b. no spaces b/c of multiple support
      bypass: propIsBypass
    };
  } else if (type.regex || type.regexes) {
    // first check enums
    if (type.enums) {
      var enumProp = checkEnums();

      if (enumProp) {
        return enumProp;
      }
    }

    var regexes = type.regexes ? type.regexes : [type.regex];

    for (var _i3 = 0; _i3 < regexes.length; _i3++) {
      var regex$$1 = new RegExp(regexes[_i3]); // make a regex from the type string

      var m = regex$$1.exec(value);

      if (m) {
        // regex matches
        return {
          name: name,
          value: type.singleRegexMatchValue ? m[1] : m,
          strValue: '' + value,
          bypass: propIsBypass
        };
      }
    }

    return null; // didn't match any
  } else if (type.string) {
    // just return
    return {
      name: name,
      value: '' + value,
      strValue: '' + value,
      bypass: propIsBypass
    };
  } else if (type.enums) {
    // check enums last because it's a combo type in others
    return checkEnums();
  } else {
    return null; // not a type we can handle
  }
};

var Style = function Style(cy) {
  if (!(this instanceof Style)) {
    return new Style(cy);
  }

  if (!core(cy)) {
    error('A style must have a core reference');
    return;
  }

  this._private = {
    cy: cy,
    coreStyle: {}
  };
  this.length = 0;
  this.resetToDefault();
};

var styfn$8 = Style.prototype;

styfn$8.instanceString = function () {
  return 'style';
}; // remove all contexts


styfn$8.clear = function () {
  for (var i = 0; i < this.length; i++) {
    this[i] = undefined;
  }

  this.length = 0;
  var _p = this._private;
  _p.newStyle = true;
  return this; // chaining
};

styfn$8.resetToDefault = function () {
  this.clear();
  this.addDefaultStylesheet();
  return this;
}; // builds a style object for the 'core' selector


styfn$8.core = function (propName) {
  return this._private.coreStyle[propName] || this.getDefaultProperty(propName);
}; // create a new context from the specified selector string and switch to that context


styfn$8.selector = function (selectorStr) {
  // 'core' is a special case and does not need a selector
  var selector = selectorStr === 'core' ? null : new Selector(selectorStr);
  var i = this.length++; // new context means new index

  this[i] = {
    selector: selector,
    properties: [],
    mappedProperties: [],
    index: i
  };
  return this; // chaining
}; // add one or many css rules to the current context


styfn$8.css = function () {
  var self = this;
  var args = arguments;

  if (args.length === 1) {
    var map = args[0];

    for (var i = 0; i < self.properties.length; i++) {
      var prop = self.properties[i];
      var mapVal = map[prop.name];

      if (mapVal === undefined) {
        mapVal = map[dash2camel(prop.name)];
      }

      if (mapVal !== undefined) {
        this.cssRule(prop.name, mapVal);
      }
    }
  } else if (args.length === 2) {
    this.cssRule(args[0], args[1]);
  } // do nothing if args are invalid


  return this; // chaining
};

styfn$8.style = styfn$8.css; // add a single css rule to the current context

styfn$8.cssRule = function (name, value) {
  // name-value pair
  var property = this.parse(name, value); // add property to current context if valid

  if (property) {
    var i = this.length - 1;
    this[i].properties.push(property);
    this[i].properties[property.name] = property; // allow access by name as well

    if (property.name.match(/pie-(\d+)-background-size/) && property.value) {
      this._private.hasPie = true;
    }

    if (property.mapped) {
      this[i].mappedProperties.push(property);
    } // add to core style if necessary


    var currentSelectorIsCore = !this[i].selector;

    if (currentSelectorIsCore) {
      this._private.coreStyle[property.name] = property;
    }
  }

  return this; // chaining
};

styfn$8.append = function (style$$1) {
  if (stylesheet(style$$1)) {
    style$$1.appendToStyle(this);
  } else if (array(style$$1)) {
    this.appendFromJson(style$$1);
  } else if (string(style$$1)) {
    this.appendFromString(style$$1);
  } // you probably wouldn't want to append a Style, since you'd duplicate the default parts


  return this;
}; // static function


Style.fromJson = function (cy, json) {
  var style$$1 = new Style(cy);
  style$$1.fromJson(json);
  return style$$1;
};

Style.fromString = function (cy, string$$1) {
  return new Style(cy).fromString(string$$1);
};

[styfn, styfn$1, styfn$2, styfn$3, styfn$4, styfn$5, styfn$6, styfn$7].forEach(function (props) {
  extend(styfn$8, props);
});
Style.types = styfn$8.types;
Style.properties = styfn$8.properties;
Style.propertyGroups = styfn$8.propertyGroups;
Style.propertyGroupNames = styfn$8.propertyGroupNames;
Style.propertyGroupKeys = styfn$8.propertyGroupKeys;
var corefn$7 = {
  style: function style$$1(newStyle) {
    if (newStyle) {
      var s = this.setStyle(newStyle);
      s.update();
    }

    return this._private.style;
  },
  setStyle: function setStyle(style$$1) {
    var _p = this._private;

    if (stylesheet(style$$1)) {
      _p.style = style$$1.generateStyle(this);
    } else if (array(style$$1)) {
      _p.style = Style.fromJson(this, style$$1);
    } else if (string(style$$1)) {
      _p.style = Style.fromString(this, style$$1);
    } else {
      _p.style = Style(this);
    }

    return _p.style;
  }
};
var defaultSelectionType = 'single';
var corefn$8 = {
  autolock: function autolock(bool$$1) {
    if (bool$$1 !== undefined) {
      this._private.autolock = bool$$1 ? true : false;
    } else {
      return this._private.autolock;
    }

    return this; // chaining
  },
  autoungrabify: function autoungrabify(bool$$1) {
    if (bool$$1 !== undefined) {
      this._private.autoungrabify = bool$$1 ? true : false;
    } else {
      return this._private.autoungrabify;
    }

    return this; // chaining
  },
  autounselectify: function autounselectify(bool$$1) {
    if (bool$$1 !== undefined) {
      this._private.autounselectify = bool$$1 ? true : false;
    } else {
      return this._private.autounselectify;
    }

    return this; // chaining
  },
  selectionType: function selectionType(selType) {
    var _p = this._private;

    if (_p.selectionType == null) {
      _p.selectionType = defaultSelectionType;
    }

    if (selType !== undefined) {
      if (selType === 'additive' || selType === 'single') {
        _p.selectionType = selType;
      }
    } else {
      return _p.selectionType;
    }

    return this;
  },
  panningEnabled: function panningEnabled(bool$$1) {
    if (bool$$1 !== undefined) {
      this._private.panningEnabled = bool$$1 ? true : false;
    } else {
      return this._private.panningEnabled;
    }

    return this; // chaining
  },
  userPanningEnabled: function userPanningEnabled(bool$$1) {
    if (bool$$1 !== undefined) {
      this._private.userPanningEnabled = bool$$1 ? true : false;
    } else {
      return this._private.userPanningEnabled;
    }

    return this; // chaining
  },
  zoomingEnabled: function zoomingEnabled(bool$$1) {
    if (bool$$1 !== undefined) {
      this._private.zoomingEnabled = bool$$1 ? true : false;
    } else {
      return this._private.zoomingEnabled;
    }

    return this; // chaining
  },
  userZoomingEnabled: function userZoomingEnabled(bool$$1) {
    if (bool$$1 !== undefined) {
      this._private.userZoomingEnabled = bool$$1 ? true : false;
    } else {
      return this._private.userZoomingEnabled;
    }

    return this; // chaining
  },
  boxSelectionEnabled: function boxSelectionEnabled(bool$$1) {
    if (bool$$1 !== undefined) {
      this._private.boxSelectionEnabled = bool$$1 ? true : false;
    } else {
      return this._private.boxSelectionEnabled;
    }

    return this; // chaining
  },
  pan: function pan() {
    var args = arguments;
    var pan = this._private.pan;
    var dim, val, dims, x, y;

    switch (args.length) {
      case 0:
        // .pan()
        return pan;

      case 1:
        if (string(args[0])) {
          // .pan('x')
          dim = args[0];
          return pan[dim];
        } else if (plainObject(args[0])) {
          // .pan({ x: 0, y: 100 })
          if (!this._private.panningEnabled) {
            return this;
          }

          dims = args[0];
          x = dims.x;
          y = dims.y;

          if (number(x)) {
            pan.x = x;
          }

          if (number(y)) {
            pan.y = y;
          }

          this.emit('pan viewport');
        }

        break;

      case 2:
        // .pan('x', 100)
        if (!this._private.panningEnabled) {
          return this;
        }

        dim = args[0];
        val = args[1];

        if ((dim === 'x' || dim === 'y') && number(val)) {
          pan[dim] = val;
        }

        this.emit('pan viewport');
        break;

      default:
        break;
      // invalid
    }

    this.notify('viewport');
    return this; // chaining
  },
  panBy: function panBy(arg0, arg1) {
    var args = arguments;
    var pan = this._private.pan;
    var dim, val, dims, x, y;

    if (!this._private.panningEnabled) {
      return this;
    }

    switch (args.length) {
      case 1:
        if (plainObject(arg0)) {
          // .panBy({ x: 0, y: 100 })
          dims = args[0];
          x = dims.x;
          y = dims.y;

          if (number(x)) {
            pan.x += x;
          }

          if (number(y)) {
            pan.y += y;
          }

          this.emit('pan viewport');
        }

        break;

      case 2:
        // .panBy('x', 100)
        dim = arg0;
        val = arg1;

        if ((dim === 'x' || dim === 'y') && number(val)) {
          pan[dim] += val;
        }

        this.emit('pan viewport');
        break;

      default:
        break;
      // invalid
    }

    this.notify('viewport');
    return this; // chaining
  },
  fit: function fit(elements, padding) {
    var viewportState = this.getFitViewport(elements, padding);

    if (viewportState) {
      var _p = this._private;
      _p.zoom = viewportState.zoom;
      _p.pan = viewportState.pan;
      this.emit('pan zoom viewport');
      this.notify('viewport');
    }

    return this; // chaining
  },
  getFitViewport: function getFitViewport(elements, padding) {
    if (number(elements) && padding === undefined) {
      // elements is optional
      padding = elements;
      elements = undefined;
    }

    if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
      return;
    }

    var bb;

    if (string(elements)) {
      var sel = elements;
      elements = this.$(sel);
    } else if (boundingBox(elements)) {
      // assume bb
      var bbe = elements;
      bb = {
        x1: bbe.x1,
        y1: bbe.y1,
        x2: bbe.x2,
        y2: bbe.y2
      };
      bb.w = bb.x2 - bb.x1;
      bb.h = bb.y2 - bb.y1;
    } else if (!elementOrCollection(elements)) {
      elements = this.mutableElements();
    }

    if (elementOrCollection(elements) && elements.empty()) {
      return;
    } // can't fit to nothing


    bb = bb || elements.boundingBox();
    var w = this.width();
    var h = this.height();
    var zoom;
    padding = number(padding) ? padding : 0;

    if (!isNaN(w) && !isNaN(h) && w > 0 && h > 0 && !isNaN(bb.w) && !isNaN(bb.h) && bb.w > 0 && bb.h > 0) {
      zoom = Math.min((w - 2 * padding) / bb.w, (h - 2 * padding) / bb.h); // crop zoom

      zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;
      zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;
      var pan = {
        // now pan to middle
        x: (w - zoom * (bb.x1 + bb.x2)) / 2,
        y: (h - zoom * (bb.y1 + bb.y2)) / 2
      };
      return {
        zoom: zoom,
        pan: pan
      };
    }

    return;
  },
  zoomRange: function zoomRange(min$$1, max$$1) {
    var _p = this._private;

    if (max$$1 == null) {
      var opts = min$$1;
      min$$1 = opts.min;
      max$$1 = opts.max;
    }

    if (number(min$$1) && number(max$$1) && min$$1 <= max$$1) {
      _p.minZoom = min$$1;
      _p.maxZoom = max$$1;
    } else if (number(min$$1) && max$$1 === undefined && min$$1 <= _p.maxZoom) {
      _p.minZoom = min$$1;
    } else if (number(max$$1) && min$$1 === undefined && max$$1 >= _p.minZoom) {
      _p.maxZoom = max$$1;
    }

    return this;
  },
  minZoom: function minZoom(zoom) {
    if (zoom === undefined) {
      return this._private.minZoom;
    } else {
      return this.zoomRange({
        min: zoom
      });
    }
  },
  maxZoom: function maxZoom(zoom) {
    if (zoom === undefined) {
      return this._private.maxZoom;
    } else {
      return this.zoomRange({
        max: zoom
      });
    }
  },
  getZoomedViewport: function getZoomedViewport(params) {
    var _p = this._private;
    var currentPan = _p.pan;
    var currentZoom = _p.zoom;
    var pos; // in rendered px

    var zoom;
    var bail = false;

    if (!_p.zoomingEnabled) {
      // zooming disabled
      bail = true;
    }

    if (number(params)) {
      // then set the zoom
      zoom = params;
    } else if (plainObject(params)) {
      // then zoom about a point
      zoom = params.level;

      if (params.position != null) {
        pos = modelToRenderedPosition(params.position, currentZoom, currentPan);
      } else if (params.renderedPosition != null) {
        pos = params.renderedPosition;
      }

      if (pos != null && !_p.panningEnabled) {
        // panning disabled
        bail = true;
      }
    } // crop zoom


    zoom = zoom > _p.maxZoom ? _p.maxZoom : zoom;
    zoom = zoom < _p.minZoom ? _p.minZoom : zoom; // can't zoom with invalid params

    if (bail || !number(zoom) || zoom === currentZoom || pos != null && (!number(pos.x) || !number(pos.y))) {
      return null;
    }

    if (pos != null) {
      // set zoom about position
      var pan1 = currentPan;
      var zoom1 = currentZoom;
      var zoom2 = zoom;
      var pan2 = {
        x: -zoom2 / zoom1 * (pos.x - pan1.x) + pos.x,
        y: -zoom2 / zoom1 * (pos.y - pan1.y) + pos.y
      };
      return {
        zoomed: true,
        panned: true,
        zoom: zoom2,
        pan: pan2
      };
    } else {
      // just set the zoom
      return {
        zoomed: true,
        panned: false,
        zoom: zoom,
        pan: currentPan
      };
    }
  },
  zoom: function zoom(params) {
    if (params === undefined) {
      // get
      return this._private.zoom;
    } else {
      // set
      var vp = this.getZoomedViewport(params);
      var _p = this._private;

      if (vp == null || !vp.zoomed) {
        return this;
      }

      _p.zoom = vp.zoom;

      if (vp.panned) {
        _p.pan.x = vp.pan.x;
        _p.pan.y = vp.pan.y;
      }

      this.emit('zoom' + (vp.panned ? ' pan' : '') + ' viewport');
      this.notify('viewport');
      return this; // chaining
    }
  },
  viewport: function viewport(opts) {
    var _p = this._private;
    var zoomDefd = true;
    var panDefd = true;
    var events = []; // to trigger

    var zoomFailed = false;
    var panFailed = false;

    if (!opts) {
      return this;
    }

    if (!number(opts.zoom)) {
      zoomDefd = false;
    }

    if (!plainObject(opts.pan)) {
      panDefd = false;
    }

    if (!zoomDefd && !panDefd) {
      return this;
    }

    if (zoomDefd) {
      var z = opts.zoom;

      if (z < _p.minZoom || z > _p.maxZoom || !_p.zoomingEnabled) {
        zoomFailed = true;
      } else {
        _p.zoom = z;
        events.push('zoom');
      }
    }

    if (panDefd && (!zoomFailed || !opts.cancelOnFailedZoom) && _p.panningEnabled) {
      var p = opts.pan;

      if (number(p.x)) {
        _p.pan.x = p.x;
        panFailed = false;
      }

      if (number(p.y)) {
        _p.pan.y = p.y;
        panFailed = false;
      }

      if (!panFailed) {
        events.push('pan');
      }
    }

    if (events.length > 0) {
      events.push('viewport');
      this.emit(events.join(' '));
      this.notify('viewport');
    }

    return this; // chaining
  },
  center: function center(elements) {
    var pan = this.getCenterPan(elements);

    if (pan) {
      this._private.pan = pan;
      this.emit('pan viewport');
      this.notify('viewport');
    }

    return this; // chaining
  },
  getCenterPan: function getCenterPan(elements, zoom) {
    if (!this._private.panningEnabled) {
      return;
    }

    if (string(elements)) {
      var selector = elements;
      elements = this.mutableElements().filter(selector);
    } else if (!elementOrCollection(elements)) {
      elements = this.mutableElements();
    }

    if (elements.length === 0) {
      return;
    } // can't centre pan to nothing


    var bb = elements.boundingBox();
    var w = this.width();
    var h = this.height();
    zoom = zoom === undefined ? this._private.zoom : zoom;
    var pan = {
      // middle
      x: (w - zoom * (bb.x1 + bb.x2)) / 2,
      y: (h - zoom * (bb.y1 + bb.y2)) / 2
    };
    return pan;
  },
  reset: function reset() {
    if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
      return this;
    }

    this.viewport({
      pan: {
        x: 0,
        y: 0
      },
      zoom: 1
    });
    return this; // chaining
  },
  invalidateSize: function invalidateSize() {
    this._private.sizeCache = null;
  },
  size: function size() {
    var _p = this._private;
    var container = _p.container;
    return _p.sizeCache = _p.sizeCache || (container ? function () {
      var style$$1 = window$1.getComputedStyle(container);

      var val = function val(name) {
        return parseFloat(style$$1.getPropertyValue(name));
      };

      return {
        width: container.clientWidth - val('padding-left') - val('padding-right'),
        height: container.clientHeight - val('padding-top') - val('padding-bottom')
      };
    }() : {
      // fallback if no container (not 0 b/c can be used for dividing etc)
      width: 1,
      height: 1
    });
  },
  width: function width() {
    return this.size().width;
  },
  height: function height() {
    return this.size().height;
  },
  extent: function extent() {
    var pan = this._private.pan;
    var zoom = this._private.zoom;
    var rb = this.renderedExtent();
    var b = {
      x1: (rb.x1 - pan.x) / zoom,
      x2: (rb.x2 - pan.x) / zoom,
      y1: (rb.y1 - pan.y) / zoom,
      y2: (rb.y2 - pan.y) / zoom
    };
    b.w = b.x2 - b.x1;
    b.h = b.y2 - b.y1;
    return b;
  },
  renderedExtent: function renderedExtent() {
    var width = this.width();
    var height = this.height();
    return {
      x1: 0,
      y1: 0,
      x2: width,
      y2: height,
      w: width,
      h: height
    };
  }
}; // aliases

corefn$8.centre = corefn$8.center; // backwards compatibility

corefn$8.autolockNodes = corefn$8.autolock;
corefn$8.autoungrabifyNodes = corefn$8.autoungrabify;

var Core = function Core(opts) {
  var cy = this;
  opts = extend({}, opts);
  var container = opts.container; // allow for passing a wrapped jquery object
  // e.g. cytoscape({ container: $('#cy') })

  if (container && !htmlElement(container) && htmlElement(container[0])) {
    container = container[0];
  }

  var reg = container ? container._cyreg : null; // e.g. already registered some info (e.g. readies) via jquery

  reg = reg || {};

  if (reg && reg.cy) {
    reg.cy.destroy();
    reg = {}; // old instance => replace reg completely
  }

  var readies = reg.readies = reg.readies || [];

  if (container) {
    container._cyreg = reg;
  } // make sure container assoc'd reg points to this cy


  reg.cy = cy;
  var head = window$1 !== undefined && container !== undefined && !opts.headless;
  var options = opts;
  options.layout = extend({
    name: head ? 'grid' : 'null'
  }, options.layout);
  options.renderer = extend({
    name: head ? 'canvas' : 'null'
  }, options.renderer);

  var defVal = function defVal(def, val, altVal) {
    if (val !== undefined) {
      return val;
    } else if (altVal !== undefined) {
      return altVal;
    } else {
      return def;
    }
  };

  var _p = this._private = {
    container: container,
    // html dom ele container
    ready: false,
    // whether ready has been triggered
    options: options,
    // cached options
    elements: new Collection(this),
    // elements in the graph
    listeners: [],
    // list of listeners
    aniEles: new Collection(this),
    // elements being animated
    scratch: {},
    // scratch object for core
    layout: null,
    renderer: null,
    destroyed: false,
    // whether destroy was called
    notificationsEnabled: true,
    // whether notifications are sent to the renderer
    minZoom: 1e-50,
    maxZoom: 1e50,
    zoomingEnabled: defVal(true, options.zoomingEnabled),
    userZoomingEnabled: defVal(true, options.userZoomingEnabled),
    panningEnabled: defVal(true, options.panningEnabled),
    userPanningEnabled: defVal(true, options.userPanningEnabled),
    boxSelectionEnabled: defVal(true, options.boxSelectionEnabled),
    autolock: defVal(false, options.autolock, options.autolockNodes),
    autoungrabify: defVal(false, options.autoungrabify, options.autoungrabifyNodes),
    autounselectify: defVal(false, options.autounselectify),
    styleEnabled: options.styleEnabled === undefined ? head : options.styleEnabled,
    zoom: number(options.zoom) ? options.zoom : 1,
    pan: {
      x: plainObject(options.pan) && number(options.pan.x) ? options.pan.x : 0,
      y: plainObject(options.pan) && number(options.pan.y) ? options.pan.y : 0
    },
    animation: {
      // object for currently-running animations
      current: [],
      queue: []
    },
    hasCompoundNodes: false
  };

  this.createEmitter(); // set selection type

  this.selectionType(options.selectionType); // init zoom bounds

  this.zoomRange({
    min: options.minZoom,
    max: options.maxZoom
  });

  var loadExtData = function loadExtData(extData, next) {
    var anyIsPromise = extData.some(promise);

    if (anyIsPromise) {
      return Promise$1.all(extData).then(next); // load all data asynchronously, then exec rest of init
    } else {
      next(extData); // exec synchronously for convenience
    }
  }; // start with the default stylesheet so we have something before loading an external stylesheet


  if (_p.styleEnabled) {
    cy.setStyle([]);
  } // create the renderer


  var rendererOptions = extend({}, options, options.renderer); // allow rendering hints in top level options

  cy.initRenderer(rendererOptions);

  var setElesAndLayout = function setElesAndLayout(elements, onload, ondone) {
    cy.notifications(false); // remove old elements

    var oldEles = cy.mutableElements();

    if (oldEles.length > 0) {
      oldEles.remove();
    }

    if (elements != null) {
      if (plainObject(elements) || array(elements)) {
        cy.add(elements);
      }
    }

    cy.one('layoutready', function (e) {
      cy.notifications(true);
      cy.emit(e); // we missed this event by turning notifications off, so pass it on

      cy.one('load', onload);
      cy.emitAndNotify('load');
    }).one('layoutstop', function () {
      cy.one('done', ondone);
      cy.emit('done');
    });
    var layoutOpts = extend({}, cy._private.options.layout);
    layoutOpts.eles = cy.elements();
    cy.layout(layoutOpts).run();
  };

  loadExtData([options.style, options.elements], function (thens) {
    var initStyle = thens[0];
    var initEles = thens[1]; // init style

    if (_p.styleEnabled) {
      cy.style().append(initStyle);
    } // initial load


    setElesAndLayout(initEles, function () {
      // onready
      cy.startAnimationLoop();
      _p.ready = true; // if a ready callback is specified as an option, the bind it

      if (fn(options.ready)) {
        cy.on('ready', options.ready);
      } // bind all the ready handlers registered before creating this instance


      for (var i = 0; i < readies.length; i++) {
        var fn$$1 = readies[i];
        cy.on('ready', fn$$1);
      }

      if (reg) {
        reg.readies = [];
      } // clear b/c we've bound them all and don't want to keep it around in case a new core uses the same div etc


      cy.emit('ready');
    }, options.done);
  });
};

var corefn$9 = Core.prototype; // short alias

extend(corefn$9, {
  instanceString: function instanceString() {
    return 'core';
  },
  isReady: function isReady() {
    return this._private.ready;
  },
  isDestroyed: function isDestroyed() {
    return this._private.destroyed;
  },
  ready: function ready(fn$$1) {
    if (this.isReady()) {
      this.emitter().emit('ready', [], fn$$1); // just calls fn as though triggered via ready event
    } else {
      this.on('ready', fn$$1);
    }

    return this;
  },
  destroy: function destroy() {
    var cy = this;
    if (cy.isDestroyed()) return;
    cy.stopAnimationLoop();
    cy.destroyRenderer();
    this.emit('destroy');
    cy._private.destroyed = true;
    return cy;
  },
  hasElementWithId: function hasElementWithId(id) {
    return this._private.elements.hasElementWithId(id);
  },
  getElementById: function getElementById(id) {
    return this._private.elements.getElementById(id);
  },
  hasCompoundNodes: function hasCompoundNodes() {
    return this._private.hasCompoundNodes;
  },
  headless: function headless() {
    return this._private.renderer.isHeadless();
  },
  styleEnabled: function styleEnabled() {
    return this._private.styleEnabled;
  },
  addToPool: function addToPool(eles) {
    this._private.elements.merge(eles);

    return this; // chaining
  },
  removeFromPool: function removeFromPool(eles) {
    this._private.elements.unmerge(eles);

    return this;
  },
  container: function container() {
    return this._private.container || null;
  },
  mount: function mount(container, rendererOptions) {
    if (container == null) {
      return;
    }

    var cy = this;
    var _p = cy._private;
    var options = _p.options;
    var rOpts = rendererOptions ? rendererOptions : {
      name: 'canvas'
    };
    options.renderer = rOpts;

    if (!htmlElement(container) && htmlElement(container[0])) {
      container = container[0];
    }

    cy.stopAnimationLoop();
    cy.destroyRenderer();
    _p.container = container;
    _p.styleEnabled = true;
    cy.initRenderer(rOpts);
    cy.startAnimationLoop();
    cy.style(options.style);
    cy.emit('mount');
    return cy;
  },
  unmount: function unmount() {
    var cy = this;
    cy.stopAnimationLoop();
    cy.destroyRenderer();
    cy.initRenderer({
      name: 'null'
    });
    cy.emit('unmount');
    return cy;
  },
  options: function options() {
    return copy(this._private.options);
  },
  json: function json(obj) {
    var cy = this;
    var _p = cy._private;
    var eles = cy.mutableElements();

    var getFreshRef = function getFreshRef(ele) {
      return cy.getElementById(ele.id());
    };

    if (plainObject(obj)) {
      // set
      cy.startBatch();

      if (obj.elements) {
        var idInJson = {};

        var updateEles = function updateEles(jsons, gr) {
          var toAdd = [];
          var toMod = [];

          for (var i = 0; i < jsons.length; i++) {
            var json = jsons[i];
            var id = json.data.id;
            var ele = cy.getElementById(id);
            idInJson[id] = true;

            if (ele.length !== 0) {
              // existing element should be updated
              toMod.push({
                ele: ele,
                json: json
              });
            } else {
              // otherwise should be added
              if (gr) {
                json.group = gr;
                toAdd.push(json);
              } else {
                toAdd.push(json);
              }
            }
          }

          cy.add(toAdd);

          for (var _i = 0; _i < toMod.length; _i++) {
            var _toMod$_i = toMod[_i],
                _ele = _toMod$_i.ele,
                _json = _toMod$_i.json;

            _ele.json(_json);
          }
        };

        if (array(obj.elements)) {
          // elements: []
          updateEles(obj.elements);
        } else {
          // elements: { nodes: [], edges: [] }
          var grs = ['nodes', 'edges'];

          for (var i = 0; i < grs.length; i++) {
            var gr = grs[i];
            var elements = obj.elements[gr];

            if (array(elements)) {
              updateEles(elements, gr);
            }
          }
        }

        var parentsToRemove = cy.collection();
        eles.filter(function (ele) {
          return !idInJson[ele.id()];
        }).forEach(function (ele) {
          if (ele.isParent()) {
            parentsToRemove.merge(ele);
          } else {
            ele.remove();
          }
        }); // so that children are not removed w/parent

        parentsToRemove.forEach(function (ele) {
          return ele.children().move({
            parent: null
          });
        }); // intermediate parents may be moved by prior line, so make sure we remove by fresh refs

        parentsToRemove.forEach(function (ele) {
          return getFreshRef(ele).remove();
        });
      }

      if (obj.style) {
        cy.style(obj.style);
      }

      if (obj.zoom != null && obj.zoom !== _p.zoom) {
        cy.zoom(obj.zoom);
      }

      if (obj.pan) {
        if (obj.pan.x !== _p.pan.x || obj.pan.y !== _p.pan.y) {
          cy.pan(obj.pan);
        }
      }

      var fields = ['minZoom', 'maxZoom', 'zoomingEnabled', 'userZoomingEnabled', 'panningEnabled', 'userPanningEnabled', 'boxSelectionEnabled', 'autolock', 'autoungrabify', 'autounselectify'];

      for (var _i2 = 0; _i2 < fields.length; _i2++) {
        var f = fields[_i2];

        if (obj[f] != null) {
          cy[f](obj[f]);
        }
      }

      cy.endBatch();
      return this; // chaining
    } else {
      // get
      var flat = !!obj;
      var json = {};

      if (flat) {
        json.elements = this.elements().map(function (ele) {
          return ele.json();
        });
      } else {
        json.elements = {};
        eles.forEach(function (ele) {
          var group = ele.group();

          if (!json.elements[group]) {
            json.elements[group] = [];
          }

          json.elements[group].push(ele.json());
        });
      }

      if (this._private.styleEnabled) {
        json.style = cy.style().json();
      }

      var options = _p.options;
      json.zoomingEnabled = _p.zoomingEnabled;
      json.userZoomingEnabled = _p.userZoomingEnabled;
      json.zoom = _p.zoom;
      json.minZoom = _p.minZoom;
      json.maxZoom = _p.maxZoom;
      json.panningEnabled = _p.panningEnabled;
      json.userPanningEnabled = _p.userPanningEnabled;
      json.pan = copy(_p.pan);
      json.boxSelectionEnabled = _p.boxSelectionEnabled;
      json.renderer = copy(options.renderer);
      json.hideEdgesOnViewport = options.hideEdgesOnViewport;
      json.textureOnViewport = options.textureOnViewport;
      json.wheelSensitivity = options.wheelSensitivity;
      json.motionBlur = options.motionBlur;
      return json;
    }
  },
  scratch: define$3.data({
    field: 'scratch',
    bindingEvent: 'scratch',
    allowBinding: true,
    allowSetting: true,
    settingEvent: 'scratch',
    settingTriggersEvent: true,
    triggerFnName: 'trigger',
    allowGetting: true
  }),
  removeScratch: define$3.removeData({
    field: 'scratch',
    event: 'scratch',
    triggerFnName: 'trigger',
    triggerEvent: true
  })
});
corefn$9.$id = corefn$9.getElementById;
[corefn, corefn$1, elesfn$u, corefn$2, corefn$3, corefn$4, corefn$5, corefn$6, corefn$7, corefn$8].forEach(function (props) {
  extend(corefn$9, props);
});
/* eslint-disable no-unused-vars */

var defaults$9 = {
  fit: true,
  // whether to fit the viewport to the graph
  directed: false,
  // whether the tree is directed downwards (or edges can point in any direction if false)
  padding: 30,
  // padding on fit
  circle: false,
  // put depths in concentric circles if true, put depths top down if false
  grid: false,
  // whether to create an even grid into which the DAG is placed (circle:false only)
  spacingFactor: 1.75,
  // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
  boundingBox: undefined,
  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  avoidOverlap: true,
  // prevents node overlap, may overflow boundingBox if not enough space
  nodeDimensionsIncludeLabels: false,
  // Excludes the label when calculating node bounding boxes for the layout algorithm
  roots: undefined,
  // the roots of the trees
  maximal: false,
  // whether to shift nodes down their natural BFS depths in order to avoid upwards edges (DAGS only)
  animate: false,
  // whether to transition the node positions
  animationDuration: 500,
  // duration of animation in ms if enabled
  animationEasing: undefined,
  // easing of animation if enabled,
  animateFilter: function animateFilter(node, i) {
    return true;
  },
  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
  ready: undefined,
  // callback on layoutready
  stop: undefined,
  // callback on layoutstop
  transform: function transform(node, position) {
    return position;
  } // transform a given node position. Useful for changing flow direction in discrete layouts

};
/* eslint-enable */

var getInfo = function getInfo(ele) {
  return ele.scratch('breadthfirst');
};

var setInfo = function setInfo(ele, obj) {
  return ele.scratch('breadthfirst', obj);
};

function BreadthFirstLayout(options) {
  this.options = extend({}, defaults$9, options);
}

BreadthFirstLayout.prototype.run = function () {
  var params = this.options;
  var options = params;
  var cy = params.cy;
  var eles = options.eles;
  var nodes = eles.nodes().filter(function (n) {
    return !n.isParent();
  });
  var graph = eles;
  var directed = options.directed;
  var maximal = options.maximal || options.maximalAdjustments > 0; // maximalAdjustments for compat. w/ old code

  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
    x1: 0,
    y1: 0,
    w: cy.width(),
    h: cy.height()
  });
  var roots;

  if (elementOrCollection(options.roots)) {
    roots = options.roots;
  } else if (array(options.roots)) {
    var rootsArray = [];

    for (var i = 0; i < options.roots.length; i++) {
      var id = options.roots[i];
      var ele = cy.getElementById(id);
      rootsArray.push(ele);
    }

    roots = cy.collection(rootsArray);
  } else if (string(options.roots)) {
    roots = cy.$(options.roots);
  } else {
    if (directed) {
      roots = nodes.roots();
    } else {
      var components = eles.components();
      roots = cy.collection();

      var _loop = function _loop(_i) {
        var comp = components[_i];
        var maxDegree = comp.maxDegree(false);
        var compRoots = comp.filter(function (ele) {
          return ele.degree(false) === maxDegree;
        });
        roots = roots.add(compRoots);
      };

      for (var _i = 0; _i < components.length; _i++) {
        _loop(_i);
      }
    }
  }

  var depths = [];
  var foundByBfs = {};

  var addToDepth = function addToDepth(ele, d) {
    if (depths[d] == null) {
      depths[d] = [];
    }

    var i = depths[d].length;
    depths[d].push(ele);
    setInfo(ele, {
      index: i,
      depth: d
    });
  };

  var changeDepth = function changeDepth(ele, newDepth) {
    var _getInfo = getInfo(ele),
        depth = _getInfo.depth,
        index = _getInfo.index;

    depths[depth][index] = null;
    addToDepth(ele, newDepth);
  }; // find the depths of the nodes


  graph.bfs({
    roots: roots,
    directed: options.directed,
    visit: function visit(node, edge, pNode, i, depth) {
      var ele = node[0];
      var id = ele.id();
      addToDepth(ele, depth);
      foundByBfs[id] = true;
    }
  }); // check for nodes not found by bfs

  var orphanNodes = [];

  for (var _i2 = 0; _i2 < nodes.length; _i2++) {
    var _ele = nodes[_i2];

    if (foundByBfs[_ele.id()]) {
      continue;
    } else {
      orphanNodes.push(_ele);
    }
  } // assign the nodes a depth and index


  var assignDepthsAt = function assignDepthsAt(i) {
    var eles = depths[i];

    for (var j = 0; j < eles.length; j++) {
      var _ele2 = eles[j];

      if (_ele2 == null) {
        eles.splice(j, 1);
        j--;
        continue;
      }

      setInfo(_ele2, {
        depth: i,
        index: j
      });
    }
  };

  var assignDepths = function assignDepths() {
    for (var _i3 = 0; _i3 < depths.length; _i3++) {
      assignDepthsAt(_i3);
    }
  };

  var adjustMaximally = function adjustMaximally(ele, shifted) {
    var eInfo = getInfo(ele);
    var incomers = ele.incomers().filter(function (el) {
      return el.isNode() && eles.has(el);
    });
    var maxDepth = -1;
    var id = ele.id();

    for (var k = 0; k < incomers.length; k++) {
      var incmr = incomers[k];
      var iInfo = getInfo(incmr);
      maxDepth = Math.max(maxDepth, iInfo.depth);
    }

    if (eInfo.depth <= maxDepth) {
      if (shifted[id]) {
        return null;
      }

      changeDepth(ele, maxDepth + 1);
      shifted[id] = true;
      return true;
    }

    return false;
  }; // for the directed case, try to make the edges all go down (i.e. depth i => depth i + 1)


  if (directed && maximal) {
    var Q = [];
    var shifted = {};

    var enqueue = function enqueue(n) {
      return Q.push(n);
    };

    var dequeue = function dequeue() {
      return Q.shift();
    };

    nodes.forEach(function (n) {
      return Q.push(n);
    });

    while (Q.length > 0) {
      var _ele3 = dequeue();

      var didShift = adjustMaximally(_ele3, shifted);

      if (didShift) {
        _ele3.outgoers().filter(function (el) {
          return el.isNode() && eles.has(el);
        }).forEach(enqueue);
      } else if (didShift === null) {
        warn('Detected double maximal shift for node `' + _ele3.id() + '`.  Bailing maximal adjustment due to cycle.  Use `options.maximal: true` only on DAGs.');
        break; // exit on failure
      }
    }
  }

  assignDepths(); // clear holes
  // find min distance we need to leave between nodes

  var minDistance = 0;

  if (options.avoidOverlap) {
    for (var _i4 = 0; _i4 < nodes.length; _i4++) {
      var n = nodes[_i4];
      var nbb = n.layoutDimensions(options);
      var w = nbb.w;
      var h = nbb.h;
      minDistance = Math.max(minDistance, w, h);
    }
  } // get the weighted percent for an element based on its connectivity to other levels


  var cachedWeightedPercent = {};

  var getWeightedPercent = function getWeightedPercent(ele) {
    if (cachedWeightedPercent[ele.id()]) {
      return cachedWeightedPercent[ele.id()];
    }

    var eleDepth = getInfo(ele).depth;
    var neighbors = ele.neighborhood();
    var percent = 0;
    var samples = 0;

    for (var _i5 = 0; _i5 < neighbors.length; _i5++) {
      var neighbor = neighbors[_i5];

      if (neighbor.isEdge() || neighbor.isParent() || !nodes.has(neighbor)) {
        continue;
      }

      var bf = getInfo(neighbor);
      var index = bf.index;
      var depth = bf.depth; // unassigned neighbours shouldn't affect the ordering

      if (index == null || depth == null) {
        continue;
      }

      var nDepth = depths[depth].length;

      if (depth < eleDepth) {
        // only get influenced by elements above
        percent += index / (nDepth - 1);
        samples++;
      }
    }

    samples = Math.max(1, samples);
    percent = percent / samples;

    if (samples === 0) {
      // put lone nodes at the start
      percent = 0;
    }

    cachedWeightedPercent[ele.id()] = percent;
    return percent;
  }; // rearrange the indices in each depth level based on connectivity


  var sortFn = function sortFn(a, b) {
    var apct = getWeightedPercent(a);
    var bpct = getWeightedPercent(b);
    var diff = apct - bpct;

    if (diff === 0) {
      return ascending(a.id(), b.id()); // make sure sort doesn't have don't-care comparisons
    } else {
      return diff;
    }
  }; // sort each level to make connected nodes closer


  for (var _i6 = 0; _i6 < depths.length; _i6++) {
    depths[_i6].sort(sortFn);

    assignDepthsAt(_i6);
  } // assign orphan nodes to a new top-level depth


  var orphanDepth = [];

  for (var _i7 = 0; _i7 < orphanNodes.length; _i7++) {
    orphanDepth.push(orphanNodes[_i7]);
  }

  depths.unshift(orphanDepth);
  assignDepths();
  var biggestDepthSize = 0;

  for (var _i8 = 0; _i8 < depths.length; _i8++) {
    biggestDepthSize = Math.max(depths[_i8].length, biggestDepthSize);
  }

  var center = {
    x: bb.x1 + bb.w / 2,
    y: bb.x1 + bb.h / 2
  };
  var maxDepthSize = depths.reduce(function (max$$1, eles) {
    return Math.max(max$$1, eles.length);
  }, 0);

  var getPosition = function getPosition(ele) {
    var _getInfo2 = getInfo(ele),
        depth = _getInfo2.depth,
        index = _getInfo2.index;

    var depthSize = depths[depth].length;
    var distanceX = Math.max(bb.w / ((options.grid ? maxDepthSize : depthSize) + 1), minDistance);
    var distanceY = Math.max(bb.h / (depths.length + 1), minDistance);
    var radiusStepSize = Math.min(bb.w / 2 / depths.length, bb.h / 2 / depths.length);
    radiusStepSize = Math.max(radiusStepSize, minDistance);

    if (!options.circle) {
      var epos = {
        x: center.x + (index + 1 - (depthSize + 1) / 2) * distanceX,
        y: (depth + 1) * distanceY
      };
      return epos;
    } else {
      var radius = radiusStepSize * depth + radiusStepSize - (depths.length > 0 && depths[0].length <= 3 ? radiusStepSize / 2 : 0);
      var theta = 2 * Math.PI / depths[depth].length * index;

      if (depth === 0 && depths[0].length === 1) {
        radius = 1;
      }

      return {
        x: center.x + radius * Math.cos(theta),
        y: center.y + radius * Math.sin(theta)
      };
    }
  };

  nodes.layoutPositions(this, options, getPosition);
  return this; // chaining
};

var defaults$a = {
  fit: true,
  // whether to fit the viewport to the graph
  padding: 30,
  // the padding on fit
  boundingBox: undefined,
  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  avoidOverlap: true,
  // prevents node overlap, may overflow boundingBox and radius if not enough space
  nodeDimensionsIncludeLabels: false,
  // Excludes the label when calculating node bounding boxes for the layout algorithm
  spacingFactor: undefined,
  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
  radius: undefined,
  // the radius of the circle
  startAngle: 3 / 2 * Math.PI,
  // where nodes start in radians
  sweep: undefined,
  // how many radians should be between the first and last node (defaults to full circle)
  clockwise: true,
  // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
  sort: undefined,
  // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
  animate: false,
  // whether to transition the node positions
  animationDuration: 500,
  // duration of animation in ms if enabled
  animationEasing: undefined,
  // easing of animation if enabled
  animateFilter: function animateFilter(node, i) {
    return true;
  },
  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
  ready: undefined,
  // callback on layoutready
  stop: undefined,
  // callback on layoutstop
  transform: function transform(node, position) {
    return position;
  } // transform a given node position. Useful for changing flow direction in discrete layouts 

};

function CircleLayout(options) {
  this.options = extend({}, defaults$a, options);
}

CircleLayout.prototype.run = function () {
  var params = this.options;
  var options = params;
  var cy = params.cy;
  var eles = options.eles;
  var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;
  var nodes = eles.nodes().not(':parent');

  if (options.sort) {
    nodes = nodes.sort(options.sort);
  }

  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
    x1: 0,
    y1: 0,
    w: cy.width(),
    h: cy.height()
  });
  var center = {
    x: bb.x1 + bb.w / 2,
    y: bb.y1 + bb.h / 2
  };
  var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / nodes.length : options.sweep;
  var dTheta = sweep / Math.max(1, nodes.length - 1);
  var r;
  var minDistance = 0;

  for (var i = 0; i < nodes.length; i++) {
    var n = nodes[i];
    var nbb = n.layoutDimensions(options);
    var w = nbb.w;
    var h = nbb.h;
    minDistance = Math.max(minDistance, w, h);
  }

  if (number(options.radius)) {
    r = options.radius;
  } else if (nodes.length <= 1) {
    r = 0;
  } else {
    r = Math.min(bb.h, bb.w) / 2 - minDistance;
  } // calculate the radius


  if (nodes.length > 1 && options.avoidOverlap) {
    // but only if more than one node (can't overlap)
    minDistance *= 1.75; // just to have some nice spacing

    var dcos = Math.cos(dTheta) - Math.cos(0);
    var dsin = Math.sin(dTheta) - Math.sin(0);
    var rMin = Math.sqrt(minDistance * minDistance / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping

    r = Math.max(rMin, r);
  }

  var getPos = function getPos(ele, i) {
    var theta = options.startAngle + i * dTheta * (clockwise ? 1 : -1);
    var rx = r * Math.cos(theta);
    var ry = r * Math.sin(theta);
    var pos = {
      x: center.x + rx,
      y: center.y + ry
    };
    return pos;
  };

  nodes.layoutPositions(this, options, getPos);
  return this; // chaining
};

var defaults$b = {
  fit: true,
  // whether to fit the viewport to the graph
  padding: 30,
  // the padding on fit
  startAngle: 3 / 2 * Math.PI,
  // where nodes start in radians
  sweep: undefined,
  // how many radians should be between the first and last node (defaults to full circle)
  clockwise: true,
  // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
  equidistant: false,
  // whether levels have an equal radial distance betwen them, may cause bounding box overflow
  minNodeSpacing: 10,
  // min spacing between outside of nodes (used for radius adjustment)
  boundingBox: undefined,
  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  avoidOverlap: true,
  // prevents node overlap, may overflow boundingBox if not enough space
  nodeDimensionsIncludeLabels: false,
  // Excludes the label when calculating node bounding boxes for the layout algorithm
  height: undefined,
  // height of layout area (overrides container height)
  width: undefined,
  // width of layout area (overrides container width)
  spacingFactor: undefined,
  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
  concentric: function concentric(node) {
    // returns numeric value for each node, placing higher nodes in levels towards the centre
    return node.degree();
  },
  levelWidth: function levelWidth(nodes) {
    // the letiation of concentric values in each level
    return nodes.maxDegree() / 4;
  },
  animate: false,
  // whether to transition the node positions
  animationDuration: 500,
  // duration of animation in ms if enabled
  animationEasing: undefined,
  // easing of animation if enabled
  animateFilter: function animateFilter(node, i) {
    return true;
  },
  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
  ready: undefined,
  // callback on layoutready
  stop: undefined,
  // callback on layoutstop
  transform: function transform(node, position) {
    return position;
  } // transform a given node position. Useful for changing flow direction in discrete layouts

};

function ConcentricLayout(options) {
  this.options = extend({}, defaults$b, options);
}

ConcentricLayout.prototype.run = function () {
  var params = this.options;
  var options = params;
  var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;
  var cy = params.cy;
  var eles = options.eles;
  var nodes = eles.nodes().not(':parent');
  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
    x1: 0,
    y1: 0,
    w: cy.width(),
    h: cy.height()
  });
  var center = {
    x: bb.x1 + bb.w / 2,
    y: bb.y1 + bb.h / 2
  };
  var nodeValues = []; // { node, value }

  var maxNodeSize = 0;

  for (var i = 0; i < nodes.length; i++) {
    var node = nodes[i];
    var value = void 0; // calculate the node value

    value = options.concentric(node);
    nodeValues.push({
      value: value,
      node: node
    }); // for style mapping

    node._private.scratch.concentric = value;
  } // in case we used the `concentric` in style


  nodes.updateStyle(); // calculate max size now based on potentially updated mappers

  for (var _i = 0; _i < nodes.length; _i++) {
    var _node = nodes[_i];

    var nbb = _node.layoutDimensions(options);

    maxNodeSize = Math.max(maxNodeSize, nbb.w, nbb.h);
  } // sort node values in descreasing order


  nodeValues.sort(function (a, b) {
    return b.value - a.value;
  });
  var levelWidth = options.levelWidth(nodes); // put the values into levels

  var levels = [[]];
  var currentLevel = levels[0];

  for (var _i2 = 0; _i2 < nodeValues.length; _i2++) {
    var val = nodeValues[_i2];

    if (currentLevel.length > 0) {
      var diff = Math.abs(currentLevel[0].value - val.value);

      if (diff >= levelWidth) {
        currentLevel = [];
        levels.push(currentLevel);
      }
    }

    currentLevel.push(val);
  } // create positions from levels


  var minDist = maxNodeSize + options.minNodeSpacing; // min dist between nodes

  if (!options.avoidOverlap) {
    // then strictly constrain to bb
    var firstLvlHasMulti = levels.length > 0 && levels[0].length > 1;
    var maxR = Math.min(bb.w, bb.h) / 2 - minDist;
    var rStep = maxR / (levels.length + firstLvlHasMulti ? 1 : 0);
    minDist = Math.min(minDist, rStep);
  } // find the metrics for each level


  var r = 0;

  for (var _i3 = 0; _i3 < levels.length; _i3++) {
    var level = levels[_i3];
    var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / level.length : options.sweep;
    var dTheta = level.dTheta = sweep / Math.max(1, level.length - 1); // calculate the radius

    if (level.length > 1 && options.avoidOverlap) {
      // but only if more than one node (can't overlap)
      var dcos = Math.cos(dTheta) - Math.cos(0);
      var dsin = Math.sin(dTheta) - Math.sin(0);
      var rMin = Math.sqrt(minDist * minDist / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping

      r = Math.max(rMin, r);
    }

    level.r = r;
    r += minDist;
  }

  if (options.equidistant) {
    var rDeltaMax = 0;
    var _r = 0;

    for (var _i4 = 0; _i4 < levels.length; _i4++) {
      var _level = levels[_i4];
      var rDelta = _level.r - _r;
      rDeltaMax = Math.max(rDeltaMax, rDelta);
    }

    _r = 0;

    for (var _i5 = 0; _i5 < levels.length; _i5++) {
      var _level2 = levels[_i5];

      if (_i5 === 0) {
        _r = _level2.r;
      }

      _level2.r = _r;
      _r += rDeltaMax;
    }
  } // calculate the node positions


  var pos = {}; // id => position

  for (var _i6 = 0; _i6 < levels.length; _i6++) {
    var _level3 = levels[_i6];
    var _dTheta = _level3.dTheta;
    var _r2 = _level3.r;

    for (var j = 0; j < _level3.length; j++) {
      var _val = _level3[j];
      var theta = options.startAngle + (clockwise ? 1 : -1) * _dTheta * j;
      var p = {
        x: center.x + _r2 * Math.cos(theta),
        y: center.y + _r2 * Math.sin(theta)
      };
      pos[_val.node.id()] = p;
    }
  } // position the nodes


  nodes.layoutPositions(this, options, function (ele) {
    var id = ele.id();
    return pos[id];
  });
  return this; // chaining
};
/*
The CoSE layout was written by Gerardo Huck.
https://www.linkedin.com/in/gerardohuck/

Based on the following article:
http://dl.acm.org/citation.cfm?id=1498047

Modifications tracked on Github.
*/


var DEBUG;
/**
 * @brief :  default layout options
 */

var defaults$c = {
  // Called on `layoutready`
  ready: function ready() {},
  // Called on `layoutstop`
  stop: function stop() {},
  // Whether to animate while running the layout
  // true : Animate continuously as the layout is running
  // false : Just show the end result
  // 'end' : Animate with the end result, from the initial positions to the end positions
  animate: true,
  // Easing of the animation for animate:'end'
  animationEasing: undefined,
  // The duration of the animation for animate:'end'
  animationDuration: undefined,
  // A function that determines whether the node should be animated
  // All nodes animated by default on animate enabled
  // Non-animated nodes are positioned immediately when the layout starts
  animateFilter: function animateFilter(node, i) {
    return true;
  },
  // The layout animates only after this many milliseconds for animate:true
  // (prevents flashing on fast runs)
  animationThreshold: 250,
  // Number of iterations between consecutive screen positions update
  refresh: 20,
  // Whether to fit the network view after when done
  fit: true,
  // Padding on fit
  padding: 30,
  // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  boundingBox: undefined,
  // Excludes the label when calculating node bounding boxes for the layout algorithm
  nodeDimensionsIncludeLabels: false,
  // Randomize the initial positions of the nodes (true) or use existing positions (false)
  randomize: false,
  // Extra spacing between components in non-compound graphs
  componentSpacing: 40,
  // Node repulsion (non overlapping) multiplier
  nodeRepulsion: function nodeRepulsion(node) {
    return 2048;
  },
  // Node repulsion (overlapping) multiplier
  nodeOverlap: 4,
  // Ideal edge (non nested) length
  idealEdgeLength: function idealEdgeLength(edge) {
    return 32;
  },
  // Divisor to compute edge forces
  edgeElasticity: function edgeElasticity(edge) {
    return 32;
  },
  // Nesting factor (multiplier) to compute ideal edge length for nested edges
  nestingFactor: 1.2,
  // Gravity force (constant)
  gravity: 1,
  // Maximum number of iterations to perform
  numIter: 1000,
  // Initial temperature (maximum node displacement)
  initialTemp: 1000,
  // Cooling factor (how the temperature is reduced between consecutive iterations
  coolingFactor: 0.99,
  // Lower temperature threshold (below this point the layout will end)
  minTemp: 1.0,
  // Pass a reference to weaver to use threads for calculations
  weaver: false
};
/**
 * @brief       : constructor
 * @arg options : object containing layout options
 */

function CoseLayout(options) {
  this.options = extend({}, defaults$c, options);
  this.options.layout = this;
}
/**
 * @brief : runs the layout
 */


CoseLayout.prototype.run = function () {
  var options = this.options;
  var cy = options.cy;
  var layout = this;
  var thread$$1 = this.thread;
  var Thread = options.weaver ? options.weaver.Thread : null;
  var falseThread = {
    // use false thread as polyfill
    listeners: [],
    on: function on(e, cb) {
      this.listeners.push({
        event: e,
        callback: cb
      });
      return this;
    },
    trigger: function trigger(e) {
      if (string(e)) {
        e = {
          type: e
        };
      }

      var matchesEvent = function matchesEvent(l) {
        return l.event === e.type;
      };

      var trigger = function trigger(l) {
        l.callback(e);
      };

      this.listeners.filter(matchesEvent).forEach(trigger);
      return this;
    },
    pass: function pass(data) {
      this.pass = data;
      return this;
    },
    run: function run(cb) {
      var pass = this.pass;
      return new Promise$1(function (resolve) {
        resolve(cb(pass));
      });
    },
    stop: function stop() {
      return this;
    },
    stopped: function stopped() {
      return true;
    }
  };

  function broadcast(message) {
    // for false thread
    var e = {
      type: 'message',
      message: message
    };
    falseThread.trigger(e);
  }

  if (!thread$$1 || thread$$1.stopped()) {
    thread$$1 = this.thread = Thread ? new Thread() : falseThread;
  }

  layout.stopped = false;

  if (options.animate === true || options.animate === false) {
    layout.emit({
      type: 'layoutstart',
      layout: layout
    });
  } // Set DEBUG - Global variable


  if (true === options.debug) {
    DEBUG = true;
  } else {
    DEBUG = false;
  } // Initialize layout info


  var layoutInfo = createLayoutInfo(cy, layout, options); // Show LayoutInfo contents if debugging

  if (DEBUG) {
    printLayoutInfo(layoutInfo);
  } // If required, randomize node positions


  if (options.randomize) {
    randomizePositions(layoutInfo, cy);
  }

  var startTime = Date.now();
  var refreshRequested = false;

  var refresh = function refresh(rOpts) {
    rOpts = rOpts || {};

    if (refreshRequested && !rOpts.next) {
      return;
    }

    if (!rOpts.force && Date.now() - startTime < options.animationThreshold) {
      return;
    }

    refreshRequested = true;
    requestAnimationFrame(function () {
      refreshPositions(layoutInfo, cy, options); // Fit the graph if necessary

      if (true === options.fit) {
        cy.fit(options.padding);
      }

      refreshRequested = false;

      if (rOpts.next) {
        rOpts.next();
      }
    });
  };

  thread$$1.on('message', function (e) {
    var layoutNodes = e.message;
    layoutInfo.layoutNodes = layoutNodes;
    refresh();
  });
  thread$$1.pass({
    layoutInfo: layoutInfo,
    options: {
      animate: options.animate,
      refresh: options.refresh,
      componentSpacing: options.componentSpacing,
      nodeOverlap: options.nodeOverlap,
      nestingFactor: options.nestingFactor,
      gravity: options.gravity,
      numIter: options.numIter,
      initialTemp: options.initialTemp,
      coolingFactor: options.coolingFactor,
      minTemp: options.minTemp
    }
  }).run(function (pass) {
    var layoutInfo = pass.layoutInfo;
    var options = pass.options;
    /**
     * @brief          : Performs one iteration of the physical simulation
     * @arg layoutInfo : LayoutInfo object already initialized
     * @arg cy         : Cytoscape object
     * @arg options    : Layout options
     */

    var step = function step(layoutInfo, options, _step) {
      // var s = "\n\n###############################";
      // s += "\nSTEP: " + step;
      // s += "\n###############################\n";
      // logDebug(s);
      // Calculate node repulsions
      calculateNodeForces(layoutInfo, options); // Calculate edge forces

      calculateEdgeForces(layoutInfo, options); // Calculate gravity forces

      calculateGravityForces(layoutInfo, options); // Propagate forces from parent to child

      propagateForces(layoutInfo, options); // Update positions based on calculated forces

      updatePositions(layoutInfo, options);
    };
    /**
     * @brief : Computes the node repulsion forces
     */


    var calculateNodeForces = function calculateNodeForces(layoutInfo, options) {
      // Go through each of the graphs in graphSet
      // Nodes only repel each other if they belong to the same graph
      // var s = 'calculateNodeForces';
      // logDebug(s);
      for (var i = 0; i < layoutInfo.graphSet.length; i++) {
        var graph = layoutInfo.graphSet[i];
        var numNodes = graph.length; // s = "Set: " + graph.toString();
        // logDebug(s);
        // Now get all the pairs of nodes
        // Only get each pair once, (A, B) = (B, A)

        for (var j = 0; j < numNodes; j++) {
          var node1 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];

          for (var k = j + 1; k < numNodes; k++) {
            var node2 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[k]]];
            nodeRepulsion(node1, node2, layoutInfo, options);
          }
        }
      }
    };

    var randomDistance = function randomDistance(max$$1) {
      return -max$$1 + 2 * max$$1 * Math.random();
    };
    /**
     * @brief : Compute the node repulsion forces between a pair of nodes
     */


    var nodeRepulsion = function nodeRepulsion(node1, node2, layoutInfo, options) {
      // var s = "Node repulsion. Node1: " + node1.id + " Node2: " + node2.id;
      var cmptId1 = node1.cmptId;
      var cmptId2 = node2.cmptId;

      if (cmptId1 !== cmptId2 && !layoutInfo.isCompound) {
        return;
      } // Get direction of line connecting both node centers


      var directionX = node2.positionX - node1.positionX;
      var directionY = node2.positionY - node1.positionY;
      var maxRandDist = 1; // s += "\ndirectionX: " + directionX + ", directionY: " + directionY;
      // If both centers are the same, apply a random force

      if (0 === directionX && 0 === directionY) {
        directionX = randomDistance(maxRandDist);
        directionY = randomDistance(maxRandDist);
      }

      var overlap = nodesOverlap(node1, node2, directionX, directionY);

      if (overlap > 0) {
        // s += "\nNodes DO overlap.";
        // s += "\nOverlap: " + overlap;
        // If nodes overlap, repulsion force is proportional
        // to the overlap
        var force = options.nodeOverlap * overlap; // Compute the module and components of the force vector

        var distance = Math.sqrt(directionX * directionX + directionY * directionY); // s += "\nDistance: " + distance;

        var forceX = force * directionX / distance;
        var forceY = force * directionY / distance;
      } else {
        // s += "\nNodes do NOT overlap.";
        // If there's no overlap, force is inversely proportional
        // to squared distance
        // Get clipping points for both nodes
        var point1 = findClippingPoint(node1, directionX, directionY);
        var point2 = findClippingPoint(node2, -1 * directionX, -1 * directionY); // Use clipping points to compute distance

        var distanceX = point2.x - point1.x;
        var distanceY = point2.y - point1.y;
        var distanceSqr = distanceX * distanceX + distanceY * distanceY;
        var distance = Math.sqrt(distanceSqr); // s += "\nDistance: " + distance;
        // Compute the module and components of the force vector

        var force = (node1.nodeRepulsion + node2.nodeRepulsion) / distanceSqr;
        var forceX = force * distanceX / distance;
        var forceY = force * distanceY / distance;
      } // Apply force


      if (!node1.isLocked) {
        node1.offsetX -= forceX;
        node1.offsetY -= forceY;
      }

      if (!node2.isLocked) {
        node2.offsetX += forceX;
        node2.offsetY += forceY;
      } // s += "\nForceX: " + forceX + " ForceY: " + forceY;
      // logDebug(s);


      return;
    };
    /**
     * @brief  : Determines whether two nodes overlap or not
     * @return : Amount of overlapping (0 => no overlap)
     */


    var nodesOverlap = function nodesOverlap(node1, node2, dX, dY) {
      if (dX > 0) {
        var overlapX = node1.maxX - node2.minX;
      } else {
        var overlapX = node2.maxX - node1.minX;
      }

      if (dY > 0) {
        var overlapY = node1.maxY - node2.minY;
      } else {
        var overlapY = node2.maxY - node1.minY;
      }

      if (overlapX >= 0 && overlapY >= 0) {
        return Math.sqrt(overlapX * overlapX + overlapY * overlapY);
      } else {
        return 0;
      }
    };
    /**
     * @brief : Finds the point in which an edge (direction dX, dY) intersects
     *          the rectangular bounding box of it's source/target node
     */


    var findClippingPoint = function findClippingPoint(node, dX, dY) {
      // Shorcuts
      var X = node.positionX;
      var Y = node.positionY;
      var H = node.height || 1;
      var W = node.width || 1;
      var dirSlope = dY / dX;
      var nodeSlope = H / W; // var s = 'Computing clipping point of node ' + node.id +
      //   " . Height:  " + H + ", Width: " + W +
      //   "\nDirection " + dX + ", " + dY;
      //
      // Compute intersection

      var res = {}; // Case: Vertical direction (up)

      if (0 === dX && 0 < dY) {
        res.x = X; // s += "\nUp direction";

        res.y = Y + H / 2;
        return res;
      } // Case: Vertical direction (down)


      if (0 === dX && 0 > dY) {
        res.x = X;
        res.y = Y + H / 2; // s += "\nDown direction";

        return res;
      } // Case: Intersects the right border


      if (0 < dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
        res.x = X + W / 2;
        res.y = Y + W * dY / 2 / dX; // s += "\nRightborder";

        return res;
      } // Case: Intersects the left border


      if (0 > dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
        res.x = X - W / 2;
        res.y = Y - W * dY / 2 / dX; // s += "\nLeftborder";

        return res;
      } // Case: Intersects the top border


      if (0 < dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
        res.x = X + H * dX / 2 / dY;
        res.y = Y + H / 2; // s += "\nTop border";

        return res;
      } // Case: Intersects the bottom border


      if (0 > dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
        res.x = X - H * dX / 2 / dY;
        res.y = Y - H / 2; // s += "\nBottom border";

        return res;
      } // s += "\nClipping point found at " + res.x + ", " + res.y;
      // logDebug(s);


      return res;
    };
    /**
     * @brief : Calculates all edge forces
     */


    var calculateEdgeForces = function calculateEdgeForces(layoutInfo, options) {
      // Iterate over all edges
      for (var i = 0; i < layoutInfo.edgeSize; i++) {
        // Get edge, source & target nodes
        var edge = layoutInfo.layoutEdges[i];
        var sourceIx = layoutInfo.idToIndex[edge.sourceId];
        var source = layoutInfo.layoutNodes[sourceIx];
        var targetIx = layoutInfo.idToIndex[edge.targetId];
        var target = layoutInfo.layoutNodes[targetIx]; // Get direction of line connecting both node centers

        var directionX = target.positionX - source.positionX;
        var directionY = target.positionY - source.positionY; // If both centers are the same, do nothing.
        // A random force has already been applied as node repulsion

        if (0 === directionX && 0 === directionY) {
          continue;
        } // Get clipping points for both nodes


        var point1 = findClippingPoint(source, directionX, directionY);
        var point2 = findClippingPoint(target, -1 * directionX, -1 * directionY);
        var lx = point2.x - point1.x;
        var ly = point2.y - point1.y;
        var l = Math.sqrt(lx * lx + ly * ly);
        var force = Math.pow(edge.idealLength - l, 2) / edge.elasticity;

        if (0 !== l) {
          var forceX = force * lx / l;
          var forceY = force * ly / l;
        } else {
          var forceX = 0;
          var forceY = 0;
        } // Add this force to target and source nodes


        if (!source.isLocked) {
          source.offsetX += forceX;
          source.offsetY += forceY;
        }

        if (!target.isLocked) {
          target.offsetX -= forceX;
          target.offsetY -= forceY;
        } // var s = 'Edge force between nodes ' + source.id + ' and ' + target.id;
        // s += "\nDistance: " + l + " Force: (" + forceX + ", " + forceY + ")";
        // logDebug(s);

      }
    };
    /**
     * @brief : Computes gravity forces for all nodes
     */


    var calculateGravityForces = function calculateGravityForces(layoutInfo, options) {
      var distThreshold = 1; // var s = 'calculateGravityForces';
      // logDebug(s);

      for (var i = 0; i < layoutInfo.graphSet.length; i++) {
        var graph = layoutInfo.graphSet[i];
        var numNodes = graph.length; // s = "Set: " + graph.toString();
        // logDebug(s);
        // Compute graph center

        if (0 === i) {
          var centerX = layoutInfo.clientHeight / 2;
          var centerY = layoutInfo.clientWidth / 2;
        } else {
          // Get Parent node for this graph, and use its position as center
          var temp = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[0]]];
          var parent = layoutInfo.layoutNodes[layoutInfo.idToIndex[temp.parentId]];
          var centerX = parent.positionX;
          var centerY = parent.positionY;
        } // s = "Center found at: " + centerX + ", " + centerY;
        // logDebug(s);
        // Apply force to all nodes in graph


        for (var j = 0; j < numNodes; j++) {
          var node = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]]; // s = "Node: " + node.id;

          if (node.isLocked) {
            continue;
          }

          var dx = centerX - node.positionX;
          var dy = centerY - node.positionY;
          var d = Math.sqrt(dx * dx + dy * dy);

          if (d > distThreshold) {
            var fx = options.gravity * dx / d;
            var fy = options.gravity * dy / d;
            node.offsetX += fx;
            node.offsetY += fy; // s += ": Applied force: " + fx + ", " + fy;
          } // s += ": skypped since it's too close to center";
          // logDebug(s);

        }
      }
    };
    /**
     * @brief          : This function propagates the existing offsets from
     *                   parent nodes to its descendents.
     * @arg layoutInfo : layoutInfo Object
     * @arg cy         : cytoscape Object
     * @arg options    : Layout options
     */


    var propagateForces = function propagateForces(layoutInfo, options) {
      // Inline implementation of a queue, used for traversing the graph in BFS order
      var queue = [];
      var start = 0; // Points to the start the queue

      var end = -1; // Points to the end of the queue
      // logDebug('propagateForces');
      // Start by visiting the nodes in the root graph

      queue.push.apply(queue, layoutInfo.graphSet[0]);
      end += layoutInfo.graphSet[0].length; // Traverse the graph, level by level,

      while (start <= end) {
        // Get the node to visit and remove it from queue
        var nodeId = queue[start++];
        var nodeIndex = layoutInfo.idToIndex[nodeId];
        var node = layoutInfo.layoutNodes[nodeIndex];
        var children = node.children; // We only need to process the node if it's compound

        if (0 < children.length && !node.isLocked) {
          var offX = node.offsetX;
          var offY = node.offsetY; // var s = "Propagating offset from parent node : " + node.id +
          //   ". OffsetX: " + offX + ". OffsetY: " + offY;
          // s += "\n Children: " + children.toString();
          // logDebug(s);

          for (var i = 0; i < children.length; i++) {
            var childNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[children[i]]]; // Propagate offset

            childNode.offsetX += offX;
            childNode.offsetY += offY; // Add children to queue to be visited

            queue[++end] = children[i];
          } // Reset parent offsets


          node.offsetX = 0;
          node.offsetY = 0;
        }
      }
    };
    /**
     * @brief : Updates the layout model positions, based on
     *          the accumulated forces
     */


    var updatePositions = function updatePositions(layoutInfo, options) {
      // var s = 'Updating positions';
      // logDebug(s);
      // Reset boundaries for compound nodes
      for (var i = 0; i < layoutInfo.nodeSize; i++) {
        var n = layoutInfo.layoutNodes[i];

        if (0 < n.children.length) {
          // logDebug("Resetting boundaries of compound node: " + n.id);
          n.maxX = undefined;
          n.minX = undefined;
          n.maxY = undefined;
          n.minY = undefined;
        }
      }

      for (var i = 0; i < layoutInfo.nodeSize; i++) {
        var n = layoutInfo.layoutNodes[i];

        if (0 < n.children.length || n.isLocked) {
          // No need to set compound or locked node position
          // logDebug("Skipping position update of node: " + n.id);
          continue;
        } // s = "Node: " + n.id + " Previous position: (" +
        // n.positionX + ", " + n.positionY + ").";
        // Limit displacement in order to improve stability


        var tempForce = limitForce(n.offsetX, n.offsetY, layoutInfo.temperature);
        n.positionX += tempForce.x;
        n.positionY += tempForce.y;
        n.offsetX = 0;
        n.offsetY = 0;
        n.minX = n.positionX - n.width;
        n.maxX = n.positionX + n.width;
        n.minY = n.positionY - n.height;
        n.maxY = n.positionY + n.height; // s += " New Position: (" + n.positionX + ", " + n.positionY + ").";
        // logDebug(s);
        // Update ancestry boudaries

        updateAncestryBoundaries(n, layoutInfo);
      } // Update size, position of compund nodes


      for (var i = 0; i < layoutInfo.nodeSize; i++) {
        var n = layoutInfo.layoutNodes[i];

        if (0 < n.children.length && !n.isLocked) {
          n.positionX = (n.maxX + n.minX) / 2;
          n.positionY = (n.maxY + n.minY) / 2;
          n.width = n.maxX - n.minX;
          n.height = n.maxY - n.minY; // s = "Updating position, size of compound node " + n.id;
          // s += "\nPositionX: " + n.positionX + ", PositionY: " + n.positionY;
          // s += "\nWidth: " + n.width + ", Height: " + n.height;
          // logDebug(s);
        }
      }
    };
    /**
     * @brief : Limits a force (forceX, forceY) to be not
     *          greater (in modulo) than max.
     8          Preserves force direction.
     */


    var limitForce = function limitForce(forceX, forceY, max$$1) {
      // var s = "Limiting force: (" + forceX + ", " + forceY + "). Max: " + max;
      var force = Math.sqrt(forceX * forceX + forceY * forceY);

      if (force > max$$1) {
        var res = {
          x: max$$1 * forceX / force,
          y: max$$1 * forceY / force
        };
      } else {
        var res = {
          x: forceX,
          y: forceY
        };
      } // s += ".\nResult: (" + res.x + ", " + res.y + ")";
      // logDebug(s);


      return res;
    };
    /**
     * @brief : Function used for keeping track of compound node
     *          sizes, since they should bound all their subnodes.
     */


    var updateAncestryBoundaries = function updateAncestryBoundaries(node, layoutInfo) {
      // var s = "Propagating new position/size of node " + node.id;
      var parentId = node.parentId;

      if (null == parentId) {
        // If there's no parent, we are done
        // s += ". No parent node.";
        // logDebug(s);
        return;
      } // Get Parent Node


      var p = layoutInfo.layoutNodes[layoutInfo.idToIndex[parentId]];
      var flag = false; // MaxX

      if (null == p.maxX || node.maxX + p.padRight > p.maxX) {
        p.maxX = node.maxX + p.padRight;
        flag = true; // s += "\nNew maxX for parent node " + p.id + ": " + p.maxX;
      } // MinX


      if (null == p.minX || node.minX - p.padLeft < p.minX) {
        p.minX = node.minX - p.padLeft;
        flag = true; // s += "\nNew minX for parent node " + p.id + ": " + p.minX;
      } // MaxY


      if (null == p.maxY || node.maxY + p.padBottom > p.maxY) {
        p.maxY = node.maxY + p.padBottom;
        flag = true; // s += "\nNew maxY for parent node " + p.id + ": " + p.maxY;
      } // MinY


      if (null == p.minY || node.minY - p.padTop < p.minY) {
        p.minY = node.minY - p.padTop;
        flag = true; // s += "\nNew minY for parent node " + p.id + ": " + p.minY;
      } // If updated boundaries, propagate changes upward


      if (flag) {
        // logDebug(s);
        return updateAncestryBoundaries(p, layoutInfo);
      } // s += ". No changes in boundaries/position of parent node " + p.id;
      // logDebug(s);


      return;
    };

    var separateComponents = function separateComponents(layutInfo, options) {
      var nodes = layoutInfo.layoutNodes;
      var components = [];

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var cid = node.cmptId;
        var component = components[cid] = components[cid] || [];
        component.push(node);
      }

      var totalA = 0;

      for (var i = 0; i < components.length; i++) {
        var c = components[i];

        if (!c) {
          continue;
        }

        c.x1 = Infinity;
        c.x2 = -Infinity;
        c.y1 = Infinity;
        c.y2 = -Infinity;

        for (var j = 0; j < c.length; j++) {
          var n = c[j];
          c.x1 = Math.min(c.x1, n.positionX - n.width / 2);
          c.x2 = Math.max(c.x2, n.positionX + n.width / 2);
          c.y1 = Math.min(c.y1, n.positionY - n.height / 2);
          c.y2 = Math.max(c.y2, n.positionY + n.height / 2);
        }

        c.w = c.x2 - c.x1;
        c.h = c.y2 - c.y1;
        totalA += c.w * c.h;
      }

      components.sort(function (c1, c2) {
        return c2.w * c2.h - c1.w * c1.h;
      });
      var x = 0;
      var y = 0;
      var usedW = 0;
      var rowH = 0;
      var maxRowW = Math.sqrt(totalA) * layoutInfo.clientWidth / layoutInfo.clientHeight;

      for (var i = 0; i < components.length; i++) {
        var c = components[i];

        if (!c) {
          continue;
        }

        for (var j = 0; j < c.length; j++) {
          var n = c[j];

          if (!n.isLocked) {
            n.positionX += x;
            n.positionY += y;
          }
        }

        x += c.w + options.componentSpacing;
        usedW += c.w + options.componentSpacing;
        rowH = Math.max(rowH, c.h);

        if (usedW > maxRowW) {
          y += rowH + options.componentSpacing;
          x = 0;
          usedW = 0;
          rowH = 0;
        }
      }
    };

    var mainLoop = function mainLoop(i) {
      step(layoutInfo, options, i); // Update temperature

      layoutInfo.temperature = layoutInfo.temperature * options.coolingFactor; // logDebug("New temperature: " + layoutInfo.temperature);

      if (layoutInfo.temperature < options.minTemp) {
        // logDebug("Temperature drop below minimum threshold. Stopping computation in step " + i);
        return false;
      }

      return true;
    };

    var i = 0;
    var loopRet;

    do {
      var f = 0;

      while ((f < options.refresh || options.refresh === 0) && i < options.numIter) {
        var loopRet = mainLoop(i);

        if (!loopRet) {
          break;
        }

        f++;
        i++;
      }

      if (options.animate === true) {
        broadcast(layoutInfo.layoutNodes); // eslint-disable-line no-undef
      }
    } while (loopRet && i + 1 < options.numIter);

    separateComponents(layoutInfo, options);
    return layoutInfo;
  }).then(function (layoutInfoUpdated) {
    layoutInfo.layoutNodes = layoutInfoUpdated.layoutNodes; // get the positions

    thread$$1.stop();
    done();
  });

  var done = function done() {
    if (options.animate === true || options.animate === false) {
      refresh({
        force: true,
        next: function next() {
          // Layout has finished
          layout.one('layoutstop', options.stop);
          layout.emit({
            type: 'layoutstop',
            layout: layout
          });
        }
      });
    } else {
      options.eles.nodes().layoutPositions(layout, options, function (node) {
        var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data('id')]];
        return {
          x: lnode.positionX,
          y: lnode.positionY
        };
      });
    }
  };

  return this; // chaining
};
/**
 * @brief : called on continuous layouts to stop them before they finish
 */


CoseLayout.prototype.stop = function () {
  this.stopped = true;

  if (this.thread) {
    this.thread.stop();
  }

  this.emit('layoutstop');
  return this; // chaining
};

CoseLayout.prototype.destroy = function () {
  if (this.thread) {
    this.thread.stop();
  }

  return this; // chaining
};
/**
 * @brief     : Creates an object which is contains all the data
 *              used in the layout process
 * @arg cy    : cytoscape.js object
 * @return    : layoutInfo object initialized
 */


var createLayoutInfo = function createLayoutInfo(cy, layout, options) {
  // Shortcut
  var edges = options.eles.edges();
  var nodes = options.eles.nodes();
  var layoutInfo = {
    isCompound: cy.hasCompoundNodes(),
    layoutNodes: [],
    idToIndex: {},
    nodeSize: nodes.size(),
    graphSet: [],
    indexToGraph: [],
    layoutEdges: [],
    edgeSize: edges.size(),
    temperature: options.initialTemp,
    clientWidth: cy.width(),
    clientHeight: cy.width(),
    boundingBox: makeBoundingBox(options.boundingBox ? options.boundingBox : {
      x1: 0,
      y1: 0,
      w: cy.width(),
      h: cy.height()
    })
  };
  var components = options.eles.components();
  var id2cmptId = {};

  for (var i = 0; i < components.length; i++) {
    var component = components[i];

    for (var j = 0; j < component.length; j++) {
      var node = component[j];
      id2cmptId[node.id()] = i;
    }
  } // Iterate over all nodes, creating layout nodes


  for (var i = 0; i < layoutInfo.nodeSize; i++) {
    var n = nodes[i];
    var nbb = n.layoutDimensions(options);
    var tempNode = {};
    tempNode.isLocked = n.locked();
    tempNode.id = n.data('id');
    tempNode.parentId = n.data('parent');
    tempNode.cmptId = id2cmptId[n.id()];
    tempNode.children = [];
    tempNode.positionX = n.position('x');
    tempNode.positionY = n.position('y');
    tempNode.offsetX = 0;
    tempNode.offsetY = 0;
    tempNode.height = nbb.w;
    tempNode.width = nbb.h;
    tempNode.maxX = tempNode.positionX + tempNode.width / 2;
    tempNode.minX = tempNode.positionX - tempNode.width / 2;
    tempNode.maxY = tempNode.positionY + tempNode.height / 2;
    tempNode.minY = tempNode.positionY - tempNode.height / 2;
    tempNode.padLeft = parseFloat(n.style('padding'));
    tempNode.padRight = parseFloat(n.style('padding'));
    tempNode.padTop = parseFloat(n.style('padding'));
    tempNode.padBottom = parseFloat(n.style('padding')); // forces

    tempNode.nodeRepulsion = fn(options.nodeRepulsion) ? options.nodeRepulsion(n) : options.nodeRepulsion; // Add new node

    layoutInfo.layoutNodes.push(tempNode); // Add entry to id-index map

    layoutInfo.idToIndex[tempNode.id] = i;
  } // Inline implementation of a queue, used for traversing the graph in BFS order


  var queue = [];
  var start = 0; // Points to the start the queue

  var end = -1; // Points to the end of the queue

  var tempGraph = []; // Second pass to add child information and
  // initialize queue for hierarchical traversal

  for (var i = 0; i < layoutInfo.nodeSize; i++) {
    var n = layoutInfo.layoutNodes[i];
    var p_id = n.parentId; // Check if node n has a parent node

    if (null != p_id) {
      // Add node Id to parent's list of children
      layoutInfo.layoutNodes[layoutInfo.idToIndex[p_id]].children.push(n.id);
    } else {
      // If a node doesn't have a parent, then it's in the root graph
      queue[++end] = n.id;
      tempGraph.push(n.id);
    }
  } // Add root graph to graphSet


  layoutInfo.graphSet.push(tempGraph); // Traverse the graph, level by level,

  while (start <= end) {
    // Get the node to visit and remove it from queue
    var node_id = queue[start++];
    var node_ix = layoutInfo.idToIndex[node_id];
    var node = layoutInfo.layoutNodes[node_ix];
    var children = node.children;

    if (children.length > 0) {
      // Add children nodes as a new graph to graph set
      layoutInfo.graphSet.push(children); // Add children to que queue to be visited

      for (var i = 0; i < children.length; i++) {
        queue[++end] = children[i];
      }
    }
  } // Create indexToGraph map


  for (var i = 0; i < layoutInfo.graphSet.length; i++) {
    var graph = layoutInfo.graphSet[i];

    for (var j = 0; j < graph.length; j++) {
      var index = layoutInfo.idToIndex[graph[j]];
      layoutInfo.indexToGraph[index] = i;
    }
  } // Iterate over all edges, creating Layout Edges


  for (var i = 0; i < layoutInfo.edgeSize; i++) {
    var e = edges[i];
    var tempEdge = {};
    tempEdge.id = e.data('id');
    tempEdge.sourceId = e.data('source');
    tempEdge.targetId = e.data('target'); // Compute ideal length

    var idealLength = fn(options.idealEdgeLength) ? options.idealEdgeLength(e) : options.idealEdgeLength;
    var elasticity = fn(options.edgeElasticity) ? options.edgeElasticity(e) : options.edgeElasticity; // Check if it's an inter graph edge

    var sourceIx = layoutInfo.idToIndex[tempEdge.sourceId];
    var targetIx = layoutInfo.idToIndex[tempEdge.targetId];
    var sourceGraph = layoutInfo.indexToGraph[sourceIx];
    var targetGraph = layoutInfo.indexToGraph[targetIx];

    if (sourceGraph != targetGraph) {
      // Find lowest common graph ancestor
      var lca = findLCA(tempEdge.sourceId, tempEdge.targetId, layoutInfo); // Compute sum of node depths, relative to lca graph

      var lcaGraph = layoutInfo.graphSet[lca];
      var depth = 0; // Source depth

      var tempNode = layoutInfo.layoutNodes[sourceIx];

      while (-1 === lcaGraph.indexOf(tempNode.id)) {
        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
        depth++;
      } // Target depth


      tempNode = layoutInfo.layoutNodes[targetIx];

      while (-1 === lcaGraph.indexOf(tempNode.id)) {
        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
        depth++;
      } // logDebug('LCA of nodes ' + tempEdge.sourceId + ' and ' + tempEdge.targetId +
      //  ". Index: " + lca + " Contents: " + lcaGraph.toString() +
      //  ". Depth: " + depth);
      // Update idealLength


      idealLength *= depth * options.nestingFactor;
    }

    tempEdge.idealLength = idealLength;
    tempEdge.elasticity = elasticity;
    layoutInfo.layoutEdges.push(tempEdge);
  } // Finally, return layoutInfo object


  return layoutInfo;
};
/**
 * @brief : This function finds the index of the lowest common
 *          graph ancestor between 2 nodes in the subtree
 *          (from the graph hierarchy induced tree) whose
 *          root is graphIx
 *
 * @arg node1: node1's ID
 * @arg node2: node2's ID
 * @arg layoutInfo: layoutInfo object
 *
 */


var findLCA = function findLCA(node1, node2, layoutInfo) {
  // Find their common ancester, starting from the root graph
  var res = findLCA_aux(node1, node2, 0, layoutInfo);

  if (2 > res.count) {
    // If aux function couldn't find the common ancester,
    // then it is the root graph
    return 0;
  } else {
    return res.graph;
  }
};
/**
 * @brief          : Auxiliary function used for LCA computation
 *
 * @arg node1      : node1's ID
 * @arg node2      : node2's ID
 * @arg graphIx    : subgraph index
 * @arg layoutInfo : layoutInfo object
 *
 * @return         : object of the form {count: X, graph: Y}, where:
 *                   X is the number of ancesters (max: 2) found in
 *                   graphIx (and it's subgraphs),
 *                   Y is the graph index of the lowest graph containing
 *                   all X nodes
 */


var findLCA_aux = function findLCA_aux(node1, node2, graphIx, layoutInfo) {
  var graph = layoutInfo.graphSet[graphIx]; // If both nodes belongs to graphIx

  if (-1 < graph.indexOf(node1) && -1 < graph.indexOf(node2)) {
    return {
      count: 2,
      graph: graphIx
    };
  } // Make recursive calls for all subgraphs


  var c = 0;

  for (var i = 0; i < graph.length; i++) {
    var nodeId = graph[i];
    var nodeIx = layoutInfo.idToIndex[nodeId];
    var children = layoutInfo.layoutNodes[nodeIx].children; // If the node has no child, skip it

    if (0 === children.length) {
      continue;
    }

    var childGraphIx = layoutInfo.indexToGraph[layoutInfo.idToIndex[children[0]]];
    var result = findLCA_aux(node1, node2, childGraphIx, layoutInfo);

    if (0 === result.count) {
      // Neither node1 nor node2 are present in this subgraph
      continue;
    } else if (1 === result.count) {
      // One of (node1, node2) is present in this subgraph
      c++;

      if (2 === c) {
        // We've already found both nodes, no need to keep searching
        break;
      }
    } else {
      // Both nodes are present in this subgraph
      return result;
    }
  }

  return {
    count: c,
    graph: graphIx
  };
};
/**
 * @brief: printsLayoutInfo into js console
 *         Only used for debbuging
 */


if (false) {
  var printLayoutInfo;
}
/**
 * @brief : Randomizes the position of all nodes
 */


var randomizePositions = function randomizePositions(layoutInfo, cy) {
  var width = layoutInfo.clientWidth;
  var height = layoutInfo.clientHeight;

  for (var i = 0; i < layoutInfo.nodeSize; i++) {
    var n = layoutInfo.layoutNodes[i]; // No need to randomize compound nodes or locked nodes

    if (0 === n.children.length && !n.isLocked) {
      n.positionX = Math.random() * width;
      n.positionY = Math.random() * height;
    }
  }
};
/**
 * @brief          : Updates the positions of nodes in the network
 * @arg layoutInfo : LayoutInfo object
 * @arg cy         : Cytoscape object
 * @arg options    : Layout options
 */


var refreshPositions = function refreshPositions(layoutInfo, cy, options) {
  // var s = 'Refreshing positions';
  // logDebug(s);
  var layout = options.layout;
  var nodes = options.eles.nodes();
  var bb = layoutInfo.boundingBox;
  var coseBB = {
    x1: Infinity,
    x2: -Infinity,
    y1: Infinity,
    y2: -Infinity
  };

  if (options.boundingBox) {
    nodes.forEach(function (node) {
      var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data('id')]];
      coseBB.x1 = Math.min(coseBB.x1, lnode.positionX);
      coseBB.x2 = Math.max(coseBB.x2, lnode.positionX);
      coseBB.y1 = Math.min(coseBB.y1, lnode.positionY);
      coseBB.y2 = Math.max(coseBB.y2, lnode.positionY);
    });
    coseBB.w = coseBB.x2 - coseBB.x1;
    coseBB.h = coseBB.y2 - coseBB.y1;
  }

  nodes.positions(function (ele, i) {
    var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[ele.data('id')]]; // s = "Node: " + lnode.id + ". Refreshed position: (" +
    // lnode.positionX + ", " + lnode.positionY + ").";
    // logDebug(s);

    if (options.boundingBox) {
      // then add extra bounding box constraint
      var pctX = (lnode.positionX - coseBB.x1) / coseBB.w;
      var pctY = (lnode.positionY - coseBB.y1) / coseBB.h;
      return {
        x: bb.x1 + pctX * bb.w,
        y: bb.y1 + pctY * bb.h
      };
    } else {
      return {
        x: lnode.positionX,
        y: lnode.positionY
      };
    }
  }); // Trigger layoutReady only on first call

  if (true !== layoutInfo.ready) {
    // s = 'Triggering layoutready';
    // logDebug(s);
    layoutInfo.ready = true;
    layout.one('layoutready', options.ready);
    layout.emit({
      type: 'layoutready',
      layout: this
    });
  }
};

var defaults$d = {
  fit: true,
  // whether to fit the viewport to the graph
  padding: 30,
  // padding used on fit
  boundingBox: undefined,
  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  avoidOverlap: true,
  // prevents node overlap, may overflow boundingBox if not enough space
  avoidOverlapPadding: 10,
  // extra spacing around nodes when avoidOverlap: true
  nodeDimensionsIncludeLabels: false,
  // Excludes the label when calculating node bounding boxes for the layout algorithm
  spacingFactor: undefined,
  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
  condense: false,
  // uses all available space on false, uses minimal space on true
  rows: undefined,
  // force num of rows in the grid
  cols: undefined,
  // force num of columns in the grid
  position: function position(node) {},
  // returns { row, col } for element
  sort: undefined,
  // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
  animate: false,
  // whether to transition the node positions
  animationDuration: 500,
  // duration of animation in ms if enabled
  animationEasing: undefined,
  // easing of animation if enabled
  animateFilter: function animateFilter(node, i) {
    return true;
  },
  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
  ready: undefined,
  // callback on layoutready
  stop: undefined,
  // callback on layoutstop
  transform: function transform(node, position) {
    return position;
  } // transform a given node position. Useful for changing flow direction in discrete layouts 

};

function GridLayout(options) {
  this.options = extend({}, defaults$d, options);
}

GridLayout.prototype.run = function () {
  var params = this.options;
  var options = params;
  var cy = params.cy;
  var eles = options.eles;
  var nodes = eles.nodes().not(':parent');

  if (options.sort) {
    nodes = nodes.sort(options.sort);
  }

  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
    x1: 0,
    y1: 0,
    w: cy.width(),
    h: cy.height()
  });

  if (bb.h === 0 || bb.w === 0) {
    nodes.layoutPositions(this, options, function (ele) {
      return {
        x: bb.x1,
        y: bb.y1
      };
    });
  } else {
    // width/height * splits^2 = cells where splits is number of times to split width
    var cells = nodes.size();
    var splits = Math.sqrt(cells * bb.h / bb.w);
    var rows = Math.round(splits);
    var cols = Math.round(bb.w / bb.h * splits);

    var small = function small(val) {
      if (val == null) {
        return Math.min(rows, cols);
      } else {
        var min$$1 = Math.min(rows, cols);

        if (min$$1 == rows) {
          rows = val;
        } else {
          cols = val;
        }
      }
    };

    var large = function large(val) {
      if (val == null) {
        return Math.max(rows, cols);
      } else {
        var max$$1 = Math.max(rows, cols);

        if (max$$1 == rows) {
          rows = val;
        } else {
          cols = val;
        }
      }
    };

    var oRows = options.rows;
    var oCols = options.cols != null ? options.cols : options.columns; // if rows or columns were set in options, use those values

    if (oRows != null && oCols != null) {
      rows = oRows;
      cols = oCols;
    } else if (oRows != null && oCols == null) {
      rows = oRows;
      cols = Math.ceil(cells / rows);
    } else if (oRows == null && oCols != null) {
      cols = oCols;
      rows = Math.ceil(cells / cols);
    } // otherwise use the automatic values and adjust accordingly
    // if rounding was up, see if we can reduce rows or columns
    else if (cols * rows > cells) {
        var sm = small();
        var lg = large(); // reducing the small side takes away the most cells, so try it first

        if ((sm - 1) * lg >= cells) {
          small(sm - 1);
        } else if ((lg - 1) * sm >= cells) {
          large(lg - 1);
        }
      } else {
        // if rounding was too low, add rows or columns
        while (cols * rows < cells) {
          var _sm = small();

          var _lg = large(); // try to add to larger side first (adds less in multiplication)


          if ((_lg + 1) * _sm >= cells) {
            large(_lg + 1);
          } else {
            small(_sm + 1);
          }
        }
      }

    var cellWidth = bb.w / cols;
    var cellHeight = bb.h / rows;

    if (options.condense) {
      cellWidth = 0;
      cellHeight = 0;
    }

    if (options.avoidOverlap) {
      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var pos = node._private.position;

        if (pos.x == null || pos.y == null) {
          // for bb
          pos.x = 0;
          pos.y = 0;
        }

        var nbb = node.layoutDimensions(options);
        var p = options.avoidOverlapPadding;
        var w = nbb.w + p;
        var h = nbb.h + p;
        cellWidth = Math.max(cellWidth, w);
        cellHeight = Math.max(cellHeight, h);
      }
    }

    var cellUsed = {}; // e.g. 'c-0-2' => true

    var used = function used(row, col) {
      return cellUsed['c-' + row + '-' + col] ? true : false;
    };

    var use = function use(row, col) {
      cellUsed['c-' + row + '-' + col] = true;
    }; // to keep track of current cell position


    var row = 0;
    var col = 0;

    var moveToNextCell = function moveToNextCell() {
      col++;

      if (col >= cols) {
        col = 0;
        row++;
      }
    }; // get a cache of all the manual positions


    var id2manPos = {};

    for (var _i = 0; _i < nodes.length; _i++) {
      var _node = nodes[_i];
      var rcPos = options.position(_node);

      if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {
        // must have at least row or col def'd
        var _pos = {
          row: rcPos.row,
          col: rcPos.col
        };

        if (_pos.col === undefined) {
          // find unused col
          _pos.col = 0;

          while (used(_pos.row, _pos.col)) {
            _pos.col++;
          }
        } else if (_pos.row === undefined) {
          // find unused row
          _pos.row = 0;

          while (used(_pos.row, _pos.col)) {
            _pos.row++;
          }
        }

        id2manPos[_node.id()] = _pos;
        use(_pos.row, _pos.col);
      }
    }

    var getPos = function getPos(element, i) {
      var x, y;

      if (element.locked() || element.isParent()) {
        return false;
      } // see if we have a manual position set


      var rcPos = id2manPos[element.id()];

      if (rcPos) {
        x = rcPos.col * cellWidth + cellWidth / 2 + bb.x1;
        y = rcPos.row * cellHeight + cellHeight / 2 + bb.y1;
      } else {
        // otherwise set automatically
        while (used(row, col)) {
          moveToNextCell();
        }

        x = col * cellWidth + cellWidth / 2 + bb.x1;
        y = row * cellHeight + cellHeight / 2 + bb.y1;
        use(row, col);
        moveToNextCell();
      }

      return {
        x: x,
        y: y
      };
    };

    nodes.layoutPositions(this, options, getPos);
  }

  return this; // chaining
};

var defaults$e = {
  ready: function ready() {},
  // on layoutready
  stop: function stop() {} // on layoutstop

}; // constructor
// options : object containing layout options

function NullLayout(options) {
  this.options = extend({}, defaults$e, options);
} // runs the layout


NullLayout.prototype.run = function () {
  var options = this.options;
  var eles = options.eles; // elements to consider in the layout

  var layout = this; // cy is automatically populated for us in the constructor
  // (disable eslint for next line as this serves as example layout code to external developers)
  // eslint-disable-next-line no-unused-vars

  var cy = options.cy;
  layout.emit('layoutstart'); // puts all nodes at (0, 0)
  // n.b. most layouts would use layoutPositions(), instead of positions() and manual events

  eles.nodes().positions(function () {
    return {
      x: 0,
      y: 0
    };
  }); // trigger layoutready when each node has had its position set at least once

  layout.one('layoutready', options.ready);
  layout.emit('layoutready'); // trigger layoutstop when the layout stops (e.g. finishes)

  layout.one('layoutstop', options.stop);
  layout.emit('layoutstop');
  return this; // chaining
}; // called on continuous layouts to stop them before they finish


NullLayout.prototype.stop = function () {
  return this; // chaining
};

var defaults$f = {
  positions: undefined,
  // map of (node id) => (position obj); or function(node){ return somPos; }
  zoom: undefined,
  // the zoom level to set (prob want fit = false if set)
  pan: undefined,
  // the pan level to set (prob want fit = false if set)
  fit: true,
  // whether to fit to viewport
  padding: 30,
  // padding on fit
  animate: false,
  // whether to transition the node positions
  animationDuration: 500,
  // duration of animation in ms if enabled
  animationEasing: undefined,
  // easing of animation if enabled
  animateFilter: function animateFilter(node, i) {
    return true;
  },
  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
  ready: undefined,
  // callback on layoutready
  stop: undefined,
  // callback on layoutstop
  transform: function transform(node, position) {
    return position;
  } // transform a given node position. Useful for changing flow direction in discrete layouts

};

function PresetLayout(options) {
  this.options = extend({}, defaults$f, options);
}

PresetLayout.prototype.run = function () {
  var options = this.options;
  var eles = options.eles;
  var nodes = eles.nodes();
  var posIsFn = fn(options.positions);

  function getPosition(node) {
    if (options.positions == null) {
      return copyPosition(node.position());
    }

    if (posIsFn) {
      return options.positions(node);
    }

    var pos = options.positions[node._private.data.id];

    if (pos == null) {
      return null;
    }

    return pos;
  }

  nodes.layoutPositions(this, options, function (node, i) {
    var position = getPosition(node);

    if (node.locked() || position == null) {
      return false;
    }

    return position;
  });
  return this; // chaining
};

var defaults$g = {
  fit: true,
  // whether to fit to viewport
  padding: 30,
  // fit padding
  boundingBox: undefined,
  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  animate: false,
  // whether to transition the node positions
  animationDuration: 500,
  // duration of animation in ms if enabled
  animationEasing: undefined,
  // easing of animation if enabled
  animateFilter: function animateFilter(node, i) {
    return true;
  },
  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
  ready: undefined,
  // callback on layoutready
  stop: undefined,
  // callback on layoutstop
  transform: function transform(node, position) {
    return position;
  } // transform a given node position. Useful for changing flow direction in discrete layouts 

};

function RandomLayout(options) {
  this.options = extend({}, defaults$g, options);
}

RandomLayout.prototype.run = function () {
  var options = this.options;
  var cy = options.cy;
  var eles = options.eles;
  var nodes = eles.nodes().not(':parent');
  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
    x1: 0,
    y1: 0,
    w: cy.width(),
    h: cy.height()
  });

  var getPos = function getPos(node, i) {
    return {
      x: bb.x1 + Math.round(Math.random() * bb.w),
      y: bb.y1 + Math.round(Math.random() * bb.h)
    };
  };

  nodes.layoutPositions(this, options, getPos);
  return this; // chaining
};

var layout = [{
  name: 'breadthfirst',
  impl: BreadthFirstLayout
}, {
  name: 'circle',
  impl: CircleLayout
}, {
  name: 'concentric',
  impl: ConcentricLayout
}, {
  name: 'cose',
  impl: CoseLayout
}, {
  name: 'grid',
  impl: GridLayout
}, {
  name: 'null',
  impl: NullLayout
}, {
  name: 'preset',
  impl: PresetLayout
}, {
  name: 'random',
  impl: RandomLayout
}];

function NullRenderer(options) {
  this.options = options;
  this.notifications = 0; // for testing
}

var noop$1 = function noop() {};

NullRenderer.prototype = {
  recalculateRenderedStyle: noop$1,
  notify: function notify() {
    this.notifications++;
  },
  init: noop$1,
  isHeadless: function isHeadless() {
    return true;
  }
};
var BRp = {};
BRp.arrowShapeWidth = 0.3;

BRp.registerArrowShapes = function () {
  var arrowShapes = this.arrowShapes = {};
  var renderer = this; // Contract for arrow shapes:
  // 0, 0 is arrow tip
  // (0, 1) is direction towards node
  // (1, 0) is right
  //
  // functional api:
  // collide: check x, y in shape
  // roughCollide: called before collide, no false negatives
  // draw: draw
  // spacing: dist(arrowTip, nodeBoundary)
  // gap: dist(edgeTip, nodeBoundary), edgeTip may != arrowTip

  var bbCollide = function bbCollide(x, y, size, angle, translation, edgeWidth, padding) {
    var x1 = translation.x - size / 2 - padding;
    var x2 = translation.x + size / 2 + padding;
    var y1 = translation.y - size / 2 - padding;
    var y2 = translation.y + size / 2 + padding;
    var inside = x1 <= x && x <= x2 && y1 <= y && y <= y2;
    return inside;
  };

  var transform = function transform(x, y, size, angle, translation) {
    var xRotated = x * Math.cos(angle) - y * Math.sin(angle);
    var yRotated = x * Math.sin(angle) + y * Math.cos(angle);
    var xScaled = xRotated * size;
    var yScaled = yRotated * size;
    var xTranslated = xScaled + translation.x;
    var yTranslated = yScaled + translation.y;
    return {
      x: xTranslated,
      y: yTranslated
    };
  };

  var transformPoints = function transformPoints(pts, size, angle, translation) {
    var retPts = [];

    for (var i = 0; i < pts.length; i += 2) {
      var x = pts[i];
      var y = pts[i + 1];
      retPts.push(transform(x, y, size, angle, translation));
    }

    return retPts;
  };

  var pointsToArr = function pointsToArr(pts) {
    var ret = [];

    for (var i = 0; i < pts.length; i++) {
      var p = pts[i];
      ret.push(p.x, p.y);
    }

    return ret;
  };

  var standardGap = function standardGap(edge) {
    return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').pfValue * 2;
  };

  var defineArrowShape = function defineArrowShape(name, defn) {
    if (string(defn)) {
      defn = arrowShapes[defn];
    }

    arrowShapes[name] = extend({
      name: name,
      points: [-0.15, -0.3, 0.15, -0.3, 0.15, 0.3, -0.15, 0.3],
      collide: function collide(x, y, size, angle, translation, padding) {
        var points = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
        var inside = pointInsidePolygonPoints(x, y, points);
        return inside;
      },
      roughCollide: bbCollide,
      draw: function draw(context, size, angle, translation) {
        var points = transformPoints(this.points, size, angle, translation);
        renderer.arrowShapeImpl('polygon')(context, points);
      },
      spacing: function spacing(edge) {
        return 0;
      },
      gap: standardGap
    }, defn);
  };

  defineArrowShape('none', {
    collide: falsify,
    roughCollide: falsify,
    draw: noop,
    spacing: zeroify,
    gap: zeroify
  });
  defineArrowShape('triangle', {
    points: [-0.15, -0.3, 0, 0, 0.15, -0.3]
  });
  defineArrowShape('arrow', 'triangle');
  defineArrowShape('triangle-backcurve', {
    points: arrowShapes['triangle'].points,
    controlPoint: [0, -0.15],
    roughCollide: bbCollide,
    draw: function draw(context, size, angle, translation, edgeWidth) {
      var ptsTrans = transformPoints(this.points, size, angle, translation);
      var ctrlPt = this.controlPoint;
      var ctrlPtTrans = transform(ctrlPt[0], ctrlPt[1], size, angle, translation);
      renderer.arrowShapeImpl(this.name)(context, ptsTrans, ctrlPtTrans);
    },
    gap: function gap(edge) {
      return standardGap(edge) * 0.8;
    }
  });
  defineArrowShape('triangle-tee', {
    points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],
    pointsTee: [-0.15, -0.4, -0.15, -0.5, 0.15, -0.5, 0.15, -0.4],
    collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
      var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
      var teePts = pointsToArr(transformPoints(this.pointsTee, size + 2 * padding, angle, translation));
      var inside = pointInsidePolygonPoints(x, y, triPts) || pointInsidePolygonPoints(x, y, teePts);
      return inside;
    },
    draw: function draw(context, size, angle, translation, edgeWidth) {
      var triPts = transformPoints(this.points, size, angle, translation);
      var teePts = transformPoints(this.pointsTee, size, angle, translation);
      renderer.arrowShapeImpl(this.name)(context, triPts, teePts);
    }
  });
  defineArrowShape('triangle-cross', {
    points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],
    baseCrossLinePts: [-0.15, -0.4, // first half of the rectangle
    -0.15, -0.4, 0.15, -0.4, // second half of the rectangle
    0.15, -0.4],
    crossLinePts: function crossLinePts(size, edgeWidth) {
      // shift points so that the distance between the cross points matches edge width
      var p = this.baseCrossLinePts.slice();
      var shiftFactor = edgeWidth / size;
      var y0 = 3;
      var y1 = 5;
      p[y0] = p[y0] - shiftFactor;
      p[y1] = p[y1] - shiftFactor;
      return p;
    },
    collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
      var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
      var teePts = pointsToArr(transformPoints(this.crossLinePts(size, edgeWidth), size + 2 * padding, angle, translation));
      var inside = pointInsidePolygonPoints(x, y, triPts) || pointInsidePolygonPoints(x, y, teePts);
      return inside;
    },
    draw: function draw(context, size, angle, translation, edgeWidth) {
      var triPts = transformPoints(this.points, size, angle, translation);
      var crossLinePts = transformPoints(this.crossLinePts(size, edgeWidth), size, angle, translation);
      renderer.arrowShapeImpl(this.name)(context, triPts, crossLinePts);
    }
  });
  defineArrowShape('vee', {
    points: [-0.15, -0.3, 0, 0, 0.15, -0.3, 0, -0.15],
    gap: function gap(edge) {
      return standardGap(edge) * 0.525;
    }
  });
  defineArrowShape('circle', {
    radius: 0.15,
    collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
      var t = translation;
      var inside = Math.pow(t.x - x, 2) + Math.pow(t.y - y, 2) <= Math.pow((size + 2 * padding) * this.radius, 2);
      return inside;
    },
    draw: function draw(context, size, angle, translation, edgeWidth) {
      renderer.arrowShapeImpl(this.name)(context, translation.x, translation.y, this.radius * size);
    },
    spacing: function spacing(edge) {
      return renderer.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.radius;
    }
  });
  defineArrowShape('tee', {
    points: [-0.15, 0, -0.15, -0.1, 0.15, -0.1, 0.15, 0],
    spacing: function spacing(edge) {
      return 1;
    },
    gap: function gap(edge) {
      return 1;
    }
  });
  defineArrowShape('square', {
    points: [-0.15, 0.00, 0.15, 0.00, 0.15, -0.3, -0.15, -0.3]
  });
  defineArrowShape('diamond', {
    points: [-0.15, -0.15, 0, -0.3, 0.15, -0.15, 0, 0],
    gap: function gap(edge) {
      return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').value;
    }
  });
  defineArrowShape('chevron', {
    points: [0, 0, -0.15, -0.15, -0.1, -0.2, 0, -0.1, 0.1, -0.2, 0.15, -0.15],
    gap: function gap(edge) {
      return 0.95 * edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').value;
    }
  });
};

var BRp$1 = {}; // Project mouse

BRp$1.projectIntoViewport = function (clientX, clientY) {
  var cy = this.cy;
  var offsets = this.findContainerClientCoords();
  var offsetLeft = offsets[0];
  var offsetTop = offsets[1];
  var scale = offsets[4];
  var pan = cy.pan();
  var zoom = cy.zoom();
  var x = ((clientX - offsetLeft) / scale - pan.x) / zoom;
  var y = ((clientY - offsetTop) / scale - pan.y) / zoom;
  return [x, y];
};

BRp$1.findContainerClientCoords = function () {
  if (this.containerBB) {
    return this.containerBB;
  }

  var container = this.container;
  var rect = container.getBoundingClientRect();
  var style = window$1.getComputedStyle(container);

  var styleValue = function styleValue(name) {
    return parseFloat(style.getPropertyValue(name));
  };

  var padding = {
    left: styleValue('padding-left'),
    right: styleValue('padding-right'),
    top: styleValue('padding-top'),
    bottom: styleValue('padding-bottom')
  };
  var border = {
    left: styleValue('border-left-width'),
    right: styleValue('border-right-width'),
    top: styleValue('border-top-width'),
    bottom: styleValue('border-bottom-width')
  };
  var clientWidth = container.clientWidth;
  var clientHeight = container.clientHeight;
  var paddingHor = padding.left + padding.right;
  var paddingVer = padding.top + padding.bottom;
  var borderHor = border.left + border.right;
  var scale = rect.width / (clientWidth + borderHor);
  var unscaledW = clientWidth - paddingHor;
  var unscaledH = clientHeight - paddingVer;
  var left = rect.left + padding.left + border.left;
  var top = rect.top + padding.top + border.top;
  return this.containerBB = [left, top, unscaledW, unscaledH, scale];
};

BRp$1.invalidateContainerClientCoordsCache = function () {
  this.containerBB = null;
};

BRp$1.findNearestElement = function (x, y, interactiveElementsOnly, isTouch) {
  return this.findNearestElements(x, y, interactiveElementsOnly, isTouch)[0];
};

BRp$1.findNearestElements = function (x, y, interactiveElementsOnly, isTouch) {
  var self = this;
  var r = this;
  var eles = r.getCachedZSortedEles();
  var near = []; // 1 node max, 1 edge max

  var zoom = r.cy.zoom();
  var hasCompounds = r.cy.hasCompoundNodes();
  var edgeThreshold = (isTouch ? 24 : 8) / zoom;
  var nodeThreshold = (isTouch ? 8 : 2) / zoom;
  var labelThreshold = (isTouch ? 8 : 2) / zoom;
  var minSqDist = Infinity;
  var nearEdge;
  var nearNode;

  if (interactiveElementsOnly) {
    eles = eles.interactive;
  }

  function addEle(ele, sqDist) {
    if (ele.isNode()) {
      if (nearNode) {
        return; // can't replace node
      } else {
        nearNode = ele;
        near.push(ele);
      }
    }

    if (ele.isEdge() && (sqDist == null || sqDist < minSqDist)) {
      if (nearEdge) {
        // then replace existing edge
        // can replace only if same z-index
        if (nearEdge.pstyle('z-compound-depth').value === ele.pstyle('z-compound-depth').value && nearEdge.pstyle('z-compound-depth').value === ele.pstyle('z-compound-depth').value) {
          for (var i = 0; i < near.length; i++) {
            if (near[i].isEdge()) {
              near[i] = ele;
              nearEdge = ele;
              minSqDist = sqDist != null ? sqDist : minSqDist;
              break;
            }
          }
        }
      } else {
        near.push(ele);
        nearEdge = ele;
        minSqDist = sqDist != null ? sqDist : minSqDist;
      }
    }
  }

  function checkNode(node) {
    var width = node.outerWidth() + 2 * nodeThreshold;
    var height = node.outerHeight() + 2 * nodeThreshold;
    var hw = width / 2;
    var hh = height / 2;
    var pos = node.position();

    if (pos.x - hw <= x && x <= pos.x + hw // bb check x
    && pos.y - hh <= y && y <= pos.y + hh // bb check y
    ) {
        var shape = r.nodeShapes[self.getNodeShape(node)];

        if (shape.checkPoint(x, y, 0, width, height, pos.x, pos.y)) {
          addEle(node, 0);
          return true;
        }
      }
  }

  function checkEdge(edge) {
    var _p = edge._private;
    var rs = _p.rscratch;
    var styleWidth = edge.pstyle('width').pfValue;
    var scale = edge.pstyle('arrow-scale').value;
    var width = styleWidth / 2 + edgeThreshold; // more like a distance radius from centre

    var widthSq = width * width;
    var width2 = width * 2;
    var src = _p.source;
    var tgt = _p.target;
    var sqDist;

    if (rs.edgeType === 'segments' || rs.edgeType === 'straight' || rs.edgeType === 'haystack') {
      var pts = rs.allpts;

      for (var i = 0; i + 3 < pts.length; i += 2) {
        if (inLineVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], width2) && widthSq > (sqDist = sqdistToFiniteLine(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3]))) {
          addEle(edge, sqDist);
          return true;
        }
      }
    } else if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {
      var pts = rs.allpts;

      for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
        if (inBezierVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5], width2) && widthSq > (sqDist = sqdistToQuadraticBezier(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5]))) {
          addEle(edge, sqDist);
          return true;
        }
      }
    } // if we're close to the edge but didn't hit it, maybe we hit its arrows


    var src = src || _p.source;
    var tgt = tgt || _p.target;
    var arSize = self.getArrowWidth(styleWidth, scale);
    var arrows = [{
      name: 'source',
      x: rs.arrowStartX,
      y: rs.arrowStartY,
      angle: rs.srcArrowAngle
    }, {
      name: 'target',
      x: rs.arrowEndX,
      y: rs.arrowEndY,
      angle: rs.tgtArrowAngle
    }, {
      name: 'mid-source',
      x: rs.midX,
      y: rs.midY,
      angle: rs.midsrcArrowAngle
    }, {
      name: 'mid-target',
      x: rs.midX,
      y: rs.midY,
      angle: rs.midtgtArrowAngle
    }];

    for (var i = 0; i < arrows.length; i++) {
      var ar = arrows[i];
      var shape = r.arrowShapes[edge.pstyle(ar.name + '-arrow-shape').value];
      var edgeWidth = edge.pstyle('width').pfValue;

      if (shape.roughCollide(x, y, arSize, ar.angle, {
        x: ar.x,
        y: ar.y
      }, edgeWidth, edgeThreshold) && shape.collide(x, y, arSize, ar.angle, {
        x: ar.x,
        y: ar.y
      }, edgeWidth, edgeThreshold)) {
        addEle(edge);
        return true;
      }
    } // for compound graphs, hitting edge may actually want a connected node instead (b/c edge may have greater z-index precedence)


    if (hasCompounds && near.length > 0) {
      checkNode(src);
      checkNode(tgt);
    }
  }

  function preprop(obj, name, pre) {
    return getPrefixedProperty(obj, name, pre);
  }

  function checkLabel(ele, prefix) {
    var _p = ele._private;
    var th = labelThreshold;
    var prefixDash;

    if (prefix) {
      prefixDash = prefix + '-';
    } else {
      prefixDash = '';
    }

    var text = ele.pstyle(prefixDash + 'label').value;
    var eventsEnabled = ele.pstyle('text-events').strValue === 'yes';

    if (!eventsEnabled || !text) {
      return;
    }

    var rstyle = _p.rstyle;
    var bw = ele.pstyle('text-border-width').pfValue;
    var pw = ele.pstyle('text-background-padding').pfValue;
    var lw = preprop(rstyle, 'labelWidth', prefix) + bw + 2 * th + 2 * pw;
    var lh = preprop(rstyle, 'labelHeight', prefix) + bw + 2 * th + 2 * pw;
    var lx = preprop(rstyle, 'labelX', prefix);
    var ly = preprop(rstyle, 'labelY', prefix);
    var theta = preprop(_p.rscratch, 'labelAngle', prefix);
    var lx1 = lx - lw / 2;
    var lx2 = lx + lw / 2;
    var ly1 = ly - lh / 2;
    var ly2 = ly + lh / 2;

    if (theta) {
      var cos = Math.cos(theta);
      var sin = Math.sin(theta);

      var rotate = function rotate(x, y) {
        x = x - lx;
        y = y - ly;
        return {
          x: x * cos - y * sin + lx,
          y: x * sin + y * cos + ly
        };
      };

      var px1y1 = rotate(lx1, ly1);
      var px1y2 = rotate(lx1, ly2);
      var px2y1 = rotate(lx2, ly1);
      var px2y2 = rotate(lx2, ly2);
      var points = [px1y1.x, px1y1.y, px2y1.x, px2y1.y, px2y2.x, px2y2.y, px1y2.x, px1y2.y];

      if (pointInsidePolygonPoints(x, y, points)) {
        addEle(ele);
        return true;
      }
    } else {
      // do a cheaper bb check
      var bb = {
        w: lw,
        h: lh,
        x1: lx1,
        x2: lx2,
        y1: ly1,
        y2: ly2
      };

      if (inBoundingBox(bb, x, y)) {
        addEle(ele);
        return true;
      }
    }
  }

  for (var i = eles.length - 1; i >= 0; i--) {
    // reverse order for precedence
    var ele = eles[i];

    if (ele.isNode()) {
      checkNode(ele) || checkLabel(ele);
    } else {
      // then edge
      checkEdge(ele) || checkLabel(ele) || checkLabel(ele, 'source') || checkLabel(ele, 'target');
    }
  }

  return near;
}; // 'Give me everything from this box'


BRp$1.getAllInBox = function (x1, y1, x2, y2) {
  var eles = this.getCachedZSortedEles().interactive;
  var box = [];
  var x1c = Math.min(x1, x2);
  var x2c = Math.max(x1, x2);
  var y1c = Math.min(y1, y2);
  var y2c = Math.max(y1, y2);
  x1 = x1c;
  x2 = x2c;
  y1 = y1c;
  y2 = y2c;
  var boxBb = makeBoundingBox({
    x1: x1,
    y1: y1,
    x2: x2,
    y2: y2
  });

  for (var e = 0; e < eles.length; e++) {
    var ele = eles[e];

    if (ele.isNode()) {
      var node = ele;
      var nodeBb = node.boundingBox({
        includeNodes: true,
        includeEdges: false,
        includeLabels: false
      });

      if (boundingBoxesIntersect(boxBb, nodeBb) && !boundingBoxInBoundingBox(nodeBb, boxBb)) {
        box.push(node);
      }
    } else {
      var edge = ele;
      var _p = edge._private;
      var rs = _p.rscratch;

      if (rs.startX != null && rs.startY != null && !inBoundingBox(boxBb, rs.startX, rs.startY)) {
        continue;
      }

      if (rs.endX != null && rs.endY != null && !inBoundingBox(boxBb, rs.endX, rs.endY)) {
        continue;
      }

      if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' || rs.edgeType === 'segments' || rs.edgeType === 'haystack') {
        var pts = _p.rstyle.bezierPts || _p.rstyle.linePts || _p.rstyle.haystackPts;
        var allInside = true;

        for (var i = 0; i < pts.length; i++) {
          if (!pointInBoundingBox(boxBb, pts[i])) {
            allInside = false;
            break;
          }
        }

        if (allInside) {
          box.push(edge);
        }
      } else if (rs.edgeType === 'haystack' || rs.edgeType === 'straight') {
        box.push(edge);
      }
    }
  }

  return box;
};

var BRp$2 = {};

BRp$2.calculateArrowAngles = function (edge) {
  var rs = edge._private.rscratch;
  var isHaystack = rs.edgeType === 'haystack';
  var isBezier = rs.edgeType === 'bezier';
  var isMultibezier = rs.edgeType === 'multibezier';
  var isSegments = rs.edgeType === 'segments';
  var isCompound = rs.edgeType === 'compound';
  var isSelf = rs.edgeType === 'self'; // Displacement gives direction for arrowhead orientation

  var dispX, dispY;
  var startX, startY, endX, endY, midX, midY;

  if (isHaystack) {
    startX = rs.haystackPts[0];
    startY = rs.haystackPts[1];
    endX = rs.haystackPts[2];
    endY = rs.haystackPts[3];
  } else {
    startX = rs.arrowStartX;
    startY = rs.arrowStartY;
    endX = rs.arrowEndX;
    endY = rs.arrowEndY;
  }

  midX = rs.midX;
  midY = rs.midY; // source
  //

  if (isSegments) {
    dispX = startX - rs.segpts[0];
    dispY = startY - rs.segpts[1];
  } else if (isMultibezier || isCompound || isSelf || isBezier) {
    var pts = rs.allpts;
    var bX = qbezierAt(pts[0], pts[2], pts[4], 0.1);
    var bY = qbezierAt(pts[1], pts[3], pts[5], 0.1);
    dispX = startX - bX;
    dispY = startY - bY;
  } else {
    dispX = startX - midX;
    dispY = startY - midY;
  }

  rs.srcArrowAngle = getAngleFromDisp(dispX, dispY); // mid target
  //

  var midX = rs.midX;
  var midY = rs.midY;

  if (isHaystack) {
    midX = (startX + endX) / 2;
    midY = (startY + endY) / 2;
  }

  dispX = endX - startX;
  dispY = endY - startY;

  if (isSegments) {
    var pts = rs.allpts;

    if (pts.length / 2 % 2 === 0) {
      var i2 = pts.length / 2;
      var i1 = i2 - 2;
      dispX = pts[i2] - pts[i1];
      dispY = pts[i2 + 1] - pts[i1 + 1];
    } else {
      var i2 = pts.length / 2 - 1;
      var i1 = i2 - 2;
      var i3 = i2 + 2;
      dispX = pts[i2] - pts[i1];
      dispY = pts[i2 + 1] - pts[i1 + 1];
    }
  } else if (isMultibezier || isCompound || isSelf) {
    var pts = rs.allpts;
    var cpts = rs.ctrlpts;
    var bp0x, bp0y;
    var bp1x, bp1y;

    if (cpts.length / 2 % 2 === 0) {
      var p0 = pts.length / 2 - 1; // startpt

      var ic = p0 + 2;
      var p1 = ic + 2;
      bp0x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.0);
      bp0y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0);
      bp1x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.0001);
      bp1y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0001);
    } else {
      var ic = pts.length / 2 - 1; // ctrpt

      var p0 = ic - 2; // startpt

      var p1 = ic + 2; // endpt

      bp0x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.4999);
      bp0y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.4999);
      bp1x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.5);
      bp1y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.5);
    }

    dispX = bp1x - bp0x;
    dispY = bp1y - bp0y;
  }

  rs.midtgtArrowAngle = getAngleFromDisp(dispX, dispY);
  rs.midDispX = dispX;
  rs.midDispY = dispY; // mid source
  //

  dispX *= -1;
  dispY *= -1;

  if (isSegments) {
    var pts = rs.allpts;
    if (pts.length / 2 % 2 === 0) ;else {
      var i2 = pts.length / 2 - 1;
      var i3 = i2 + 2;
      dispX = -(pts[i3] - pts[i2]);
      dispY = -(pts[i3 + 1] - pts[i2 + 1]);
    }
  }

  rs.midsrcArrowAngle = getAngleFromDisp(dispX, dispY); // target
  //

  if (isSegments) {
    dispX = endX - rs.segpts[rs.segpts.length - 2];
    dispY = endY - rs.segpts[rs.segpts.length - 1];
  } else if (isMultibezier || isCompound || isSelf || isBezier) {
    var pts = rs.allpts;
    var l = pts.length;
    var bX = qbezierAt(pts[l - 6], pts[l - 4], pts[l - 2], 0.9);
    var bY = qbezierAt(pts[l - 5], pts[l - 3], pts[l - 1], 0.9);
    dispX = endX - bX;
    dispY = endY - bY;
  } else {
    dispX = endX - midX;
    dispY = endY - midY;
  }

  rs.tgtArrowAngle = getAngleFromDisp(dispX, dispY);
};

BRp$2.getArrowWidth = BRp$2.getArrowHeight = function (edgeWidth, scale) {
  var cache = this.arrowWidthCache = this.arrowWidthCache || {};
  var cachedVal = cache[edgeWidth + ', ' + scale];

  if (cachedVal) {
    return cachedVal;
  }

  cachedVal = Math.max(Math.pow(edgeWidth * 13.37, 0.9), 29) * scale;
  cache[edgeWidth + ', ' + scale] = cachedVal;
  return cachedVal;
};

var BRp$3 = {};

BRp$3.findHaystackPoints = function (edges) {
  for (var i = 0; i < edges.length; i++) {
    var edge = edges[i];
    var _p = edge._private;
    var rs = _p.rscratch;

    if (!rs.haystack) {
      var angle = Math.random() * 2 * Math.PI;
      rs.source = {
        x: Math.cos(angle),
        y: Math.sin(angle)
      };
      var angle = Math.random() * 2 * Math.PI;
      rs.target = {
        x: Math.cos(angle),
        y: Math.sin(angle)
      };
    }

    var src = _p.source;
    var tgt = _p.target;
    var srcPos = src.position();
    var tgtPos = tgt.position();
    var srcW = src.width();
    var tgtW = tgt.width();
    var srcH = src.height();
    var tgtH = tgt.height();
    var radius = edge.pstyle('haystack-radius').value;
    var halfRadius = radius / 2; // b/c have to half width/height

    rs.haystackPts = rs.allpts = [rs.source.x * srcW * halfRadius + srcPos.x, rs.source.y * srcH * halfRadius + srcPos.y, rs.target.x * tgtW * halfRadius + tgtPos.x, rs.target.y * tgtH * halfRadius + tgtPos.y];
    rs.midX = (rs.allpts[0] + rs.allpts[2]) / 2;
    rs.midY = (rs.allpts[1] + rs.allpts[3]) / 2; // always override as haystack in case set to different type previously

    rs.edgeType = rs.lastCurveStyle = 'haystack';
    rs.haystack = true;
    this.storeEdgeProjections(edge);
    this.calculateArrowAngles(edge);
    this.recalculateEdgeLabelProjections(edge);
    this.calculateLabelAngles(edge);
  }
};

BRp$3.storeAllpts = function (edge) {
  var rs = edge._private.rscratch;

  if (rs.edgeType === 'multibezier' || rs.edgeType === 'bezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {
    rs.allpts = [];
    rs.allpts.push(rs.startX, rs.startY);

    for (var b = 0; b + 1 < rs.ctrlpts.length; b += 2) {
      // ctrl pt itself
      rs.allpts.push(rs.ctrlpts[b], rs.ctrlpts[b + 1]); // the midpt between ctrlpts as intermediate destination pts

      if (b + 3 < rs.ctrlpts.length) {
        rs.allpts.push((rs.ctrlpts[b] + rs.ctrlpts[b + 2]) / 2, (rs.ctrlpts[b + 1] + rs.ctrlpts[b + 3]) / 2);
      }
    }

    rs.allpts.push(rs.endX, rs.endY);
    var m, mt;

    if (rs.ctrlpts.length / 2 % 2 === 0) {
      m = rs.allpts.length / 2 - 1;
      rs.midX = rs.allpts[m];
      rs.midY = rs.allpts[m + 1];
    } else {
      m = rs.allpts.length / 2 - 3;
      mt = 0.5;
      rs.midX = qbezierAt(rs.allpts[m], rs.allpts[m + 2], rs.allpts[m + 4], mt);
      rs.midY = qbezierAt(rs.allpts[m + 1], rs.allpts[m + 3], rs.allpts[m + 5], mt);
    }
  } else if (rs.edgeType === 'straight') {
    // need to calc these after endpts
    rs.allpts = [rs.startX, rs.startY, rs.endX, rs.endY]; // default midpt for labels etc

    rs.midX = (rs.startX + rs.endX + rs.arrowStartX + rs.arrowEndX) / 4;
    rs.midY = (rs.startY + rs.endY + rs.arrowStartY + rs.arrowEndY) / 4;
  } else if (rs.edgeType === 'segments') {
    rs.allpts = [];
    rs.allpts.push(rs.startX, rs.startY);
    rs.allpts.push.apply(rs.allpts, rs.segpts);
    rs.allpts.push(rs.endX, rs.endY);

    if (rs.segpts.length % 4 === 0) {
      var i2 = rs.segpts.length / 2;
      var i1 = i2 - 2;
      rs.midX = (rs.segpts[i1] + rs.segpts[i2]) / 2;
      rs.midY = (rs.segpts[i1 + 1] + rs.segpts[i2 + 1]) / 2;
    } else {
      var i1 = rs.segpts.length / 2 - 1;
      rs.midX = rs.segpts[i1];
      rs.midY = rs.segpts[i1 + 1];
    }
  }
};

BRp$3.checkForInvalidEdgeWarning = function (edge) {
  var rs = edge._private.rscratch;

  if (!number(rs.startX) || !number(rs.startY) || !number(rs.endX) || !number(rs.endY)) {
    if (!rs.loggedErr) {
      rs.loggedErr = true;
      warn('Edge `' + edge.id() + '` has invalid endpoints and so it is impossible to draw.  Adjust your edge style (e.g. control points) accordingly or use an alternative edge type.  This is expected behaviour when the source node and the target node overlap.');
    }
  } else {
    rs.loggedErr = false;
  }
};

BRp$3.findEdgeControlPoints = function (edges) {
  if (!edges || edges.length === 0) {
    return;
  }

  var r = this;
  var cy = r.cy;
  var hasCompounds = cy.hasCompoundNodes();
  var hashTable = {};
  var pairIds = [];
  var haystackEdges = []; // create a table of edge (src, tgt) => list of edges between them

  var pairId;

  for (var i = 0; i < edges.length; i++) {
    var edge = edges[i];
    var _p = edge._private;
    var data = _p.data;
    var curveStyle = edge.pstyle('curve-style').value;
    var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments' || curveStyle === 'straight';
    var edgeIsBezier = curveStyle === 'unbundled-bezier' || curveStyle === 'bezier'; // ignore edges who are not to be displayed
    // they shouldn't take up space

    if (edge.pstyle('display').value === 'none') {
      continue;
    }

    if (curveStyle === 'haystack') {
      haystackEdges.push(edge);
      continue;
    }

    var srcId = data.source;
    var tgtId = data.target;
    pairId = srcId > tgtId ? tgtId + '$-$' + srcId : srcId + '$-$' + tgtId;

    if (edgeIsUnbundled) {
      pairId = 'unbundled' + '$-$' + data.id;
    }

    var tableEntry = hashTable[pairId];

    if (tableEntry == null) {
      tableEntry = hashTable[pairId] = [];
      pairIds.push(pairId);
    }

    tableEntry.push(edge);

    if (edgeIsUnbundled) {
      tableEntry.hasUnbundled = true;
    }

    if (edgeIsBezier) {
      tableEntry.hasBezier = true;
    }
  }

  var src, tgt, srcPos, tgtPos, srcW, srcH, tgtW, tgtH, srcShape, tgtShape;
  var vectorNormInverse;
  var badBezier; // for each pair (src, tgt), create the ctrl pts
  // Nested for loop is OK; total number of iterations for both loops = edgeCount

  for (var p = 0; p < pairIds.length; p++) {
    pairId = pairIds[p];
    var pairEdges = hashTable[pairId];

    if (!pairEdges.hasUnbundled) {
      var pllEdges = pairEdges[0].parallelEdges();
      clearArray(pairEdges);
      pllEdges.forEach(function (edge) {
        return pairEdges.push(edge);
      }); // for each pair id, the edges should be sorted by index

      pairEdges.sort(function (edge1, edge2) {
        return edge1.poolIndex() - edge2.poolIndex();
      });
    }

    src = pairEdges[0]._private.source;
    tgt = pairEdges[0]._private.target; // make sure src/tgt distinction is consistent for bundled edges

    if (!pairEdges.hasUnbundled && src.id() > tgt.id()) {
      var temp = src;
      src = tgt;
      tgt = temp;
    }

    srcPos = src.position();
    tgtPos = tgt.position();
    srcW = src.outerWidth();
    srcH = src.outerHeight();
    tgtW = tgt.outerWidth();
    tgtH = tgt.outerHeight();
    srcShape = r.nodeShapes[this.getNodeShape(src)];
    tgtShape = r.nodeShapes[this.getNodeShape(tgt)];
    badBezier = false;
    var edge;
    var edge_p;
    var rs;
    var dirCounts = {
      'north': 0,
      'west': 0,
      'south': 0,
      'east': 0,
      'northwest': 0,
      'southwest': 0,
      'northeast': 0,
      'southeast': 0
    };
    var srcX2 = srcPos.x;
    var srcY2 = srcPos.y;
    var srcW2 = srcW;
    var srcH2 = srcH;
    var tgtX2 = tgtPos.x;
    var tgtY2 = tgtPos.y;
    var tgtW2 = tgtW;
    var tgtH2 = tgtH;
    var numEdges2 = pairEdges.length;

    for (var i = 0; i < pairEdges.length; i++) {
      edge = pairEdges[i];
      edge_p = edge._private;
      rs = edge_p.rscratch;
      var edgeIndex1 = rs.lastEdgeIndex;
      var edgeIndex2 = i;
      var numEdges1 = rs.lastNumEdges;
      var curveStyle = edge.pstyle('curve-style').value;
      var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments'; // whether the normalised pair order is the reverse of the edge's src-tgt order

      var edgeIsSwapped = src.id() !== edge.source().id();
      var ctrlptDists = edge.pstyle('control-point-distances');
      var loopDir = edge.pstyle('loop-direction').pfValue;
      var loopSwp = edge.pstyle('loop-sweep').pfValue;
      var ctrlptWs = edge.pstyle('control-point-weights');
      var bezierN = ctrlptDists && ctrlptWs ? Math.min(ctrlptDists.value.length, ctrlptWs.value.length) : 1;
      var stepSize = edge.pstyle('control-point-step-size').pfValue;
      var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
      var ctrlptWeight = ctrlptWs.value[0];
      var edgeDistances = edge.pstyle('edge-distances').value;
      var srcDistFNode = edge.pstyle('source-distance-from-node').pfValue;
      var tgtDistFNode = edge.pstyle('target-distance-from-node').pfValue;
      var segmentWs = edge.pstyle('segment-weights');
      var segmentDs = edge.pstyle('segment-distances');
      var segmentsN = Math.min(segmentWs.pfValue.length, segmentDs.pfValue.length);
      var srcEndpt = edge.pstyle('source-endpoint').value;
      var tgtEndpt = edge.pstyle('target-endpoint').value;
      var srcArrShape = edge.pstyle('source-arrow-shape').value;
      var tgtArrShape = edge.pstyle('target-arrow-shape').value;
      var arrowScale = edge.pstyle('arrow-scale').value;
      var lineWidth = edge.pstyle('width').pfValue;
      var srcX1 = rs.lastSrcCtlPtX;
      var srcY1 = rs.lastSrcCtlPtY;
      var srcW1 = rs.lastSrcCtlPtW;
      var srcH1 = rs.lastSrcCtlPtH;
      var tgtX1 = rs.lastTgtCtlPtX;
      var tgtY1 = rs.lastTgtCtlPtY;
      var tgtW1 = rs.lastTgtCtlPtW;
      var tgtH1 = rs.lastTgtCtlPtH;
      var curveStyle1 = rs.lastCurveStyle;
      var curveStyle2 = curveStyle;
      var ctrlptDists1 = rs.lastCtrlptDists;
      var ctrlptDists2 = ctrlptDists ? ctrlptDists.strValue : null;
      var ctrlptWs1 = rs.lastCtrlptWs;
      var ctrlptWs2 = ctrlptWs.strValue;
      var segmentWs1 = rs.lastSegmentWs;
      var segmentWs2 = segmentWs.strValue;
      var segmentDs1 = rs.lastSegmentDs;
      var segmentDs2 = segmentDs.strValue;
      var stepSize1 = rs.lastStepSize;
      var stepSize2 = stepSize;
      var loopDir1 = rs.lastLoopDir;
      var loopDir2 = loopDir;
      var loopSwp1 = rs.lastLoopSwp;
      var loopSwp2 = loopSwp;
      var edgeDistances1 = rs.lastEdgeDistances;
      var edgeDistances2 = edgeDistances;
      var srcDistFNode1 = rs.lastSrcDistFNode;
      var srcDistFNode2 = srcDistFNode;
      var tgtDistFNode1 = rs.lastTgtDistFNode;
      var tgtDistFNode2 = tgtDistFNode;
      var srcEndpt1 = rs.lastSrcEndpt;
      var srcEndpt2 = srcEndpt;
      var tgtEndpt1 = rs.lastTgtEndpt;
      var tgtEndpt2 = tgtEndpt;
      var srcArr1 = rs.lastSrcArr;
      var srcArr2 = srcArrShape;
      var tgtArr1 = rs.lastTgtArr;
      var tgtArr2 = tgtArrShape;
      var lineW1 = rs.lastLineW;
      var lineW2 = lineWidth;
      var arrScl1 = rs.lastArrScl;
      var arrScl2 = arrowScale;

      if (badBezier) {
        rs.badBezier = true;
      } else {
        rs.badBezier = false;
      }

      var ptCacheHit;

      if (srcX1 === srcX2 && srcY1 === srcY2 && srcW1 === srcW2 && srcH1 === srcH2 && tgtX1 === tgtX2 && tgtY1 === tgtY2 && tgtW1 === tgtW2 && tgtH1 === tgtH2 && curveStyle1 === curveStyle2 && ctrlptDists1 === ctrlptDists2 && ctrlptWs1 === ctrlptWs2 && segmentWs1 === segmentWs2 && segmentDs1 === segmentDs2 && stepSize1 === stepSize2 && loopDir1 === loopDir2 && loopSwp1 === loopSwp2 && edgeDistances1 === edgeDistances2 && srcDistFNode1 === srcDistFNode2 && tgtDistFNode1 === tgtDistFNode2 && srcEndpt1 === srcEndpt2 && tgtEndpt1 === tgtEndpt2 && srcArr1 === srcArr2 && tgtArr1 === tgtArr2 && lineW1 === lineW2 && arrScl1 === arrScl2 && (edgeIndex1 === edgeIndex2 && numEdges1 === numEdges2 || edgeIsUnbundled)) {
        ptCacheHit = true; // then the control points haven't changed and we can skip calculating them
      } else {
        ptCacheHit = false;
        rs.lastSrcCtlPtX = srcX2;
        rs.lastSrcCtlPtY = srcY2;
        rs.lastSrcCtlPtW = srcW2;
        rs.lastSrcCtlPtH = srcH2;
        rs.lastTgtCtlPtX = tgtX2;
        rs.lastTgtCtlPtY = tgtY2;
        rs.lastTgtCtlPtW = tgtW2;
        rs.lastTgtCtlPtH = tgtH2;
        rs.lastEdgeIndex = edgeIndex2;
        rs.lastNumEdges = numEdges2;
        rs.lastCurveStyle = curveStyle2;
        rs.lastCtrlptDists = ctrlptDists2;
        rs.lastCtrlptWs = ctrlptWs2;
        rs.lastSegmentDs = segmentDs2;
        rs.lastSegmentWs = segmentWs2;
        rs.lastStepSize = stepSize2;
        rs.lastLoopDir = loopDir2;
        rs.lastLoopSwp = loopSwp2;
        rs.lastEdgeDistances = edgeDistances2;
        rs.lastSrcDistFNode = srcDistFNode2;
        rs.lastTgtDistFNode = tgtDistFNode2;
        rs.lastSrcEndpt = srcEndpt2;
        rs.lastTgtEndpt = tgtEndpt2;
        rs.lastSrcArr = srcArr2;
        rs.lastTgtArr = tgtArr2;
        rs.lastLineW = lineW2;
        rs.lastArrScl = arrScl2;
      }

      if (!ptCacheHit) {
        if (!pairEdges.calculatedIntersection && src !== tgt && (pairEdges.hasBezier || pairEdges.hasUnbundled)) {
          pairEdges.calculatedIntersection = true; // pt outside src shape to calc distance/displacement from src to tgt

          var srcOutside = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, tgtPos.x, tgtPos.y, 0);
          pairEdges.srcIntn = srcOutside; // pt outside tgt shape to calc distance/displacement from src to tgt

          var tgtOutside = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, srcPos.x, srcPos.y, 0);
          pairEdges.tgtIntn = tgtOutside;
          var midptSrcPts = {
            x1: srcOutside[0],
            x2: tgtOutside[0],
            y1: srcOutside[1],
            y2: tgtOutside[1]
          };
          var posPts = {
            x1: srcPos.x,
            x2: tgtPos.x,
            y1: srcPos.y,
            y2: tgtPos.y
          };
          var dy = tgtOutside[1] - srcOutside[1];
          var dx = tgtOutside[0] - srcOutside[0];
          var l = Math.sqrt(dx * dx + dy * dy);
          var vector = {
            x: dx,
            y: dy
          };
          var vectorNorm = {
            x: vector.x / l,
            y: vector.y / l
          };
          vectorNormInverse = {
            x: -vectorNorm.y,
            y: vectorNorm.x
          }; // if node shapes overlap, then no ctrl pts to draw

          if (tgtShape.checkPoint(srcOutside[0], srcOutside[1], 0, tgtW, tgtH, tgtPos.x, tgtPos.y) && srcShape.checkPoint(tgtOutside[0], tgtOutside[1], 0, srcW, srcH, srcPos.x, srcPos.y)) {
            vectorNormInverse = {};
            badBezier = true;
          }
        }

        if (!edgeIsSwapped) {
          rs.srcIntn = pairEdges.srcIntn;
          rs.tgtIntn = pairEdges.tgtIntn;
        } else {
          // ensure that the per-edge cached value for intersections are correct for swapped bundled edges
          rs.srcIntn = pairEdges.tgtIntn;
          rs.tgtIntn = pairEdges.srcIntn;
        }

        if (src === tgt) {
          // Self-edge
          rs.edgeType = 'self';
          var j = i;
          var loopDist = stepSize;

          if (edgeIsUnbundled) {
            j = 0;
            loopDist = ctrlptDist;
          }

          var loopAngle = loopDir - Math.PI / 2;
          var outAngle = loopAngle - loopSwp / 2;
          var inAngle = loopAngle + loopSwp / 2; // increase by step size for overlapping loops, keyed on direction and sweep values

          var dc = String(loopDir + '_' + loopSwp);
          j = dirCounts[dc] === undefined ? dirCounts[dc] = 0 : ++dirCounts[dc];
          rs.ctrlpts = [srcPos.x + Math.cos(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.x + Math.cos(inAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(inAngle) * 1.4 * loopDist * (j / 3 + 1)];
        } else if (hasCompounds && (src.isParent() || src.isChild() || tgt.isParent() || tgt.isChild()) && (src.parents().anySame(tgt) || tgt.parents().anySame(src))) {
          // Compound edge
          rs.edgeType = 'compound'; // because the line approximation doesn't apply for compound beziers
          // (loop/self edges are already elided b/c of cheap src==tgt check)

          rs.badBezier = false;
          var j = i;
          var loopDist = stepSize;

          if (edgeIsUnbundled) {
            j = 0;
            loopDist = ctrlptDist;
          }

          var loopW = 50;
          var loopaPos = {
            x: srcPos.x - srcW / 2,
            y: srcPos.y - srcH / 2
          };
          var loopbPos = {
            x: tgtPos.x - tgtW / 2,
            y: tgtPos.y - tgtH / 2
          };
          var loopPos = {
            x: Math.min(loopaPos.x, loopbPos.x),
            y: Math.min(loopaPos.y, loopbPos.y)
          }; // avoids cases with impossible beziers

          var minCompoundStretch = 0.5;
          var compoundStretchA = Math.max(minCompoundStretch, Math.log(srcW * 0.01));
          var compoundStretchB = Math.max(minCompoundStretch, Math.log(tgtW * 0.01));
          rs.ctrlpts = [loopPos.x, loopPos.y - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchA, loopPos.x - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchB, loopPos.y];
        } else if (curveStyle === 'segments') {
          // Segments (multiple straight lines)
          rs.edgeType = 'segments';
          rs.segpts = [];

          for (var s = 0; s < segmentsN; s++) {
            var w = segmentWs.pfValue[s];
            var d = segmentDs.pfValue[s];
            var w1 = 1 - w;
            var w2 = w;
            var midptPts = edgeDistances === 'node-position' ? posPts : midptSrcPts;
            var adjustedMidpt = {
              x: midptPts.x1 * w1 + midptPts.x2 * w2,
              y: midptPts.y1 * w1 + midptPts.y2 * w2
            };
            rs.segpts.push(adjustedMidpt.x + vectorNormInverse.x * d, adjustedMidpt.y + vectorNormInverse.y * d);
          } // Straight edge

        } else if (pairEdges.length % 2 === 1 && i === Math.floor(pairEdges.length / 2) && !edgeIsUnbundled) {
          rs.edgeType = 'straight';
        } else {
          // (Multi)bezier
          var multi = edgeIsUnbundled;
          rs.edgeType = multi ? 'multibezier' : 'bezier';
          rs.ctrlpts = [];

          for (var b = 0; b < bezierN; b++) {
            var normctrlptDist = (0.5 - pairEdges.length / 2 + i) * stepSize;
            var manctrlptDist;
            var sign = signum(normctrlptDist);

            if (multi) {
              ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[b] : stepSize; // fall back on step size

              ctrlptWeight = ctrlptWs.value[b];
            }

            if (edgeIsUnbundled) {
              // multi or single unbundled
              manctrlptDist = ctrlptDist;
            } else {
              manctrlptDist = ctrlptDist !== undefined ? sign * ctrlptDist : undefined;
            }

            var distanceFromMidpoint = manctrlptDist !== undefined ? manctrlptDist : normctrlptDist;
            var w1 = 1 - ctrlptWeight;
            var w2 = ctrlptWeight;

            if (edgeIsSwapped) {
              var temp = w1;
              w1 = w2;
              w2 = temp;
            }

            var midptPts = edgeDistances === 'node-position' ? posPts : midptSrcPts;
            var adjustedMidpt = {
              x: midptPts.x1 * w1 + midptPts.x2 * w2,
              y: midptPts.y1 * w1 + midptPts.y2 * w2
            };
            rs.ctrlpts.push(adjustedMidpt.x + vectorNormInverse.x * distanceFromMidpoint, adjustedMidpt.y + vectorNormInverse.y * distanceFromMidpoint);
          }
        } // find endpts for edge


        this.findEndpoints(edge);
        var badStart = !number(rs.startX) || !number(rs.startY);
        var badAStart = !number(rs.arrowStartX) || !number(rs.arrowStartY);
        var badEnd = !number(rs.endX) || !number(rs.endY);
        var badAEnd = !number(rs.arrowEndX) || !number(rs.arrowEndY);
        var minCpADistFactor = 3;
        var arrowW = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;
        var minCpADist = minCpADistFactor * arrowW;

        if (rs.edgeType === 'bezier') {
          var startACpDist = dist({
            x: rs.ctrlpts[0],
            y: rs.ctrlpts[1]
          }, {
            x: rs.startX,
            y: rs.startY
          });
          var closeStartACp = startACpDist < minCpADist;
          var endACpDist = dist({
            x: rs.ctrlpts[0],
            y: rs.ctrlpts[1]
          }, {
            x: rs.endX,
            y: rs.endY
          });
          var closeEndACp = endACpDist < minCpADist;
          var overlapping = false;

          if (badStart || badAStart || closeStartACp) {
            overlapping = true; // project control point along line from src centre to outside the src shape
            // (otherwise intersection will yield nothing)

            var cpD = {
              // delta
              x: rs.ctrlpts[0] - srcPos.x,
              y: rs.ctrlpts[1] - srcPos.y
            };
            var cpL = Math.sqrt(cpD.x * cpD.x + cpD.y * cpD.y); // length of line

            var cpM = {
              // normalised delta
              x: cpD.x / cpL,
              y: cpD.y / cpL
            };
            var radius = Math.max(srcW, srcH);
            var cpProj = {
              // *2 radius guarantees outside shape
              x: rs.ctrlpts[0] + cpM.x * 2 * radius,
              y: rs.ctrlpts[1] + cpM.y * 2 * radius
            };
            var srcCtrlPtIntn = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, cpProj.x, cpProj.y, 0);

            if (closeStartACp) {
              rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - startACpDist);
              rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - startACpDist);
            } else {
              rs.ctrlpts[0] = srcCtrlPtIntn[0] + cpM.x * minCpADist;
              rs.ctrlpts[1] = srcCtrlPtIntn[1] + cpM.y * minCpADist;
            }
          }

          if (badEnd || badAEnd || closeEndACp) {
            overlapping = true; // project control point along line from tgt centre to outside the tgt shape
            // (otherwise intersection will yield nothing)

            var cpD = {
              // delta
              x: rs.ctrlpts[0] - tgtPos.x,
              y: rs.ctrlpts[1] - tgtPos.y
            };
            var cpL = Math.sqrt(cpD.x * cpD.x + cpD.y * cpD.y); // length of line

            var cpM = {
              // normalised delta
              x: cpD.x / cpL,
              y: cpD.y / cpL
            };
            var radius = Math.max(srcW, srcH);
            var cpProj = {
              // *2 radius guarantees outside shape
              x: rs.ctrlpts[0] + cpM.x * 2 * radius,
              y: rs.ctrlpts[1] + cpM.y * 2 * radius
            };
            var tgtCtrlPtIntn = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, cpProj.x, cpProj.y, 0);

            if (closeEndACp) {
              rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - endACpDist);
              rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - endACpDist);
            } else {
              rs.ctrlpts[0] = tgtCtrlPtIntn[0] + cpM.x * minCpADist;
              rs.ctrlpts[1] = tgtCtrlPtIntn[1] + cpM.y * minCpADist;
            }
          }

          if (overlapping) {
            // recalc endpts
            this.findEndpoints(edge);
          }
        }

        this.checkForInvalidEdgeWarning(edge);
        this.storeAllpts(edge);
        this.storeEdgeProjections(edge);
        this.calculateArrowAngles(edge);
      } // if point cache miss


      this.recalculateEdgeLabelProjections(edge);
      this.calculateLabelAngles(edge);
    } // for pair edges

  } // for pair ids


  this.findHaystackPoints(haystackEdges);
};

function getPts(pts) {
  var retPts = [];

  if (pts == null) {
    return;
  }

  for (var i = 0; i < pts.length; i += 2) {
    var x = pts[i];
    var y = pts[i + 1];
    retPts.push({
      x: x,
      y: y
    });
  }

  return retPts;
}

BRp$3.getSegmentPoints = function (edge) {
  var rs = edge[0]._private.rscratch;
  var type = rs.edgeType;

  if (type === 'segments') {
    this.recalculateRenderedStyle(edge);
    return getPts(rs.segpts);
  }
};

BRp$3.getControlPoints = function (edge) {
  var rs = edge[0]._private.rscratch;
  var type = rs.edgeType;

  if (type === 'bezier' || type === 'multibezier' || type === 'self' || type === 'compound') {
    this.recalculateRenderedStyle(edge);
    return getPts(rs.ctrlpts);
  }
};

BRp$3.getEdgeMidpoint = function (edge) {
  var rs = edge[0]._private.rscratch;
  this.recalculateRenderedStyle(edge);
  return {
    x: rs.midX,
    y: rs.midY
  };
};

var BRp$4 = {};

BRp$4.manualEndptToPx = function (node, prop) {
  var r = this;
  var npos = node.position();
  var w = node.outerWidth();
  var h = node.outerHeight();

  if (prop.value.length === 2) {
    var p = [prop.pfValue[0], prop.pfValue[1]];

    if (prop.units[0] === '%') {
      p[0] = p[0] * w;
    }

    if (prop.units[1] === '%') {
      p[1] = p[1] * h;
    }

    p[0] += npos.x;
    p[1] += npos.y;
    return p;
  } else {
    var angle = prop.pfValue[0];
    angle = -Math.PI / 2 + angle; // start at 12 o'clock

    var l = 2 * Math.max(w, h);
    var _p = [npos.x + Math.cos(angle) * l, npos.y + Math.sin(angle) * l];
    return r.nodeShapes[this.getNodeShape(node)].intersectLine(npos.x, npos.y, w, h, _p[0], _p[1], 0);
  }
};

BRp$4.findEndpoints = function (edge) {
  var r = this;
  var intersect;
  var source = edge.source()[0];
  var target = edge.target()[0];
  var srcPos = source.position();
  var tgtPos = target.position();
  var tgtArShape = edge.pstyle('target-arrow-shape').value;
  var srcArShape = edge.pstyle('source-arrow-shape').value;
  var tgtDist = edge.pstyle('target-distance-from-node').pfValue;
  var srcDist = edge.pstyle('source-distance-from-node').pfValue;
  var rs = edge._private.rscratch;
  var et = rs.edgeType;
  var self = et === 'self' || et === 'compound';
  var bezier = et === 'bezier' || et === 'multibezier' || self;
  var multi = et !== 'bezier';
  var lines = et === 'straight' || et === 'segments';
  var segments = et === 'segments';
  var hasEndpts = bezier || multi || lines;
  var srcManEndpt = edge.pstyle('source-endpoint');
  var srcManEndptVal = self ? 'outside-to-node' : srcManEndpt.value;
  var tgtManEndpt = edge.pstyle('target-endpoint');
  var tgtManEndptVal = self ? 'outside-to-node' : tgtManEndpt.value;
  rs.srcManEndpt = srcManEndpt;
  rs.tgtManEndpt = tgtManEndpt;
  var p1; // last known point of edge on target side

  var p2; // last known point of edge on source side

  var p1_i; // point to intersect with target shape

  var p2_i; // point to intersect with source shape

  if (bezier) {
    var cpStart = [rs.ctrlpts[0], rs.ctrlpts[1]];
    var cpEnd = multi ? [rs.ctrlpts[rs.ctrlpts.length - 2], rs.ctrlpts[rs.ctrlpts.length - 1]] : cpStart;
    p1 = cpEnd;
    p2 = cpStart;
  } else if (lines) {
    var srcArrowFromPt = !segments ? [tgtPos.x, tgtPos.y] : rs.segpts.slice(0, 2);
    var tgtArrowFromPt = !segments ? [srcPos.x, srcPos.y] : rs.segpts.slice(rs.segpts.length - 2);
    p1 = tgtArrowFromPt;
    p2 = srcArrowFromPt;
  }

  if (tgtManEndptVal === 'inside-to-node') {
    intersect = [tgtPos.x, tgtPos.y];
  } else if (tgtManEndpt.units) {
    intersect = this.manualEndptToPx(target, tgtManEndpt);
  } else if (tgtManEndptVal === 'outside-to-line') {
    intersect = rs.tgtIntn; // use cached value from ctrlpt calc
  } else {
    if (tgtManEndptVal === 'outside-to-node' || tgtManEndptVal === 'outside-to-node-or-label') {
      p1_i = p1;
    } else if (tgtManEndptVal === 'outside-to-line' || tgtManEndptVal === 'outside-to-line-or-label') {
      p1_i = [srcPos.x, srcPos.y];
    }

    intersect = r.nodeShapes[this.getNodeShape(target)].intersectLine(tgtPos.x, tgtPos.y, target.outerWidth(), target.outerHeight(), p1_i[0], p1_i[1], 0);

    if (tgtManEndptVal === 'outside-to-node-or-label' || tgtManEndptVal === 'outside-to-line-or-label') {
      var trs = target._private.rscratch;
      var lw = trs.labelWidth;
      var lh = trs.labelHeight;
      var lx = trs.labelX;
      var ly = trs.labelY;
      var va = target.pstyle('text-valign').value;

      if (va === 'top') {
        ly -= lh / 2;
      } else if (va === 'bottom') {
        ly += lh / 2;
      }

      var ha = target.pstyle('text-halign').value;

      if (ha === 'left') {
        lx -= lw / 2;
      } else if (ha === 'right') {
        lx += lw / 2;
      }

      var labelIntersect = r.nodeShapes['rectangle'].intersectLine(lx, ly, lw, lh, p1_i[0], p1_i[1], 0);
      var refPt = srcPos;
      var intSqdist = sqdist(refPt, array2point(intersect));
      var labIntSqdist = sqdist(refPt, array2point(labelIntersect));

      if (labIntSqdist < intSqdist) {
        intersect = labelIntersect;
      }
    }
  }

  var arrowEnd = shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].spacing(edge) + tgtDist);
  var edgeEnd = shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].gap(edge) + tgtDist);
  rs.endX = edgeEnd[0];
  rs.endY = edgeEnd[1];
  rs.arrowEndX = arrowEnd[0];
  rs.arrowEndY = arrowEnd[1];

  if (srcManEndptVal === 'inside-to-node') {
    intersect = [srcPos.x, srcPos.y];
  } else if (srcManEndpt.units) {
    intersect = this.manualEndptToPx(source, srcManEndpt);
  } else if (srcManEndptVal === 'outside-to-line') {
    intersect = rs.srcIntn; // use cached value from ctrlpt calc
  } else {
    if (srcManEndptVal === 'outside-to-node' || srcManEndptVal === 'outside-to-node-or-label') {
      p2_i = p2;
    } else if (srcManEndptVal === 'outside-to-line' || srcManEndptVal === 'outside-to-line-or-label') {
      p2_i = [tgtPos.x, tgtPos.y];
    }

    intersect = r.nodeShapes[this.getNodeShape(source)].intersectLine(srcPos.x, srcPos.y, source.outerWidth(), source.outerHeight(), p2_i[0], p2_i[1], 0);

    if (srcManEndptVal === 'outside-to-node-or-label' || srcManEndptVal === 'outside-to-line-or-label') {
      var srs = source._private.rscratch;
      var _lw = srs.labelWidth;
      var _lh = srs.labelHeight;
      var _lx = srs.labelX;
      var _ly = srs.labelY;
      var _va = source.pstyle('text-valign').value;

      if (_va === 'top') {
        _ly -= _lh / 2;
      } else if (_va === 'bottom') {
        _ly += _lh / 2;
      }

      var _ha = source.pstyle('text-halign').value;

      if (_ha === 'left') {
        _lx -= _lw / 2;
      } else if (_ha === 'right') {
        _lx += _lw / 2;
      }

      var _labelIntersect = r.nodeShapes['rectangle'].intersectLine(_lx, _ly, _lw, _lh, p2_i[0], p2_i[1], 0);

      var _refPt = tgtPos;

      var _intSqdist = sqdist(_refPt, array2point(intersect));

      var _labIntSqdist = sqdist(_refPt, array2point(_labelIntersect));

      if (_labIntSqdist < _intSqdist) {
        intersect = _labelIntersect;
      }
    }
  }

  var arrowStart = shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].spacing(edge) + srcDist);
  var edgeStart = shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].gap(edge) + srcDist);
  rs.startX = edgeStart[0];
  rs.startY = edgeStart[1];
  rs.arrowStartX = arrowStart[0];
  rs.arrowStartY = arrowStart[1];

  if (hasEndpts) {
    if (!number(rs.startX) || !number(rs.startY) || !number(rs.endX) || !number(rs.endY)) {
      rs.badLine = true;
    } else {
      rs.badLine = false;
    }
  }
};

BRp$4.getSourceEndpoint = function (edge) {
  var rs = edge[0]._private.rscratch;
  this.recalculateRenderedStyle(edge);

  switch (rs.edgeType) {
    case 'haystack':
      return {
        x: rs.haystackPts[0],
        y: rs.haystackPts[1]
      };

    default:
      return {
        x: rs.arrowStartX,
        y: rs.arrowStartY
      };
  }
};

BRp$4.getTargetEndpoint = function (edge) {
  var rs = edge[0]._private.rscratch;
  this.recalculateRenderedStyle(edge);

  switch (rs.edgeType) {
    case 'haystack':
      return {
        x: rs.haystackPts[2],
        y: rs.haystackPts[3]
      };

    default:
      return {
        x: rs.arrowEndX,
        y: rs.arrowEndY
      };
  }
};

var BRp$5 = {};

function pushBezierPts(r, edge, pts) {
  var qbezierAt$$1 = function qbezierAt$$1(p1, p2, p3, t) {
    return qbezierAt(p1, p2, p3, t);
  };

  var _p = edge._private;
  var bpts = _p.rstyle.bezierPts;

  for (var i = 0; i < r.bezierProjPcts.length; i++) {
    var p = r.bezierProjPcts[i];
    bpts.push({
      x: qbezierAt$$1(pts[0], pts[2], pts[4], p),
      y: qbezierAt$$1(pts[1], pts[3], pts[5], p)
    });
  }
}

BRp$5.storeEdgeProjections = function (edge) {
  var _p = edge._private;
  var rs = _p.rscratch;
  var et = rs.edgeType; // clear the cached points state

  _p.rstyle.bezierPts = null;
  _p.rstyle.linePts = null;
  _p.rstyle.haystackPts = null;

  if (et === 'multibezier' || et === 'bezier' || et === 'self' || et === 'compound') {
    _p.rstyle.bezierPts = [];

    for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
      pushBezierPts(this, edge, rs.allpts.slice(i, i + 6));
    }
  } else if (et === 'segments') {
    var lpts = _p.rstyle.linePts = [];

    for (var i = 0; i + 1 < rs.allpts.length; i += 2) {
      lpts.push({
        x: rs.allpts[i],
        y: rs.allpts[i + 1]
      });
    }
  } else if (et === 'haystack') {
    var hpts = rs.haystackPts;
    _p.rstyle.haystackPts = [{
      x: hpts[0],
      y: hpts[1]
    }, {
      x: hpts[2],
      y: hpts[3]
    }];
  }

  _p.rstyle.arrowWidth = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;
};

BRp$5.recalculateEdgeProjections = function (edges) {
  this.findEdgeControlPoints(edges);
};

var BRp$6 = {};

BRp$6.recalculateNodeLabelProjection = function (node) {
  var content = node.pstyle('label').strValue;

  if (emptyString(content)) {
    return;
  }

  var textX, textY;
  var _p = node._private;
  var nodeWidth = node.width();
  var nodeHeight = node.height();
  var padding = node.padding();
  var nodePos = node.position();
  var textHalign = node.pstyle('text-halign').strValue;
  var textValign = node.pstyle('text-valign').strValue;
  var rs = _p.rscratch;
  var rstyle = _p.rstyle;

  switch (textHalign) {
    case 'left':
      textX = nodePos.x - nodeWidth / 2 - padding;
      break;

    case 'right':
      textX = nodePos.x + nodeWidth / 2 + padding;
      break;

    default:
      // e.g. center
      textX = nodePos.x;
  }

  switch (textValign) {
    case 'top':
      textY = nodePos.y - nodeHeight / 2 - padding;
      break;

    case 'bottom':
      textY = nodePos.y + nodeHeight / 2 + padding;
      break;

    default:
      // e.g. middle
      textY = nodePos.y;
  }

  rs.labelX = textX;
  rs.labelY = textY;
  rstyle.labelX = textX;
  rstyle.labelY = textY;
  this.applyLabelDimensions(node);
};

var lineAngleFromDelta = function lineAngleFromDelta(dx, dy) {
  var angle = Math.atan(dy / dx);

  if (dx === 0 && angle < 0) {
    angle = angle * -1;
  }

  return angle;
};

var lineAngle = function lineAngle(p0, p1) {
  var dx = p1.x - p0.x;
  var dy = p1.y - p0.y;
  return lineAngleFromDelta(dx, dy);
};

var bezierAngle = function bezierAngle(p0, p1, p2, t) {
  var t0 = bound(0, t - 0.001, 1);
  var t1 = bound(0, t + 0.001, 1);
  var lp0 = qbezierPtAt(p0, p1, p2, t0);
  var lp1 = qbezierPtAt(p0, p1, p2, t1);
  return lineAngle(lp0, lp1);
};

BRp$6.recalculateEdgeLabelProjections = function (edge) {
  var p;
  var _p = edge._private;
  var rs = _p.rscratch;
  var r = this;
  var content = {
    mid: edge.pstyle('label').strValue,
    source: edge.pstyle('source-label').strValue,
    target: edge.pstyle('target-label').strValue
  };
  if (content.mid || content.source || content.target) ;else {
    return; // no labels => no calcs
  } // add center point to style so bounding box calculations can use it
  //

  p = {
    x: rs.midX,
    y: rs.midY
  };

  var setRs = function setRs(propName, prefix, value) {
    setPrefixedProperty(_p.rscratch, propName, prefix, value);
    setPrefixedProperty(_p.rstyle, propName, prefix, value);
  };

  setRs('labelX', null, p.x);
  setRs('labelY', null, p.y);
  var midAngle = lineAngleFromDelta(rs.midDispX, rs.midDispY);
  setRs('labelAutoAngle', null, midAngle);

  var createControlPointInfo = function createControlPointInfo() {
    if (createControlPointInfo.cache) {
      return createControlPointInfo.cache;
    } // use cache so only 1x per edge


    var ctrlpts = []; // store each ctrlpt info init

    for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
      var p0 = {
        x: rs.allpts[i],
        y: rs.allpts[i + 1]
      };
      var p1 = {
        x: rs.allpts[i + 2],
        y: rs.allpts[i + 3]
      }; // ctrlpt

      var p2 = {
        x: rs.allpts[i + 4],
        y: rs.allpts[i + 5]
      };
      ctrlpts.push({
        p0: p0,
        p1: p1,
        p2: p2,
        startDist: 0,
        length: 0,
        segments: []
      });
    }

    var bpts = _p.rstyle.bezierPts;
    var nProjs = r.bezierProjPcts.length;

    function addSegment(cp, p0, p1, t0, t1) {
      var length = dist(p0, p1);
      var prevSegment = cp.segments[cp.segments.length - 1];
      var segment = {
        p0: p0,
        p1: p1,
        t0: t0,
        t1: t1,
        startDist: prevSegment ? prevSegment.startDist + prevSegment.length : 0,
        length: length
      };
      cp.segments.push(segment);
      cp.length += length;
    } // update each ctrlpt with segment info


    for (var i = 0; i < ctrlpts.length; i++) {
      var cp = ctrlpts[i];
      var prevCp = ctrlpts[i - 1];

      if (prevCp) {
        cp.startDist = prevCp.startDist + prevCp.length;
      }

      addSegment(cp, cp.p0, bpts[i * nProjs], 0, r.bezierProjPcts[0]); // first

      for (var j = 0; j < nProjs - 1; j++) {
        addSegment(cp, bpts[i * nProjs + j], bpts[i * nProjs + j + 1], r.bezierProjPcts[j], r.bezierProjPcts[j + 1]);
      }

      addSegment(cp, bpts[i * nProjs + nProjs - 1], cp.p2, r.bezierProjPcts[nProjs - 1], 1); // last
    }

    return createControlPointInfo.cache = ctrlpts;
  };

  var calculateEndProjection = function calculateEndProjection(prefix) {
    var angle;
    var isSrc = prefix === 'source';

    if (!content[prefix]) {
      return;
    }

    var offset = edge.pstyle(prefix + '-text-offset').pfValue;

    switch (rs.edgeType) {
      case 'self':
      case 'compound':
      case 'bezier':
      case 'multibezier':
        var cps = createControlPointInfo();
        var selected;
        var startDist = 0;
        var totalDist = 0; // find the segment we're on

        for (var i = 0; i < cps.length; i++) {
          var cp = cps[isSrc ? i : cps.length - 1 - i];

          for (var j = 0; j < cp.segments.length; j++) {
            var seg = cp.segments[isSrc ? j : cp.segments.length - 1 - j];
            var lastSeg = i === cps.length - 1 && j === cp.segments.length - 1;
            startDist = totalDist;
            totalDist += seg.length;

            if (totalDist >= offset || lastSeg) {
              selected = {
                cp: cp,
                segment: seg
              };
              break;
            }
          }

          if (selected) {
            break;
          }
        }

        var cp = selected.cp;
        var seg = selected.segment;
        var tSegment = (offset - startDist) / seg.length;
        var segDt = seg.t1 - seg.t0;
        var t = isSrc ? seg.t0 + segDt * tSegment : seg.t1 - segDt * tSegment;
        t = bound(0, t, 1);
        p = qbezierPtAt(cp.p0, cp.p1, cp.p2, t);
        angle = bezierAngle(cp.p0, cp.p1, cp.p2, t, p);
        break;

      case 'straight':
      case 'segments':
      case 'haystack':
        var d = 0,
            di,
            d0;
        var p0, p1;
        var l = rs.allpts.length;

        for (var i = 0; i + 3 < l; i += 2) {
          if (isSrc) {
            p0 = {
              x: rs.allpts[i],
              y: rs.allpts[i + 1]
            };
            p1 = {
              x: rs.allpts[i + 2],
              y: rs.allpts[i + 3]
            };
          } else {
            p0 = {
              x: rs.allpts[l - 2 - i],
              y: rs.allpts[l - 1 - i]
            };
            p1 = {
              x: rs.allpts[l - 4 - i],
              y: rs.allpts[l - 3 - i]
            };
          }

          di = dist(p0, p1);
          d0 = d;
          d += di;

          if (d >= offset) {
            break;
          }
        }

        var pD = offset - d0;
        var t = pD / di;
        t = bound(0, t, 1);
        p = lineAt(p0, p1, t);
        angle = lineAngle(p0, p1);
        break;
    }

    setRs('labelX', prefix, p.x);
    setRs('labelY', prefix, p.y);
    setRs('labelAutoAngle', prefix, angle);
  };

  calculateEndProjection('source');
  calculateEndProjection('target');
  this.applyLabelDimensions(edge);
};

BRp$6.applyLabelDimensions = function (ele) {
  this.applyPrefixedLabelDimensions(ele);

  if (ele.isEdge()) {
    this.applyPrefixedLabelDimensions(ele, 'source');
    this.applyPrefixedLabelDimensions(ele, 'target');
  }
};

BRp$6.applyPrefixedLabelDimensions = function (ele, prefix) {
  var _p = ele._private;
  var text = this.getLabelText(ele, prefix);
  var labelDims = this.calculateLabelDimensions(ele, text);
  setPrefixedProperty(_p.rstyle, 'labelWidth', prefix, labelDims.width);
  setPrefixedProperty(_p.rscratch, 'labelWidth', prefix, labelDims.width);
  setPrefixedProperty(_p.rstyle, 'labelHeight', prefix, labelDims.height);
  setPrefixedProperty(_p.rscratch, 'labelHeight', prefix, labelDims.height);
};

BRp$6.getLabelText = function (ele, prefix) {
  var _p = ele._private;
  var pfd = prefix ? prefix + '-' : '';
  var text = ele.pstyle(pfd + 'label').strValue;
  var textTransform = ele.pstyle('text-transform').value;

  var rscratch = function rscratch(propName, value) {
    if (value) {
      setPrefixedProperty(_p.rscratch, propName, prefix, value);
      return value;
    } else {
      return getPrefixedProperty(_p.rscratch, propName, prefix);
    }
  }; // for empty text, skip all processing


  if (!text) {
    return '';
  }

  if (textTransform == 'none') ;else if (textTransform == 'uppercase') {
    text = text.toUpperCase();
  } else if (textTransform == 'lowercase') {
    text = text.toLowerCase();
  }
  var wrapStyle = ele.pstyle('text-wrap').value;

  if (wrapStyle === 'wrap') {
    //console.log('wrap');
    var labelKey = rscratch('labelKey'); // save recalc if the label is the same as before

    if (labelKey != null && rscratch('labelWrapKey') === labelKey) {
      // console.log('wrap cache hit');
      return rscratch('labelWrapCachedText');
    } // console.log('wrap cache miss');


    var lines = text.split('\n');
    var maxW = ele.pstyle('text-max-width').pfValue;
    var wrappedLines = [];

    for (var l = 0; l < lines.length; l++) {
      var line = lines[l];
      var lineDims = this.calculateLabelDimensions(ele, line);
      var lineW = lineDims.width;

      if (lineW > maxW) {
        // line is too long
        var words = line.split(/\s+/); // NB: assume collapsed whitespace into single space

        var subline = '';

        for (var w = 0; w < words.length; w++) {
          var word = words[w];
          var testLine = subline.length === 0 ? word : subline + ' ' + word;
          var testDims = this.calculateLabelDimensions(ele, testLine);
          var testW = testDims.width;

          if (testW <= maxW) {
            // word fits on current line
            subline += word + ' ';
          } else {
            // word starts new line
            wrappedLines.push(subline);
            subline = word + ' ';
          }
        } // if there's remaining text, put it in a wrapped line


        if (!subline.match(/^\s+$/)) {
          wrappedLines.push(subline);
        }
      } else {
        // line is already short enough
        wrappedLines.push(line);
      }
    } // for


    rscratch('labelWrapCachedLines', wrappedLines);
    text = rscratch('labelWrapCachedText', wrappedLines.join('\n'));
    rscratch('labelWrapKey', labelKey); // console.log(text)
  } else if (wrapStyle === 'ellipsis') {
    var maxW = ele.pstyle('text-max-width').pfValue;
    var ellipsized = '';
    var ellipsis = "\u2026";
    var incLastCh = false;

    for (var i = 0; i < text.length; i++) {
      var widthWithNextCh = this.calculateLabelDimensions(ele, ellipsized + text[i] + ellipsis).width;

      if (widthWithNextCh > maxW) {
        break;
      }

      ellipsized += text[i];

      if (i === text.length - 1) {
        incLastCh = true;
      }
    }

    if (!incLastCh) {
      ellipsized += ellipsis;
    }

    return ellipsized;
  } // if ellipsize


  return text;
};

BRp$6.calculateLabelDimensions = function (ele, text) {
  var r = this;
  var cacheKey = hashString(text, ele._private.labelDimsKey);
  var cache = r.labelDimCache || (r.labelDimCache = []);
  var existingVal = cache[cacheKey];

  if (existingVal != null) {
    return existingVal;
  }

  var sizeMult = 1; // increase the scale to increase accuracy w.r.t. zoomed text

  var fStyle = ele.pstyle('font-style').strValue;
  var size = sizeMult * ele.pstyle('font-size').pfValue + 'px';
  var family = ele.pstyle('font-family').strValue;
  var weight = ele.pstyle('font-weight').strValue;
  var div = this.labelCalcDiv;

  if (!div) {
    div = this.labelCalcDiv = document.createElement('div'); // eslint-disable-line no-undef

    document.body.appendChild(div); // eslint-disable-line no-undef
  }

  var ds = div.style; // from ele style

  ds.fontFamily = family;
  ds.fontStyle = fStyle;
  ds.fontSize = size;
  ds.fontWeight = weight; // forced style

  ds.position = 'absolute';
  ds.left = '-9999px';
  ds.top = '-9999px';
  ds.zIndex = '-1';
  ds.visibility = 'hidden';
  ds.pointerEvents = 'none';
  ds.padding = '0';
  ds.lineHeight = '1';

  if (ele.pstyle('text-wrap').value === 'wrap') {
    ds.whiteSpace = 'pre'; // so newlines are taken into account
  } else {
    ds.whiteSpace = 'normal';
  } // put label content in div


  div.textContent = text;
  return cache[cacheKey] = {
    width: Math.ceil(div.clientWidth / sizeMult),
    height: Math.ceil(div.clientHeight / sizeMult)
  };
};

BRp$6.calculateLabelAngle = function (ele, prefix) {
  var _p = ele._private;
  var rs = _p.rscratch;
  var isEdge = ele.isEdge();
  var prefixDash = prefix ? prefix + '-' : '';
  var rot = ele.pstyle(prefixDash + 'text-rotation');
  var rotStr = rot.strValue;

  if (rotStr === 'none') {
    return 0;
  } else if (isEdge && rotStr === 'autorotate') {
    return rs.labelAutoAngle;
  } else if (rotStr === 'autorotate') {
    return 0;
  } else {
    return rot.pfValue;
  }
};

BRp$6.calculateLabelAngles = function (ele) {
  var r = this;
  var isEdge = ele.isEdge();
  var _p = ele._private;
  var rs = _p.rscratch;
  rs.labelAngle = r.calculateLabelAngle(ele);

  if (isEdge) {
    rs.sourceLabelAngle = r.calculateLabelAngle(ele, 'source');
    rs.targetLabelAngle = r.calculateLabelAngle(ele, 'target');
  }
};

var BRp$7 = {};
var TOO_SMALL_CUT_RECT = 28;
var warnedCutRect = false;

BRp$7.getNodeShape = function (node) {
  var r = this;
  var shape = node.pstyle('shape').value;

  if (shape === 'cutrectangle' && (node.width() < TOO_SMALL_CUT_RECT || node.height() < TOO_SMALL_CUT_RECT)) {
    if (!warnedCutRect) {
      warn('The `cutrectangle` node shape can not be used at small sizes so `rectangle` is used instead');
      warnedCutRect = true;
    }

    return 'rectangle';
  }

  if (node.isParent()) {
    if (shape === 'rectangle' || shape === 'roundrectangle' || shape === 'cutrectangle' || shape === 'barrel') {
      return shape;
    } else {
      return 'rectangle';
    }
  }

  if (shape === 'polygon') {
    var points = node.pstyle('shape-polygon-points').value;
    return r.nodeShapes.makePolygon(points).name;
  }

  return shape;
};

var BRp$8 = {};

BRp$8.registerCalculationListeners = function () {
  var cy = this.cy;
  var elesToUpdate = cy.collection();
  var r = this;

  var enqueue = function enqueue(eles) {
    var dirtyStyleCaches = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    elesToUpdate.merge(eles);

    if (dirtyStyleCaches) {
      for (var i = 0; i < eles.length; i++) {
        var ele = eles[i];
        var _p = ele._private;
        var rstyle = _p.rstyle;
        rstyle.clean = false;
      }
    }
  };

  r.binder(cy).on('bounds.* dirty.*', function onDirtyBounds(e) {
    var node = e.target;
    enqueue(node);
  }).on('style.* background.*', function onDirtyStyle(e) {
    var ele = e.target;
    enqueue(ele, false);
  });

  var updateEleCalcs = function updateEleCalcs(willDraw) {
    if (willDraw) {
      var fns = r.onUpdateEleCalcsFns;

      for (var i = 0; i < elesToUpdate.length; i++) {
        enqueue(elesToUpdate[i].connectedEdges());
      }

      if (fns) {
        for (var i = 0; i < fns.length; i++) {
          var fn = fns[i];
          fn(willDraw, elesToUpdate);
        }
      }

      r.recalculateRenderedStyle(elesToUpdate);
      elesToUpdate = cy.collection();
    }
  };

  r.flushRenderedStyleQueue = function () {
    updateEleCalcs(true);
  };

  r.beforeRender(updateEleCalcs, r.beforeRenderPriorities.eleCalcs);
};

BRp$8.onUpdateEleCalcs = function (fn) {
  var fns = this.onUpdateEleCalcsFns = this.onUpdateEleCalcsFns || [];
  fns.push(fn);
};

BRp$8.recalculateRenderedStyle = function (eles, useCache) {
  var edges = [];
  var nodes = []; // the renderer can't be used for calcs when destroyed, e.g. ele.boundingBox()

  if (this.destroyed) {
    return;
  } // use cache by default for perf


  if (useCache === undefined) {
    useCache = true;
  }

  for (var i = 0; i < eles.length; i++) {
    var ele = eles[i];
    var _p = ele._private;
    var rstyle = _p.rstyle; // only update if dirty and in graph

    if (useCache && rstyle.clean || ele.removed()) {
      continue;
    } // only update if not display: none


    if (ele.pstyle('display').value === 'none') {
      continue;
    }

    if (_p.group === 'nodes') {
      nodes.push(ele);
    } else {
      // edges
      edges.push(ele);
    }

    rstyle.clean = true;
  } // update node data from projections


  for (var i = 0; i < nodes.length; i++) {
    var ele = nodes[i];
    var _p = ele._private;
    var rstyle = _p.rstyle;
    var pos = ele.position();
    this.recalculateNodeLabelProjection(ele);
    rstyle.nodeX = pos.x;
    rstyle.nodeY = pos.y;
    rstyle.nodeW = ele.pstyle('width').pfValue;
    rstyle.nodeH = ele.pstyle('height').pfValue;
  }

  this.recalculateEdgeProjections(edges); // update edge data from projections

  for (var i = 0; i < edges.length; i++) {
    var ele = edges[i];
    var _p = ele._private;
    var rstyle = _p.rstyle;
    var rs = _p.rscratch;
    this.recalculateEdgeLabelProjections(ele); // update rstyle positions

    rstyle.srcX = rs.arrowStartX;
    rstyle.srcY = rs.arrowStartY;
    rstyle.tgtX = rs.arrowEndX;
    rstyle.tgtY = rs.arrowEndY;
    rstyle.midX = rs.midX;
    rstyle.midY = rs.midY;
    rstyle.labelAngle = rs.labelAngle;
    rstyle.sourceLabelAngle = rs.sourceLabelAngle;
    rstyle.targetLabelAngle = rs.targetLabelAngle;
  }
};

var BRp$9 = {};

BRp$9.updateCachedGrabbedEles = function () {
  var eles = this.cachedZSortedEles;

  if (!eles) {
    // just let this be recalculated on the next z sort tick
    return;
  }

  eles.drag = [];
  eles.nondrag = [];
  var grabTargets = [];

  for (var i = 0; i < eles.length; i++) {
    var ele = eles[i];
    var rs = ele._private.rscratch;

    if (ele.grabbed() && !ele.isParent()) {
      grabTargets.push(ele);
    } else if (rs.inDragLayer) {
      eles.drag.push(ele);
    } else {
      eles.nondrag.push(ele);
    }
  } // put the grab target nodes last so it's on top of its neighbourhood


  for (var i = 0; i < grabTargets.length; i++) {
    var ele = grabTargets[i];
    eles.drag.push(ele);
  }
};

BRp$9.invalidateCachedZSortedEles = function () {
  this.cachedZSortedEles = null;
};

BRp$9.getCachedZSortedEles = function (forceRecalc) {
  if (forceRecalc || !this.cachedZSortedEles) {
    var eles = this.cy.mutableElements().toArray();
    eles.sort(zIndexSort);
    eles.interactive = eles.filter(function (ele) {
      return ele.interactive();
    });
    this.cachedZSortedEles = eles;
    this.updateCachedGrabbedEles();
  } else {
    eles = this.cachedZSortedEles;
  }

  return eles;
};

var BRp$a = {};
[BRp$1, BRp$2, BRp$3, BRp$4, BRp$5, BRp$6, BRp$7, BRp$8, BRp$9].forEach(function (props) {
  extend(BRp$a, props);
});
var BRp$b = {};

BRp$b.getCachedImage = function (url, crossOrigin, onLoad) {
  var r = this;
  var imageCache = r.imageCache = r.imageCache || {};
  var cache = imageCache[url];

  if (cache) {
    if (!cache.image.complete) {
      cache.image.addEventListener('load', onLoad);
    }

    return cache.image;
  } else {
    cache = imageCache[url] = imageCache[url] || {};
    var image = cache.image = new Image(); // eslint-disable-line no-undef

    image.addEventListener('load', onLoad);
    image.addEventListener('error', function () {
      image.error = true;
    }); // #1582 safari doesn't load data uris with crossOrigin properly
    // https://bugs.webkit.org/show_bug.cgi?id=123978

    var dataUriPrefix = 'data:';
    var isDataUri = url.substring(0, dataUriPrefix.length).toLowerCase() === dataUriPrefix;

    if (!isDataUri) {
      image.crossOrigin = crossOrigin; // prevent tainted canvas
    }

    image.src = url;
    return image;
  }
};

var BRp$c = {};
/* global document, window */

BRp$c.registerBinding = function (target, event$$1, handler, useCapture) {
  // eslint-disable-line no-unused-vars
  var args = Array.prototype.slice.apply(arguments, [1]); // copy

  var b = this.binder(target);
  return b.on.apply(b, args);
};

BRp$c.binder = function (tgt) {
  var r = this;
  var tgtIsDom = tgt === window || tgt === document || tgt === document.body || domElement(tgt);

  if (r.supportsPassiveEvents == null) {
    // from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection
    var supportsPassive = false;

    try {
      var opts = Object.defineProperty({}, 'passive', {
        get: function get() {
          supportsPassive = true;
          return true;
        }
      });
      window.addEventListener('test', null, opts);
    } catch (err) {// not supported
    }

    r.supportsPassiveEvents = supportsPassive;
  }

  var on = function on(event$$1, handler, useCapture) {
    var args = Array.prototype.slice.call(arguments);

    if (tgtIsDom && r.supportsPassiveEvents) {
      // replace useCapture w/ opts obj
      args[2] = {
        capture: useCapture != null ? useCapture : false,
        passive: false,
        once: false
      };
    }

    r.bindings.push({
      target: tgt,
      args: args
    });
    (tgt.addEventListener || tgt.on).apply(tgt, args);
    return this;
  };

  return {
    on: on,
    addEventListener: on,
    addListener: on,
    bind: on
  };
};

BRp$c.nodeIsDraggable = function (node) {
  return node && node.isNode() && !node.locked() && node.grabbable();
};

BRp$c.nodeIsGrabbable = function (node) {
  return this.nodeIsDraggable(node) && node.interactive();
};

BRp$c.load = function () {
  var r = this;

  var isSelected = function isSelected(ele) {
    return ele.selected();
  };

  var triggerEvents = function triggerEvents(target, names, e, position) {
    if (target == null) {
      target = r.cy;
    }

    for (var i = 0; i < names.length; i++) {
      var name = names[i];
      target.emit({
        originalEvent: e,
        type: name,
        position: position
      });
    }
  };

  var isMultSelKeyDown = function isMultSelKeyDown(e) {
    return e.shiftKey || e.metaKey || e.ctrlKey; // maybe e.altKey
  };

  var allowPanningPassthrough = function allowPanningPassthrough(down, downs) {
    var allowPassthrough = true;

    if (r.cy.hasCompoundNodes() && down && down.isEdge()) {
      // a compound node below the edge => no passthrough panning
      for (var i = 0; downs && i < downs.length; i++) {
        var down = downs[i];

        if (down.isNode() && down.isParent()) {
          allowPassthrough = false;
          break;
        }
      }
    } else {
      allowPassthrough = true;
    }

    return allowPassthrough;
  };

  var setGrabbed = function setGrabbed(ele) {
    ele[0]._private.grabbed = true;
  };

  var setFreed = function setFreed(ele) {
    ele[0]._private.grabbed = false;
  };

  var setInDragLayer = function setInDragLayer(ele) {
    ele[0]._private.rscratch.inDragLayer = true;
  };

  var setOutDragLayer = function setOutDragLayer(ele) {
    ele[0]._private.rscratch.inDragLayer = false;
  };

  var setGrabTarget = function setGrabTarget(ele) {
    ele[0]._private.rscratch.isGrabTarget = true;
  };

  var removeGrabTarget = function removeGrabTarget(ele) {
    ele[0]._private.rscratch.isGrabTarget = false;
  };

  var addToDragList = function addToDragList(ele, opts) {
    var list = opts.addToList;
    var listHasEle = list.has(ele);

    if (!listHasEle) {
      list.merge(ele);
      setGrabbed(ele);
    }
  }; // helper function to determine which child nodes and inner edges
  // of a compound node to be dragged as well as the grabbed and selected nodes


  var addDescendantsToDrag = function addDescendantsToDrag(node, opts) {
    if (!node.cy().hasCompoundNodes()) {
      return;
    }

    if (opts.inDragLayer == null && opts.addToList == null) {
      return;
    } // nothing to do


    var innerNodes = node.descendants();

    if (opts.inDragLayer) {
      innerNodes.forEach(setInDragLayer);
      innerNodes.connectedEdges().forEach(setInDragLayer);
    }

    if (opts.addToList) {
      opts.addToList.unmerge(innerNodes);
    }
  }; // adds the given nodes and its neighbourhood to the drag layer


  var addNodesToDrag = function addNodesToDrag(nodes, opts) {
    opts = opts || {};
    var hasCompoundNodes = nodes.cy().hasCompoundNodes();

    if (opts.inDragLayer) {
      nodes.forEach(setInDragLayer);
      nodes.neighborhood().stdFilter(function (ele) {
        return !hasCompoundNodes || ele.isEdge();
      }).forEach(setInDragLayer);
    }

    if (opts.addToList) {
      nodes.forEach(function (ele) {
        addToDragList(ele, opts);
      });
    }

    addDescendantsToDrag(nodes, opts); // always add to drag
    // also add nodes and edges related to the topmost ancestor

    updateAncestorsInDragLayer(nodes, {
      inDragLayer: opts.inDragLayer
    });
    r.updateCachedGrabbedEles();
  };

  var addNodeToDrag = addNodesToDrag;

  var freeDraggedElements = function freeDraggedElements(grabbedEles) {
    if (!grabbedEles) {
      return;
    } // just go over all elements rather than doing a bunch of (possibly expensive) traversals


    r.getCachedZSortedEles().forEach(function (ele) {
      setFreed(ele);
      setOutDragLayer(ele);
      removeGrabTarget(ele);
    });
    r.updateCachedGrabbedEles();
  }; // helper function to determine which ancestor nodes and edges should go
  // to the drag layer (or should be removed from drag layer).


  var updateAncestorsInDragLayer = function updateAncestorsInDragLayer(node, opts) {
    if (opts.inDragLayer == null && opts.addToList == null) {
      return;
    } // nothing to do


    if (!node.cy().hasCompoundNodes()) {
      return;
    } // find top-level parent


    var parent = node.ancestors().orphans(); // no parent node: no nodes to add to the drag layer

    if (parent.same(node)) {
      return;
    }

    var nodes = parent.descendants().spawnSelf().merge(parent).unmerge(node).unmerge(node.descendants());
    var edges = nodes.connectedEdges();

    if (opts.inDragLayer) {
      edges.forEach(setInDragLayer);
      nodes.forEach(setInDragLayer);
    }

    if (opts.addToList) {
      nodes.forEach(function (ele) {
        addToDragList(ele, opts);
      });
    }
  };

  var blurActiveDomElement = function blurActiveDomElement() {
    if (document.activeElement != null && document.activeElement.blur != null) {
      document.activeElement.blur();
    }
  };

  var haveMutationsApi = typeof MutationObserver !== 'undefined'; // watch for when the cy container is removed from the dom

  if (haveMutationsApi) {
    r.removeObserver = new MutationObserver(function (mutns) {
      // eslint-disable-line no-undef
      for (var i = 0; i < mutns.length; i++) {
        var mutn = mutns[i];
        var rNodes = mutn.removedNodes;

        if (rNodes) {
          for (var j = 0; j < rNodes.length; j++) {
            var rNode = rNodes[j];

            if (rNode === r.container) {
              r.destroy();
              break;
            }
          }
        }
      }
    });

    if (r.container.parentNode) {
      r.removeObserver.observe(r.container.parentNode, {
        childList: true
      });
    }
  } else {
    r.registerBinding(r.container, 'DOMNodeRemoved', function (e) {
      // eslint-disable-line no-unused-vars
      r.destroy();
    });
  }

  var onResize = util(function () {
    r.cy.resize();
  }, 100);

  if (haveMutationsApi) {
    r.styleObserver = new MutationObserver(onResize); // eslint-disable-line no-undef

    r.styleObserver.observe(r.container, {
      attributes: true
    });
  } // auto resize


  r.registerBinding(window, 'resize', onResize); // eslint-disable-line no-undef

  var forEachUp = function forEachUp(domEle, fn$$1) {
    while (domEle != null) {
      fn$$1(domEle);
      domEle = domEle.parentNode;
    }
  };

  var invalidateCoords = function invalidateCoords() {
    r.invalidateContainerClientCoordsCache();
  };

  forEachUp(r.container, function (domEle) {
    r.registerBinding(domEle, 'transitionend', invalidateCoords);
    r.registerBinding(domEle, 'animationend', invalidateCoords);
    r.registerBinding(domEle, 'scroll', invalidateCoords);
  }); // stop right click menu from appearing on cy

  r.registerBinding(r.container, 'contextmenu', function (e) {
    e.preventDefault();
  });

  var inBoxSelection = function inBoxSelection() {
    return r.selection[4] !== 0;
  };

  var eventInContainer = function eventInContainer(e) {
    // save cycles if mouse events aren't to be captured
    var containerPageCoords = r.findContainerClientCoords();
    var x = containerPageCoords[0];
    var y = containerPageCoords[1];
    var width = containerPageCoords[2];
    var height = containerPageCoords[3];
    var positions = e.touches ? e.touches : [e];
    var atLeastOnePosInside = false;

    for (var i = 0; i < positions.length; i++) {
      var p = positions[i];

      if (x <= p.clientX && p.clientX <= x + width && y <= p.clientY && p.clientY <= y + height) {
        atLeastOnePosInside = true;
        break;
      }
    }

    if (!atLeastOnePosInside) {
      return false;
    }

    var container = r.container;
    var target = e.target;
    var tParent = target.parentNode;
    var containerIsTarget = false;

    while (tParent) {
      if (tParent === container) {
        containerIsTarget = true;
        break;
      }

      tParent = tParent.parentNode;
    }

    if (!containerIsTarget) {
      return false;
    } // if target is outisde cy container, then this event is not for us


    return true;
  }; // Primary key


  r.registerBinding(r.container, 'mousedown', function mousedownHandler(e) {
    if (!eventInContainer(e)) {
      return;
    }

    e.preventDefault();
    blurActiveDomElement();
    r.hoverData.capture = true;
    r.hoverData.which = e.which;
    var cy = r.cy;
    var gpos = [e.clientX, e.clientY];
    var pos = r.projectIntoViewport(gpos[0], gpos[1]);
    var select = r.selection;
    var nears = r.findNearestElements(pos[0], pos[1], true, false);
    var near = nears[0];
    var draggedElements = r.dragData.possibleDragElements;
    r.hoverData.mdownPos = pos;
    r.hoverData.mdownGPos = gpos;

    var checkForTaphold = function checkForTaphold() {
      r.hoverData.tapholdCancelled = false;
      clearTimeout(r.hoverData.tapholdTimeout);
      r.hoverData.tapholdTimeout = setTimeout(function () {
        if (r.hoverData.tapholdCancelled) {
          return;
        } else {
          var ele = r.hoverData.down;

          if (ele) {
            ele.emit({
              originalEvent: e,
              type: 'taphold',
              position: {
                x: pos[0],
                y: pos[1]
              }
            });
          } else {
            cy.emit({
              originalEvent: e,
              type: 'taphold',
              position: {
                x: pos[0],
                y: pos[1]
              }
            });
          }
        }
      }, r.tapholdDuration);
    }; // Right click button


    if (e.which == 3) {
      r.hoverData.cxtStarted = true;
      var cxtEvt = {
        originalEvent: e,
        type: 'cxttapstart',
        position: {
          x: pos[0],
          y: pos[1]
        }
      };

      if (near) {
        near.activate();
        near.emit(cxtEvt);
        r.hoverData.down = near;
      } else {
        cy.emit(cxtEvt);
      }

      r.hoverData.downTime = new Date().getTime();
      r.hoverData.cxtDragged = false; // Primary button
    } else if (e.which == 1) {
      if (near) {
        near.activate();
      } // Element dragging


      {
        // If something is under the cursor and it is draggable, prepare to grab it
        if (near != null) {
          if (r.nodeIsGrabbable(near)) {
            var makeEvent = function makeEvent(type) {
              return {
                originalEvent: e,
                type: type,
                position: {
                  x: pos[0],
                  y: pos[1]
                }
              };
            };

            var triggerGrab = function triggerGrab(ele) {
              ele.emit(makeEvent('grab'));
            };

            setGrabTarget(near);

            if (!near.selected()) {
              draggedElements = r.dragData.possibleDragElements = cy.collection();
              addNodeToDrag(near, {
                addToList: draggedElements
              });
              near.emit(makeEvent('grabon')).emit(makeEvent('grab'));
            } else {
              draggedElements = r.dragData.possibleDragElements = cy.collection();
              var selectedNodes = cy.$(function (ele) {
                return ele.isNode() && ele.selected() && r.nodeIsGrabbable(ele);
              });
              addNodesToDrag(selectedNodes, {
                addToList: draggedElements
              });
              near.emit(makeEvent('grabon'));
              selectedNodes.forEach(triggerGrab);
            }

            r.redrawHint('eles', true);
            r.redrawHint('drag', true);
          }
        }

        r.hoverData.down = near;
        r.hoverData.downs = nears;
        r.hoverData.downTime = new Date().getTime();
      }
      triggerEvents(near, ['mousedown', 'tapstart', 'vmousedown'], e, {
        x: pos[0],
        y: pos[1]
      });

      if (near == null) {
        select[4] = 1;
        r.data.bgActivePosistion = {
          x: pos[0],
          y: pos[1]
        };
        r.redrawHint('select', true);
        r.redraw();
      } else if (near.isEdge()) {
        select[4] = 1; // for future pan
      }

      checkForTaphold();
    } // Initialize selection box coordinates


    select[0] = select[2] = pos[0];
    select[1] = select[3] = pos[1];
  }, false);
  r.registerBinding(window, 'mousemove', function mousemoveHandler(e) {
    // eslint-disable-line no-undef
    var capture = r.hoverData.capture;

    if (!capture && !eventInContainer(e)) {
      return;
    }

    var preventDefault = false;
    var cy = r.cy;
    var zoom = cy.zoom();
    var gpos = [e.clientX, e.clientY];
    var pos = r.projectIntoViewport(gpos[0], gpos[1]);
    var mdownPos = r.hoverData.mdownPos;
    var mdownGPos = r.hoverData.mdownGPos;
    var select = r.selection;
    var near = null;

    if (!r.hoverData.draggingEles && !r.hoverData.dragging && !r.hoverData.selecting) {
      near = r.findNearestElement(pos[0], pos[1], true, false);
    }

    var last = r.hoverData.last;
    var down = r.hoverData.down;
    var disp = [pos[0] - select[2], pos[1] - select[3]];
    var draggedElements = r.dragData.possibleDragElements;
    var isOverThresholdDrag;

    if (mdownGPos) {
      var dx = gpos[0] - mdownGPos[0];
      var dx2 = dx * dx;
      var dy = gpos[1] - mdownGPos[1];
      var dy2 = dy * dy;
      var dist2 = dx2 + dy2;
      r.hoverData.isOverThresholdDrag = isOverThresholdDrag = dist2 >= r.desktopTapThreshold2;
    }

    var multSelKeyDown = isMultSelKeyDown(e);

    if (isOverThresholdDrag) {
      r.hoverData.tapholdCancelled = true;
    }

    var updateDragDelta = function updateDragDelta() {
      var dragDelta = r.hoverData.dragDelta = r.hoverData.dragDelta || [];

      if (dragDelta.length === 0) {
        dragDelta.push(disp[0]);
        dragDelta.push(disp[1]);
      } else {
        dragDelta[0] += disp[0];
        dragDelta[1] += disp[1];
      }
    };

    preventDefault = true;
    triggerEvents(near, ['mousemove', 'vmousemove', 'tapdrag'], e, {
      x: pos[0],
      y: pos[1]
    });

    var goIntoBoxMode = function goIntoBoxMode() {
      r.data.bgActivePosistion = undefined;

      if (!r.hoverData.selecting) {
        cy.emit({
          originalEvent: e,
          type: 'boxstart',
          position: {
            x: pos[0],
            y: pos[1]
          }
        });
      }

      select[4] = 1;
      r.hoverData.selecting = true;
      r.redrawHint('select', true);
      r.redraw();
    }; // trigger context drag if rmouse down


    if (r.hoverData.which === 3) {
      // but only if over threshold
      if (isOverThresholdDrag) {
        var cxtEvt = {
          originalEvent: e,
          type: 'cxtdrag',
          position: {
            x: pos[0],
            y: pos[1]
          }
        };

        if (down) {
          down.emit(cxtEvt);
        } else {
          cy.emit(cxtEvt);
        }

        r.hoverData.cxtDragged = true;

        if (!r.hoverData.cxtOver || near !== r.hoverData.cxtOver) {
          if (r.hoverData.cxtOver) {
            r.hoverData.cxtOver.emit({
              originalEvent: e,
              type: 'cxtdragout',
              position: {
                x: pos[0],
                y: pos[1]
              }
            });
          }

          r.hoverData.cxtOver = near;

          if (near) {
            near.emit({
              originalEvent: e,
              type: 'cxtdragover',
              position: {
                x: pos[0],
                y: pos[1]
              }
            });
          }
        }
      } // Check if we are drag panning the entire graph

    } else if (r.hoverData.dragging) {
      preventDefault = true;

      if (cy.panningEnabled() && cy.userPanningEnabled()) {
        var deltaP;

        if (r.hoverData.justStartedPan) {
          var mdPos = r.hoverData.mdownPos;
          deltaP = {
            x: (pos[0] - mdPos[0]) * zoom,
            y: (pos[1] - mdPos[1]) * zoom
          };
          r.hoverData.justStartedPan = false;
        } else {
          deltaP = {
            x: disp[0] * zoom,
            y: disp[1] * zoom
          };
        }

        cy.panBy(deltaP);
        r.hoverData.dragged = true;
      } // Needs reproject due to pan changing viewport


      pos = r.projectIntoViewport(e.clientX, e.clientY); // Checks primary button down & out of time & mouse not moved much
    } else if (select[4] == 1 && (down == null || down.isEdge())) {
      if (isOverThresholdDrag) {
        if (!r.hoverData.dragging && cy.boxSelectionEnabled() && (multSelKeyDown || !cy.panningEnabled() || !cy.userPanningEnabled())) {
          goIntoBoxMode();
        } else if (!r.hoverData.selecting && cy.panningEnabled() && cy.userPanningEnabled()) {
          var allowPassthrough = allowPanningPassthrough(down, r.hoverData.downs);

          if (allowPassthrough) {
            r.hoverData.dragging = true;
            r.hoverData.justStartedPan = true;
            select[4] = 0;
            r.data.bgActivePosistion = array2point(mdownPos);
            r.redrawHint('select', true);
            r.redraw();
          }
        }

        if (down && down.isEdge() && down.active()) {
          down.unactivate();
        }
      }
    } else {
      if (down && down.isEdge() && down.active()) {
        down.unactivate();
      }

      if ((!down || !down.grabbed()) && near != last) {
        if (last) {
          triggerEvents(last, ['mouseout', 'tapdragout'], e, {
            x: pos[0],
            y: pos[1]
          });
        }

        if (near) {
          triggerEvents(near, ['mouseover', 'tapdragover'], e, {
            x: pos[0],
            y: pos[1]
          });
        }

        r.hoverData.last = near;
      }

      if (down) {
        if (isOverThresholdDrag) {
          // then we can take action
          if (cy.boxSelectionEnabled() && multSelKeyDown) {
            // then selection overrides
            if (down && down.grabbed()) {
              freeDraggedElements(draggedElements);
              down.emit('freeon');
              draggedElements.emit('free');

              if (r.dragData.didDrag) {
                down.emit('dragfreeon');
                draggedElements.emit('dragfree');
              }
            }

            goIntoBoxMode();
          } else if (down && down.grabbed() && r.nodeIsDraggable(down)) {
            // drag node
            var justStartedDrag = !r.dragData.didDrag;

            if (justStartedDrag) {
              r.redrawHint('eles', true);
            }

            r.dragData.didDrag = true; // indicate that we actually did drag the node

            var toTrigger = cy.collection(); // now, add the elements to the drag layer if not done already

            if (!r.hoverData.draggingEles) {
              addNodesToDrag(draggedElements, {
                inDragLayer: true
              });
            }

            var totalShift = {
              x: 0,
              y: 0
            };

            if (number(disp[0]) && number(disp[1])) {
              totalShift.x += disp[0];
              totalShift.y += disp[1];

              if (justStartedDrag) {
                var dragDelta = r.hoverData.dragDelta;

                if (dragDelta && number(dragDelta[0]) && number(dragDelta[1])) {
                  totalShift.x += dragDelta[0];
                  totalShift.y += dragDelta[1];
                }
              }
            }

            for (var i = 0; i < draggedElements.length; i++) {
              var dEle = draggedElements[i];

              if (r.nodeIsDraggable(dEle) && dEle.grabbed()) {
                toTrigger.merge(dEle);
              }
            }

            r.hoverData.draggingEles = true;
            toTrigger.silentShift(totalShift).emit('position drag');
            r.redrawHint('drag', true);
            r.redraw();
          }
        } else {
          // otherwise save drag delta for when we actually start dragging so the relative grab pos is constant
          updateDragDelta();
        }
      } // prevent the dragging from triggering text selection on the page


      preventDefault = true;
    }

    select[2] = pos[0];
    select[3] = pos[1];

    if (preventDefault) {
      if (e.stopPropagation) e.stopPropagation();
      if (e.preventDefault) e.preventDefault();
      return false;
    }
  }, false);
  r.registerBinding(window, 'mouseup', function mouseupHandler(e) {
    // eslint-disable-line no-undef
    var capture = r.hoverData.capture;

    if (!capture) {
      return;
    }

    r.hoverData.capture = false;
    var cy = r.cy;
    var pos = r.projectIntoViewport(e.clientX, e.clientY);
    var select = r.selection;
    var near = r.findNearestElement(pos[0], pos[1], true, false);
    var draggedElements = r.dragData.possibleDragElements;
    var down = r.hoverData.down;
    var multSelKeyDown = isMultSelKeyDown(e);

    if (r.data.bgActivePosistion) {
      r.redrawHint('select', true);
      r.redraw();
    }

    r.hoverData.tapholdCancelled = true;
    r.data.bgActivePosistion = undefined; // not active bg now

    if (down) {
      down.unactivate();
    }

    if (r.hoverData.which === 3) {
      var cxtEvt = {
        originalEvent: e,
        type: 'cxttapend',
        position: {
          x: pos[0],
          y: pos[1]
        }
      };

      if (down) {
        down.emit(cxtEvt);
      } else {
        cy.emit(cxtEvt);
      }

      if (!r.hoverData.cxtDragged) {
        var cxtTap = {
          originalEvent: e,
          type: 'cxttap',
          position: {
            x: pos[0],
            y: pos[1]
          }
        };

        if (down) {
          down.emit(cxtTap);
        } else {
          cy.emit(cxtTap);
        }
      }

      r.hoverData.cxtDragged = false;
      r.hoverData.which = null;
    } else if (r.hoverData.which === 1) {
      triggerEvents(near, ['mouseup', 'tapend', 'vmouseup'], e, {
        x: pos[0],
        y: pos[1]
      });

      if (!r.dragData.didDrag // didn't move a node around
      && !r.hoverData.dragged // didn't pan
      && !r.hoverData.selecting // not box selection
      && !r.hoverData.isOverThresholdDrag // didn't move too much
      ) {
          triggerEvents(down, ['click', 'tap', 'vclick'], e, {
            x: pos[0],
            y: pos[1]
          });
        } // Deselect all elements if nothing is currently under the mouse cursor and we aren't dragging something


      if (down == null && // not mousedown on node
      !r.dragData.didDrag // didn't move the node around
      && !r.hoverData.selecting // not box selection
      && !r.hoverData.dragged // didn't pan
      && !isMultSelKeyDown(e)) {
        cy.$(isSelected).unselect(['tapunselect']);

        if (draggedElements.length > 0) {
          r.redrawHint('eles', true);
        }

        r.dragData.possibleDragElements = draggedElements = cy.collection();
      } // Single selection


      if (near == down && !r.dragData.didDrag && !r.hoverData.selecting) {
        if (near != null && near._private.selectable) {
          if (r.hoverData.dragging) ;else if (cy.selectionType() === 'additive' || multSelKeyDown) {
            if (near.selected()) {
              near.unselect(['tapunselect']);
            } else {
              near.select(['tapselect']);
            }
          } else {
            if (!multSelKeyDown) {
              cy.$(isSelected).unmerge(near).unselect(['tapunselect']);
              near.select(['tapselect']);
            }
          }
          r.redrawHint('eles', true);
        }
      }

      if (r.hoverData.selecting) {
        var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));
        r.redrawHint('select', true);

        if (box.length > 0) {
          r.redrawHint('eles', true);
        }

        cy.emit({
          type: 'boxend',
          originalEvent: e,
          position: {
            x: pos[0],
            y: pos[1]
          }
        });

        var eleWouldBeSelected = function eleWouldBeSelected(ele) {
          return ele.selectable() && !ele.selected();
        };

        if (cy.selectionType() === 'additive') {
          box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');
        } else {
          if (!multSelKeyDown) {
            cy.$(isSelected).unmerge(box).unselect();
          }

          box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');
        } // always need redraw in case eles unselectable


        r.redraw();
      } // Cancel drag pan


      if (r.hoverData.dragging) {
        r.hoverData.dragging = false;
        r.redrawHint('select', true);
        r.redrawHint('eles', true);
        r.redraw();
      }

      if (!select[4]) {
        r.redrawHint('drag', true);
        r.redrawHint('eles', true);
        var downWasGrabbed = down && down.grabbed();
        freeDraggedElements(draggedElements);

        if (downWasGrabbed) {
          down.emit('freeon');
          draggedElements.emit('free');

          if (r.dragData.didDrag) {
            down.emit('dragfreeon');
            draggedElements.emit('dragfree');
          }
        }
      }
    } // else not right mouse


    select[4] = 0;
    r.hoverData.down = null;
    r.hoverData.cxtStarted = false;
    r.hoverData.draggingEles = false;
    r.hoverData.selecting = false;
    r.hoverData.isOverThresholdDrag = false;
    r.dragData.didDrag = false;
    r.hoverData.dragged = false;
    r.hoverData.dragDelta = [];
    r.hoverData.mdownPos = null;
    r.hoverData.mdownGPos = null;
  }, false);

  var wheelHandler = function wheelHandler(e) {
    if (r.scrollingPage) {
      return;
    } // while scrolling, ignore wheel-to-zoom


    var cy = r.cy;
    var pos = r.projectIntoViewport(e.clientX, e.clientY);
    var rpos = [pos[0] * cy.zoom() + cy.pan().x, pos[1] * cy.zoom() + cy.pan().y];

    if (r.hoverData.draggingEles || r.hoverData.dragging || r.hoverData.cxtStarted || inBoxSelection()) {
      // if pan dragging or cxt dragging, wheel movements make no zoom
      e.preventDefault();
      return;
    }

    if (cy.panningEnabled() && cy.userPanningEnabled() && cy.zoomingEnabled() && cy.userZoomingEnabled()) {
      e.preventDefault();
      r.data.wheelZooming = true;
      clearTimeout(r.data.wheelTimeout);
      r.data.wheelTimeout = setTimeout(function () {
        r.data.wheelZooming = false;
        r.redrawHint('eles', true);
        r.redraw();
      }, 150);
      var diff;

      if (e.deltaY != null) {
        diff = e.deltaY / -250;
      } else if (e.wheelDeltaY != null) {
        diff = e.wheelDeltaY / 1000;
      } else {
        diff = e.wheelDelta / 1000;
      }

      diff = diff * r.wheelSensitivity;
      var needsWheelFix = e.deltaMode === 1;

      if (needsWheelFix) {
        // fixes slow wheel events on ff/linux and ff/windows
        diff *= 33;
      }

      cy.zoom({
        level: cy.zoom() * Math.pow(10, diff),
        renderedPosition: {
          x: rpos[0],
          y: rpos[1]
        }
      });
    }
  }; // Functions to help with whether mouse wheel should trigger zooming
  // --


  r.registerBinding(r.container, 'wheel', wheelHandler, true); // disable nonstandard wheel events
  // r.registerBinding(r.container, 'mousewheel', wheelHandler, true);
  // r.registerBinding(r.container, 'DOMMouseScroll', wheelHandler, true);
  // r.registerBinding(r.container, 'MozMousePixelScroll', wheelHandler, true); // older firefox

  r.registerBinding(window, 'scroll', function scrollHandler(e) {
    // eslint-disable-line no-unused-vars
    r.scrollingPage = true;
    clearTimeout(r.scrollingPageTimeout);
    r.scrollingPageTimeout = setTimeout(function () {
      r.scrollingPage = false;
    }, 250);
  }, true); // Functions to help with handling mouseout/mouseover on the Cytoscape container
  // Handle mouseout on Cytoscape container

  r.registerBinding(r.container, 'mouseout', function mouseOutHandler(e) {
    var pos = r.projectIntoViewport(e.clientX, e.clientY);
    r.cy.emit({
      originalEvent: e,
      type: 'mouseout',
      position: {
        x: pos[0],
        y: pos[1]
      }
    });
  }, false);
  r.registerBinding(r.container, 'mouseover', function mouseOverHandler(e) {
    var pos = r.projectIntoViewport(e.clientX, e.clientY);
    r.cy.emit({
      originalEvent: e,
      type: 'mouseover',
      position: {
        x: pos[0],
        y: pos[1]
      }
    });
  }, false);
  var f1x1, f1y1, f2x1, f2y1; // starting points for pinch-to-zoom

  var distance1, distance1Sq; // initial distance between finger 1 and finger 2 for pinch-to-zoom

  var center1, modelCenter1; // center point on start pinch to zoom

  var offsetLeft, offsetTop;
  var containerWidth, containerHeight;
  var twoFingersStartInside;

  var distance = function distance(x1, y1, x2, y2) {
    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
  };

  var distanceSq = function distanceSq(x1, y1, x2, y2) {
    return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
  };

  var touchstartHandler;
  r.registerBinding(r.container, 'touchstart', touchstartHandler = function touchstartHandler(e) {
    if (!eventInContainer(e)) {
      return;
    }

    blurActiveDomElement();
    r.touchData.capture = true;
    r.data.bgActivePosistion = undefined;
    var cy = r.cy;
    var now$$1 = r.touchData.now;
    var earlier = r.touchData.earlier;

    if (e.touches[0]) {
      var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
      now$$1[0] = pos[0];
      now$$1[1] = pos[1];
    }

    if (e.touches[1]) {
      var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
      now$$1[2] = pos[0];
      now$$1[3] = pos[1];
    }

    if (e.touches[2]) {
      var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
      now$$1[4] = pos[0];
      now$$1[5] = pos[1];
    } // record starting points for pinch-to-zoom


    if (e.touches[1]) {
      freeDraggedElements(r.dragData.touchDragEles);
      var offsets = r.findContainerClientCoords();
      offsetLeft = offsets[0];
      offsetTop = offsets[1];
      containerWidth = offsets[2];
      containerHeight = offsets[3];
      f1x1 = e.touches[0].clientX - offsetLeft;
      f1y1 = e.touches[0].clientY - offsetTop;
      f2x1 = e.touches[1].clientX - offsetLeft;
      f2y1 = e.touches[1].clientY - offsetTop;
      twoFingersStartInside = 0 <= f1x1 && f1x1 <= containerWidth && 0 <= f2x1 && f2x1 <= containerWidth && 0 <= f1y1 && f1y1 <= containerHeight && 0 <= f2y1 && f2y1 <= containerHeight;
      var pan = cy.pan();
      var zoom = cy.zoom();
      distance1 = distance(f1x1, f1y1, f2x1, f2y1);
      distance1Sq = distanceSq(f1x1, f1y1, f2x1, f2y1);
      center1 = [(f1x1 + f2x1) / 2, (f1y1 + f2y1) / 2];
      modelCenter1 = [(center1[0] - pan.x) / zoom, (center1[1] - pan.y) / zoom]; // consider context tap

      var cxtDistThreshold = 200;
      var cxtDistThresholdSq = cxtDistThreshold * cxtDistThreshold;

      if (distance1Sq < cxtDistThresholdSq && !e.touches[2]) {
        var near1 = r.findNearestElement(now$$1[0], now$$1[1], true, true);
        var near2 = r.findNearestElement(now$$1[2], now$$1[3], true, true);

        if (near1 && near1.isNode()) {
          near1.activate().emit({
            originalEvent: e,
            type: 'cxttapstart',
            position: {
              x: now$$1[0],
              y: now$$1[1]
            }
          });
          r.touchData.start = near1;
        } else if (near2 && near2.isNode()) {
          near2.activate().emit({
            originalEvent: e,
            type: 'cxttapstart',
            position: {
              x: now$$1[0],
              y: now$$1[1]
            }
          });
          r.touchData.start = near2;
        } else {
          cy.emit({
            originalEvent: e,
            type: 'cxttapstart',
            position: {
              x: now$$1[0],
              y: now$$1[1]
            }
          });
        }

        if (r.touchData.start) {
          r.touchData.start._private.grabbed = false;
        }

        r.touchData.cxt = true;
        r.touchData.cxtDragged = false;
        r.data.bgActivePosistion = undefined;
        r.redraw();
        return;
      }
    }

    if (e.touches[2]) ;else if (e.touches[1]) ;else if (e.touches[0]) {
      var nears = r.findNearestElements(now$$1[0], now$$1[1], true, true);
      var near = nears[0];

      if (near != null) {
        near.activate();
        r.touchData.start = near;
        r.touchData.starts = nears;

        if (r.nodeIsGrabbable(near)) {
          var draggedEles = r.dragData.touchDragEles = cy.collection();
          var selectedNodes = null;
          r.redrawHint('eles', true);
          r.redrawHint('drag', true);

          if (near.selected()) {
            // reset drag elements, since near will be added again
            selectedNodes = cy.$(function (ele) {
              return ele.selected() && r.nodeIsGrabbable(ele);
            });
            addNodesToDrag(selectedNodes, {
              addToList: draggedEles
            });
          } else {
            addNodeToDrag(near, {
              addToList: draggedEles
            });
          }

          setGrabTarget(near);

          var makeEvent = function makeEvent(type) {
            return {
              originalEvent: e,
              type: type,
              position: {
                x: now$$1[0],
                y: now$$1[1]
              }
            };
          };

          near.emit(makeEvent('grabon'));

          if (selectedNodes) {
            selectedNodes.forEach(function (n) {
              n.emit(makeEvent('grab'));
            });
          } else {
            near.emit(makeEvent('grab'));
          }
        }
      }

      triggerEvents(near, ['touchstart', 'tapstart', 'vmousedown'], e, {
        x: now$$1[0],
        y: now$$1[1]
      });

      if (near == null) {
        r.data.bgActivePosistion = {
          x: pos[0],
          y: pos[1]
        };
        r.redrawHint('select', true);
        r.redraw();
      } // Tap, taphold
      // -----


      r.touchData.singleTouchMoved = false;
      r.touchData.singleTouchStartTime = +new Date();
      clearTimeout(r.touchData.tapholdTimeout);
      r.touchData.tapholdTimeout = setTimeout(function () {
        if (r.touchData.singleTouchMoved === false && !r.pinching // if pinching, then taphold unselect shouldn't take effect
        && !r.touchData.selecting // box selection shouldn't allow taphold through
        ) {
            triggerEvents(r.touchData.start, ['taphold'], e, {
              x: now$$1[0],
              y: now$$1[1]
            });
          }
      }, r.tapholdDuration);
    }

    if (e.touches.length >= 1) {
      var sPos = r.touchData.startPosition = [];

      for (var i = 0; i < now$$1.length; i++) {
        sPos[i] = earlier[i] = now$$1[i];
      }

      var touch0 = e.touches[0];
      r.touchData.startGPosition = [touch0.clientX, touch0.clientY];
    }
  }, false);
  var touchmoveHandler;
  r.registerBinding(window, 'touchmove', touchmoveHandler = function touchmoveHandler(e) {
    // eslint-disable-line no-undef
    var capture = r.touchData.capture;

    if (!capture && !eventInContainer(e)) {
      return;
    }

    var select = r.selection;
    var cy = r.cy;
    var now$$1 = r.touchData.now;
    var earlier = r.touchData.earlier;
    var zoom = cy.zoom();

    if (e.touches[0]) {
      var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
      now$$1[0] = pos[0];
      now$$1[1] = pos[1];
    }

    if (e.touches[1]) {
      var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
      now$$1[2] = pos[0];
      now$$1[3] = pos[1];
    }

    if (e.touches[2]) {
      var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
      now$$1[4] = pos[0];
      now$$1[5] = pos[1];
    }

    var startGPos = r.touchData.startGPosition;
    var isOverThresholdDrag;

    if (capture && e.touches[0] && startGPos) {
      var disp = [];

      for (var j = 0; j < now$$1.length; j++) {
        disp[j] = now$$1[j] - earlier[j];
      }

      var dx = e.touches[0].clientX - startGPos[0];
      var dx2 = dx * dx;
      var dy = e.touches[0].clientY - startGPos[1];
      var dy2 = dy * dy;
      var dist2 = dx2 + dy2;
      isOverThresholdDrag = dist2 >= r.touchTapThreshold2;
    } // context swipe cancelling


    if (capture && r.touchData.cxt) {
      e.preventDefault();
      var f1x2 = e.touches[0].clientX - offsetLeft,
          f1y2 = e.touches[0].clientY - offsetTop;
      var f2x2 = e.touches[1].clientX - offsetLeft,
          f2y2 = e.touches[1].clientY - offsetTop; // var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );

      var distance2Sq = distanceSq(f1x2, f1y2, f2x2, f2y2);
      var factorSq = distance2Sq / distance1Sq;
      var distThreshold = 150;
      var distThresholdSq = distThreshold * distThreshold;
      var factorThreshold = 1.5;
      var factorThresholdSq = factorThreshold * factorThreshold; // cancel ctx gestures if the distance b/t the fingers increases

      if (factorSq >= factorThresholdSq || distance2Sq >= distThresholdSq) {
        r.touchData.cxt = false;
        r.data.bgActivePosistion = undefined;
        r.redrawHint('select', true);
        var cxtEvt = {
          originalEvent: e,
          type: 'cxttapend',
          position: {
            x: now$$1[0],
            y: now$$1[1]
          }
        };

        if (r.touchData.start) {
          r.touchData.start.unactivate().emit(cxtEvt);
          r.touchData.start = null;
        } else {
          cy.emit(cxtEvt);
        }
      }
    } // context swipe


    if (capture && r.touchData.cxt) {
      var cxtEvt = {
        originalEvent: e,
        type: 'cxtdrag',
        position: {
          x: now$$1[0],
          y: now$$1[1]
        }
      };
      r.data.bgActivePosistion = undefined;
      r.redrawHint('select', true);

      if (r.touchData.start) {
        r.touchData.start.emit(cxtEvt);
      } else {
        cy.emit(cxtEvt);
      }

      if (r.touchData.start) {
        r.touchData.start._private.grabbed = false;
      }

      r.touchData.cxtDragged = true;
      var near = r.findNearestElement(now$$1[0], now$$1[1], true, true);

      if (!r.touchData.cxtOver || near !== r.touchData.cxtOver) {
        if (r.touchData.cxtOver) {
          r.touchData.cxtOver.emit({
            originalEvent: e,
            type: 'cxtdragout',
            position: {
              x: now$$1[0],
              y: now$$1[1]
            }
          });
        }

        r.touchData.cxtOver = near;

        if (near) {
          near.emit({
            originalEvent: e,
            type: 'cxtdragover',
            position: {
              x: now$$1[0],
              y: now$$1[1]
            }
          });
        }
      } // box selection

    } else if (capture && e.touches[2] && cy.boxSelectionEnabled()) {
      e.preventDefault();
      r.data.bgActivePosistion = undefined;
      this.lastThreeTouch = +new Date();

      if (!r.touchData.selecting) {
        cy.emit({
          originalEvent: e,
          type: 'boxstart',
          position: {
            x: now$$1[0],
            y: now$$1[1]
          }
        });
      }

      r.touchData.selecting = true;
      r.redrawHint('select', true);

      if (!select || select.length === 0 || select[0] === undefined) {
        select[0] = (now$$1[0] + now$$1[2] + now$$1[4]) / 3;
        select[1] = (now$$1[1] + now$$1[3] + now$$1[5]) / 3;
        select[2] = (now$$1[0] + now$$1[2] + now$$1[4]) / 3 + 1;
        select[3] = (now$$1[1] + now$$1[3] + now$$1[5]) / 3 + 1;
      } else {
        select[2] = (now$$1[0] + now$$1[2] + now$$1[4]) / 3;
        select[3] = (now$$1[1] + now$$1[3] + now$$1[5]) / 3;
      }

      select[4] = 1;
      r.touchData.selecting = true;
      r.redraw(); // pinch to zoom
    } else if (capture && e.touches[1] && cy.zoomingEnabled() && cy.panningEnabled() && cy.userZoomingEnabled() && cy.userPanningEnabled()) {
      // two fingers => pinch to zoom
      e.preventDefault();
      r.data.bgActivePosistion = undefined;
      r.redrawHint('select', true);
      var draggedEles = r.dragData.touchDragEles;

      if (draggedEles) {
        r.redrawHint('drag', true);

        for (var i = 0; i < draggedEles.length; i++) {
          var de_p = draggedEles[i]._private;
          de_p.grabbed = false;
          de_p.rscratch.inDragLayer = false;
        }
      }

      var _start = r.touchData.start; // (x2, y2) for fingers 1 and 2

      var f1x2 = e.touches[0].clientX - offsetLeft,
          f1y2 = e.touches[0].clientY - offsetTop;
      var f2x2 = e.touches[1].clientX - offsetLeft,
          f2y2 = e.touches[1].clientY - offsetTop;
      var distance2 = distance(f1x2, f1y2, f2x2, f2y2); // var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );
      // var factor = Math.sqrt( distance2Sq ) / Math.sqrt( distance1Sq );

      var factor = distance2 / distance1;

      if (twoFingersStartInside) {
        // delta finger1
        var df1x = f1x2 - f1x1;
        var df1y = f1y2 - f1y1; // delta finger 2

        var df2x = f2x2 - f2x1;
        var df2y = f2y2 - f2y1; // translation is the normalised vector of the two fingers movement
        // i.e. so pinching cancels out and moving together pans

        var tx = (df1x + df2x) / 2;
        var ty = (df1y + df2y) / 2; // now calculate the zoom

        var zoom1 = cy.zoom();
        var zoom2 = zoom1 * factor;
        var pan1 = cy.pan(); // the model center point converted to the current rendered pos

        var ctrx = modelCenter1[0] * zoom1 + pan1.x;
        var ctry = modelCenter1[1] * zoom1 + pan1.y;
        var pan2 = {
          x: -zoom2 / zoom1 * (ctrx - pan1.x - tx) + ctrx,
          y: -zoom2 / zoom1 * (ctry - pan1.y - ty) + ctry
        }; // remove dragged eles

        if (_start && _start.active()) {
          var draggedEles = r.dragData.touchDragEles;
          freeDraggedElements(draggedEles);
          r.redrawHint('drag', true);
          r.redrawHint('eles', true);

          _start.unactivate().emit('freeon');

          draggedEles.emit('free');

          if (r.dragData.didDrag) {
            _start.emit('dragfreeon');

            draggedEles.emit('dragfree');
          }
        }

        cy.viewport({
          zoom: zoom2,
          pan: pan2,
          cancelOnFailedZoom: true
        });
        distance1 = distance2;
        f1x1 = f1x2;
        f1y1 = f1y2;
        f2x1 = f2x2;
        f2y1 = f2y2;
        r.pinching = true;
      } // Re-project


      if (e.touches[0]) {
        var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
        now$$1[0] = pos[0];
        now$$1[1] = pos[1];
      }

      if (e.touches[1]) {
        var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
        now$$1[2] = pos[0];
        now$$1[3] = pos[1];
      }

      if (e.touches[2]) {
        var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
        now$$1[4] = pos[0];
        now$$1[5] = pos[1];
      }
    } else if (e.touches[0]) {
      var start = r.touchData.start;
      var last = r.touchData.last;
      var near;

      if (!r.hoverData.draggingEles && !r.swipePanning) {
        near = r.findNearestElement(now$$1[0], now$$1[1], true, true);
      }

      if (capture && start != null) {
        e.preventDefault();
      } // dragging nodes


      if (capture && start != null && r.nodeIsDraggable(start)) {
        if (isOverThresholdDrag) {
          // then dragging can happen
          var draggedEles = r.dragData.touchDragEles;
          var justStartedDrag = !r.dragData.didDrag;

          if (justStartedDrag) {
            addNodesToDrag(draggedEles, {
              inDragLayer: true
            });
          }

          r.dragData.didDrag = true;
          var totalShift = {
            x: 0,
            y: 0
          };

          if (number(disp[0]) && number(disp[1])) {
            totalShift.x += disp[0];
            totalShift.y += disp[1];

            if (justStartedDrag) {
              r.redrawHint('eles', true);
              var dragDelta = r.touchData.dragDelta;

              if (dragDelta && number(dragDelta[0]) && number(dragDelta[1])) {
                totalShift.x += dragDelta[0];
                totalShift.y += dragDelta[1];
              }
            }
          }

          r.hoverData.draggingEles = true;
          draggedEles.silentShift(totalShift).emit('position drag');
          r.redrawHint('drag', true);

          if (r.touchData.startPosition[0] == earlier[0] && r.touchData.startPosition[1] == earlier[1]) {
            r.redrawHint('eles', true);
          }

          r.redraw();
        } else {
          // otherise keep track of drag delta for later
          var dragDelta = r.touchData.dragDelta = r.touchData.dragDelta || [];

          if (dragDelta.length === 0) {
            dragDelta.push(disp[0]);
            dragDelta.push(disp[1]);
          } else {
            dragDelta[0] += disp[0];
            dragDelta[1] += disp[1];
          }
        }
      } // touchmove


      {
        triggerEvents(start || near, ['touchmove', 'tapdrag', 'vmousemove'], e, {
          x: now$$1[0],
          y: now$$1[1]
        });

        if ((!start || !start.grabbed()) && near != last) {
          if (last) {
            last.emit({
              originalEvent: e,
              type: 'tapdragout',
              position: {
                x: now$$1[0],
                y: now$$1[1]
              }
            });
          }

          if (near) {
            near.emit({
              originalEvent: e,
              type: 'tapdragover',
              position: {
                x: now$$1[0],
                y: now$$1[1]
              }
            });
          }
        }

        r.touchData.last = near;
      } // check to cancel taphold

      if (capture) {
        for (var i = 0; i < now$$1.length; i++) {
          if (now$$1[i] && r.touchData.startPosition[i] && isOverThresholdDrag) {
            r.touchData.singleTouchMoved = true;
          }
        }
      } // panning


      if (capture && (start == null || start.isEdge()) && cy.panningEnabled() && cy.userPanningEnabled()) {
        var allowPassthrough = allowPanningPassthrough(start, r.touchData.starts);

        if (allowPassthrough) {
          e.preventDefault();

          if (r.swipePanning) {
            cy.panBy({
              x: disp[0] * zoom,
              y: disp[1] * zoom
            });
          } else if (isOverThresholdDrag) {
            r.swipePanning = true;
            cy.panBy({
              x: dx * zoom,
              y: dy * zoom
            });

            if (start) {
              start.unactivate();

              if (!r.data.bgActivePosistion) {
                r.data.bgActivePosistion = array2point(r.touchData.startPosition);
              }

              r.redrawHint('select', true);
              r.touchData.start = null;
            }
          }
        } // Re-project


        var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
        now$$1[0] = pos[0];
        now$$1[1] = pos[1];
      }
    }

    for (var j = 0; j < now$$1.length; j++) {
      earlier[j] = now$$1[j];
    } // the active bg indicator should be removed when making a swipe that is neither for dragging nodes or panning


    if (capture && e.touches.length > 0 && !r.hoverData.draggingEles && !r.swipePanning && r.data.bgActivePosistion != null) {
      r.data.bgActivePosistion = undefined;
      r.redrawHint('select', true);
      r.redraw();
    }
  }, false);
  var touchcancelHandler;
  r.registerBinding(window, 'touchcancel', touchcancelHandler = function touchcancelHandler(e) {
    // eslint-disable-line no-unused-vars
    var start = r.touchData.start;
    r.touchData.capture = false;

    if (start) {
      start.unactivate();
    }
  });
  var touchendHandler;
  r.registerBinding(window, 'touchend', touchendHandler = function touchendHandler(e) {
    // eslint-disable-line no-unused-vars
    var start = r.touchData.start;
    var capture = r.touchData.capture;

    if (capture) {
      if (e.touches.length === 0) {
        r.touchData.capture = false;
      }

      e.preventDefault();
    } else {
      return;
    }

    var select = r.selection;
    r.swipePanning = false;
    r.hoverData.draggingEles = false;
    var cy = r.cy;
    var zoom = cy.zoom();
    var now$$1 = r.touchData.now;
    var earlier = r.touchData.earlier;

    if (e.touches[0]) {
      var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
      now$$1[0] = pos[0];
      now$$1[1] = pos[1];
    }

    if (e.touches[1]) {
      var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
      now$$1[2] = pos[0];
      now$$1[3] = pos[1];
    }

    if (e.touches[2]) {
      var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
      now$$1[4] = pos[0];
      now$$1[5] = pos[1];
    }

    if (start) {
      start.unactivate();
    }

    var ctxTapend;

    if (r.touchData.cxt) {
      ctxTapend = {
        originalEvent: e,
        type: 'cxttapend',
        position: {
          x: now$$1[0],
          y: now$$1[1]
        }
      };

      if (start) {
        start.emit(ctxTapend);
      } else {
        cy.emit(ctxTapend);
      }

      if (!r.touchData.cxtDragged) {
        var ctxTap = {
          originalEvent: e,
          type: 'cxttap',
          position: {
            x: now$$1[0],
            y: now$$1[1]
          }
        };

        if (start) {
          start.emit(ctxTap);
        } else {
          cy.emit(ctxTap);
        }
      }

      if (r.touchData.start) {
        r.touchData.start._private.grabbed = false;
      }

      r.touchData.cxt = false;
      r.touchData.start = null;
      r.redraw();
      return;
    } // no more box selection if we don't have three fingers


    if (!e.touches[2] && cy.boxSelectionEnabled() && r.touchData.selecting) {
      r.touchData.selecting = false;
      var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));
      select[0] = undefined;
      select[1] = undefined;
      select[2] = undefined;
      select[3] = undefined;
      select[4] = 0;
      r.redrawHint('select', true);
      cy.emit({
        type: 'boxend',
        originalEvent: e,
        position: {
          x: now$$1[0],
          y: now$$1[1]
        }
      });

      var eleWouldBeSelected = function eleWouldBeSelected(ele) {
        return ele.selectable() && !ele.selected();
      };

      box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');

      if (box.nonempty()) {
        r.redrawHint('eles', true);
      }

      r.redraw();
    }

    if (start != null) {
      start.unactivate();
    }

    if (e.touches[2]) {
      r.data.bgActivePosistion = undefined;
      r.redrawHint('select', true);
    } else if (e.touches[1]) ;else if (e.touches[0]) ;else if (!e.touches[0]) {
      r.data.bgActivePosistion = undefined;
      r.redrawHint('select', true);
      var draggedEles = r.dragData.touchDragEles;

      if (start != null) {
        var startWasGrabbed = start._private.grabbed;
        freeDraggedElements(draggedEles);
        r.redrawHint('drag', true);
        r.redrawHint('eles', true);

        if (startWasGrabbed) {
          start.emit('freeon');
          draggedEles.emit('free');

          if (r.dragData.didDrag) {
            start.emit('dragfreeon');
            draggedEles.emit('dragfree');
          }
        }

        triggerEvents(start, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {
          x: now$$1[0],
          y: now$$1[1]
        });
        start.unactivate();
        r.touchData.start = null;
      } else {
        var near = r.findNearestElement(now$$1[0], now$$1[1], true, true);
        triggerEvents(near, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {
          x: now$$1[0],
          y: now$$1[1]
        });
      }

      var dx = r.touchData.startPosition[0] - now$$1[0];
      var dx2 = dx * dx;
      var dy = r.touchData.startPosition[1] - now$$1[1];
      var dy2 = dy * dy;
      var dist2 = dx2 + dy2;
      var rdist2 = dist2 * zoom * zoom; // Tap event, roughly same as mouse click event for touch

      if (!r.touchData.singleTouchMoved) {
        if (!start) {
          cy.$(':selected').unselect(['tapunselect']);
        }

        triggerEvents(start, ['tap', 'vclick'], e, {
          x: now$$1[0],
          y: now$$1[1]
        });
      } // Prepare to select the currently touched node, only if it hasn't been dragged past a certain distance


      if (start != null && !r.dragData.didDrag // didn't drag nodes around
      && start._private.selectable && rdist2 < r.touchTapThreshold2 && !r.pinching // pinch to zoom should not affect selection
      ) {
          if (cy.selectionType() === 'single') {
            cy.$(isSelected).unmerge(start).unselect(['tapunselect']);
            start.select(['tapselect']);
          } else {
            if (start.selected()) {
              start.unselect(['tapunselect']);
            } else {
              start.select(['tapselect']);
            }
          }

          r.redrawHint('eles', true);
        }

      r.touchData.singleTouchMoved = true;
    }

    for (var j = 0; j < now$$1.length; j++) {
      earlier[j] = now$$1[j];
    }

    r.dragData.didDrag = false; // reset for next mousedown

    if (e.touches.length === 0) {
      r.touchData.dragDelta = [];
      r.touchData.startPosition = null;
      r.touchData.startGPosition = null;
    }

    if (e.touches.length < 2) {
      r.pinching = false;
      r.redrawHint('eles', true);
      r.redraw();
    } //r.redraw();

  }, false); // fallback compatibility layer for ms pointer events

  if (typeof TouchEvent === 'undefined') {
    var pointers = [];

    var makeTouch = function makeTouch(e) {
      return {
        clientX: e.clientX,
        clientY: e.clientY,
        force: 1,
        identifier: e.pointerId,
        pageX: e.pageX,
        pageY: e.pageY,
        radiusX: e.width / 2,
        radiusY: e.height / 2,
        screenX: e.screenX,
        screenY: e.screenY,
        target: e.target
      };
    };

    var makePointer = function makePointer(e) {
      return {
        event: e,
        touch: makeTouch(e)
      };
    };

    var addPointer = function addPointer(e) {
      pointers.push(makePointer(e));
    };

    var removePointer = function removePointer(e) {
      for (var i = 0; i < pointers.length; i++) {
        var p = pointers[i];

        if (p.event.pointerId === e.pointerId) {
          pointers.splice(i, 1);
          return;
        }
      }
    };

    var updatePointer = function updatePointer(e) {
      var p = pointers.filter(function (p) {
        return p.event.pointerId === e.pointerId;
      })[0];
      p.event = e;
      p.touch = makeTouch(e);
    };

    var addTouchesToEvent = function addTouchesToEvent(e) {
      e.touches = pointers.map(function (p) {
        return p.touch;
      });
    };

    var pointerIsMouse = function pointerIsMouse(e) {
      return e.pointerType === 'mouse' || e.pointerType === 4;
    };

    r.registerBinding(r.container, 'pointerdown', function (e) {
      if (pointerIsMouse(e)) {
        return;
      } // mouse already handled


      e.preventDefault();
      addPointer(e);
      addTouchesToEvent(e);
      touchstartHandler(e);
    });
    r.registerBinding(r.container, 'pointerup', function (e) {
      if (pointerIsMouse(e)) {
        return;
      } // mouse already handled


      removePointer(e);
      addTouchesToEvent(e);
      touchendHandler(e);
    });
    r.registerBinding(r.container, 'pointercancel', function (e) {
      if (pointerIsMouse(e)) {
        return;
      } // mouse already handled


      removePointer(e);
      addTouchesToEvent(e);
      touchcancelHandler(e);
    });
    r.registerBinding(r.container, 'pointermove', function (e) {
      if (pointerIsMouse(e)) {
        return;
      } // mouse already handled


      e.preventDefault();
      updatePointer(e);
      addTouchesToEvent(e);
      touchmoveHandler(e);
    });
  }
};

var BRp$d = {};

BRp$d.generatePolygon = function (name, points) {
  return this.nodeShapes[name] = {
    renderer: this,
    name: name,
    points: points,
    draw: function draw(context, centerX, centerY, width, height) {
      this.renderer.nodeShapeImpl('polygon', context, centerX, centerY, width, height, this.points);
    },
    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
      return polygonIntersectLine(x, y, this.points, nodeX, nodeY, width / 2, height / 2, padding);
    },
    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
      return pointInsidePolygon(x, y, this.points, centerX, centerY, width, height, [0, -1], padding);
    }
  };
};

BRp$d.generateEllipse = function () {
  return this.nodeShapes['ellipse'] = {
    renderer: this,
    name: 'ellipse',
    draw: function draw(context, centerX, centerY, width, height) {
      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
    },
    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
      return intersectLineEllipse(x, y, nodeX, nodeY, width / 2 + padding, height / 2 + padding);
    },
    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
      return checkInEllipse(x, y, width, height, centerX, centerY, padding);
    }
  };
};

BRp$d.generateRoundRectangle = function () {
  return this.nodeShapes['round-rectangle'] = this.nodeShapes['roundrectangle'] = {
    renderer: this,
    name: 'round-rectangle',
    points: generateUnitNgonPointsFitToSquare(4, 0),
    draw: function draw(context, centerX, centerY, width, height) {
      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
    },
    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
      return roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding);
    },
    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
      var cornerRadius = getRoundRectangleRadius(width, height);
      var diam = cornerRadius * 2; // Check hBox

      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {
        return true;
      } // Check vBox


      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {
        return true;
      } // Check top left quarter circle


      if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY - height / 2 + cornerRadius, padding)) {
        return true;
      } // Check top right quarter circle


      if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY - height / 2 + cornerRadius, padding)) {
        return true;
      } // Check bottom right quarter circle


      if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
        return true;
      } // Check bottom left quarter circle


      if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
        return true;
      }

      return false;
    }
  };
};

BRp$d.generateCutRectangle = function () {
  return this.nodeShapes['cut-rectangle'] = this.nodeShapes['cutrectangle'] = {
    renderer: this,
    name: 'cut-rectangle',
    cornerLength: getCutRectangleCornerLength(),
    points: generateUnitNgonPointsFitToSquare(4, 0),
    draw: function draw(context, centerX, centerY, width, height) {
      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
    },
    generateCutTrianglePts: function generateCutTrianglePts(width, height, centerX, centerY) {
      var cl = this.cornerLength;
      var hh = height / 2;
      var hw = width / 2;
      var xBegin = centerX - hw;
      var xEnd = centerX + hw;
      var yBegin = centerY - hh;
      var yEnd = centerY + hh; // points are in clockwise order, inner (imaginary) triangle pt on [4, 5]

      return {
        topLeft: [xBegin, yBegin + cl, xBegin + cl, yBegin, xBegin + cl, yBegin + cl],
        topRight: [xEnd - cl, yBegin, xEnd, yBegin + cl, xEnd - cl, yBegin + cl],
        bottomRight: [xEnd, yEnd - cl, xEnd - cl, yEnd, xEnd - cl, yEnd - cl],
        bottomLeft: [xBegin + cl, yEnd, xBegin, yEnd - cl, xBegin + cl, yEnd - cl]
      };
    },
    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
      var cPts = this.generateCutTrianglePts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);
      var pts = [].concat.apply([], [cPts.topLeft.splice(0, 4), cPts.topRight.splice(0, 4), cPts.bottomRight.splice(0, 4), cPts.bottomLeft.splice(0, 4)]);
      return polygonIntersectLine(x, y, pts, nodeX, nodeY);
    },
    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
      // Check hBox
      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * this.cornerLength, [0, -1], padding)) {
        return true;
      } // Check vBox


      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * this.cornerLength, height, [0, -1], padding)) {
        return true;
      }

      var cutTrianglePts = this.generateCutTrianglePts(width, height, centerX, centerY);
      return pointInsidePolygonPoints(x, y, cutTrianglePts.topLeft) || pointInsidePolygonPoints(x, y, cutTrianglePts.topRight) || pointInsidePolygonPoints(x, y, cutTrianglePts.bottomRight) || pointInsidePolygonPoints(x, y, cutTrianglePts.bottomLeft);
    }
  };
};

BRp$d.generateBarrel = function () {
  return this.nodeShapes['barrel'] = {
    renderer: this,
    name: 'barrel',
    points: generateUnitNgonPointsFitToSquare(4, 0),
    draw: function draw(context, centerX, centerY, width, height) {
      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
    },
    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
      // use two fixed t values for the bezier curve approximation
      var t0 = 0.15;
      var t1 = 0.5;
      var t2 = 0.85;
      var bPts = this.generateBarrelBezierPts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);

      var approximateBarrelCurvePts = function approximateBarrelCurvePts(pts) {
        // approximate curve pts based on the two t values
        var m0 = qbezierPtAt({
          x: pts[0],
          y: pts[1]
        }, {
          x: pts[2],
          y: pts[3]
        }, {
          x: pts[4],
          y: pts[5]
        }, t0);
        var m1 = qbezierPtAt({
          x: pts[0],
          y: pts[1]
        }, {
          x: pts[2],
          y: pts[3]
        }, {
          x: pts[4],
          y: pts[5]
        }, t1);
        var m2 = qbezierPtAt({
          x: pts[0],
          y: pts[1]
        }, {
          x: pts[2],
          y: pts[3]
        }, {
          x: pts[4],
          y: pts[5]
        }, t2);
        return [pts[0], pts[1], m0.x, m0.y, m1.x, m1.y, m2.x, m2.y, pts[4], pts[5]];
      };

      var pts = [].concat(approximateBarrelCurvePts(bPts.topLeft), approximateBarrelCurvePts(bPts.topRight), approximateBarrelCurvePts(bPts.bottomRight), approximateBarrelCurvePts(bPts.bottomLeft));
      return polygonIntersectLine(x, y, pts, nodeX, nodeY);
    },
    generateBarrelBezierPts: function generateBarrelBezierPts(width, height, centerX, centerY) {
      var hh = height / 2;
      var hw = width / 2;
      var xBegin = centerX - hw;
      var xEnd = centerX + hw;
      var yBegin = centerY - hh;
      var yEnd = centerY + hh;
      var curveConstants = getBarrelCurveConstants(width, height);
      var hOffset = curveConstants.heightOffset;
      var wOffset = curveConstants.widthOffset;
      var ctrlPtXOffset = curveConstants.ctrlPtOffsetPct * width; // points are in clockwise order, inner (imaginary) control pt on [4, 5]

      var pts = {
        topLeft: [xBegin, yBegin + hOffset, xBegin + ctrlPtXOffset, yBegin, xBegin + wOffset, yBegin],
        topRight: [xEnd - wOffset, yBegin, xEnd - ctrlPtXOffset, yBegin, xEnd, yBegin + hOffset],
        bottomRight: [xEnd, yEnd - hOffset, xEnd - ctrlPtXOffset, yEnd, xEnd - wOffset, yEnd],
        bottomLeft: [xBegin + wOffset, yEnd, xBegin + ctrlPtXOffset, yEnd, xBegin, yEnd - hOffset]
      };
      pts.topLeft.isTop = true;
      pts.topRight.isTop = true;
      pts.bottomLeft.isBottom = true;
      pts.bottomRight.isBottom = true;
      return pts;
    },
    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
      var curveConstants = getBarrelCurveConstants(width, height);
      var hOffset = curveConstants.heightOffset;
      var wOffset = curveConstants.widthOffset; // Check hBox

      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * hOffset, [0, -1], padding)) {
        return true;
      } // Check vBox


      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * wOffset, height, [0, -1], padding)) {
        return true;
      }

      var barrelCurvePts = this.generateBarrelBezierPts(width, height, centerX, centerY);

      var getCurveT = function getCurveT(x, y, curvePts) {
        var x0 = curvePts[4];
        var x1 = curvePts[2];
        var x2 = curvePts[0];
        var y0 = curvePts[5]; // var y1 = curvePts[ 3 ];

        var y2 = curvePts[1];
        var xMin = Math.min(x0, x2);
        var xMax = Math.max(x0, x2);
        var yMin = Math.min(y0, y2);
        var yMax = Math.max(y0, y2);

        if (xMin <= x && x <= xMax && yMin <= y && y <= yMax) {
          var coeff = bezierPtsToQuadCoeff(x0, x1, x2);
          var roots = solveQuadratic(coeff[0], coeff[1], coeff[2], x);
          var validRoots = roots.filter(function (r) {
            return 0 <= r && r <= 1;
          });

          if (validRoots.length > 0) {
            return validRoots[0];
          }
        }

        return null;
      };

      var curveRegions = Object.keys(barrelCurvePts);

      for (var i = 0; i < curveRegions.length; i++) {
        var corner = curveRegions[i];
        var cornerPts = barrelCurvePts[corner];
        var t = getCurveT(x, y, cornerPts);

        if (t == null) {
          continue;
        }

        var y0 = cornerPts[5];
        var y1 = cornerPts[3];
        var y2 = cornerPts[1];
        var bezY = qbezierAt(y0, y1, y2, t);

        if (cornerPts.isTop && bezY <= y) {
          return true;
        }

        if (cornerPts.isBottom && y <= bezY) {
          return true;
        }
      }

      return false;
    }
  };
};

BRp$d.generateBottomRoundrectangle = function () {
  return this.nodeShapes['bottom-round-rectangle'] = this.nodeShapes['bottomroundrectangle'] = {
    renderer: this,
    name: 'bottom-round-rectangle',
    points: generateUnitNgonPointsFitToSquare(4, 0),
    draw: function draw(context, centerX, centerY, width, height) {
      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
    },
    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
      var topStartX = nodeX - (width / 2 + padding);
      var topStartY = nodeY - (height / 2 + padding);
      var topEndY = topStartY;
      var topEndX = nodeX + (width / 2 + padding);
      var topIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);

      if (topIntersections.length > 0) {
        return topIntersections;
      }

      return roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding);
    },
    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
      var cornerRadius = getRoundRectangleRadius(width, height);
      var diam = 2 * cornerRadius; // Check hBox

      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {
        return true;
      } // Check vBox


      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {
        return true;
      } // check non-rounded top side


      var outerWidth = width / 2 + 2 * padding;
      var outerHeight = height / 2 + 2 * padding;
      var points = [centerX - outerWidth, centerY - outerHeight, centerX - outerWidth, centerY, centerX + outerWidth, centerY, centerX + outerWidth, centerY - outerHeight];

      if (pointInsidePolygonPoints(x, y, points)) {
        return true;
      } // Check bottom right quarter circle


      if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
        return true;
      } // Check bottom left quarter circle


      if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
        return true;
      }

      return false;
    }
  };
};

BRp$d.registerNodeShapes = function () {
  var nodeShapes = this.nodeShapes = {};
  var renderer = this;
  this.generateEllipse();
  this.generatePolygon('triangle', generateUnitNgonPointsFitToSquare(3, 0));
  this.generatePolygon('rectangle', generateUnitNgonPointsFitToSquare(4, 0));
  nodeShapes['square'] = nodeShapes['rectangle'];
  this.generateRoundRectangle();
  this.generateCutRectangle();
  this.generateBarrel();
  this.generateBottomRoundrectangle();
  this.generatePolygon('diamond', [0, 1, 1, 0, 0, -1, -1, 0]);
  this.generatePolygon('pentagon', generateUnitNgonPointsFitToSquare(5, 0));
  this.generatePolygon('hexagon', generateUnitNgonPointsFitToSquare(6, 0));
  this.generatePolygon('heptagon', generateUnitNgonPointsFitToSquare(7, 0));
  this.generatePolygon('octagon', generateUnitNgonPointsFitToSquare(8, 0));
  var star5Points = new Array(20);
  {
    var outerPoints = generateUnitNgonPoints(5, 0);
    var innerPoints = generateUnitNgonPoints(5, Math.PI / 5); // Outer radius is 1; inner radius of star is smaller

    var innerRadius = 0.5 * (3 - Math.sqrt(5));
    innerRadius *= 1.57;

    for (var i = 0; i < innerPoints.length / 2; i++) {
      innerPoints[i * 2] *= innerRadius;
      innerPoints[i * 2 + 1] *= innerRadius;
    }

    for (var i = 0; i < 20 / 4; i++) {
      star5Points[i * 4] = outerPoints[i * 2];
      star5Points[i * 4 + 1] = outerPoints[i * 2 + 1];
      star5Points[i * 4 + 2] = innerPoints[i * 2];
      star5Points[i * 4 + 3] = innerPoints[i * 2 + 1];
    }
  }
  star5Points = fitPolygonToSquare(star5Points);
  this.generatePolygon('star', star5Points);
  this.generatePolygon('vee', [-1, -1, 0, -0.333, 1, -1, 0, 1]);
  this.generatePolygon('rhomboid', [-1, -1, 0.333, -1, 1, 1, -0.333, 1]);
  this.nodeShapes['concavehexagon'] = this.generatePolygon('concave-hexagon', [-1, -0.95, -0.75, 0, -1, 0.95, 1, 0.95, 0.75, 0, 1, -0.95]);
  this.generatePolygon('tag', [-1, -1, 0.25, -1, 1, 0, 0.25, 1, -1, 1]);

  nodeShapes.makePolygon = function (points) {
    // use caching on user-specified polygons so they are as fast as native shapes
    var key = points.join('$');
    var name = 'polygon-' + key;
    var shape;

    if (shape = this[name]) {
      // got cached shape
      return shape;
    } // create and cache new shape


    return renderer.generatePolygon(name, points);
  };
};

var BRp$e = {};

BRp$e.timeToRender = function () {
  return this.redrawTotalTime / this.redrawCount;
};

BRp$e.redraw = function (options) {
  options = options || staticEmptyObject();
  var r = this;

  if (r.averageRedrawTime === undefined) {
    r.averageRedrawTime = 0;
  }

  if (r.lastRedrawTime === undefined) {
    r.lastRedrawTime = 0;
  }

  if (r.lastDrawTime === undefined) {
    r.lastDrawTime = 0;
  }

  r.requestedFrame = true;
  r.renderOptions = options;
};

BRp$e.beforeRender = function (fn, priority) {
  // the renderer can't add tick callbacks when destroyed
  if (this.destroyed) {
    return;
  }

  priority = priority || 0;
  var cbs = this.beforeRenderCallbacks;
  cbs.push({
    fn: fn,
    priority: priority
  }); // higher priority callbacks executed first

  cbs.sort(function (a, b) {
    return b.priority - a.priority;
  });
};

var beforeRenderCallbacks = function beforeRenderCallbacks(r, willDraw, startTime) {
  var cbs = r.beforeRenderCallbacks;

  for (var i = 0; i < cbs.length; i++) {
    cbs[i].fn(willDraw, startTime);
  }
};

BRp$e.startRenderLoop = function () {
  var r = this;
  var cy = r.cy;

  if (r.renderLoopStarted) {
    return;
  } else {
    r.renderLoopStarted = true;
  }

  var renderFn = function renderFn(requestTime) {
    if (r.destroyed) {
      return;
    }

    if (cy.batching()) ;else if (r.requestedFrame && !r.skipFrame) {
      beforeRenderCallbacks(r, true, requestTime);
      var startTime = performanceNow();
      r.render(r.renderOptions);
      var endTime = r.lastDrawTime = performanceNow();

      if (r.averageRedrawTime === undefined) {
        r.averageRedrawTime = endTime - startTime;
      }

      if (r.redrawCount === undefined) {
        r.redrawCount = 0;
      }

      r.redrawCount++;

      if (r.redrawTotalTime === undefined) {
        r.redrawTotalTime = 0;
      }

      var duration = endTime - startTime;
      r.redrawTotalTime += duration;
      r.lastRedrawTime = duration; // use a weighted average with a bias from the previous average so we don't spike so easily

      r.averageRedrawTime = r.averageRedrawTime / 2 + duration / 2;
      r.requestedFrame = false;
    } else {
      beforeRenderCallbacks(r, false, requestTime);
    }
    r.skipFrame = false;
    requestAnimationFrame(renderFn);
  };

  requestAnimationFrame(renderFn);
};

var BaseRenderer = function BaseRenderer(options) {
  this.init(options);
};

var BR = BaseRenderer;
var BRp$f = BR.prototype;
BRp$f.clientFunctions = ['redrawHint', 'render', 'renderTo', 'matchCanvasSize', 'nodeShapeImpl', 'arrowShapeImpl'];

BRp$f.init = function (options) {
  var r = this;
  r.options = options;
  r.cy = options.cy;
  var ctr = r.container = options.cy.container(); // prepend a stylesheet in the head such that

  if (window$1) {
    var document = window$1.document;
    var head = document.head;
    var stylesheetId = '__________cytoscape_stylesheet';
    var className = '__________cytoscape_container';
    var stylesheetAlreadyExists = document.getElementById(stylesheetId) != null;

    if (ctr.className.indexOf(className) < 0) {
      ctr.className = (ctr.className || '') + ' ' + className;
    }

    if (!stylesheetAlreadyExists) {
      var stylesheet = document.createElement('style');
      stylesheet.id = stylesheetId;
      stylesheet.innerHTML = '.' + className + ' { position: relative; }';
      head.insertBefore(stylesheet, head.children[0]); // first so lowest priority
    }

    var computedStyle = window$1.getComputedStyle(ctr);
    var position = computedStyle.getPropertyValue('position');

    if (position === 'static') {
      warn('A Cytoscape container has style position:static and so can not use UI extensions properly');
    }
  }

  r.selection = [undefined, undefined, undefined, undefined, 0]; // Coordinates for selection box, plus enabled flag

  r.bezierProjPcts = [0.05, 0.225, 0.4, 0.5, 0.6, 0.775, 0.95]; //--Pointer-related data

  r.hoverData = {
    down: null,
    last: null,
    downTime: null,
    triggerMode: null,
    dragging: false,
    initialPan: [null, null],
    capture: false
  };
  r.dragData = {
    possibleDragElements: []
  };
  r.touchData = {
    start: null,
    capture: false,
    // These 3 fields related to tap, taphold events
    startPosition: [null, null, null, null, null, null],
    singleTouchStartTime: null,
    singleTouchMoved: true,
    now: [null, null, null, null, null, null],
    earlier: [null, null, null, null, null, null]
  };
  r.redraws = 0;
  r.showFps = options.showFps;
  r.debug = options.debug;
  r.hideEdgesOnViewport = options.hideEdgesOnViewport;
  r.hideLabelsOnViewport = options.hideLabelsOnViewport;
  r.textureOnViewport = options.textureOnViewport;
  r.wheelSensitivity = options.wheelSensitivity;
  r.motionBlurEnabled = options.motionBlur; // on by default

  r.forcedPixelRatio = options.pixelRatio;
  r.motionBlur = options.motionBlur; // for initial kick off

  r.motionBlurOpacity = options.motionBlurOpacity;
  r.motionBlurTransparency = 1 - r.motionBlurOpacity;
  r.motionBlurPxRatio = 1;
  r.mbPxRBlurry = 1; //0.8;

  r.minMbLowQualFrames = 4;
  r.fullQualityMb = false;
  r.clearedForMotionBlur = [];
  r.desktopTapThreshold = options.desktopTapThreshold;
  r.desktopTapThreshold2 = options.desktopTapThreshold * options.desktopTapThreshold;
  r.touchTapThreshold = options.touchTapThreshold;
  r.touchTapThreshold2 = options.touchTapThreshold * options.touchTapThreshold;
  r.tapholdDuration = 500;
  r.bindings = [];
  r.beforeRenderCallbacks = [];
  r.beforeRenderPriorities = {
    // higher priority execs before lower one
    animations: 400,
    eleCalcs: 300,
    eleTxrDeq: 200,
    lyrTxrDeq: 100
  };
  r.registerNodeShapes();
  r.registerArrowShapes();
  r.registerCalculationListeners();
};

BRp$f.notify = function (eventName, eles) {
  var r = this;
  var cy = r.cy; // the renderer can't be notified after it's destroyed

  if (this.destroyed) {
    return;
  }

  if (eventName === 'init') {
    r.load();
    return;
  }

  if (eventName === 'destroy') {
    r.destroy();
    return;
  }

  if (eventName === 'add' || eventName === 'remove' || eventName === 'move' && cy.hasCompoundNodes() || eventName === 'load' || eventName === 'zorder' || eventName === 'mount') {
    r.invalidateCachedZSortedEles();
  }

  if (eventName === 'viewport') {
    r.redrawHint('select', true);
  }

  if (eventName === 'load' || eventName === 'resize' || eventName === 'mount') {
    r.invalidateContainerClientCoordsCache();
    r.matchCanvasSize(r.container);
  }

  r.redrawHint('eles', true);
  r.redrawHint('drag', true);
  this.startRenderLoop();
  this.redraw();
};

BRp$f.destroy = function () {
  var r = this;
  r.destroyed = true;
  r.cy.stopAnimationLoop();

  for (var i = 0; i < r.bindings.length; i++) {
    var binding = r.bindings[i];
    var b = binding;
    var tgt = b.target;
    (tgt.off || tgt.removeEventListener).apply(tgt, b.args);
  }

  r.bindings = [];
  r.beforeRenderCallbacks = [];
  r.onUpdateEleCalcsFns = [];

  if (r.removeObserver) {
    r.removeObserver.disconnect();
  }

  if (r.styleObserver) {
    r.styleObserver.disconnect();
  }

  if (r.labelCalcDiv) {
    try {
      document.body.removeChild(r.labelCalcDiv); // eslint-disable-line no-undef
    } catch (e) {// ie10 issue #1014
    }
  }
};

BRp$f.isHeadless = function () {
  return false;
};

[BRp, BRp$a, BRp$b, BRp$c, BRp$d, BRp$e].forEach(function (props) {
  extend(BRp$f, props);
});
var fullFpsTime = 1000 / 60; // assume 60 frames per second

var defs = {
  setupDequeueing: function setupDequeueing(opts) {
    return function setupDequeueingImpl() {
      var self = this;
      var r = this.renderer;

      if (self.dequeueingSetup) {
        return;
      } else {
        self.dequeueingSetup = true;
      }

      var queueRedraw = util(function () {
        r.redrawHint('eles', true);
        r.redrawHint('drag', true);
        r.redraw();
      }, opts.deqRedrawThreshold);

      var dequeue = function dequeue(willDraw, frameStartTime) {
        var startTime = performanceNow();
        var avgRenderTime = r.averageRedrawTime;
        var renderTime = r.lastRedrawTime;
        var deqd = [];
        var extent = r.cy.extent();
        var pixelRatio = r.getPixelRatio(); // if we aren't in a tick that causes a draw, then the rendered style
        // queue won't automatically be flushed before dequeueing starts

        if (!willDraw) {
          r.flushRenderedStyleQueue();
        }

        while (true) {
          // eslint-disable-line no-constant-condition
          var now$$1 = performanceNow();
          var duration = now$$1 - startTime;
          var frameDuration = now$$1 - frameStartTime;

          if (renderTime < fullFpsTime) {
            // if we're rendering faster than the ideal fps, then do dequeueing
            // during all of the remaining frame time
            var timeAvailable = fullFpsTime - (willDraw ? avgRenderTime : 0);

            if (frameDuration >= opts.deqFastCost * timeAvailable) {
              break;
            }
          } else {
            if (willDraw) {
              if (duration >= opts.deqCost * renderTime || duration >= opts.deqAvgCost * avgRenderTime) {
                break;
              }
            } else if (frameDuration >= opts.deqNoDrawCost * fullFpsTime) {
              break;
            }
          }

          var thisDeqd = opts.deq(self, pixelRatio, extent);

          if (thisDeqd.length > 0) {
            for (var i = 0; i < thisDeqd.length; i++) {
              deqd.push(thisDeqd[i]);
            }
          } else {
            break;
          }
        } // callbacks on dequeue


        if (deqd.length > 0) {
          opts.onDeqd(self, deqd);

          if (!willDraw && opts.shouldRedraw(self, deqd, pixelRatio, extent)) {
            queueRedraw();
          }
        }
      };

      var priority = opts.priority || noop;
      r.beforeRender(dequeue, priority(self));
    };
  }
}; // Uses keys so elements may share the same cache.

var ElementTextureCacheLookup =
/*#__PURE__*/
function () {
  function ElementTextureCacheLookup(getKey) {
    var doesEleInvalidateKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : falsify;

    _classCallCheck(this, ElementTextureCacheLookup);

    this.idsByKey = new Map$1();
    this.keyForId = new Map$1();
    this.cachesByLvl = new Map$1();
    this.lvls = [];
    this.getKey = getKey;
    this.doesEleInvalidateKey = doesEleInvalidateKey;
  }

  _createClass(ElementTextureCacheLookup, [{
    key: "getIdsFor",
    value: function getIdsFor(key) {
      if (key == null) {
        error("Can not get id list for null key");
      }

      var idsByKey = this.idsByKey;
      var ids = this.idsByKey.get(key);

      if (!ids) {
        ids = new Set$1();
        idsByKey.set(key, ids);
      }

      return ids;
    }
  }, {
    key: "addIdForKey",
    value: function addIdForKey(key, id) {
      if (key != null) {
        this.getIdsFor(key).add(id);
      }
    }
  }, {
    key: "deleteIdForKey",
    value: function deleteIdForKey(key, id) {
      if (key != null) {
        this.getIdsFor(key).delete(id);
      }
    }
  }, {
    key: "getNumberOfIdsForKey",
    value: function getNumberOfIdsForKey(key) {
      if (key == null) {
        return 0;
      } else {
        return this.getIdsFor(key).size;
      }
    }
  }, {
    key: "updateKeyMappingFor",
    value: function updateKeyMappingFor(ele) {
      var id = ele.id();
      var prevKey = this.keyForId.get(id);
      var currKey = this.getKey(ele);
      this.deleteIdForKey(prevKey, id);
      this.addIdForKey(currKey, id);
      this.keyForId.set(id, currKey);
    }
  }, {
    key: "deleteKeyMappingFor",
    value: function deleteKeyMappingFor(ele) {
      var id = ele.id();
      var prevKey = this.keyForId.get(id);
      this.deleteIdForKey(prevKey, id);
      this.keyForId.delete(id);
    }
  }, {
    key: "keyHasChangedFor",
    value: function keyHasChangedFor(ele) {
      var id = ele.id();
      var prevKey = this.keyForId.get(id);
      var newKey = this.getKey(ele);
      return prevKey !== newKey;
    }
  }, {
    key: "isInvalid",
    value: function isInvalid(ele) {
      return this.keyHasChangedFor(ele) || this.doesEleInvalidateKey(ele);
    }
  }, {
    key: "getCachesAt",
    value: function getCachesAt(lvl) {
      var cachesByLvl = this.cachesByLvl,
          lvls = this.lvls;
      var caches = cachesByLvl.get(lvl);

      if (!caches) {
        caches = new Map$1();
        cachesByLvl.set(lvl, caches);
        lvls.push(lvl);
      }

      return caches;
    }
  }, {
    key: "getCache",
    value: function getCache(key, lvl) {
      return this.getCachesAt(lvl).get(key);
    }
  }, {
    key: "get",
    value: function get(ele, lvl) {
      var key = this.getKey(ele);
      var cache = this.getCache(key, lvl); // getting for an element may need to add to the id list b/c eles can share keys

      if (cache != null) {
        this.updateKeyMappingFor(ele);
      }

      return cache;
    }
  }, {
    key: "getForCachedKey",
    value: function getForCachedKey(ele, lvl) {
      var key = this.keyForId.get(ele.id()); // n.b. use cached key, not newly computed key

      var cache = this.getCache(key, lvl);
      return cache;
    }
  }, {
    key: "hasCache",
    value: function hasCache(key, lvl) {
      return this.getCachesAt(lvl).has(key);
    }
  }, {
    key: "has",
    value: function has(ele, lvl) {
      var key = this.getKey(ele);
      return this.hasCache(key, lvl);
    }
  }, {
    key: "setCache",
    value: function setCache(key, lvl, cache) {
      cache.key = key;
      this.getCachesAt(lvl).set(key, cache);
    }
  }, {
    key: "set",
    value: function set(ele, lvl, cache) {
      var key = this.getKey(ele);
      this.setCache(key, lvl, cache);
      this.updateKeyMappingFor(ele);
    }
  }, {
    key: "deleteCache",
    value: function deleteCache(key, lvl) {
      this.getCachesAt(lvl).delete(key);
    }
  }, {
    key: "delete",
    value: function _delete(ele, lvl) {
      var key = this.getKey(ele);
      this.deleteCache(key, lvl);
    }
  }, {
    key: "invalidateKey",
    value: function invalidateKey(key) {
      var _this = this;

      this.lvls.forEach(function (lvl) {
        return _this.deleteCache(key, lvl);
      });
    } // returns true if no other eles reference the invalidated cache (n.b. other eles may need the cache with the same key)

  }, {
    key: "invalidate",
    value: function invalidate(ele) {
      var id = ele.id();
      var key = this.keyForId.get(id); // n.b. use stored key rather than current (potential key)

      this.deleteKeyMappingFor(ele);
      var entireKeyInvalidated = this.doesEleInvalidateKey(ele);

      if (entireKeyInvalidated) {
        // clear mapping for current key
        this.invalidateKey(key);
      }

      return entireKeyInvalidated || this.getNumberOfIdsForKey(key) === 0;
    }
  }]);

  return ElementTextureCacheLookup;
}();

var minTxrH = 25; // the size of the texture cache for small height eles (special case)

var txrStepH = 50; // the min size of the regular cache, and the size it increases with each step up

var minLvl = -4; // when scaling smaller than that we don't need to re-render

var maxLvl = 3; // when larger than this scale just render directly (caching is not helpful)

var maxZoom = 7.99; // beyond this zoom level, layered textures are not used

var eleTxrSpacing = 8; // spacing between elements on textures to avoid blitting overlaps

var defTxrWidth = 1024; // default/minimum texture width

var maxTxrW = 1024; // the maximum width of a texture

var maxTxrH = 1024; // the maximum height of a texture

var minUtility = 0.2; // if usage of texture is less than this, it is retired

var maxFullness = 0.8; // fullness of texture after which queue removal is checked

var maxFullnessChecks = 10; // dequeued after this many checks

var deqCost = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame

var deqAvgCost = 0.1; // % of add'l rendering cost compared to average overall redraw time

var deqNoDrawCost = 0.9; // % of avg frame time that can be used for dequeueing when not drawing

var deqFastCost = 0.9; // % of frame time to be used when >60fps

var deqRedrawThreshold = 100; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile

var maxDeqSize = 1; // number of eles to dequeue and render at higher texture in each batch

var getTxrReasons = {
  dequeue: 'dequeue',
  downscale: 'downscale',
  highQuality: 'highQuality'
};
var initDefaults = defaults({
  getKey: null,
  doesEleInvalidateKey: falsify,
  drawElement: null,
  getBoundingBox: null,
  getRotationPoint: null,
  getRotationOffset: null,
  isVisible: trueify,
  allowEdgeTxrCaching: true,
  allowParentTxrCaching: true
});

var ElementTextureCache = function ElementTextureCache(renderer, initOptions) {
  var self = this;
  self.renderer = renderer;
  self.onDequeues = [];
  var opts = initDefaults(initOptions);
  extend(self, opts);
  self.lookup = new ElementTextureCacheLookup(opts.getKey, opts.doesEleInvalidateKey);
  self.setupDequeueing();
};

var ETCp = ElementTextureCache.prototype;
ETCp.reasons = getTxrReasons; // the list of textures in which new subtextures for elements can be placed

ETCp.getTextureQueue = function (txrH) {
  var self = this;
  self.eleImgCaches = self.eleImgCaches || {};
  return self.eleImgCaches[txrH] = self.eleImgCaches[txrH] || [];
}; // the list of usused textures which can be recycled (in use in texture queue)


ETCp.getRetiredTextureQueue = function (txrH) {
  var self = this;
  var rtxtrQs = self.eleImgCaches.retired = self.eleImgCaches.retired || {};
  var rtxtrQ = rtxtrQs[txrH] = rtxtrQs[txrH] || [];
  return rtxtrQ;
}; // queue of element draw requests at different scale levels


ETCp.getElementQueue = function () {
  var self = this;
  var q = self.eleCacheQueue = self.eleCacheQueue || new Heap(function (a, b) {
    return b.reqs - a.reqs;
  });
  return q;
}; // queue of element draw requests at different scale levels (element id lookup)


ETCp.getElementKeyToQueue = function () {
  var self = this;
  var k2q = self.eleKeyToCacheQueue = self.eleKeyToCacheQueue || {};
  return k2q;
};

ETCp.getElement = function (ele, bb, pxRatio, lvl, reason) {
  var self = this;
  var r = this.renderer;
  var zoom = r.cy.zoom();
  var lookup = this.lookup;

  if (bb.w === 0 || bb.h === 0 || isNaN(bb.w) || isNaN(bb.h) || !ele.visible()) {
    return null;
  }

  if (!self.allowEdgeTxrCaching && ele.isEdge() || !self.allowParentTxrCaching && ele.isParent()) {
    return null;
  }

  if (lvl == null) {
    lvl = Math.ceil(log2(zoom * pxRatio));
  }

  if (lvl < minLvl) {
    lvl = minLvl;
  } else if (zoom >= maxZoom || lvl > maxLvl) {
    return null;
  }

  var scale = Math.pow(2, lvl);
  var eleScaledH = bb.h * scale;
  var eleScaledW = bb.w * scale;
  var scaledLabelShown = r.eleTextBiggerThanMin(ele, scale);

  if (!this.isVisible(ele, scaledLabelShown)) {
    return null;
  }

  var eleCache = lookup.get(ele, lvl); // if this get was on an unused/invalidated cache, then restore the texture usage metric

  if (eleCache && eleCache.invalidated) {
    eleCache.invalidated = false;
    eleCache.texture.invalidatedWidth -= eleCache.width;
  }

  if (eleCache) {
    return eleCache;
  }

  var txrH; // which texture height this ele belongs to

  if (eleScaledH <= minTxrH) {
    txrH = minTxrH;
  } else if (eleScaledH <= txrStepH) {
    txrH = txrStepH;
  } else {
    txrH = Math.ceil(eleScaledH / txrStepH) * txrStepH;
  }

  if (eleScaledH > maxTxrH || eleScaledW > maxTxrW) {
    return null; // caching large elements is not efficient
  }

  var txrQ = self.getTextureQueue(txrH); // first try the second last one in case it has space at the end

  var txr = txrQ[txrQ.length - 2];

  var addNewTxr = function addNewTxr() {
    return self.recycleTexture(txrH, eleScaledW) || self.addTexture(txrH, eleScaledW);
  }; // try the last one if there is no second last one


  if (!txr) {
    txr = txrQ[txrQ.length - 1];
  } // if the last one doesn't exist, we need a first one


  if (!txr) {
    txr = addNewTxr();
  } // if there's no room in the current texture, we need a new one


  if (txr.width - txr.usedWidth < eleScaledW) {
    txr = addNewTxr();
  }

  var scalableFrom = function scalableFrom(otherCache) {
    return otherCache && otherCache.scaledLabelShown === scaledLabelShown;
  };

  var deqing = reason && reason === getTxrReasons.dequeue;
  var highQualityReq = reason && reason === getTxrReasons.highQuality;
  var downscaleReq = reason && reason === getTxrReasons.downscale;
  var higherCache; // the nearest cache with a higher level

  for (var l = lvl + 1; l <= maxLvl; l++) {
    var c = lookup.get(ele, l);

    if (c) {
      higherCache = c;
      break;
    }
  }

  var oneUpCache = higherCache && higherCache.level === lvl + 1 ? higherCache : null;

  var downscale = function downscale() {
    txr.context.drawImage(oneUpCache.texture.canvas, oneUpCache.x, 0, oneUpCache.width, oneUpCache.height, txr.usedWidth, 0, eleScaledW, eleScaledH);
  }; // reset ele area in texture


  txr.context.setTransform(1, 0, 0, 1, 0, 0);
  txr.context.clearRect(txr.usedWidth, 0, eleScaledW, txrH);

  if (scalableFrom(oneUpCache)) {
    // then we can relatively cheaply rescale the existing image w/o rerendering
    downscale();
  } else if (scalableFrom(higherCache)) {
    // then use the higher cache for now and queue the next level down
    // to cheaply scale towards the smaller level
    if (highQualityReq) {
      for (var _l = higherCache.level; _l > lvl; _l--) {
        oneUpCache = self.getElement(ele, bb, pxRatio, _l, getTxrReasons.downscale);
      }

      downscale();
    } else {
      self.queueElement(ele, higherCache.level - 1);
      return higherCache;
    }
  } else {
    var lowerCache; // the nearest cache with a lower level

    if (!deqing && !highQualityReq && !downscaleReq) {
      for (var _l2 = lvl - 1; _l2 >= minLvl; _l2--) {
        var _c = lookup.get(ele, _l2);

        if (_c) {
          lowerCache = _c;
          break;
        }
      }
    }

    if (scalableFrom(lowerCache)) {
      // then use the lower quality cache for now and queue the better one for later
      self.queueElement(ele, lvl);
      return lowerCache;
    }

    txr.context.translate(txr.usedWidth, 0);
    txr.context.scale(scale, scale);
    this.drawElement(txr.context, ele, bb, scaledLabelShown, false);
    txr.context.scale(1 / scale, 1 / scale);
    txr.context.translate(-txr.usedWidth, 0);
  }

  eleCache = {
    x: txr.usedWidth,
    texture: txr,
    level: lvl,
    scale: scale,
    width: eleScaledW,
    height: eleScaledH,
    scaledLabelShown: scaledLabelShown
  };
  txr.usedWidth += Math.ceil(eleScaledW + eleTxrSpacing);
  txr.eleCaches.push(eleCache);
  lookup.set(ele, lvl, eleCache);
  self.checkTextureFullness(txr);
  return eleCache;
};

ETCp.invalidateElements = function (eles) {
  for (var i = 0; i < eles.length; i++) {
    this.invalidateElement(eles[i]);
  }
};

ETCp.invalidateElement = function (ele) {
  var self = this;
  var lookup = self.lookup;
  var caches = [];
  var invalid = lookup.isInvalid(ele);

  if (!invalid) {
    return; // override the invalidation request if the element key has not changed
  }

  for (var lvl = minLvl; lvl <= maxLvl; lvl++) {
    var cache = lookup.getForCachedKey(ele, lvl);

    if (cache) {
      caches.push(cache);
    }
  }

  var noOtherElesUseCache = lookup.invalidate(ele);

  if (noOtherElesUseCache) {
    for (var i = 0; i < caches.length; i++) {
      var _cache = caches[i];
      var txr = _cache.texture; // remove space from the texture it belongs to

      txr.invalidatedWidth += _cache.width; // mark the cache as invalidated

      _cache.invalidated = true; // retire the texture if its utility is low

      self.checkTextureUtility(txr);
    }
  } // remove from queue since the old req was for the old state


  self.removeFromQueue(ele);
};

ETCp.checkTextureUtility = function (txr) {
  // invalidate all entries in the cache if the cache size is small
  if (txr.invalidatedWidth >= minUtility * txr.width) {
    this.retireTexture(txr);
  }
};

ETCp.checkTextureFullness = function (txr) {
  // if texture has been mostly filled and passed over several times, remove
  // it from the queue so we don't need to waste time looking at it to put new things
  var self = this;
  var txrQ = self.getTextureQueue(txr.height);

  if (txr.usedWidth / txr.width > maxFullness && txr.fullnessChecks >= maxFullnessChecks) {
    removeFromArray(txrQ, txr);
  } else {
    txr.fullnessChecks++;
  }
};

ETCp.retireTexture = function (txr) {
  var self = this;
  var txrH = txr.height;
  var txrQ = self.getTextureQueue(txrH);
  var lookup = this.lookup; // retire the texture from the active / searchable queue:

  removeFromArray(txrQ, txr);
  txr.retired = true; // remove the refs from the eles to the caches:

  var eleCaches = txr.eleCaches;

  for (var i = 0; i < eleCaches.length; i++) {
    var eleCache = eleCaches[i];
    lookup.deleteCache(eleCache.key, eleCache.level);
  }

  clearArray(eleCaches); // add the texture to a retired queue so it can be recycled in future:

  var rtxtrQ = self.getRetiredTextureQueue(txrH);
  rtxtrQ.push(txr);
};

ETCp.addTexture = function (txrH, minW) {
  var self = this;
  var txrQ = self.getTextureQueue(txrH);
  var txr = {};
  txrQ.push(txr);
  txr.eleCaches = [];
  txr.height = txrH;
  txr.width = Math.max(defTxrWidth, minW);
  txr.usedWidth = 0;
  txr.invalidatedWidth = 0;
  txr.fullnessChecks = 0;
  txr.canvas = self.renderer.makeOffscreenCanvas(txr.width, txr.height);
  txr.context = txr.canvas.getContext('2d');
  return txr;
};

ETCp.recycleTexture = function (txrH, minW) {
  var self = this;
  var txrQ = self.getTextureQueue(txrH);
  var rtxtrQ = self.getRetiredTextureQueue(txrH);

  for (var i = 0; i < rtxtrQ.length; i++) {
    var txr = rtxtrQ[i];

    if (txr.width >= minW) {
      txr.retired = false;
      txr.usedWidth = 0;
      txr.invalidatedWidth = 0;
      txr.fullnessChecks = 0;
      clearArray(txr.eleCaches);
      txr.context.setTransform(1, 0, 0, 1, 0, 0);
      txr.context.clearRect(0, 0, txr.width, txr.height);
      removeFromArray(rtxtrQ, txr);
      txrQ.push(txr);
      return txr;
    }
  }
};

ETCp.queueElement = function (ele, lvl) {
  var self = this;
  var q = self.getElementQueue();
  var k2q = self.getElementKeyToQueue();
  var key = this.getKey(ele);
  var existingReq = k2q[key];

  if (existingReq) {
    // use the max lvl b/c in between lvls are cheap to make
    existingReq.level = Math.max(existingReq.level, lvl);
    existingReq.eles.merge(ele);
    existingReq.reqs++;
    q.updateItem(existingReq);
  } else {
    var req = {
      eles: ele.spawn().merge(ele),
      level: lvl,
      reqs: 1,
      key: key
    };
    q.push(req);
    k2q[key] = req;
  }
};

ETCp.dequeue = function (pxRatio
/*, extent*/
) {
  var self = this;
  var q = self.getElementQueue();
  var k2q = self.getElementKeyToQueue();
  var dequeued = [];
  var lookup = self.lookup;

  for (var i = 0; i < maxDeqSize; i++) {
    if (q.size() > 0) {
      var req = q.pop();
      var key = req.key;
      var ele = req.eles[0]; // all eles have the same key

      var cacheExists = lookup.hasCache(ele, req.level); // clear out the key to req lookup

      k2q[key] = null; // dequeueing isn't necessary with an existing cache

      if (cacheExists) {
        continue;
      }

      dequeued.push(req);
      var bb = self.getBoundingBox(ele);
      self.getElement(ele, bb, pxRatio, req.level, getTxrReasons.dequeue);
    } else {
      break;
    }
  }

  return dequeued;
};

ETCp.removeFromQueue = function (ele) {
  var self = this;
  var q = self.getElementQueue();
  var k2q = self.getElementKeyToQueue();
  var key = this.getKey(ele);
  var req = k2q[key];

  if (req != null) {
    if (req.eles.length === 1) {
      // remove if last ele in the req
      // bring to front of queue
      req.reqs = MAX_INT;
      q.updateItem(req);
      q.pop(); // remove from queue

      k2q[key] = null; // remove from lookup map
    } else {
      // otherwise just remove ele from req
      req.eles.unmerge(ele);
    }
  }
};

ETCp.onDequeue = function (fn) {
  this.onDequeues.push(fn);
};

ETCp.offDequeue = function (fn) {
  removeFromArray(this.onDequeues, fn);
};

ETCp.setupDequeueing = defs.setupDequeueing({
  deqRedrawThreshold: deqRedrawThreshold,
  deqCost: deqCost,
  deqAvgCost: deqAvgCost,
  deqNoDrawCost: deqNoDrawCost,
  deqFastCost: deqFastCost,
  deq: function deq(self, pxRatio, extent) {
    return self.dequeue(pxRatio, extent);
  },
  onDeqd: function onDeqd(self, deqd) {
    for (var i = 0; i < self.onDequeues.length; i++) {
      var fn = self.onDequeues[i];
      fn(deqd);
    }
  },
  shouldRedraw: function shouldRedraw(self, deqd, pxRatio, extent) {
    for (var i = 0; i < deqd.length; i++) {
      var eles = deqd[i].eles;

      for (var j = 0; j < eles.length; j++) {
        var bb = eles[j].boundingBox();

        if (boundingBoxesIntersect(bb, extent)) {
          return true;
        }
      }
    }

    return false;
  },
  priority: function priority(self) {
    return self.renderer.beforeRenderPriorities.eleTxrDeq;
  }
});
var defNumLayers = 1; // default number of layers to use

var minLvl$1 = -4; // when scaling smaller than that we don't need to re-render

var maxLvl$1 = 2; // when larger than this scale just render directly (caching is not helpful)

var maxZoom$1 = 3.99; // beyond this zoom level, layered textures are not used

var deqRedrawThreshold$1 = 50; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile

var refineEleDebounceTime = 50; // time to debounce sharper ele texture updates

var deqCost$1 = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame

var deqAvgCost$1 = 0.1; // % of add'l rendering cost compared to average overall redraw time

var deqNoDrawCost$1 = 0.9; // % of avg frame time that can be used for dequeueing when not drawing

var deqFastCost$1 = 0.9; // % of frame time to be used when >60fps

var maxDeqSize$1 = 1; // number of eles to dequeue and render at higher texture in each batch

var invalidThreshold = 250; // time threshold for disabling b/c of invalidations

var maxLayerArea = 4000 * 4000; // layers can't be bigger than this

var useHighQualityEleTxrReqs = true; // whether to use high quality ele txr requests (generally faster and cheaper in the longterm)
// var log = function(){ console.log.apply( console, arguments ); };

var LayeredTextureCache = function LayeredTextureCache(renderer) {
  var self = this;
  var r = self.renderer = renderer;
  var cy = r.cy;
  self.layersByLevel = {}; // e.g. 2 => [ layer1, layer2, ..., layerN ]

  self.firstGet = true;
  self.lastInvalidationTime = performanceNow() - 2 * invalidThreshold;
  self.skipping = false;
  self.eleTxrDeqs = cy.collection();
  self.scheduleElementRefinement = util(function () {
    self.refineElementTextures(self.eleTxrDeqs);
    self.eleTxrDeqs.unmerge(self.eleTxrDeqs);
  }, refineEleDebounceTime);
  r.beforeRender(function (willDraw, now$$1) {
    if (now$$1 - self.lastInvalidationTime <= invalidThreshold) {
      self.skipping = true;
    } else {
      self.skipping = false;
    }
  });

  var qSort = function qSort(a, b) {
    return b.reqs - a.reqs;
  };

  self.layersQueue = new Heap(qSort);
  self.setupDequeueing();
};

var LTCp = LayeredTextureCache.prototype;
var layerIdPool = 0;
var MAX_INT$1 = Math.pow(2, 53) - 1;

LTCp.makeLayer = function (bb, lvl) {
  var scale = Math.pow(2, lvl);
  var w = Math.ceil(bb.w * scale);
  var h = Math.ceil(bb.h * scale);
  var canvas = this.renderer.makeOffscreenCanvas(w, h);
  var layer = {
    id: layerIdPool = ++layerIdPool % MAX_INT$1,
    bb: bb,
    level: lvl,
    width: w,
    height: h,
    canvas: canvas,
    context: canvas.getContext('2d'),
    eles: [],
    elesQueue: [],
    reqs: 0
  }; // log('make layer %s with w %s and h %s and lvl %s', layer.id, layer.width, layer.height, layer.level);

  var cxt = layer.context;
  var dx = -layer.bb.x1;
  var dy = -layer.bb.y1; // do the transform on creation to save cycles (it's the same for all eles)

  cxt.scale(scale, scale);
  cxt.translate(dx, dy);
  return layer;
};

LTCp.getLayers = function (eles, pxRatio, lvl) {
  var self = this;
  var r = self.renderer;
  var cy = r.cy;
  var zoom = cy.zoom();
  var firstGet = self.firstGet;
  self.firstGet = false; // log('--\nget layers with %s eles', eles.length);
  //log eles.map(function(ele){ return ele.id() }) );

  if (lvl == null) {
    lvl = Math.ceil(log2(zoom * pxRatio));

    if (lvl < minLvl$1) {
      lvl = minLvl$1;
    } else if (zoom >= maxZoom$1 || lvl > maxLvl$1) {
      return null;
    }
  }

  self.validateLayersElesOrdering(lvl, eles);
  var layersByLvl = self.layersByLevel;
  var scale = Math.pow(2, lvl);
  var layers = layersByLvl[lvl] = layersByLvl[lvl] || [];
  var bb;
  var lvlComplete = self.levelIsComplete(lvl, eles);
  var tmpLayers;

  var checkTempLevels = function checkTempLevels() {
    var canUseAsTmpLvl = function canUseAsTmpLvl(l) {
      self.validateLayersElesOrdering(l, eles);

      if (self.levelIsComplete(l, eles)) {
        tmpLayers = layersByLvl[l];
        return true;
      }
    };

    var checkLvls = function checkLvls(dir) {
      if (tmpLayers) {
        return;
      }

      for (var l = lvl + dir; minLvl$1 <= l && l <= maxLvl$1; l += dir) {
        if (canUseAsTmpLvl(l)) {
          break;
        }
      }
    };

    checkLvls(+1);
    checkLvls(-1); // remove the invalid layers; they will be replaced as needed later in this function

    for (var i = layers.length - 1; i >= 0; i--) {
      var layer = layers[i];

      if (layer.invalid) {
        removeFromArray(layers, layer);
      }
    }
  };

  if (!lvlComplete) {
    // if the current level is incomplete, then use the closest, best quality layerset temporarily
    // and later queue the current layerset so we can get the proper quality level soon
    checkTempLevels();
  } else {
    // log('level complete, using existing layers\n--');
    return layers;
  }

  var getBb = function getBb() {
    if (!bb) {
      bb = makeBoundingBox();

      for (var i = 0; i < eles.length; i++) {
        updateBoundingBox(bb, eles[i].boundingBox());
      }
    }

    return bb;
  };

  var makeLayer = function makeLayer(opts) {
    opts = opts || {};
    var after = opts.after;
    getBb();
    var area = bb.w * scale * (bb.h * scale);

    if (area > maxLayerArea) {
      return null;
    }

    var layer = self.makeLayer(bb, lvl);

    if (after != null) {
      var index = layers.indexOf(after) + 1;
      layers.splice(index, 0, layer);
    } else if (opts.insert === undefined || opts.insert) {
      // no after specified => first layer made so put at start
      layers.unshift(layer);
    } // if( tmpLayers ){
    //self.queueLayer( layer );
    // }


    return layer;
  };

  if (self.skipping && !firstGet) {
    // log('skip layers');
    return null;
  } // log('do layers');


  var layer = null;
  var maxElesPerLayer = eles.length / defNumLayers;
  var allowLazyQueueing = !firstGet;

  for (var i = 0; i < eles.length; i++) {
    var ele = eles[i];
    var rs = ele._private.rscratch;
    var caches = rs.imgLayerCaches = rs.imgLayerCaches || {}; // log('look at ele', ele.id());

    var existingLayer = caches[lvl];

    if (existingLayer) {
      // reuse layer for later eles
      // log('reuse layer for', ele.id());
      layer = existingLayer;
      continue;
    }

    if (!layer || layer.eles.length >= maxElesPerLayer || !boundingBoxInBoundingBox(layer.bb, ele.boundingBox())) {
      // log('make new layer for ele %s', ele.id());
      layer = makeLayer({
        insert: true,
        after: layer
      }); // if now layer can be built then we can't use layers at this level

      if (!layer) {
        return null;
      } // log('new layer with id %s', layer.id);

    }

    if (tmpLayers || allowLazyQueueing) {
      // log('queue ele %s in layer %s', ele.id(), layer.id);
      self.queueLayer(layer, ele);
    } else {
      // log('draw ele %s in layer %s', ele.id(), layer.id);
      self.drawEleInLayer(layer, ele, lvl, pxRatio);
    }

    layer.eles.push(ele);
    caches[lvl] = layer;
  } // log('--');


  if (tmpLayers) {
    // then we only queued the current layerset and can't draw it yet
    return tmpLayers;
  }

  if (allowLazyQueueing) {
    // log('lazy queue level', lvl);
    return null;
  }

  return layers;
}; // a layer may want to use an ele cache of a higher level to avoid blurriness
// so the layer level might not equal the ele level


LTCp.getEleLevelForLayerLevel = function (lvl, pxRatio) {
  return lvl;
};

LTCp.drawEleInLayer = function (layer, ele, lvl, pxRatio) {
  var self = this;
  var r = this.renderer;
  var context = layer.context;
  var bb = ele.boundingBox();

  if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
    return;
  }

  lvl = self.getEleLevelForLayerLevel(lvl, pxRatio);
  {
    r.setImgSmoothing(context, false);
  }
  {
    r.drawCachedElement(context, ele, null, null, lvl, useHighQualityEleTxrReqs);
  }
  {
    r.setImgSmoothing(context, true);
  }
};

LTCp.levelIsComplete = function (lvl, eles) {
  var self = this;
  var layers = self.layersByLevel[lvl];

  if (!layers || layers.length === 0) {
    return false;
  }

  var numElesInLayers = 0;

  for (var i = 0; i < layers.length; i++) {
    var layer = layers[i]; // if there are any eles needed to be drawn yet, the level is not complete

    if (layer.reqs > 0) {
      return false;
    } // if the layer is invalid, the level is not complete


    if (layer.invalid) {
      return false;
    }

    numElesInLayers += layer.eles.length;
  } // we should have exactly the number of eles passed in to be complete


  if (numElesInLayers !== eles.length) {
    return false;
  }

  return true;
};

LTCp.validateLayersElesOrdering = function (lvl, eles) {
  var layers = this.layersByLevel[lvl];

  if (!layers) {
    return;
  } // if in a layer the eles are not in the same order, then the layer is invalid
  // (i.e. there is an ele in between the eles in the layer)


  for (var i = 0; i < layers.length; i++) {
    var layer = layers[i];
    var offset = -1; // find the offset

    for (var j = 0; j < eles.length; j++) {
      if (layer.eles[0] === eles[j]) {
        offset = j;
        break;
      }
    }

    if (offset < 0) {
      // then the layer has nonexistant elements and is invalid
      this.invalidateLayer(layer);
      continue;
    } // the eles in the layer must be in the same continuous order, else the layer is invalid


    var o = offset;

    for (var j = 0; j < layer.eles.length; j++) {
      if (layer.eles[j] !== eles[o + j]) {
        // log('invalidate based on ordering', layer.id);
        this.invalidateLayer(layer);
        break;
      }
    }
  }
};

LTCp.updateElementsInLayers = function (eles, update) {
  var self = this;
  var isEles = element(eles[0]); // collect udpated elements (cascaded from the layers) and update each
  // layer itself along the way

  for (var i = 0; i < eles.length; i++) {
    var req = isEles ? null : eles[i];
    var ele = isEles ? eles[i] : eles[i].ele;
    var rs = ele._private.rscratch;
    var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};

    for (var l = minLvl$1; l <= maxLvl$1; l++) {
      var layer = caches[l];

      if (!layer) {
        continue;
      } // if update is a request from the ele cache, then it affects only
      // the matching level


      if (req && self.getEleLevelForLayerLevel(layer.level) !== req.level) {
        continue;
      }

      update(layer, ele, req);
    }
  }
};

LTCp.haveLayers = function () {
  var self = this;
  var haveLayers = false;

  for (var l = minLvl$1; l <= maxLvl$1; l++) {
    var layers = self.layersByLevel[l];

    if (layers && layers.length > 0) {
      haveLayers = true;
      break;
    }
  }

  return haveLayers;
};

LTCp.invalidateElements = function (eles) {
  var self = this;

  if (eles.length === 0) {
    return;
  }

  self.lastInvalidationTime = performanceNow(); // log('update invalidate layer time from eles');

  if (eles.length === 0 || !self.haveLayers()) {
    return;
  }

  self.updateElementsInLayers(eles, function invalAssocLayers(layer, ele, req) {
    self.invalidateLayer(layer);
  });
};

LTCp.invalidateLayer = function (layer) {
  // log('update invalidate layer time');
  this.lastInvalidationTime = performanceNow();

  if (layer.invalid) {
    return;
  } // save cycles


  var lvl = layer.level;
  var eles = layer.eles;
  var layers = this.layersByLevel[lvl]; // log('invalidate layer', layer.id );

  removeFromArray(layers, layer); // layer.eles = [];

  layer.elesQueue = [];
  layer.invalid = true;

  if (layer.replacement) {
    layer.replacement.invalid = true;
  }

  for (var i = 0; i < eles.length; i++) {
    var caches = eles[i]._private.rscratch.imgLayerCaches;

    if (caches) {
      caches[lvl] = null;
    }
  }
};

LTCp.refineElementTextures = function (eles) {
  var self = this; // log('refine', eles.length);

  self.updateElementsInLayers(eles, function refineEachEle(layer, ele, req) {
    var rLyr = layer.replacement;

    if (!rLyr) {
      rLyr = layer.replacement = self.makeLayer(layer.bb, layer.level);
      rLyr.replaces = layer;
      rLyr.eles = layer.eles; // log('make replacement layer %s for %s with level %s', rLyr.id, layer.id, rLyr.level);
    }

    if (!rLyr.reqs) {
      for (var i = 0; i < rLyr.eles.length; i++) {
        self.queueLayer(rLyr, rLyr.eles[i]);
      } // log('queue replacement layer refinement', rLyr.id);

    }
  });
};

LTCp.enqueueElementRefinement = function (ele) {
  this.eleTxrDeqs.merge(ele);
  this.scheduleElementRefinement();
};

LTCp.queueLayer = function (layer, ele) {
  var self = this;
  var q = self.layersQueue;
  var elesQ = layer.elesQueue;
  var hasId = elesQ.hasId = elesQ.hasId || {}; // if a layer is going to be replaced, queuing is a waste of time

  if (layer.replacement) {
    return;
  }

  if (ele) {
    if (hasId[ele.id()]) {
      return;
    }

    elesQ.push(ele);
    hasId[ele.id()] = true;
  }

  if (layer.reqs) {
    layer.reqs++;
    q.updateItem(layer);
  } else {
    layer.reqs = 1;
    q.push(layer);
  }
};

LTCp.dequeue = function (pxRatio) {
  var self = this;
  var q = self.layersQueue;
  var deqd = [];
  var eleDeqs = 0;

  while (eleDeqs < maxDeqSize$1) {
    if (q.size() === 0) {
      break;
    }

    var layer = q.peek(); // if a layer has been or will be replaced, then don't waste time with it

    if (layer.replacement) {
      // log('layer %s in queue skipped b/c it already has a replacement', layer.id);
      q.pop();
      continue;
    } // if this is a replacement layer that has been superceded, then forget it


    if (layer.replaces && layer !== layer.replaces.replacement) {
      // log('layer is no longer the most uptodate replacement; dequeued', layer.id)
      q.pop();
      continue;
    }

    if (layer.invalid) {
      // log('replacement layer %s is invalid; dequeued', layer.id);
      q.pop();
      continue;
    }

    var ele = layer.elesQueue.shift();

    if (ele) {
      // log('dequeue layer %s', layer.id);
      self.drawEleInLayer(layer, ele, layer.level, pxRatio);
      eleDeqs++;
    }

    if (deqd.length === 0) {
      // we need only one entry in deqd to queue redrawing etc
      deqd.push(true);
    } // if the layer has all its eles done, then remove from the queue


    if (layer.elesQueue.length === 0) {
      q.pop();
      layer.reqs = 0; // log('dequeue of layer %s complete', layer.id);
      // when a replacement layer is dequeued, it replaces the old layer in the level

      if (layer.replaces) {
        self.applyLayerReplacement(layer);
      }

      self.requestRedraw();
    }
  }

  return deqd;
};

LTCp.applyLayerReplacement = function (layer) {
  var self = this;
  var layersInLevel = self.layersByLevel[layer.level];
  var replaced = layer.replaces;
  var index = layersInLevel.indexOf(replaced); // if the replaced layer is not in the active list for the level, then replacing
  // refs would be a mistake (i.e. overwriting the true active layer)

  if (index < 0 || replaced.invalid) {
    // log('replacement layer would have no effect', layer.id);
    return;
  }

  layersInLevel[index] = layer; // replace level ref
  // replace refs in eles

  for (var i = 0; i < layer.eles.length; i++) {
    var _p = layer.eles[i]._private;
    var cache = _p.imgLayerCaches = _p.imgLayerCaches || {};

    if (cache) {
      cache[layer.level] = layer;
    }
  } // log('apply replacement layer %s over %s', layer.id, replaced.id);


  self.requestRedraw();
};

LTCp.requestRedraw = util(function () {
  var r = this.renderer;
  r.redrawHint('eles', true);
  r.redrawHint('drag', true);
  r.redraw();
}, 100);
LTCp.setupDequeueing = defs.setupDequeueing({
  deqRedrawThreshold: deqRedrawThreshold$1,
  deqCost: deqCost$1,
  deqAvgCost: deqAvgCost$1,
  deqNoDrawCost: deqNoDrawCost$1,
  deqFastCost: deqFastCost$1,
  deq: function deq(self, pxRatio) {
    return self.dequeue(pxRatio);
  },
  onDeqd: noop,
  shouldRedraw: trueify,
  priority: function priority(self) {
    return self.renderer.beforeRenderPriorities.lyrTxrDeq;
  }
});
var CRp = {};
var impl;

function polygon(context, points) {
  for (var i = 0; i < points.length; i++) {
    var pt = points[i];
    context.lineTo(pt.x, pt.y);
  }
}

function triangleBackcurve(context, points, controlPoint) {
  var firstPt;

  for (var i = 0; i < points.length; i++) {
    var pt = points[i];

    if (i === 0) {
      firstPt = pt;
    }

    context.lineTo(pt.x, pt.y);
  }

  context.quadraticCurveTo(controlPoint.x, controlPoint.y, firstPt.x, firstPt.y);
}

function triangleTee(context, trianglePoints, teePoints) {
  if (context.beginPath) {
    context.beginPath();
  }

  var triPts = trianglePoints;

  for (var i = 0; i < triPts.length; i++) {
    var pt = triPts[i];
    context.lineTo(pt.x, pt.y);
  }

  var teePts = teePoints;
  var firstTeePt = teePoints[0];
  context.moveTo(firstTeePt.x, firstTeePt.y);

  for (var i = 1; i < teePts.length; i++) {
    var pt = teePts[i];
    context.lineTo(pt.x, pt.y);
  }

  if (context.closePath) {
    context.closePath();
  }
}

function circle(context, rx, ry, r) {
  context.arc(rx, ry, r, 0, Math.PI * 2, false);
}

CRp.arrowShapeImpl = function (name) {
  return (impl || (impl = {
    'polygon': polygon,
    'triangle-backcurve': triangleBackcurve,
    'triangle-tee': triangleTee,
    'triangle-cross': triangleTee,
    'circle': circle
  }))[name];
};

var CRp$1 = {};

CRp$1.drawElement = function (context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity) {
  var r = this;

  if (ele.isNode()) {
    r.drawNode(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);
  } else {
    r.drawEdge(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);
  }
};

CRp$1.drawElementOverlay = function (context, ele) {
  var r = this;

  if (ele.isNode()) {
    r.drawNodeOverlay(context, ele);
  } else {
    r.drawEdgeOverlay(context, ele);
  }
};

CRp$1.drawCachedElementPortion = function (context, ele, eleTxrCache, pxRatio, lvl, reason, getRotation) {
  var r = this;
  var bb = eleTxrCache.getBoundingBox(ele);

  if (bb.w === 0 || bb.h === 0) {
    return;
  } // ignore zero size case


  var eleCache = eleTxrCache.getElement(ele, bb, pxRatio, lvl, reason);

  if (eleCache != null) {
    var opacity = ele.pstyle('opacity').pfValue;

    if (opacity === 0) {
      return;
    }

    var theta = getRotation(r, ele);
    var x1 = bb.x1,
        y1 = bb.y1,
        w = bb.w,
        h = bb.h;
    var x, y, sx, sy, smooth;

    if (theta !== 0) {
      var rotPt = eleTxrCache.getRotationPoint(ele);
      sx = rotPt.x;
      sy = rotPt.y;
      context.translate(sx, sy);
      context.rotate(theta);
      smooth = r.getImgSmoothing(context);

      if (!smooth) {
        r.setImgSmoothing(context, true);
      }

      var off = eleTxrCache.getRotationOffset(ele);
      x = off.x;
      y = off.y;
    } else {
      x = x1;
      y = y1;
    }

    var oldGlobalAlpha;

    if (opacity !== 1) {
      oldGlobalAlpha = context.globalAlpha;
      context.globalAlpha = oldGlobalAlpha * opacity;
    }

    context.drawImage(eleCache.texture.canvas, eleCache.x, 0, eleCache.width, eleCache.height, x, y, w, h);

    if (opacity !== 1) {
      context.globalAlpha = oldGlobalAlpha;
    }

    if (theta !== 0) {
      context.rotate(-theta);
      context.translate(-sx, -sy);

      if (!smooth) {
        r.setImgSmoothing(context, false);
      }
    }
  } else {
    eleTxrCache.drawElement(context, ele); // direct draw fallback
  }
};

var getZeroRotation = function getZeroRotation() {
  return 0;
};

var getLabelRotation = function getLabelRotation(r, ele) {
  return r.getTextAngle(ele, null);
};

var getSourceLabelRotation = function getSourceLabelRotation(r, ele) {
  return r.getTextAngle(ele, 'source');
};

var getTargetLabelRotation = function getTargetLabelRotation(r, ele) {
  return r.getTextAngle(ele, 'target');
};

CRp$1.drawCachedElement = function (context, ele, pxRatio, extent, lvl, requestHighQuality) {
  var r = this;
  var _r$data = r.data,
      eleTxrCache = _r$data.eleTxrCache,
      lblTxrCache = _r$data.lblTxrCache,
      slbTxrCache = _r$data.slbTxrCache,
      tlbTxrCache = _r$data.tlbTxrCache;
  var bb = ele.boundingBox();
  var reason = requestHighQuality === true ? eleTxrCache.reasons.highQuality : null;

  if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
    return;
  }

  if (!extent || boundingBoxesIntersect(bb, extent)) {
    r.drawCachedElementPortion(context, ele, eleTxrCache, pxRatio, lvl, reason, getZeroRotation);
    r.drawCachedElementPortion(context, ele, lblTxrCache, pxRatio, lvl, reason, getLabelRotation);

    if (ele.isEdge()) {
      r.drawCachedElementPortion(context, ele, slbTxrCache, pxRatio, lvl, reason, getSourceLabelRotation);
      r.drawCachedElementPortion(context, ele, tlbTxrCache, pxRatio, lvl, reason, getTargetLabelRotation);
    }

    r.drawElementOverlay(context, ele);
  }
};

CRp$1.drawElements = function (context, eles) {
  var r = this;

  for (var i = 0; i < eles.length; i++) {
    var ele = eles[i];
    r.drawElement(context, ele);
  }
};

CRp$1.drawCachedElements = function (context, eles, pxRatio, extent) {
  var r = this;

  for (var i = 0; i < eles.length; i++) {
    var ele = eles[i];
    r.drawCachedElement(context, ele, pxRatio, extent);
  }
};

CRp$1.drawCachedNodes = function (context, eles, pxRatio, extent) {
  var r = this;

  for (var i = 0; i < eles.length; i++) {
    var ele = eles[i];

    if (!ele.isNode()) {
      continue;
    }

    r.drawCachedElement(context, ele, pxRatio, extent);
  }
};

CRp$1.drawLayeredElements = function (context, eles, pxRatio, extent) {
  var r = this;
  var layers = r.data.lyrTxrCache.getLayers(eles, pxRatio);

  if (layers) {
    for (var i = 0; i < layers.length; i++) {
      var layer = layers[i];
      var bb = layer.bb;

      if (bb.w === 0 || bb.h === 0) {
        continue;
      }

      context.drawImage(layer.canvas, bb.x1, bb.y1, bb.w, bb.h);
    }
  } else {
    // fall back on plain caching if no layers
    r.drawCachedElements(context, eles, pxRatio, extent);
  }
};
/* global Path2D */


var CRp$2 = {};

CRp$2.drawEdge = function (context, edge, shiftToOriginWithBb) {
  var drawLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
  var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
  var r = this;
  var rs = edge._private.rscratch;

  if (!edge.visible()) {
    return;
  } // if bezier ctrl pts can not be calculated, then die


  if (rs.badLine || rs.allpts == null || isNaN(rs.allpts[0])) {
    // isNaN in case edge is impossible and browser bugs (e.g. safari)
    return;
  }

  var bb;

  if (shiftToOriginWithBb) {
    bb = shiftToOriginWithBb;
    context.translate(-bb.x1, -bb.y1);
  }

  var opacity = shouldDrawOpacity ? edge.pstyle('opacity').value : 1;
  var lineStyle = edge.pstyle('line-style').value;
  var edgeWidth = edge.pstyle('width').pfValue;
  var lineCap = edge.pstyle('line-cap').value;

  var drawLine = function drawLine() {
    var strokeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : opacity;
    context.lineWidth = edgeWidth;
    context.lineCap = lineCap;
    r.eleStrokeStyle(context, edge, strokeOpacity);
    r.drawEdgePath(edge, context, rs.allpts, lineStyle);
    context.lineCap = 'butt'; // reset for other drawing functions
  };

  var drawOverlay = function drawOverlay() {
    if (!shouldDrawOverlay) {
      return;
    }

    r.drawEdgeOverlay(context, edge);
  };

  var drawArrows = function drawArrows() {
    var arrowOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : opacity;
    r.drawArrowheads(context, edge, arrowOpacity);
  };

  var drawText = function drawText() {
    r.drawElementText(context, edge, null, drawLabel);
  };

  context.lineJoin = 'round';
  var ghost = edge.pstyle('ghost').value === 'yes';

  if (ghost) {
    var gx = edge.pstyle('ghost-offset-x').pfValue;
    var gy = edge.pstyle('ghost-offset-y').pfValue;
    var ghostOpacity = edge.pstyle('ghost-opacity').value;
    var effectiveGhostOpacity = opacity * ghostOpacity;
    context.translate(gx, gy);
    drawLine(effectiveGhostOpacity);
    drawArrows(effectiveGhostOpacity);
    context.translate(-gx, -gy);
  }

  drawLine();
  drawArrows();
  drawOverlay();
  drawText();

  if (shiftToOriginWithBb) {
    context.translate(bb.x1, bb.y1);
  }
};

CRp$2.drawEdgeOverlay = function (context, edge) {
  if (!edge.visible()) {
    return;
  }

  var overlayOpacity = edge.pstyle('overlay-opacity').value;

  if (overlayOpacity === 0) {
    return;
  }

  var r = this;
  var usePaths = r.usePaths();
  var rs = edge._private.rscratch;
  var overlayPadding = edge.pstyle('overlay-padding').pfValue;
  var overlayWidth = 2 * overlayPadding;
  var overlayColor = edge.pstyle('overlay-color').value;
  context.lineWidth = overlayWidth;

  if (rs.edgeType === 'self' && !usePaths) {
    context.lineCap = 'butt';
  } else {
    context.lineCap = 'round';
  }

  r.colorStrokeStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity);
  r.drawEdgePath(edge, context, rs.allpts, 'solid');
};

CRp$2.drawEdgePath = function (edge, context, pts, type) {
  var rs = edge._private.rscratch;
  var canvasCxt = context;
  var path;
  var pathCacheHit = false;
  var usePaths = this.usePaths();
  var lineDashPattern = edge.pstyle('line-dash-pattern').pfValue;
  var lineDashOffset = edge.pstyle('line-dash-offset').pfValue;

  if (usePaths) {
    var pathCacheKey = pts.join('$');
    var keyMatches = rs.pathCacheKey && rs.pathCacheKey === pathCacheKey;

    if (keyMatches) {
      path = context = rs.pathCache;
      pathCacheHit = true;
    } else {
      path = context = new Path2D();
      rs.pathCacheKey = pathCacheKey;
      rs.pathCache = path;
    }
  }

  if (canvasCxt.setLineDash) {
    // for very outofdate browsers
    switch (type) {
      case 'dotted':
        canvasCxt.setLineDash([1, 1]);
        break;

      case 'dashed':
        canvasCxt.setLineDash(lineDashPattern);
        canvasCxt.lineDashOffset = lineDashOffset;
        break;

      case 'solid':
        canvasCxt.setLineDash([]);
        break;
    }
  }

  if (!pathCacheHit && !rs.badLine) {
    if (context.beginPath) {
      context.beginPath();
    }

    context.moveTo(pts[0], pts[1]);

    switch (rs.edgeType) {
      case 'bezier':
      case 'self':
      case 'compound':
      case 'multibezier':
        for (var i = 2; i + 3 < pts.length; i += 4) {
          context.quadraticCurveTo(pts[i], pts[i + 1], pts[i + 2], pts[i + 3]);
        }

        break;

      case 'straight':
      case 'segments':
      case 'haystack':
        for (var _i = 2; _i + 1 < pts.length; _i += 2) {
          context.lineTo(pts[_i], pts[_i + 1]);
        }

        break;
    }
  }

  context = canvasCxt;

  if (usePaths) {
    context.stroke(path);
  } else {
    context.stroke();
  } // reset any line dashes


  if (context.setLineDash) {
    // for very outofdate browsers
    context.setLineDash([]);
  }
};

CRp$2.drawArrowheads = function (context, edge, opacity) {
  var rs = edge._private.rscratch;
  var isHaystack = rs.edgeType === 'haystack';

  if (!isHaystack) {
    this.drawArrowhead(context, edge, 'source', rs.arrowStartX, rs.arrowStartY, rs.srcArrowAngle, opacity);
  }

  this.drawArrowhead(context, edge, 'mid-target', rs.midX, rs.midY, rs.midtgtArrowAngle, opacity);
  this.drawArrowhead(context, edge, 'mid-source', rs.midX, rs.midY, rs.midsrcArrowAngle, opacity);

  if (!isHaystack) {
    this.drawArrowhead(context, edge, 'target', rs.arrowEndX, rs.arrowEndY, rs.tgtArrowAngle, opacity);
  }
};

CRp$2.drawArrowhead = function (context, edge, prefix, x, y, angle, opacity) {
  if (isNaN(x) || x == null || isNaN(y) || y == null || isNaN(angle) || angle == null) {
    return;
  }

  var self = this;
  var arrowShape = edge.pstyle(prefix + '-arrow-shape').value;

  if (arrowShape === 'none') {
    return;
  }

  var arrowClearFill = edge.pstyle(prefix + '-arrow-fill').value === 'hollow' ? 'both' : 'filled';
  var arrowFill = edge.pstyle(prefix + '-arrow-fill').value;
  var edgeWidth = edge.pstyle('width').pfValue;
  var edgeOpacity = edge.pstyle('opacity').value;

  if (opacity === undefined) {
    opacity = edgeOpacity;
  }

  var gco = context.globalCompositeOperation;

  if (opacity !== 1 || arrowFill === 'hollow') {
    // then extra clear is needed
    context.globalCompositeOperation = 'destination-out';
    self.colorFillStyle(context, 255, 255, 255, 1);
    self.colorStrokeStyle(context, 255, 255, 255, 1);
    self.drawArrowShape(edge, context, arrowClearFill, edgeWidth, arrowShape, x, y, angle);
    context.globalCompositeOperation = gco;
  } // otherwise, the opaque arrow clears it for free :)


  var color = edge.pstyle(prefix + '-arrow-color').value;
  self.colorFillStyle(context, color[0], color[1], color[2], opacity);
  self.colorStrokeStyle(context, color[0], color[1], color[2], opacity);
  self.drawArrowShape(edge, context, arrowFill, edgeWidth, arrowShape, x, y, angle);
};

CRp$2.drawArrowShape = function (edge, context, fill, edgeWidth, shape, x, y, angle) {
  var r = this;
  var usePaths = this.usePaths() && shape !== 'triangle-cross';
  var pathCacheHit = false;
  var path;
  var canvasContext = context;
  var translation = {
    x: x,
    y: y
  };
  var scale = edge.pstyle('arrow-scale').value;
  var size = this.getArrowWidth(edgeWidth, scale);
  var shapeImpl = r.arrowShapes[shape];

  if (usePaths) {
    var cache = r.arrowPathCache = r.arrowPathCache || [];
    var key = hashString(shape);
    var cachedPath = cache[key];

    if (cachedPath != null) {
      path = context = cachedPath;
      pathCacheHit = true;
    } else {
      path = context = new Path2D();
      cache[key] = path;
    }
  }

  if (context.beginPath) {
    context.beginPath();
  }

  if (!pathCacheHit) {
    if (usePaths) {
      // store in the path cache with values easily manipulated later
      shapeImpl.draw(context, 1, 0, {
        x: 0,
        y: 0
      }, 1);
    } else {
      shapeImpl.draw(context, size, angle, translation, edgeWidth);
    }
  }

  if (context.closePath) {
    context.closePath();
  }

  context = canvasContext;

  if (usePaths) {
    // set transform to arrow position/orientation
    context.translate(x, y);
    context.rotate(angle);
    context.scale(size, size);
  }

  if (fill === 'filled' || fill === 'both') {
    if (usePaths) {
      context.fill(path);
    } else {
      context.fill();
    }
  }

  if (fill === 'hollow' || fill === 'both') {
    context.lineWidth = (shapeImpl.matchEdgeWidth ? edgeWidth : 1) / (usePaths ? size : 1);
    context.lineJoin = 'miter';

    if (usePaths) {
      context.stroke(path);
    } else {
      context.stroke();
    }
  }

  if (usePaths) {
    // reset transform by applying inverse
    context.scale(1 / size, 1 / size);
    context.rotate(-angle);
    context.translate(-x, -y);
  }
};

var CRp$3 = {};

CRp$3.safeDrawImage = function (context, img, ix, iy, iw, ih, x, y, w, h) {
  // detect problematic cases for old browsers with bad images (cheaper than try-catch)
  if (iw <= 0 || ih <= 0 || w <= 0 || h <= 0) {
    return;
  }

  context.drawImage(img, ix, iy, iw, ih, x, y, w, h);
};

CRp$3.drawInscribedImage = function (context, img, node, index, nodeOpacity) {
  var r = this;
  var pos = node.position();
  var nodeX = pos.x;
  var nodeY = pos.y;
  var styleObj = node.cy().style();
  var getIndexedStyle = styleObj.getIndexedStyle.bind(styleObj);
  var fit = getIndexedStyle(node, 'background-fit', 'value', index);
  var repeat = getIndexedStyle(node, 'background-repeat', 'value', index);
  var nodeW = node.width();
  var nodeH = node.height();
  var paddingX2 = node.padding() * 2;
  var nodeTW = nodeW + (getIndexedStyle(node, 'background-width-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);
  var nodeTH = nodeH + (getIndexedStyle(node, 'background-height-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);
  var rs = node._private.rscratch;
  var clip = node.pstyle('background-clip').value;
  var shouldClip = clip === 'node';
  var imgOpacity = getIndexedStyle(node, 'background-image-opacity', 'value', index) * nodeOpacity;
  var imgW = img.width || img.cachedW;
  var imgH = img.height || img.cachedH; // workaround for broken browsers like ie

  if (null == imgW || null == imgH) {
    document.body.appendChild(img); // eslint-disable-line no-undef

    imgW = img.cachedW = img.width || img.offsetWidth;
    imgH = img.cachedH = img.height || img.offsetHeight;
    document.body.removeChild(img); // eslint-disable-line no-undef
  }

  var w = imgW;
  var h = imgH;

  if (getIndexedStyle(node, 'background-width', 'value', index) !== 'auto') {
    if (getIndexedStyle(node, 'background-width', 'units', index) === '%') {
      w = getIndexedStyle(node, 'background-width', 'pfValue', index) * nodeTW;
    } else {
      w = getIndexedStyle(node, 'background-width', 'pfValue', index);
    }
  }

  if (getIndexedStyle(node, 'background-height', 'value', index) !== 'auto') {
    if (getIndexedStyle(node, 'background-height', 'units', index) === '%') {
      h = getIndexedStyle(node, 'background-height', 'pfValue', index) * nodeTH;
    } else {
      h = getIndexedStyle(node, 'background-height', 'pfValue', index);
    }
  }

  if (w === 0 || h === 0) {
    return; // no point in drawing empty image (and chrome is broken in this case)
  }

  if (fit === 'contain') {
    var scale = Math.min(nodeTW / w, nodeTH / h);
    w *= scale;
    h *= scale;
  } else if (fit === 'cover') {
    var scale = Math.max(nodeTW / w, nodeTH / h);
    w *= scale;
    h *= scale;
  }

  var x = nodeX - nodeTW / 2; // left

  var posXUnits = getIndexedStyle(node, 'background-position-x', 'units', index);
  var posXPfVal = getIndexedStyle(node, 'background-position-x', 'pfValue', index);

  if (posXUnits === '%') {
    x += (nodeTW - w) * posXPfVal;
  } else {
    x += posXPfVal;
  }

  var offXUnits = getIndexedStyle(node, 'background-offset-x', 'units', index);
  var offXPfVal = getIndexedStyle(node, 'background-offset-x', 'pfValue', index);

  if (offXUnits === '%') {
    x += (nodeTW - w) * offXPfVal;
  } else {
    x += offXPfVal;
  }

  var y = nodeY - nodeTH / 2; // top

  var posYUnits = getIndexedStyle(node, 'background-position-y', 'units', index);
  var posYPfVal = getIndexedStyle(node, 'background-position-y', 'pfValue', index);

  if (posYUnits === '%') {
    y += (nodeTH - h) * posYPfVal;
  } else {
    y += posYPfVal;
  }

  var offYUnits = getIndexedStyle(node, 'background-offset-y', 'units', index);
  var offYPfVal = getIndexedStyle(node, 'background-offset-y', 'pfValue', index);

  if (offYUnits === '%') {
    y += (nodeTH - h) * offYPfVal;
  } else {
    y += offYPfVal;
  }

  if (rs.pathCache) {
    x -= nodeX;
    y -= nodeY;
    nodeX = 0;
    nodeY = 0;
  }

  var gAlpha = context.globalAlpha;
  context.globalAlpha = imgOpacity;

  if (repeat === 'no-repeat') {
    if (shouldClip) {
      context.save();

      if (rs.pathCache) {
        context.clip(rs.pathCache);
      } else {
        r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);
        context.clip();
      }
    }

    r.safeDrawImage(context, img, 0, 0, imgW, imgH, x, y, w, h);

    if (shouldClip) {
      context.restore();
    }
  } else {
    var pattern = context.createPattern(img, repeat);
    context.fillStyle = pattern;
    r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);
    context.translate(x, y);
    context.fill();
    context.translate(-x, -y);
  }

  context.globalAlpha = gAlpha;
};

var CRp$4 = {};

CRp$4.eleTextBiggerThanMin = function (ele, scale) {
  if (!scale) {
    var zoom = ele.cy().zoom();
    var pxRatio = this.getPixelRatio();
    var lvl = Math.ceil(log2(zoom * pxRatio)); // the effective texture level

    scale = Math.pow(2, lvl);
  }

  var computedSize = ele.pstyle('font-size').pfValue * scale;
  var minSize = ele.pstyle('min-zoomed-font-size').pfValue;

  if (computedSize < minSize) {
    return false;
  }

  return true;
};

CRp$4.drawElementText = function (context, ele, shiftToOriginWithBb, force, prefix) {
  var useEleOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
  var r = this;

  if (force == null) {
    if (!r.eleTextBiggerThanMin(ele)) {
      return;
    }
  } else if (force === false) {
    return;
  }

  if (ele.isNode()) {
    var label = ele.pstyle('label');

    if (!label || !label.value) {
      return;
    }

    var textHalign = ele.pstyle('text-halign').strValue;

    switch (textHalign) {
      case 'left':
        context.textAlign = 'right';
        break;

      case 'right':
        context.textAlign = 'left';
        break;

      default:
        // e.g. center
        context.textAlign = 'center';
    }

    context.textBaseline = 'bottom';
  } else {
    var label = ele.pstyle('label');
    var srcLabel = ele.pstyle('source-label');
    var tgtLabel = ele.pstyle('target-label');

    if ((!label || !label.value) && (!srcLabel || !srcLabel.value) && (!tgtLabel || !tgtLabel.value)) {
      return;
    }

    context.textAlign = 'center';
    context.textBaseline = 'bottom';
  }

  var applyRotation = !shiftToOriginWithBb;
  var bb;

  if (shiftToOriginWithBb) {
    bb = shiftToOriginWithBb;
    context.translate(-bb.x1, -bb.y1);
  }

  if (prefix == null) {
    r.drawText(context, ele, null, applyRotation, useEleOpacity);

    if (ele.isEdge()) {
      r.drawText(context, ele, 'source', applyRotation, useEleOpacity);
      r.drawText(context, ele, 'target', applyRotation, useEleOpacity);
    }
  } else {
    r.drawText(context, ele, prefix, applyRotation, useEleOpacity);
  }

  if (shiftToOriginWithBb) {
    context.translate(bb.x1, bb.y1);
  }
};

CRp$4.getFontCache = function (context) {
  var cache;
  this.fontCaches = this.fontCaches || [];

  for (var i = 0; i < this.fontCaches.length; i++) {
    cache = this.fontCaches[i];

    if (cache.context === context) {
      return cache;
    }
  }

  cache = {
    context: context
  };
  this.fontCaches.push(cache);
  return cache;
}; // set up canvas context with font
// returns transformed text string


CRp$4.setupTextStyle = function (context, ele) {
  var useEleOpacity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true; // Font style

  var labelStyle = ele.pstyle('font-style').strValue;
  var labelSize = ele.pstyle('font-size').pfValue + 'px';
  var labelFamily = ele.pstyle('font-family').strValue;
  var labelWeight = ele.pstyle('font-weight').strValue;
  var opacity = ele.pstyle('text-opacity').value * (useEleOpacity ? ele.effectiveOpacity() : 1);
  var outlineOpacity = ele.pstyle('text-outline-opacity').value * opacity;
  var color = ele.pstyle('color').value;
  var outlineColor = ele.pstyle('text-outline-color').value;
  context.font = labelStyle + ' ' + labelWeight + ' ' + labelSize + ' ' + labelFamily;
  context.lineJoin = 'round'; // so text outlines aren't jagged

  this.colorFillStyle(context, color[0], color[1], color[2], opacity);
  this.colorStrokeStyle(context, outlineColor[0], outlineColor[1], outlineColor[2], outlineOpacity);
}; // TODO ensure re-used


function roundRect(ctx, x, y, width, height, radius) {
  var radius = radius || 5;
  ctx.beginPath();
  ctx.moveTo(x + radius, y);
  ctx.lineTo(x + width - radius, y);
  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
  ctx.lineTo(x + width, y + height - radius);
  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
  ctx.lineTo(x + radius, y + height);
  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
  ctx.lineTo(x, y + radius);
  ctx.quadraticCurveTo(x, y, x + radius, y);
  ctx.closePath();
  ctx.fill();
}

CRp$4.getTextAngle = function (ele, prefix) {
  var theta;
  var _p = ele._private;
  var rscratch = _p.rscratch;
  var pdash = prefix ? prefix + '-' : '';
  var rotation = ele.pstyle(pdash + 'text-rotation');
  var textAngle = getPrefixedProperty(rscratch, 'labelAngle', prefix);

  if (rotation.strValue === 'autorotate') {
    theta = ele.isEdge() ? textAngle : 0;
  } else if (rotation.strValue === 'none') {
    theta = 0;
  } else {
    theta = rotation.pfValue;
  }

  return theta;
};

CRp$4.drawText = function (context, ele, prefix) {
  var applyRotation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var useEleOpacity = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
  var _p = ele._private;
  var rscratch = _p.rscratch;
  var parentOpacity = useEleOpacity ? ele.effectiveOpacity() : 1;

  if (parentOpacity === 0 || ele.pstyle('text-opacity').value === 0) {
    return;
  } // use 'main' as an alias for the main label (i.e. null prefix)


  if (prefix === 'main') {
    prefix = null;
  }

  var textX = getPrefixedProperty(rscratch, 'labelX', prefix);
  var textY = getPrefixedProperty(rscratch, 'labelY', prefix);
  var text = this.getLabelText(ele, prefix);

  if (text != null && text !== '' && !isNaN(textX) && !isNaN(textY)) {
    this.setupTextStyle(context, ele, useEleOpacity);
    var pdash = prefix ? prefix + '-' : '';
    var textW = getPrefixedProperty(rscratch, 'labelWidth', prefix);
    var textH = getPrefixedProperty(rscratch, 'labelHeight', prefix);
    var marginX = ele.pstyle(pdash + 'text-margin-x').pfValue;
    var marginY = ele.pstyle(pdash + 'text-margin-y').pfValue;
    var isEdge = ele.isEdge();
    var halign = ele.pstyle('text-halign').value;
    var valign = ele.pstyle('text-valign').value;

    if (isEdge) {
      halign = 'center';
      valign = 'center';
    }

    textX += marginX;
    textY += marginY;
    var theta;

    if (!applyRotation) {
      theta = 0;
    } else {
      theta = this.getTextAngle(ele, prefix);
    }

    if (theta !== 0) {
      var orgTextX = textX;
      var orgTextY = textY;
      context.translate(orgTextX, orgTextY);
      context.rotate(theta);
      textX = 0;
      textY = 0;
    }

    switch (valign) {
      case 'top':
        break;

      case 'center':
        textY += textH / 2;
        break;

      case 'bottom':
        textY += textH;
        break;
    }

    var backgroundOpacity = ele.pstyle('text-background-opacity').value;
    var borderOpacity = ele.pstyle('text-border-opacity').value;
    var textBorderWidth = ele.pstyle('text-border-width').pfValue;
    var backgroundPadding = ele.pstyle('text-background-padding').pfValue;

    if (backgroundOpacity > 0 || textBorderWidth > 0 && borderOpacity > 0) {
      var bgX = textX - backgroundPadding;

      switch (halign) {
        case 'left':
          bgX -= textW;
          break;

        case 'center':
          bgX -= textW / 2;
          break;

        case 'right':
          break;
      }

      var bgY = textY - textH - backgroundPadding;
      var bgW = textW + 2 * backgroundPadding;
      var bgH = textH + 2 * backgroundPadding;

      if (backgroundOpacity > 0) {
        var textFill = context.fillStyle;
        var textBackgroundColor = ele.pstyle('text-background-color').value;
        context.fillStyle = 'rgba(' + textBackgroundColor[0] + ',' + textBackgroundColor[1] + ',' + textBackgroundColor[2] + ',' + backgroundOpacity * parentOpacity + ')';
        var styleShape = ele.pstyle('text-background-shape').strValue;

        if (styleShape == 'roundrectangle') {
          roundRect(context, bgX, bgY, bgW, bgH, 2);
        } else {
          context.fillRect(bgX, bgY, bgW, bgH);
        }

        context.fillStyle = textFill;
      }

      if (textBorderWidth > 0 && borderOpacity > 0) {
        var textStroke = context.strokeStyle;
        var textLineWidth = context.lineWidth;
        var textBorderColor = ele.pstyle('text-border-color').value;
        var textBorderStyle = ele.pstyle('text-border-style').value;
        context.strokeStyle = 'rgba(' + textBorderColor[0] + ',' + textBorderColor[1] + ',' + textBorderColor[2] + ',' + borderOpacity * parentOpacity + ')';
        context.lineWidth = textBorderWidth;

        if (context.setLineDash) {
          // for very outofdate browsers
          switch (textBorderStyle) {
            case 'dotted':
              context.setLineDash([1, 1]);
              break;

            case 'dashed':
              context.setLineDash([4, 2]);
              break;

            case 'double':
              context.lineWidth = textBorderWidth / 4; // 50% reserved for white between the two borders

              context.setLineDash([]);
              break;

            case 'solid':
              context.setLineDash([]);
              break;
          }
        }

        context.strokeRect(bgX, bgY, bgW, bgH);

        if (textBorderStyle === 'double') {
          var whiteWidth = textBorderWidth / 2;
          context.strokeRect(bgX + whiteWidth, bgY + whiteWidth, bgW - whiteWidth * 2, bgH - whiteWidth * 2);
        }

        if (context.setLineDash) {
          // for very outofdate browsers
          context.setLineDash([]);
        }

        context.lineWidth = textLineWidth;
        context.strokeStyle = textStroke;
      }
    }

    var lineWidth = 2 * ele.pstyle('text-outline-width').pfValue; // *2 b/c the stroke is drawn centred on the middle

    if (lineWidth > 0) {
      context.lineWidth = lineWidth;
    }

    if (ele.pstyle('text-wrap').value === 'wrap') {
      var lines = getPrefixedProperty(rscratch, 'labelWrapCachedLines', prefix);
      var lineHeight = textH / lines.length;

      switch (valign) {
        case 'top':
          textY -= (lines.length - 1) * lineHeight;
          break;

        case 'center':
        case 'bottom':
          textY -= (lines.length - 1) * lineHeight;
          break;
      }

      for (var l = 0; l < lines.length; l++) {
        if (lineWidth > 0) {
          context.strokeText(lines[l], textX, textY);
        }

        context.fillText(lines[l], textX, textY);
        textY += lineHeight;
      }
    } else {
      if (lineWidth > 0) {
        context.strokeText(text, textX, textY);
      }

      context.fillText(text, textX, textY);
    }

    if (theta !== 0) {
      context.rotate(-theta);
      context.translate(-orgTextX, -orgTextY);
    }
  }
};
/* global Path2D */


var CRp$5 = {};

CRp$5.drawNode = function (context, node, shiftToOriginWithBb) {
  var drawLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
  var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
  var r = this;
  var nodeWidth, nodeHeight;
  var _p = node._private;
  var rs = _p.rscratch;
  var pos = node.position();

  if (!number(pos.x) || !number(pos.y)) {
    return; // can't draw node with undefined position
  }

  if (!node.visible()) {
    return;
  }

  var eleOpacity = shouldDrawOpacity ? node.effectiveOpacity() : 1;
  var usePaths = r.usePaths();
  var path;
  var pathCacheHit = false;
  var padding = node.padding();
  nodeWidth = node.width() + 2 * padding;
  nodeHeight = node.height() + 2 * padding; //
  // setup shift

  var bb;

  if (shiftToOriginWithBb) {
    bb = shiftToOriginWithBb;
    context.translate(-bb.x1, -bb.y1);
  } //
  // load bg image


  var bgImgProp = node.pstyle('background-image');
  var urls = bgImgProp.value;
  var urlDefined = new Array(urls.length);
  var image = new Array(urls.length);
  var numImages = 0;

  for (var i = 0; i < urls.length; i++) {
    var url = urls[i];
    var defd = urlDefined[i] = url != null && url !== 'none';

    if (defd) {
      var bgImgCrossOrigin = node.cy().style().getIndexedStyle(node, 'background-image-crossorigin', 'value', i);
      numImages++; // get image, and if not loaded then ask to redraw when later loaded

      image[i] = r.getCachedImage(url, bgImgCrossOrigin, function () {
        _p.backgroundTimestamp = Date.now();
        node.emitAndNotify('background');
      });
    }
  } //
  // setup styles


  var darkness = node.pstyle('background-blacken').value;
  var borderWidth = node.pstyle('border-width').pfValue;
  var bgOpacity = node.pstyle('background-opacity').value * eleOpacity;
  var borderColor = node.pstyle('border-color').value;
  var borderStyle = node.pstyle('border-style').value;
  var borderOpacity = node.pstyle('border-opacity').value * eleOpacity;
  context.lineJoin = 'miter'; // so borders are square with the node shape

  var setupShapeColor = function setupShapeColor() {
    var bgOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : bgOpacity;
    r.eleFillStyle(context, node, bgOpy);
  };

  var setupBorderColor = function setupBorderColor() {
    var bdrOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : borderOpacity;
    r.colorStrokeStyle(context, borderColor[0], borderColor[1], borderColor[2], bdrOpy);
  }; //
  // setup shape


  var styleShape = node.pstyle('shape').strValue;
  var shapePts = node.pstyle('shape-polygon-points').pfValue;

  if (usePaths) {
    context.translate(pos.x, pos.y);
    var pathCache = r.nodePathCache = r.nodePathCache || [];
    var key = hashStrings(styleShape === 'polygon' ? styleShape + ',' + shapePts.join(',') : styleShape, '' + nodeHeight, '' + nodeWidth);
    var cachedPath = pathCache[key];

    if (cachedPath != null) {
      path = cachedPath;
      pathCacheHit = true;
      rs.pathCache = path;
    } else {
      path = new Path2D();
      pathCache[key] = rs.pathCache = path;
    }
  }

  var drawShape = function drawShape() {
    if (!pathCacheHit) {
      var npos = pos;

      if (usePaths) {
        npos = {
          x: 0,
          y: 0
        };
      }

      r.nodeShapes[r.getNodeShape(node)].draw(path || context, npos.x, npos.y, nodeWidth, nodeHeight);
    }

    if (usePaths) {
      context.fill(path);
    } else {
      context.fill();
    }
  };

  var drawImages = function drawImages() {
    var nodeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : eleOpacity;
    var prevBging = _p.backgrounding;
    var totalCompleted = 0;

    for (var _i = 0; _i < image.length; _i++) {
      if (urlDefined[_i] && image[_i].complete && !image[_i].error) {
        totalCompleted++;
        r.drawInscribedImage(context, image[_i], node, _i, nodeOpacity);
      }
    }

    _p.backgrounding = !(totalCompleted === numImages);

    if (prevBging !== _p.backgrounding) {
      // update style b/c :backgrounding state changed
      node.updateStyle(false);
    }
  };

  var drawPie = function drawPie() {
    var redrawShape = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var pieOpacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : eleOpacity;

    if (r.hasPie(node)) {
      r.drawPie(context, node, pieOpacity); // redraw/restore path if steps after pie need it

      if (redrawShape) {
        if (!usePaths) {
          r.nodeShapes[r.getNodeShape(node)].draw(context, pos.x, pos.y, nodeWidth, nodeHeight);
        }
      }
    }
  };

  var darken = function darken() {
    var darkenOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : eleOpacity;
    var opacity = (darkness > 0 ? darkness : -darkness) * darkenOpacity;
    var c = darkness > 0 ? 0 : 255;

    if (darkness !== 0) {
      r.colorFillStyle(context, c, c, c, opacity);

      if (usePaths) {
        context.fill(path);
      } else {
        context.fill();
      }
    }
  };

  var drawBorder = function drawBorder() {
    if (borderWidth > 0) {
      context.lineWidth = borderWidth;
      context.lineCap = 'butt';

      if (context.setLineDash) {
        // for very outofdate browsers
        switch (borderStyle) {
          case 'dotted':
            context.setLineDash([1, 1]);
            break;

          case 'dashed':
            context.setLineDash([4, 2]);
            break;

          case 'solid':
          case 'double':
            context.setLineDash([]);
            break;
        }
      }

      if (usePaths) {
        context.stroke(path);
      } else {
        context.stroke();
      }

      if (borderStyle === 'double') {
        context.lineWidth = borderWidth / 3;
        var gco = context.globalCompositeOperation;
        context.globalCompositeOperation = 'destination-out';

        if (usePaths) {
          context.stroke(path);
        } else {
          context.stroke();
        }

        context.globalCompositeOperation = gco;
      } // reset in case we changed the border style


      if (context.setLineDash) {
        // for very outofdate browsers
        context.setLineDash([]);
      }
    }
  };

  var drawOverlay = function drawOverlay() {
    if (shouldDrawOverlay) {
      r.drawNodeOverlay(context, node, pos, nodeWidth, nodeHeight);
    }
  };

  var drawText = function drawText() {
    r.drawElementText(context, node, null, drawLabel);
  };

  var ghost = node.pstyle('ghost').value === 'yes';

  if (ghost) {
    var gx = node.pstyle('ghost-offset-x').pfValue;
    var gy = node.pstyle('ghost-offset-y').pfValue;
    var ghostOpacity = node.pstyle('ghost-opacity').value;
    var effGhostOpacity = ghostOpacity * eleOpacity;
    context.translate(gx, gy);
    setupShapeColor(ghostOpacity * bgOpacity);
    drawShape();
    drawImages(effGhostOpacity);
    drawPie(darkness !== 0 || borderWidth !== 0);
    darken(effGhostOpacity);
    setupBorderColor(ghostOpacity * borderOpacity);
    drawBorder();
    context.translate(-gx, -gy);
  }

  setupShapeColor();
  drawShape();
  drawImages();
  drawPie(darkness !== 0 || borderWidth !== 0);
  darken();
  setupBorderColor();
  drawBorder();

  if (usePaths) {
    context.translate(-pos.x, -pos.y);
  }

  drawText();
  drawOverlay(); //
  // clean up shift

  if (shiftToOriginWithBb) {
    context.translate(bb.x1, bb.y1);
  }
};

CRp$5.drawNodeOverlay = function (context, node, pos, nodeWidth, nodeHeight) {
  var r = this;

  if (!node.visible()) {
    return;
  }

  var overlayPadding = node.pstyle('overlay-padding').pfValue;
  var overlayOpacity = node.pstyle('overlay-opacity').value;
  var overlayColor = node.pstyle('overlay-color').value;

  if (overlayOpacity > 0) {
    pos = pos || node.position();

    if (nodeWidth == null || nodeHeight == null) {
      var padding = node.padding();
      nodeWidth = node.width() + 2 * padding;
      nodeHeight = node.height() + 2 * padding;
    }

    r.colorFillStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity);
    r.nodeShapes['roundrectangle'].draw(context, pos.x, pos.y, nodeWidth + overlayPadding * 2, nodeHeight + overlayPadding * 2);
    context.fill();
  }
}; // does the node have at least one pie piece?


CRp$5.hasPie = function (node) {
  node = node[0]; // ensure ele ref

  return node._private.hasPie;
};

CRp$5.drawPie = function (context, node, nodeOpacity, pos) {
  node = node[0]; // ensure ele ref

  pos = pos || node.position();
  var cyStyle = node.cy().style();
  var pieSize = node.pstyle('pie-size');
  var x = pos.x;
  var y = pos.y;
  var nodeW = node.width();
  var nodeH = node.height();
  var radius = Math.min(nodeW, nodeH) / 2; // must fit in node

  var lastPercent = 0; // what % to continue drawing pie slices from on [0, 1]

  var usePaths = this.usePaths();

  if (usePaths) {
    x = 0;
    y = 0;
  }

  if (pieSize.units === '%') {
    radius = radius * pieSize.pfValue;
  } else if (pieSize.pfValue !== undefined) {
    radius = pieSize.pfValue / 2;
  }

  for (var i = 1; i <= cyStyle.pieBackgroundN; i++) {
    // 1..N
    var size = node.pstyle('pie-' + i + '-background-size').value;
    var color = node.pstyle('pie-' + i + '-background-color').value;
    var opacity = node.pstyle('pie-' + i + '-background-opacity').value * nodeOpacity;
    var percent = size / 100; // map integer range [0, 100] to [0, 1]
    // percent can't push beyond 1

    if (percent + lastPercent > 1) {
      percent = 1 - lastPercent;
    }

    var angleStart = 1.5 * Math.PI + 2 * Math.PI * lastPercent; // start at 12 o'clock and go clockwise

    var angleDelta = 2 * Math.PI * percent;
    var angleEnd = angleStart + angleDelta; // ignore if
    // - zero size
    // - we're already beyond the full circle
    // - adding the current slice would go beyond the full circle

    if (size === 0 || lastPercent >= 1 || lastPercent + percent > 1) {
      continue;
    }

    context.beginPath();
    context.moveTo(x, y);
    context.arc(x, y, radius, angleStart, angleEnd);
    context.closePath();
    this.colorFillStyle(context, color[0], color[1], color[2], opacity);
    context.fill();
    lastPercent += percent;
  }
};

var CRp$6 = {};
var motionBlurDelay = 100; // var isFirefox = typeof InstallTrigger !== 'undefined';

CRp$6.getPixelRatio = function () {
  var context = this.data.contexts[0];

  if (this.forcedPixelRatio != null) {
    return this.forcedPixelRatio;
  }

  var backingStore = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;
  return (window.devicePixelRatio || 1) / backingStore; // eslint-disable-line no-undef
};

CRp$6.paintCache = function (context) {
  var caches = this.paintCaches = this.paintCaches || [];
  var needToCreateCache = true;
  var cache;

  for (var i = 0; i < caches.length; i++) {
    cache = caches[i];

    if (cache.context === context) {
      needToCreateCache = false;
      break;
    }
  }

  if (needToCreateCache) {
    cache = {
      context: context
    };
    caches.push(cache);
  }

  return cache;
};

CRp$6.createGradientStyleFor = function (context, shapeStyleName, ele, fill, opacity) {
  var gradientStyle;
  var usePaths = this.usePaths();
  var colors$$1 = ele.pstyle(shapeStyleName + '-gradient-stop-colors').value,
      positions = ele.pstyle(shapeStyleName + '-gradient-stop-positions').pfValue;

  if (fill === 'radial-gradient') {
    if (ele.isEdge()) {
      var start = ele.sourceEndpoint(),
          end = ele.targetEndpoint(),
          mid = ele.midpoint();
      var d1 = dist(start, mid);
      var d2 = dist(end, mid);
      gradientStyle = context.createRadialGradient(mid.x, mid.y, 0, mid.x, mid.y, Math.max(d1, d2));
    } else {
      var pos = usePaths ? {
        x: 0,
        y: 0
      } : ele.position(),
          width = ele.width(),
          height = ele.height();
      gradientStyle = context.createRadialGradient(pos.x, pos.y, 0, pos.x, pos.y, Math.max(width, height));
    }
  } else {
    if (ele.isEdge()) {
      var _start = ele.sourceEndpoint(),
          _end = ele.targetEndpoint();

      gradientStyle = context.createLinearGradient(_start.x, _start.y, _end.x, _end.y);
    } else {
      var _pos = usePaths ? {
        x: 0,
        y: 0
      } : ele.position(),
          _width = ele.width(),
          _height = ele.height(),
          halfWidth = _width / 2,
          halfHeight = _height / 2;

      var direction = ele.pstyle('background-gradient-direction').value;

      switch (direction) {
        case 'to-bottom':
          gradientStyle = context.createLinearGradient(_pos.x, _pos.y - halfHeight, _pos.x, _pos.y + halfHeight);
          break;

        case 'to-top':
          gradientStyle = context.createLinearGradient(_pos.x, _pos.y + halfHeight, _pos.x, _pos.y - halfHeight);
          break;

        case 'to-left':
          gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y, _pos.x + halfWidth, _pos.y);
          break;

        case 'to-right':
          gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y, _pos.x - halfWidth, _pos.y);
          break;

        case 'to-bottom-right':
        case 'to-right-bottom':
          gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y - halfHeight, _pos.x + halfWidth, _pos.y + halfHeight);
          break;

        case 'to-top-right':
        case 'to-right-top':
          gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y + halfHeight, _pos.x + halfWidth, _pos.y - halfHeight);
          break;

        case 'to-bottom-left':
        case 'to-left-bottom':
          gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y - halfHeight, _pos.x - halfWidth, _pos.y + halfHeight);
          break;

        case 'to-top-left':
        case 'to-left-top':
          gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y + halfHeight, _pos.x - halfWidth, _pos.y - halfHeight);
          break;
      }
    }
  }

  if (!gradientStyle) return null; // invalid gradient style

  var hasPositions = positions.length === colors$$1.length;
  var length = colors$$1.length;

  for (var i = 0; i < length; i++) {
    gradientStyle.addColorStop(hasPositions ? positions[i] : i / (length - 1), 'rgba(' + colors$$1[i][0] + ',' + colors$$1[i][1] + ',' + colors$$1[i][2] + ',' + opacity + ')');
  }

  return gradientStyle;
};

CRp$6.gradientFillStyle = function (context, ele, fill, opacity) {
  var gradientStyle = this.createGradientStyleFor(context, 'background', ele, fill, opacity);
  if (!gradientStyle) return null; // error

  context.fillStyle = gradientStyle;
};

CRp$6.colorFillStyle = function (context, r, g, b, a) {
  context.fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')'; // turn off for now, seems context does its own caching
  // var cache = this.paintCache(context);
  // var fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
  // if( cache.fillStyle !== fillStyle ){
  //   context.fillStyle = cache.fillStyle = fillStyle;
  // }
};

CRp$6.eleFillStyle = function (context, ele, opacity) {
  var backgroundFill = ele.pstyle('background-fill').value;

  if (backgroundFill === 'linear-gradient' || backgroundFill === 'radial-gradient') {
    this.gradientFillStyle(context, ele, backgroundFill, opacity);
  } else {
    var backgroundColor = ele.pstyle('background-color').value;
    this.colorFillStyle(context, backgroundColor[0], backgroundColor[1], backgroundColor[2], opacity);
  }
};

CRp$6.gradientStrokeStyle = function (context, ele, fill, opacity) {
  var gradientStyle = this.createGradientStyleFor(context, 'line', ele, fill, opacity);
  if (!gradientStyle) return null; // error

  context.strokeStyle = gradientStyle;
};

CRp$6.colorStrokeStyle = function (context, r, g, b, a) {
  context.strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')'; // turn off for now, seems context does its own caching
  // var cache = this.paintCache(context);
  // var strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
  // if( cache.strokeStyle !== strokeStyle ){
  //   context.strokeStyle = cache.strokeStyle = strokeStyle;
  // }
};

CRp$6.eleStrokeStyle = function (context, ele, opacity) {
  var lineFill = ele.pstyle('line-fill').value;

  if (lineFill === 'linear-gradient' || lineFill === 'radial-gradient') {
    this.gradientStrokeStyle(context, ele, lineFill, opacity);
  } else {
    var lineColor = ele.pstyle('line-color').value;
    this.colorStrokeStyle(context, lineColor[0], lineColor[1], lineColor[2], opacity);
  }
}; // Resize canvas


CRp$6.matchCanvasSize = function (container) {
  var r = this;
  var data = r.data;
  var bb = r.findContainerClientCoords();
  var width = bb[2];
  var height = bb[3];
  var pixelRatio = r.getPixelRatio();
  var mbPxRatio = r.motionBlurPxRatio;

  if (container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE] || container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG]) {
    pixelRatio = mbPxRatio;
  }

  var canvasWidth = width * pixelRatio;
  var canvasHeight = height * pixelRatio;
  var canvas;

  if (canvasWidth === r.canvasWidth && canvasHeight === r.canvasHeight) {
    return; // save cycles if same
  }

  r.fontCaches = null; // resizing resets the style

  var canvasContainer = data.canvasContainer;
  canvasContainer.style.width = width + 'px';
  canvasContainer.style.height = height + 'px';

  for (var i = 0; i < r.CANVAS_LAYERS; i++) {
    canvas = data.canvases[i];
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;
    canvas.style.width = width + 'px';
    canvas.style.height = height + 'px';
  }

  for (var i = 0; i < r.BUFFER_COUNT; i++) {
    canvas = data.bufferCanvases[i];
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;
    canvas.style.width = width + 'px';
    canvas.style.height = height + 'px';
  }

  r.textureMult = 1;

  if (pixelRatio <= 1) {
    canvas = data.bufferCanvases[r.TEXTURE_BUFFER];
    r.textureMult = 2;
    canvas.width = canvasWidth * r.textureMult;
    canvas.height = canvasHeight * r.textureMult;
  }

  r.canvasWidth = canvasWidth;
  r.canvasHeight = canvasHeight;
};

CRp$6.renderTo = function (cxt, zoom, pan, pxRatio) {
  this.render({
    forcedContext: cxt,
    forcedZoom: zoom,
    forcedPan: pan,
    drawAllLayers: true,
    forcedPxRatio: pxRatio
  });
};

CRp$6.render = function (options) {
  options = options || staticEmptyObject();
  var forcedContext = options.forcedContext;
  var drawAllLayers = options.drawAllLayers;
  var drawOnlyNodeLayer = options.drawOnlyNodeLayer;
  var forcedZoom = options.forcedZoom;
  var forcedPan = options.forcedPan;
  var r = this;
  var pixelRatio = options.forcedPxRatio === undefined ? this.getPixelRatio() : options.forcedPxRatio;
  var cy = r.cy;
  var data = r.data;
  var needDraw = data.canvasNeedsRedraw;
  var textureDraw = r.textureOnViewport && !forcedContext && (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming);
  var motionBlur = options.motionBlur !== undefined ? options.motionBlur : r.motionBlur;
  var mbPxRatio = r.motionBlurPxRatio;
  var hasCompoundNodes = cy.hasCompoundNodes();
  var inNodeDragGesture = r.hoverData.draggingEles;
  var inBoxSelection = r.hoverData.selecting || r.touchData.selecting ? true : false;
  motionBlur = motionBlur && !forcedContext && r.motionBlurEnabled && !inBoxSelection;
  var motionBlurFadeEffect = motionBlur;

  if (!forcedContext) {
    if (r.prevPxRatio !== pixelRatio) {
      r.invalidateContainerClientCoordsCache();
      r.matchCanvasSize(r.container);
      r.redrawHint('eles', true);
      r.redrawHint('drag', true);
    }

    r.prevPxRatio = pixelRatio;
  }

  if (!forcedContext && r.motionBlurTimeout) {
    clearTimeout(r.motionBlurTimeout);
  }

  if (motionBlur) {
    if (r.mbFrames == null) {
      r.mbFrames = 0;
    }

    r.mbFrames++;

    if (r.mbFrames < 3) {
      // need several frames before even high quality motionblur
      motionBlurFadeEffect = false;
    } // go to lower quality blurry frames when several m/b frames have been rendered (avoids flashing)


    if (r.mbFrames > r.minMbLowQualFrames) {
      //r.fullQualityMb = false;
      r.motionBlurPxRatio = r.mbPxRBlurry;
    }
  }

  if (r.clearingMotionBlur) {
    r.motionBlurPxRatio = 1;
  } // b/c drawToContext() may be async w.r.t. redraw(), keep track of last texture frame
  // because a rogue async texture frame would clear needDraw


  if (r.textureDrawLastFrame && !textureDraw) {
    needDraw[r.NODE] = true;
    needDraw[r.SELECT_BOX] = true;
  }

  var style = cy.style();
  var zoom = cy.zoom();
  var effectiveZoom = forcedZoom !== undefined ? forcedZoom : zoom;
  var pan = cy.pan();
  var effectivePan = {
    x: pan.x,
    y: pan.y
  };
  var vp = {
    zoom: zoom,
    pan: {
      x: pan.x,
      y: pan.y
    }
  };
  var prevVp = r.prevViewport;
  var viewportIsDiff = prevVp === undefined || vp.zoom !== prevVp.zoom || vp.pan.x !== prevVp.pan.x || vp.pan.y !== prevVp.pan.y; // we want the low quality motionblur only when the viewport is being manipulated etc (where it's not noticed)

  if (!viewportIsDiff && !(inNodeDragGesture && !hasCompoundNodes)) {
    r.motionBlurPxRatio = 1;
  }

  if (forcedPan) {
    effectivePan = forcedPan;
  } // apply pixel ratio


  effectiveZoom *= pixelRatio;
  effectivePan.x *= pixelRatio;
  effectivePan.y *= pixelRatio;
  var eles = r.getCachedZSortedEles();

  function mbclear(context, x, y, w, h) {
    var gco = context.globalCompositeOperation;
    context.globalCompositeOperation = 'destination-out';
    r.colorFillStyle(context, 255, 255, 255, r.motionBlurTransparency);
    context.fillRect(x, y, w, h);
    context.globalCompositeOperation = gco;
  }

  function setContextTransform(context, clear) {
    var ePan, eZoom, w, h;

    if (!r.clearingMotionBlur && (context === data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] || context === data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG])) {
      ePan = {
        x: pan.x * mbPxRatio,
        y: pan.y * mbPxRatio
      };
      eZoom = zoom * mbPxRatio;
      w = r.canvasWidth * mbPxRatio;
      h = r.canvasHeight * mbPxRatio;
    } else {
      ePan = effectivePan;
      eZoom = effectiveZoom;
      w = r.canvasWidth;
      h = r.canvasHeight;
    }

    context.setTransform(1, 0, 0, 1, 0, 0);

    if (clear === 'motionBlur') {
      mbclear(context, 0, 0, w, h);
    } else if (!forcedContext && (clear === undefined || clear)) {
      context.clearRect(0, 0, w, h);
    }

    if (!drawAllLayers) {
      context.translate(ePan.x, ePan.y);
      context.scale(eZoom, eZoom);
    }

    if (forcedPan) {
      context.translate(forcedPan.x, forcedPan.y);
    }

    if (forcedZoom) {
      context.scale(forcedZoom, forcedZoom);
    }
  }

  if (!textureDraw) {
    r.textureDrawLastFrame = false;
  }

  if (textureDraw) {
    r.textureDrawLastFrame = true;

    if (!r.textureCache) {
      r.textureCache = {};
      r.textureCache.bb = cy.mutableElements().boundingBox();
      r.textureCache.texture = r.data.bufferCanvases[r.TEXTURE_BUFFER];
      var cxt = r.data.bufferContexts[r.TEXTURE_BUFFER];
      cxt.setTransform(1, 0, 0, 1, 0, 0);
      cxt.clearRect(0, 0, r.canvasWidth * r.textureMult, r.canvasHeight * r.textureMult);
      r.render({
        forcedContext: cxt,
        drawOnlyNodeLayer: true,
        forcedPxRatio: pixelRatio * r.textureMult
      });
      var vp = r.textureCache.viewport = {
        zoom: cy.zoom(),
        pan: cy.pan(),
        width: r.canvasWidth,
        height: r.canvasHeight
      };
      vp.mpan = {
        x: (0 - vp.pan.x) / vp.zoom,
        y: (0 - vp.pan.y) / vp.zoom
      };
    }

    needDraw[r.DRAG] = false;
    needDraw[r.NODE] = false;
    var context = data.contexts[r.NODE];
    var texture = r.textureCache.texture;
    var vp = r.textureCache.viewport;
    context.setTransform(1, 0, 0, 1, 0, 0);

    if (motionBlur) {
      mbclear(context, 0, 0, vp.width, vp.height);
    } else {
      context.clearRect(0, 0, vp.width, vp.height);
    }

    var outsideBgColor = style.core('outside-texture-bg-color').value;
    var outsideBgOpacity = style.core('outside-texture-bg-opacity').value;
    r.colorFillStyle(context, outsideBgColor[0], outsideBgColor[1], outsideBgColor[2], outsideBgOpacity);
    context.fillRect(0, 0, vp.width, vp.height);
    var zoom = cy.zoom();
    setContextTransform(context, false);
    context.clearRect(vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
    context.drawImage(texture, vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
  } else if (r.textureOnViewport && !forcedContext) {
    // clear the cache since we don't need it
    r.textureCache = null;
  }

  var extent = cy.extent();
  var vpManip = r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming || r.hoverData.draggingEles;
  var hideEdges = r.hideEdgesOnViewport && vpManip;
  var needMbClear = [];
  needMbClear[r.NODE] = !needDraw[r.NODE] && motionBlur && !r.clearedForMotionBlur[r.NODE] || r.clearingMotionBlur;

  if (needMbClear[r.NODE]) {
    r.clearedForMotionBlur[r.NODE] = true;
  }

  needMbClear[r.DRAG] = !needDraw[r.DRAG] && motionBlur && !r.clearedForMotionBlur[r.DRAG] || r.clearingMotionBlur;

  if (needMbClear[r.DRAG]) {
    r.clearedForMotionBlur[r.DRAG] = true;
  }

  if (needDraw[r.NODE] || drawAllLayers || drawOnlyNodeLayer || needMbClear[r.NODE]) {
    var useBuffer = motionBlur && !needMbClear[r.NODE] && mbPxRatio !== 1;
    var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] : data.contexts[r.NODE]);
    var clear = motionBlur && !useBuffer ? 'motionBlur' : undefined;
    setContextTransform(context, clear);

    if (hideEdges) {
      r.drawCachedNodes(context, eles.nondrag, pixelRatio, extent);
    } else {
      r.drawLayeredElements(context, eles.nondrag, pixelRatio, extent);
    }

    if (r.debug) {
      r.drawDebugPoints(context, eles.nondrag);
    }

    if (!drawAllLayers && !motionBlur) {
      needDraw[r.NODE] = false;
    }
  }

  if (!drawOnlyNodeLayer && (needDraw[r.DRAG] || drawAllLayers || needMbClear[r.DRAG])) {
    var useBuffer = motionBlur && !needMbClear[r.DRAG] && mbPxRatio !== 1;
    var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG] : data.contexts[r.DRAG]);
    setContextTransform(context, motionBlur && !useBuffer ? 'motionBlur' : undefined);

    if (hideEdges) {
      r.drawCachedNodes(context, eles.drag, pixelRatio, extent);
    } else {
      r.drawCachedElements(context, eles.drag, pixelRatio, extent);
    }

    if (r.debug) {
      r.drawDebugPoints(context, eles.drag);
    }

    if (!drawAllLayers && !motionBlur) {
      needDraw[r.DRAG] = false;
    }
  }

  if (r.showFps || !drawOnlyNodeLayer && needDraw[r.SELECT_BOX] && !drawAllLayers) {
    var context = forcedContext || data.contexts[r.SELECT_BOX];
    setContextTransform(context);

    if (r.selection[4] == 1 && (r.hoverData.selecting || r.touchData.selecting)) {
      var zoom = r.cy.zoom();
      var borderWidth = style.core('selection-box-border-width').value / zoom;
      context.lineWidth = borderWidth;
      context.fillStyle = 'rgba(' + style.core('selection-box-color').value[0] + ',' + style.core('selection-box-color').value[1] + ',' + style.core('selection-box-color').value[2] + ',' + style.core('selection-box-opacity').value + ')';
      context.fillRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);

      if (borderWidth > 0) {
        context.strokeStyle = 'rgba(' + style.core('selection-box-border-color').value[0] + ',' + style.core('selection-box-border-color').value[1] + ',' + style.core('selection-box-border-color').value[2] + ',' + style.core('selection-box-opacity').value + ')';
        context.strokeRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);
      }
    }

    if (data.bgActivePosistion && !r.hoverData.selecting) {
      var zoom = r.cy.zoom();
      var pos = data.bgActivePosistion;
      context.fillStyle = 'rgba(' + style.core('active-bg-color').value[0] + ',' + style.core('active-bg-color').value[1] + ',' + style.core('active-bg-color').value[2] + ',' + style.core('active-bg-opacity').value + ')';
      context.beginPath();
      context.arc(pos.x, pos.y, style.core('active-bg-size').pfValue / zoom, 0, 2 * Math.PI);
      context.fill();
    }

    var timeToRender = r.lastRedrawTime;

    if (r.showFps && timeToRender) {
      timeToRender = Math.round(timeToRender);
      var fps = Math.round(1000 / timeToRender);
      context.setTransform(1, 0, 0, 1, 0, 0);
      context.fillStyle = 'rgba(255, 0, 0, 0.75)';
      context.strokeStyle = 'rgba(255, 0, 0, 0.75)';
      context.lineWidth = 1;
      context.fillText('1 frame = ' + timeToRender + ' ms = ' + fps + ' fps', 0, 20);
      var maxFps = 60;
      context.strokeRect(0, 30, 250, 20);
      context.fillRect(0, 30, 250 * Math.min(fps / maxFps, 1), 20);
    }

    if (!drawAllLayers) {
      needDraw[r.SELECT_BOX] = false;
    }
  } // motionblur: blit rendered blurry frames


  if (motionBlur && mbPxRatio !== 1) {
    var cxtNode = data.contexts[r.NODE];
    var txtNode = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE];
    var cxtDrag = data.contexts[r.DRAG];
    var txtDrag = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG];

    var drawMotionBlur = function drawMotionBlur(cxt, txt, needClear) {
      cxt.setTransform(1, 0, 0, 1, 0, 0);

      if (needClear || !motionBlurFadeEffect) {
        cxt.clearRect(0, 0, r.canvasWidth, r.canvasHeight);
      } else {
        mbclear(cxt, 0, 0, r.canvasWidth, r.canvasHeight);
      }

      var pxr = mbPxRatio;
      cxt.drawImage(txt, // img
      0, 0, // sx, sy
      r.canvasWidth * pxr, r.canvasHeight * pxr, // sw, sh
      0, 0, // x, y
      r.canvasWidth, r.canvasHeight // w, h
      );
    };

    if (needDraw[r.NODE] || needMbClear[r.NODE]) {
      drawMotionBlur(cxtNode, txtNode, needMbClear[r.NODE]);
      needDraw[r.NODE] = false;
    }

    if (needDraw[r.DRAG] || needMbClear[r.DRAG]) {
      drawMotionBlur(cxtDrag, txtDrag, needMbClear[r.DRAG]);
      needDraw[r.DRAG] = false;
    }
  }

  r.prevViewport = vp;

  if (r.clearingMotionBlur) {
    r.clearingMotionBlur = false;
    r.motionBlurCleared = true;
    r.motionBlur = true;
  }

  if (motionBlur) {
    r.motionBlurTimeout = setTimeout(function () {
      r.motionBlurTimeout = null;
      r.clearedForMotionBlur[r.NODE] = false;
      r.clearedForMotionBlur[r.DRAG] = false;
      r.motionBlur = false;
      r.clearingMotionBlur = !textureDraw;
      r.mbFrames = 0;
      needDraw[r.NODE] = true;
      needDraw[r.DRAG] = true;
      r.redraw();
    }, motionBlurDelay);
  }

  if (!forcedContext) {
    cy.emit('render');
  }
};

var CRp$7 = {}; // @O Polygon drawing

CRp$7.drawPolygonPath = function (context, x, y, width, height, points) {
  var halfW = width / 2;
  var halfH = height / 2;

  if (context.beginPath) {
    context.beginPath();
  }

  context.moveTo(x + halfW * points[0], y + halfH * points[1]);

  for (var i = 1; i < points.length / 2; i++) {
    context.lineTo(x + halfW * points[i * 2], y + halfH * points[i * 2 + 1]);
  }

  context.closePath();
}; // Round rectangle drawing


CRp$7.drawRoundRectanglePath = function (context, x, y, width, height) {
  var halfWidth = width / 2;
  var halfHeight = height / 2;
  var cornerRadius = getRoundRectangleRadius(width, height);

  if (context.beginPath) {
    context.beginPath();
  } // Start at top middle


  context.moveTo(x, y - halfHeight); // Arc from middle top to right side

  context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius); // Arc from right side to bottom

  context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius); // Arc from bottom to left side

  context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius); // Arc from left side to topBorder

  context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius); // Join line

  context.lineTo(x, y - halfHeight);
  context.closePath();
};

CRp$7.drawBottomRoundRectanglePath = function (context, x, y, width, height) {
  var halfWidth = width / 2;
  var halfHeight = height / 2;
  var cornerRadius = getRoundRectangleRadius(width, height);

  if (context.beginPath) {
    context.beginPath();
  } // Start at top middle


  context.moveTo(x, y - halfHeight);
  context.lineTo(x + halfWidth, y - halfHeight);
  context.lineTo(x + halfWidth, y);
  context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);
  context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);
  context.lineTo(x - halfWidth, y - halfHeight);
  context.lineTo(x, y - halfHeight);
  context.closePath();
};

CRp$7.drawCutRectanglePath = function (context, x, y, width, height) {
  var halfWidth = width / 2;
  var halfHeight = height / 2;
  var cornerLength = getCutRectangleCornerLength();

  if (context.beginPath) {
    context.beginPath();
  }

  context.moveTo(x - halfWidth + cornerLength, y - halfHeight);
  context.lineTo(x + halfWidth - cornerLength, y - halfHeight);
  context.lineTo(x + halfWidth, y - halfHeight + cornerLength);
  context.lineTo(x + halfWidth, y + halfHeight - cornerLength);
  context.lineTo(x + halfWidth - cornerLength, y + halfHeight);
  context.lineTo(x - halfWidth + cornerLength, y + halfHeight);
  context.lineTo(x - halfWidth, y + halfHeight - cornerLength);
  context.lineTo(x - halfWidth, y - halfHeight + cornerLength);
  context.closePath();
};

CRp$7.drawBarrelPath = function (context, x, y, width, height) {
  var halfWidth = width / 2;
  var halfHeight = height / 2;
  var xBegin = x - halfWidth;
  var xEnd = x + halfWidth;
  var yBegin = y - halfHeight;
  var yEnd = y + halfHeight;
  var barrelCurveConstants = getBarrelCurveConstants(width, height);
  var wOffset = barrelCurveConstants.widthOffset;
  var hOffset = barrelCurveConstants.heightOffset;
  var ctrlPtXOffset = barrelCurveConstants.ctrlPtOffsetPct * wOffset;

  if (context.beginPath) {
    context.beginPath();
  }

  context.moveTo(xBegin, yBegin + hOffset);
  context.lineTo(xBegin, yEnd - hOffset);
  context.quadraticCurveTo(xBegin + ctrlPtXOffset, yEnd, xBegin + wOffset, yEnd);
  context.lineTo(xEnd - wOffset, yEnd);
  context.quadraticCurveTo(xEnd - ctrlPtXOffset, yEnd, xEnd, yEnd - hOffset);
  context.lineTo(xEnd, yBegin + hOffset);
  context.quadraticCurveTo(xEnd - ctrlPtXOffset, yBegin, xEnd - wOffset, yBegin);
  context.lineTo(xBegin + wOffset, yBegin);
  context.quadraticCurveTo(xBegin + ctrlPtXOffset, yBegin, xBegin, yBegin + hOffset);
  context.closePath();
};

var sin0 = Math.sin(0);
var cos0 = Math.cos(0);
var sin = {};
var cos = {};
var ellipseStepSize = Math.PI / 40;

for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {
  sin[i] = Math.sin(i);
  cos[i] = Math.cos(i);
}

CRp$7.drawEllipsePath = function (context, centerX, centerY, width, height) {
  if (context.beginPath) {
    context.beginPath();
  }

  if (context.ellipse) {
    context.ellipse(centerX, centerY, width / 2, height / 2, 0, 0, 2 * Math.PI);
  } else {
    var xPos, yPos;
    var rw = width / 2;
    var rh = height / 2;

    for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {
      xPos = centerX - rw * sin[i] * sin0 + rw * cos[i] * cos0;
      yPos = centerY + rh * cos[i] * sin0 + rh * sin[i] * cos0;

      if (i === 0) {
        context.moveTo(xPos, yPos);
      } else {
        context.lineTo(xPos, yPos);
      }
    }
  }

  context.closePath();
};
/* global atob, ArrayBuffer, Uint8Array, Blob */


var CRp$8 = {};

CRp$8.createBuffer = function (w, h) {
  var buffer = document.createElement('canvas'); // eslint-disable-line no-undef

  buffer.width = w;
  buffer.height = h;
  return [buffer, buffer.getContext('2d')];
};

CRp$8.bufferCanvasImage = function (options) {
  var cy = this.cy;
  var eles = cy.mutableElements();
  var bb = eles.boundingBox();
  var ctrRect = this.findContainerClientCoords();
  var width = options.full ? Math.ceil(bb.w) : ctrRect[2];
  var height = options.full ? Math.ceil(bb.h) : ctrRect[3];
  var specdMaxDims = number(options.maxWidth) || number(options.maxHeight);
  var pxRatio = this.getPixelRatio();
  var scale = 1;

  if (options.scale !== undefined) {
    width *= options.scale;
    height *= options.scale;
    scale = options.scale;
  } else if (specdMaxDims) {
    var maxScaleW = Infinity;
    var maxScaleH = Infinity;

    if (number(options.maxWidth)) {
      maxScaleW = scale * options.maxWidth / width;
    }

    if (number(options.maxHeight)) {
      maxScaleH = scale * options.maxHeight / height;
    }

    scale = Math.min(maxScaleW, maxScaleH);
    width *= scale;
    height *= scale;
  }

  if (!specdMaxDims) {
    width *= pxRatio;
    height *= pxRatio;
    scale *= pxRatio;
  }

  var buffCanvas = document.createElement('canvas'); // eslint-disable-line no-undef

  buffCanvas.width = width;
  buffCanvas.height = height;
  buffCanvas.style.width = width + 'px';
  buffCanvas.style.height = height + 'px';
  var buffCxt = buffCanvas.getContext('2d'); // Rasterize the layers, but only if container has nonzero size

  if (width > 0 && height > 0) {
    buffCxt.clearRect(0, 0, width, height);
    buffCxt.globalCompositeOperation = 'source-over';
    var zsortedEles = this.getCachedZSortedEles();

    if (options.full) {
      // draw the full bounds of the graph
      buffCxt.translate(-bb.x1 * scale, -bb.y1 * scale);
      buffCxt.scale(scale, scale);
      this.drawElements(buffCxt, zsortedEles);
      buffCxt.scale(1 / scale, 1 / scale);
      buffCxt.translate(bb.x1 * scale, bb.y1 * scale);
    } else {
      // draw the current view
      var pan = cy.pan();
      var translation = {
        x: pan.x * scale,
        y: pan.y * scale
      };
      scale *= cy.zoom();
      buffCxt.translate(translation.x, translation.y);
      buffCxt.scale(scale, scale);
      this.drawElements(buffCxt, zsortedEles);
      buffCxt.scale(1 / scale, 1 / scale);
      buffCxt.translate(-translation.x, -translation.y);
    } // need to fill bg at end like this in order to fill cleared transparent pixels in jpgs


    if (options.bg) {
      buffCxt.globalCompositeOperation = 'destination-over';
      buffCxt.fillStyle = options.bg;
      buffCxt.rect(0, 0, width, height);
      buffCxt.fill();
    }
  }

  return buffCanvas;
};

function b64ToBlob(b64, mimeType) {
  var bytes = atob(b64);
  var buff = new ArrayBuffer(bytes.length);
  var buffUint8 = new Uint8Array(buff);

  for (var i = 0; i < bytes.length; i++) {
    buffUint8[i] = bytes.charCodeAt(i);
  }

  return new Blob([buff], {
    type: mimeType
  });
}

function b64UriToB64(b64uri) {
  var i = b64uri.indexOf(',');
  return b64uri.substr(i + 1);
}

function output(options, canvas, mimeType) {
  var getB64Uri = function getB64Uri() {
    return canvas.toDataURL(mimeType, options.quality);
  };

  switch (options.output) {
    case 'blob-promise':
      return new Promise$1(function (resolve, reject) {
        try {
          canvas.toBlob(function (blob) {
            if (blob != null) {
              resolve(blob);
            } else {
              reject(new Error('`canvas.toBlob()` sent a null value in its callback'));
            }
          }, mimeType, options.quality);
        } catch (err) {
          reject(err);
        }
      });

    case 'blob':
      return b64ToBlob(b64UriToB64(getB64Uri()), mimeType);

    case 'base64':
      return b64UriToB64(getB64Uri());

    case 'base64uri':
    default:
      return getB64Uri();
  }
}

CRp$8.png = function (options) {
  return output(options, this.bufferCanvasImage(options), 'image/png');
};

CRp$8.jpg = function (options) {
  return output(options, this.bufferCanvasImage(options), 'image/jpeg');
};

var CRp$9 = {};

CRp$9.nodeShapeImpl = function (name, context, centerX, centerY, width, height, points) {
  switch (name) {
    case 'ellipse':
      return this.drawEllipsePath(context, centerX, centerY, width, height);

    case 'polygon':
      return this.drawPolygonPath(context, centerX, centerY, width, height, points);

    case 'roundrectangle':
    case 'round-rectangle':
      return this.drawRoundRectanglePath(context, centerX, centerY, width, height);

    case 'cutrectangle':
    case 'cut-rectangle':
      return this.drawCutRectanglePath(context, centerX, centerY, width, height);

    case 'bottomroundrectangle':
    case 'bottom-round-rectangle':
      return this.drawBottomRoundRectanglePath(context, centerX, centerY, width, height);

    case 'barrel':
      return this.drawBarrelPath(context, centerX, centerY, width, height);
  }
};

var CR = CanvasRenderer;
var CRp$a = CanvasRenderer.prototype;
CRp$a.CANVAS_LAYERS = 3; //

CRp$a.SELECT_BOX = 0;
CRp$a.DRAG = 1;
CRp$a.NODE = 2;
CRp$a.BUFFER_COUNT = 3; //

CRp$a.TEXTURE_BUFFER = 0;
CRp$a.MOTIONBLUR_BUFFER_NODE = 1;
CRp$a.MOTIONBLUR_BUFFER_DRAG = 2;

function CanvasRenderer(options) {
  var r = this;
  r.data = {
    canvases: new Array(CRp$a.CANVAS_LAYERS),
    contexts: new Array(CRp$a.CANVAS_LAYERS),
    canvasNeedsRedraw: new Array(CRp$a.CANVAS_LAYERS),
    bufferCanvases: new Array(CRp$a.BUFFER_COUNT),
    bufferContexts: new Array(CRp$a.CANVAS_LAYERS)
  };
  var tapHlOff = '-webkit-tap-highlight-color: rgba(0,0,0,0);';
  r.data.canvasContainer = document.createElement('div'); // eslint-disable-line no-undef

  var containerStyle = r.data.canvasContainer.style;
  r.data.canvasContainer.setAttribute('style', tapHlOff);
  containerStyle.position = 'relative';
  containerStyle.zIndex = '0';
  containerStyle.overflow = 'hidden';
  var container = options.cy.container();
  container.appendChild(r.data.canvasContainer);

  if ((container.getAttribute('style') || '').indexOf(tapHlOff) < 0) {
    container.setAttribute('style', (container.getAttribute('style') || '') + tapHlOff);
  }

  for (var i = 0; i < CRp$a.CANVAS_LAYERS; i++) {
    var canvas = r.data.canvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef

    r.data.contexts[i] = canvas.getContext('2d');
    canvas.setAttribute('style', '-webkit-user-select: none; -moz-user-select: -moz-none; user-select: none; -webkit-tap-highlight-color: rgba(0,0,0,0); outline-style: none;' + (ms() ? ' -ms-touch-action: none; touch-action: none; ' : ''));
    canvas.style.position = 'absolute';
    canvas.setAttribute('data-id', 'layer' + i);
    canvas.style.zIndex = String(CRp$a.CANVAS_LAYERS - i);
    r.data.canvasContainer.appendChild(canvas);
    r.data.canvasNeedsRedraw[i] = false;
  }

  r.data.topCanvas = r.data.canvases[0];
  r.data.canvases[CRp$a.NODE].setAttribute('data-id', 'layer' + CRp$a.NODE + '-node');
  r.data.canvases[CRp$a.SELECT_BOX].setAttribute('data-id', 'layer' + CRp$a.SELECT_BOX + '-selectbox');
  r.data.canvases[CRp$a.DRAG].setAttribute('data-id', 'layer' + CRp$a.DRAG + '-drag');

  for (var i = 0; i < CRp$a.BUFFER_COUNT; i++) {
    r.data.bufferCanvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef

    r.data.bufferContexts[i] = r.data.bufferCanvases[i].getContext('2d');
    r.data.bufferCanvases[i].style.position = 'absolute';
    r.data.bufferCanvases[i].setAttribute('data-id', 'buffer' + i);
    r.data.bufferCanvases[i].style.zIndex = String(-i - 1);
    r.data.bufferCanvases[i].style.visibility = 'hidden'; //r.data.canvasContainer.appendChild(r.data.bufferCanvases[i]);
  }

  r.pathsEnabled = true;
  var emptyBb = makeBoundingBox();

  var getBoxCenter = function getBoxCenter(bb) {
    return {
      x: (bb.x1 + bb.x2) / 2,
      y: (bb.y1 + bb.y2) / 2
    };
  };

  var getCenterOffset = function getCenterOffset(bb) {
    return {
      x: -bb.w / 2,
      y: -bb.h / 2
    };
  };

  var backgroundTimestampHasChanged = function backgroundTimestampHasChanged(ele) {
    var _p = ele[0]._private;
    var same = _p.oldBackgroundTimestamp === _p.backgroundTimestamp;
    return !same;
  };

  var getStyleKey = function getStyleKey(ele) {
    return ele[0]._private.nodeKey;
  };

  var getLabelKey = function getLabelKey(ele) {
    return ele[0]._private.labelStyleKey;
  };

  var getSourceLabelKey = function getSourceLabelKey(ele) {
    return ele[0]._private.sourceLabelStyleKey;
  };

  var getTargetLabelKey = function getTargetLabelKey(ele) {
    return ele[0]._private.targetLabelStyleKey;
  };

  var drawElement = function drawElement(context, ele, bb, scaledLabelShown, useEleOpacity) {
    return r.drawElement(context, ele, bb, false, false, useEleOpacity);
  };

  var drawLabel = function drawLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {
    return r.drawElementText(context, ele, bb, scaledLabelShown, 'main', useEleOpacity);
  };

  var drawSourceLabel = function drawSourceLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {
    return r.drawElementText(context, ele, bb, scaledLabelShown, 'source', useEleOpacity);
  };

  var drawTargetLabel = function drawTargetLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {
    return r.drawElementText(context, ele, bb, scaledLabelShown, 'target', useEleOpacity);
  };

  var getElementBox = function getElementBox(ele) {
    ele.boundingBox();
    return ele[0]._private.bodyBounds;
  };

  var getLabelBox = function getLabelBox(ele) {
    ele.boundingBox();
    return ele[0]._private.labelBounds.main || emptyBb;
  };

  var getSourceLabelBox = function getSourceLabelBox(ele) {
    ele.boundingBox();
    return ele[0]._private.labelBounds.source || emptyBb;
  };

  var getTargetLabelBox = function getTargetLabelBox(ele) {
    ele.boundingBox();
    return ele[0]._private.labelBounds.target || emptyBb;
  };

  var isLabelVisibleAtScale = function isLabelVisibleAtScale(ele, scaledLabelShown) {
    return scaledLabelShown;
  };

  var getElementRotationPoint = function getElementRotationPoint(ele) {
    return getBoxCenter(getElementBox(ele));
  };

  var addTextMargin = function addTextMargin(pt, ele) {
    return {
      x: pt.x + ele.pstyle('text-margin-x').pfValue,
      y: pt.y + ele.pstyle('text-margin-y').pfValue
    };
  };

  var getRsPt = function getRsPt(ele, x, y) {
    var rs = ele[0]._private.rscratch;
    return {
      x: rs[x],
      y: rs[y]
    };
  };

  var getLabelRotationPoint = function getLabelRotationPoint(ele) {
    return addTextMargin(getRsPt(ele, 'labelX', 'labelY'), ele);
  };

  var getSourceLabelRotationPoint = function getSourceLabelRotationPoint(ele) {
    return addTextMargin(getRsPt(ele, 'sourceLabelX', 'sourceLabelY'), ele);
  };

  var getTargetLabelRotationPoint = function getTargetLabelRotationPoint(ele) {
    return addTextMargin(getRsPt(ele, 'targetLabelX', 'targetLabelY'), ele);
  };

  var getElementRotationOffset = function getElementRotationOffset(ele) {
    return getCenterOffset(getElementBox(ele));
  };

  var getSourceLabelRotationOffset = function getSourceLabelRotationOffset(ele) {
    return getCenterOffset(getSourceLabelBox(ele));
  };

  var getTargetLabelRotationOffset = function getTargetLabelRotationOffset(ele) {
    return getCenterOffset(getTargetLabelBox(ele));
  };

  var getLabelRotationOffset = function getLabelRotationOffset(ele) {
    var bb = getLabelBox(ele);
    var p = getCenterOffset(getLabelBox(ele));

    if (ele.isNode()) {
      switch (ele.pstyle('text-halign').value) {
        case 'left':
          p.x = -bb.w;
          break;

        case 'right':
          p.x = 0;
          break;
      }

      switch (ele.pstyle('text-valign').value) {
        case 'top':
          p.y = -bb.h;
          break;

        case 'bottom':
          p.y = 0;
          break;
      }
    }

    return p;
  };

  var eleTxrCache = r.data.eleTxrCache = new ElementTextureCache(r, {
    getKey: getStyleKey,
    doesEleInvalidateKey: backgroundTimestampHasChanged,
    drawElement: drawElement,
    getBoundingBox: getElementBox,
    getRotationPoint: getElementRotationPoint,
    getRotationOffset: getElementRotationOffset,
    allowEdgeTxrCaching: false,
    allowParentTxrCaching: false
  });
  var lblTxrCache = r.data.lblTxrCache = new ElementTextureCache(r, {
    getKey: getLabelKey,
    drawElement: drawLabel,
    getBoundingBox: getLabelBox,
    getRotationPoint: getLabelRotationPoint,
    getRotationOffset: getLabelRotationOffset,
    isVisible: isLabelVisibleAtScale
  });
  var slbTxrCache = r.data.slbTxrCache = new ElementTextureCache(r, {
    getKey: getSourceLabelKey,
    drawElement: drawSourceLabel,
    getBoundingBox: getSourceLabelBox,
    getRotationPoint: getSourceLabelRotationPoint,
    getRotationOffset: getSourceLabelRotationOffset,
    isVisible: isLabelVisibleAtScale
  });
  var tlbTxrCache = r.data.tlbTxrCache = new ElementTextureCache(r, {
    getKey: getTargetLabelKey,
    drawElement: drawTargetLabel,
    getBoundingBox: getTargetLabelBox,
    getRotationPoint: getTargetLabelRotationPoint,
    getRotationOffset: getTargetLabelRotationOffset,
    isVisible: isLabelVisibleAtScale
  });
  var lyrTxrCache = r.data.lyrTxrCache = new LayeredTextureCache(r);
  r.onUpdateEleCalcs(function invalidateTextureCaches(willDraw, eles) {
    // each cache should check for sub-key diff to see that the update affects that cache particularly
    eleTxrCache.invalidateElements(eles);
    lblTxrCache.invalidateElements(eles);
    slbTxrCache.invalidateElements(eles);
    tlbTxrCache.invalidateElements(eles); // any change invalidates the layers

    lyrTxrCache.invalidateElements(eles); // update the old bg timestamp so diffs can be done in the ele txr caches

    for (var _i = 0; _i < eles.length; _i++) {
      var _p = eles[_i]._private;
      _p.oldBackgroundTimestamp = _p.backgroundTimestamp;
    }
  });

  var refineInLayers = function refineInLayers(reqs) {
    for (var i = 0; i < reqs.length; i++) {
      lyrTxrCache.enqueueElementRefinement(reqs[i].ele);
    }
  };

  eleTxrCache.onDequeue(refineInLayers);
  lblTxrCache.onDequeue(refineInLayers);
  slbTxrCache.onDequeue(refineInLayers);
  tlbTxrCache.onDequeue(refineInLayers);
}

CRp$a.redrawHint = function (group, bool$$1) {
  var r = this;

  switch (group) {
    case 'eles':
      r.data.canvasNeedsRedraw[CRp$a.NODE] = bool$$1;
      break;

    case 'drag':
      r.data.canvasNeedsRedraw[CRp$a.DRAG] = bool$$1;
      break;

    case 'select':
      r.data.canvasNeedsRedraw[CRp$a.SELECT_BOX] = bool$$1;
      break;
  }
}; // whether to use Path2D caching for drawing


var pathsImpld = typeof Path2D !== 'undefined';

CRp$a.path2dEnabled = function (on) {
  if (on === undefined) {
    return this.pathsEnabled;
  }

  this.pathsEnabled = on ? true : false;
};

CRp$a.usePaths = function () {
  return pathsImpld && this.pathsEnabled;
};

CRp$a.setImgSmoothing = function (context, bool$$1) {
  if (context.imageSmoothingEnabled != null) {
    context.imageSmoothingEnabled = bool$$1;
  } else {
    context.webkitImageSmoothingEnabled = bool$$1;
    context.mozImageSmoothingEnabled = bool$$1;
    context.msImageSmoothingEnabled = bool$$1;
  }
};

CRp$a.getImgSmoothing = function (context) {
  if (context.imageSmoothingEnabled != null) {
    return context.imageSmoothingEnabled;
  } else {
    return context.webkitImageSmoothingEnabled || context.mozImageSmoothingEnabled || context.msImageSmoothingEnabled;
  }
};

CRp$a.makeOffscreenCanvas = function (width, height) {
  var canvas;

  if ((typeof OffscreenCanvas === "undefined" ? "undefined" : _typeof(OffscreenCanvas)) !== "undefined") {
    canvas = new OffscreenCanvas(width, height);
  } else {
    canvas = document.createElement('canvas'); // eslint-disable-line no-undef

    canvas.width = width;
    canvas.height = height;
  }

  return canvas;
};

[CRp, CRp$1, CRp$2, CRp$3, CRp$4, CRp$5, CRp$6, CRp$7, CRp$8, CRp$9].forEach(function (props) {
  extend(CRp$a, props);
});
var renderer = [{
  name: 'null',
  impl: NullRenderer
}, {
  name: 'base',
  impl: BR
}, {
  name: 'canvas',
  impl: CR
}];
var incExts = [{
  type: 'layout',
  extensions: layout
}, {
  type: 'renderer',
  extensions: renderer
}];
var extensions = {}; // registered modules for extensions, indexed by name

var modules = {};

function setExtension(type, name, registrant) {
  var ext = registrant;

  var overrideErr = function overrideErr(field) {
    error('Can not register `' + name + '` for `' + type + '` since `' + field + '` already exists in the prototype and can not be overridden');
  };

  if (type === 'core') {
    if (Core.prototype[name]) {
      return overrideErr(name);
    } else {
      Core.prototype[name] = registrant;
    }
  } else if (type === 'collection') {
    if (Collection.prototype[name]) {
      return overrideErr(name);
    } else {
      Collection.prototype[name] = registrant;
    }
  } else if (type === 'layout') {
    // fill in missing layout functions in the prototype
    var Layout = function Layout(options) {
      this.options = options;
      registrant.call(this, options); // make sure layout has _private for use w/ std apis like .on()

      if (!plainObject(this._private)) {
        this._private = {};
      }

      this._private.cy = options.cy;
      this._private.listeners = [];
      this.createEmitter();
    };

    var layoutProto = Layout.prototype = Object.create(registrant.prototype);
    var optLayoutFns = [];

    for (var i = 0; i < optLayoutFns.length; i++) {
      var fnName = optLayoutFns[i];

      layoutProto[fnName] = layoutProto[fnName] || function () {
        return this;
      };
    } // either .start() or .run() is defined, so autogen the other


    if (layoutProto.start && !layoutProto.run) {
      layoutProto.run = function () {
        this.start();
        return this;
      };
    } else if (!layoutProto.start && layoutProto.run) {
      layoutProto.start = function () {
        this.run();
        return this;
      };
    }

    var regStop = registrant.prototype.stop;

    layoutProto.stop = function () {
      var opts = this.options;

      if (opts && opts.animate) {
        var anis = this.animations;

        if (anis) {
          for (var _i = 0; _i < anis.length; _i++) {
            anis[_i].stop();
          }
        }
      }

      if (regStop) {
        regStop.call(this);
      } else {
        this.emit('layoutstop');
      }

      return this;
    };

    if (!layoutProto.destroy) {
      layoutProto.destroy = function () {
        return this;
      };
    }

    layoutProto.cy = function () {
      return this._private.cy;
    };

    var getCy = function getCy(layout) {
      return layout._private.cy;
    };

    var emitterOpts = {
      addEventFields: function addEventFields(layout, evt) {
        evt.layout = layout;
        evt.cy = getCy(layout);
        evt.target = layout;
      },
      bubble: function bubble() {
        return true;
      },
      parent: function parent(layout) {
        return getCy(layout);
      }
    };
    extend(layoutProto, {
      createEmitter: function createEmitter() {
        this._private.emitter = new Emitter(emitterOpts, this);
        return this;
      },
      emitter: function emitter() {
        return this._private.emitter;
      },
      on: function on(evt, cb) {
        this.emitter().on(evt, cb);
        return this;
      },
      one: function one(evt, cb) {
        this.emitter().one(evt, cb);
        return this;
      },
      once: function once(evt, cb) {
        this.emitter().one(evt, cb);
        return this;
      },
      removeListener: function removeListener(evt, cb) {
        this.emitter().removeListener(evt, cb);
        return this;
      },
      emit: function emit(evt, params) {
        this.emitter().emit(evt, params);
        return this;
      }
    });
    define$3.eventAliasesOn(layoutProto);
    ext = Layout; // replace with our wrapped layout
  } else if (type === 'renderer' && name !== 'null' && name !== 'base') {
    // user registered renderers inherit from base
    var BaseRenderer = getExtension('renderer', 'base');
    var bProto = BaseRenderer.prototype;
    var RegistrantRenderer = registrant;
    var rProto = registrant.prototype;

    var Renderer = function Renderer() {
      BaseRenderer.apply(this, arguments);
      RegistrantRenderer.apply(this, arguments);
    };

    var proto = Renderer.prototype;

    for (var pName in bProto) {
      var pVal = bProto[pName];
      var existsInR = rProto[pName] != null;

      if (existsInR) {
        return overrideErr(pName);
      }

      proto[pName] = pVal; // take impl from base
    }

    for (var _pName in rProto) {
      proto[_pName] = rProto[_pName]; // take impl from registrant
    }

    bProto.clientFunctions.forEach(function (name) {
      proto[name] = proto[name] || function () {
        error('Renderer does not implement `renderer.' + name + '()` on its prototype');
      };
    });
    ext = Renderer;
  }

  return setMap({
    map: extensions,
    keys: [type, name],
    value: ext
  });
}

function getExtension(type, name) {
  return getMap({
    map: extensions,
    keys: [type, name]
  });
}

function setModule(type, name, moduleType, moduleName, registrant) {
  return setMap({
    map: modules,
    keys: [type, name, moduleType, moduleName],
    value: registrant
  });
}

function getModule(type, name, moduleType, moduleName) {
  return getMap({
    map: modules,
    keys: [type, name, moduleType, moduleName]
  });
}

var extension = function extension() {
  // e.g. extension('renderer', 'svg')
  if (arguments.length === 2) {
    return getExtension.apply(null, arguments);
  } // e.g. extension('renderer', 'svg', { ... })
  else if (arguments.length === 3) {
      return setExtension.apply(null, arguments);
    } // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse')
    else if (arguments.length === 4) {
        return getModule.apply(null, arguments);
      } // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse', { ... })
      else if (arguments.length === 5) {
          return setModule.apply(null, arguments);
        } else {
          error('Invalid extension access syntax');
        }
}; // allows a core instance to access extensions internally


Core.prototype.extension = extension; // included extensions

incExts.forEach(function (group) {
  group.extensions.forEach(function (ext) {
    setExtension(group.type, ext.name, ext.impl);
  });
}); // (useful for init)

var Stylesheet = function Stylesheet() {
  if (!(this instanceof Stylesheet)) {
    return new Stylesheet();
  }

  this.length = 0;
};

var sheetfn = Stylesheet.prototype;

sheetfn.instanceString = function () {
  return 'stylesheet';
}; // just store the selector to be parsed later


sheetfn.selector = function (selector) {
  var i = this.length++;
  this[i] = {
    selector: selector,
    properties: []
  };
  return this; // chaining
}; // just store the property to be parsed later


sheetfn.css = function (name, value) {
  var i = this.length - 1;

  if (string(name)) {
    this[i].properties.push({
      name: name,
      value: value
    });
  } else if (plainObject(name)) {
    var map = name;
    var propNames = Object.keys(map);

    for (var j = 0; j < propNames.length; j++) {
      var key = propNames[j];
      var mapVal = map[key];

      if (mapVal == null) {
        continue;
      }

      var prop = Style.properties[key] || Style.properties[dash2camel(key)];

      if (prop == null) {
        continue;
      }

      var _name = prop.name;
      var _value = mapVal;
      this[i].properties.push({
        name: _name,
        value: _value
      });
    }
  }

  return this; // chaining
};

sheetfn.style = sheetfn.css; // generate a real style object from the dummy stylesheet

sheetfn.generateStyle = function (cy) {
  var style$$1 = new Style(cy);
  return this.appendToStyle(style$$1);
}; // append a dummy stylesheet object on a real style object


sheetfn.appendToStyle = function (style$$1) {
  for (var i = 0; i < this.length; i++) {
    var context = this[i];
    var selector = context.selector;
    var props = context.properties;
    style$$1.selector(selector); // apply selector

    for (var j = 0; j < props.length; j++) {
      var prop = props[j];
      style$$1.css(prop.name, prop.value); // apply property
    }
  }

  return style$$1;
};

var version = "3.4.2";

var cytoscape = function cytoscape(options) {
  // if no options specified, use default
  if (options === undefined) {
    options = {};
  } // create instance


  if (plainObject(options)) {
    return new Core(options);
  } // allow for registration of extensions
  else if (string(options)) {
      return extension.apply(extension, arguments);
    }
}; // e.g. cytoscape.use( require('cytoscape-foo'), bar )


cytoscape.use = function (ext) {
  var args = Array.prototype.slice.call(arguments, 1); // args to pass to ext

  args.unshift(cytoscape); // cytoscape is first arg to ext

  ext.apply(null, args);
  return this;
}; // replaced by build system


cytoscape.version = version; // expose public apis (mostly for extensions)

cytoscape.stylesheet = cytoscape.Stylesheet = Stylesheet;
module.exports = cytoscape;
},{"lodash.debounce":"node_modules/lodash.debounce/index.js","heap":"node_modules/heap/index.js"}],"node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"node_modules/jquery/dist/jquery.js":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
var define;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		noModule: true
	};

	function DOMEval( code, doc, node ) {
		doc = doc || document;

		var i,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {
				if ( node[ i ] ) {
					script[ i ] = node[ i ];
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.3.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		div.style.position = "absolute";
		scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5
		) );
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),
		val = curCSS( elem, dimension, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox;

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = valueIsBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ dimension ] );

	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	if ( val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {

		val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];

		// offsetWidth/offsetHeight provide border-box values
		valueIsBorderBox = true;
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),
				isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra && boxModelAdjustment(
					elem,
					dimension,
					extra,
					isBorderBox,
					styles
				);

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && support.scrollboxSize() === styles.position ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

},{"process":"node_modules/process/browser.js"}],"nLinks.json":[function(require,module,exports) {
module.exports = {
  "nodes": [{
    "data": {
      "id": "Abbas,James",
      "group": "IAFSE",
      "label": "Abbas,James",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Abbaszadegan,Morteza",
      "group": "IAFSE",
      "label": "Abbaszadegan,Morteza",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Abbott,David Ralph",
      "group": "CLAS",
      "label": "Abbott,David Ralph",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Abbott,Joshua K",
      "group": "GIOS",
      "label": "Abbott,Joshua K",
      "links": 2,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Abdelmonem,Angie",
      "group": "CLAS",
      "label": "Abdelmonem,Angie",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Aberle,James T",
      "group": "IAFSE",
      "label": "Aberle,James T",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Abry,Tashia",
      "group": "CLAS",
      "label": "Abry,Tashia",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Adame,Bradley Joseph",
      "group": "CLAS",
      "label": "Adame,Bradley Joseph",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Adams,Gary B",
      "group": "CLAS",
      "label": "Adams,Gary B",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Adams,James Brewster",
      "group": "IAFSE",
      "label": "Adams,James Brewster",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Adams,Jeffrey M",
      "group": "CONHI",
      "label": "Adams,Jeffrey M",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Adams,Marc Anthony",
      "group": "CHS",
      "label": "Adams,Marc Anthony",
      "links": 3,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Adamson,Eric Thomas",
      "group": "CLAS",
      "label": "Adamson,Eric Thomas",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Adamson,Joni Lynn",
      "group": "CLAS",
      "label": "Adamson,Joni Lynn",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Adelman,Madelaine Beth",
      "group": "CLAS",
      "label": "Adelman,Madelaine Beth",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Adrian,Ronald John",
      "group": "IAFSE",
      "label": "Adrian,Ronald John",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Aggarwal,Rimjhim M",
      "group": "GIOS",
      "label": "Aggarwal,Rimjhim M",
      "links": 6,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Agusdinata,Buyung",
      "group": "GIOS",
      "label": "Agusdinata,Buyung",
      "links": 2,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Ahn,Gail-Joon",
      "group": "IAFSE",
      "label": "Ahn,Gail-Joon",
      "links": 8,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Ainsworth,Barbara Ellen",
      "group": "CHS",
      "label": "Ainsworth,Barbara Ellen",
      "links": 2,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Aktipis,C Athena",
      "group": "CLAS",
      "label": "Aktipis,C Athena",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Alarcon,Ricardo O",
      "group": "CLAS",
      "label": "Alarcon,Ricardo O",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Alford,Eddie Jim",
      "group": "CISA",
      "label": "Alford,Eddie Jim",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Alford,Terry Lynn",
      "group": "IAFSE",
      "label": "Alford,Terry Lynn",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Allee,David Ray",
      "group": "IAFSE",
      "label": "Allee,David Ray",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Allen,Daniel",
      "group": "CISA",
      "label": "Allen,Daniel",
      "links": 2,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Allen,James Paul",
      "group": "CLAS",
      "label": "Allen,James Paul",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Alum,Absar",
      "group": "IAFSE",
      "label": "Alum,Absar",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Amazeen,Eric",
      "group": "CLAS",
      "label": "Amazeen,Eric",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Amdam,Gro Vang",
      "group": "CLAS",
      "label": "Amdam,Gro Vang",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ames,Victoria E",
      "group": "LAW",
      "label": "Ames,Victoria E",
      "links": 2,
      "group_code": 6
    }
  }, {
    "data": {
      "id": "Amparano,Julie A",
      "group": "ARTS",
      "label": "Amparano,Julie A",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Amresh,Ashish",
      "group": "IAFSE",
      "label": "Amresh,Ashish",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Anbar,Ariel David",
      "group": "CLAS",
      "label": "Anbar,Ariel David",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Andereck,Kathleen L",
      "group": "PUBSRV",
      "label": "Andereck,Kathleen L",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Anderies,John M",
      "group": "CLAS",
      "label": "Anderies,John M",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Anderson-Rowland,Mary Ruth",
      "group": "IAFSE",
      "label": "Anderson-Rowland,Mary Ruth",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Anderson,James R",
      "group": "IAFSE",
      "label": "Anderson,James R",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Anderson,Karen S",
      "group": "CLAS",
      "label": "Anderson,Karen S",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Andino,Jean M",
      "group": "IAFSE",
      "label": "Andino,Jean M",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Androff Jr,David Kime",
      "group": "PUBSRV",
      "label": "Androff Jr,David Kime",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Angadi,Siddhartha Subhashchand",
      "group": "CHS",
      "label": "Angadi,Siddhartha Subhashchand",
      "links": 3,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Angell,Charles Austen",
      "group": "CLAS",
      "label": "Angell,Charles Austen",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Angilletta,Michael",
      "group": "CLAS",
      "label": "Angilletta,Michael",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ankeny,Casey J",
      "group": "IAFSE",
      "label": "Ankeny,Casey J",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Anokye,Akua D",
      "group": "ARTS",
      "label": "Anokye,Akua D",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Anselin,Luc E",
      "group": "CLAS",
      "label": "Anselin,Luc E",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Anthony,Elizabeth",
      "group": "PUBSRV",
      "label": "Anthony,Elizabeth",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Archambault,Leanna",
      "group": "MLFTC",
      "label": "Archambault,Leanna",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Ariaratnam,Samuel T",
      "group": "IAFSE",
      "label": "Ariaratnam,Samuel T",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Arrowsmith,Ramon",
      "group": "CLAS",
      "label": "Arrowsmith,Ramon",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Artemiadis,Panagiotis K.",
      "group": "IAFSE",
      "label": "Artemiadis,Panagiotis K.",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Artiles,Alfredo",
      "group": "MLFTC",
      "label": "Artiles,Alfredo",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Ashcraft,Robert F",
      "group": "PUBSRV",
      "label": "Ashcraft,Robert F",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Ashford,Jose Barry",
      "group": "PUBSRV",
      "label": "Ashford,Jose Barry",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Askin,Ronald Gene",
      "group": "IAFSE",
      "label": "Askin,Ronald Gene",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Asphaug,Erik",
      "group": "CLAS",
      "label": "Asphaug,Erik",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Atkinson,Robert Kenneth",
      "group": "IAFSE",
      "label": "Atkinson,Robert Kenneth",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Aukes,Daniel Mcconnell",
      "group": "IAFSE",
      "label": "Aukes,Daniel Mcconnell",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Aviles-Santiago,Manuel Gerardo",
      "group": "CISA",
      "label": "Aviles-Santiago,Manuel Gerardo",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Axel,Joseph B",
      "group": "EVPP",
      "label": "Axel,Joseph B",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Ayer,Steven",
      "group": "IAFSE",
      "label": "Ayer,Steven",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Ayon,Cecilia",
      "group": "PUBSRV",
      "label": "Ayon,Cecilia",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Ayyanar,Raja",
      "group": "IAFSE",
      "label": "Ayyanar,Raja",
      "links": 6,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Azuma,Tamiko",
      "group": "CHS",
      "label": "Azuma,Tamiko",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Baker,Dale Rose",
      "group": "MLFTC",
      "label": "Baker,Dale Rose",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Bakkaloglu,Bertan",
      "group": "IAFSE",
      "label": "Bakkaloglu,Bertan",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Balanis,Constantine A",
      "group": "IAFSE",
      "label": "Balanis,Constantine A",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Balasooriya,Janaka Lalit",
      "group": "IAFSE",
      "label": "Balasooriya,Janaka Lalit",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Baldwin,Marjorie L",
      "group": "WPC",
      "label": "Baldwin,Marjorie L",
      "links": 1,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Ball,Deborah",
      "group": "MLFTC",
      "label": "Ball,Deborah",
      "links": 2,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Ball,Rebecca",
      "group": "ARTS",
      "label": "Ball,Rebecca",
      "links": 3,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Baluch,Debra Page",
      "group": "CLAS",
      "label": "Baluch,Debra Page",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Banerjee,Ayan",
      "group": "IAFSE",
      "label": "Banerjee,Ayan",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Bansal,Srividya Kona",
      "group": "IAFSE",
      "label": "Bansal,Srividya Kona",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Barab,Sasha A.",
      "group": "MLFTC",
      "label": "Barab,Sasha A.",
      "links": 2,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Baral,Chitta Ranjan",
      "group": "IAFSE",
      "label": "Baral,Chitta Ranjan",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Barber,Jonathan",
      "group": "OBF",
      "label": "Barber,Jonathan",
      "links": 1,
      "group_code": 12
    }
  }, {
    "data": {
      "id": "Barnaby,Hugh James",
      "group": "IAFSE",
      "label": "Barnaby,Hugh James",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Barnard,Wendy Miedel",
      "group": "ISTL",
      "label": "Barnard,Wendy Miedel",
      "links": 1,
      "group_code": 13
    }
  }, {
    "data": {
      "id": "Barrera,Manuel",
      "group": "CLAS",
      "label": "Barrera,Manuel",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Barrila,Jennifer A",
      "group": "BDI",
      "label": "Barrila,Jennifer A",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Barton,C Michael",
      "group": "CLAS",
      "label": "Barton,C Michael",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Basham,Melody Ann",
      "group": "CLAS",
      "label": "Basham,Melody Ann",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Batalden,Stephen K",
      "group": "CLAS",
      "label": "Batalden,Stephen K",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Bateman,Heather Lyn",
      "group": "CISA",
      "label": "Bateman,Heather Lyn",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Bates,Denise Eileen",
      "group": "CISA",
      "label": "Bates,Denise Eileen",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Batova,Tatiana",
      "group": "CISA",
      "label": "Batova,Tatiana",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Baxter,Aryn R",
      "group": "MLFTC",
      "label": "Baxter,Aryn R",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Bazzi,Rida A",
      "group": "IAFSE",
      "label": "Bazzi,Rida A",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Beal,Sarah Elaine",
      "group": "MLFTC",
      "label": "Beal,Sarah Elaine",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Bean,Heather",
      "group": "CLAS",
      "label": "Bean,Heather",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Beardsley,Adam Peter",
      "group": "CLAS",
      "label": "Beardsley,Adam Peter",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Beardsley,Audrey Lee",
      "group": "MLFTC",
      "label": "Beardsley,Audrey Lee",
      "links": 2,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Bearup,Wylie K",
      "group": "IAFSE",
      "label": "Bearup,Wylie K",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Bebout,Lee",
      "group": "CLAS",
      "label": "Bebout,Lee",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Beckman,Laura Owen",
      "group": "PUBSRV",
      "label": "Beckman,Laura Owen",
      "links": 0,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Beckstein,Oliver",
      "group": "CLAS",
      "label": "Beckstein,Oliver",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Begay,Victor Harvinn",
      "group": "MLFTC",
      "label": "Begay,Victor Harvinn",
      "links": 2,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Bekki,Jennifer Mcneill",
      "group": "IAFSE",
      "label": "Bekki,Jennifer Mcneill",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Bell III,James",
      "group": "CLAS",
      "label": "Bell III,James",
      "links": 5,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Belyea,Michael John",
      "group": "CONHI",
      "label": "Belyea,Michael John",
      "links": 2,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Ben Amor,Hani",
      "group": "IAFSE",
      "label": "Ben Amor,Hani",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Benkert,Volker",
      "group": "CLAS",
      "label": "Benkert,Volker",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Bennett,Gaymon L",
      "group": "CLAS",
      "label": "Bennett,Gaymon L",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Bennett,Ira Mccoy",
      "group": "SFIS",
      "label": "Bennett,Ira Mccoy",
      "links": 5,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Bennett,Michael George",
      "group": "SFIS",
      "label": "Bennett,Michael George",
      "links": 1,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Berisha,Visar Shahin",
      "group": "IAFSE",
      "label": "Berisha,Visar Shahin",
      "links": 8,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Berkel,Cady",
      "group": "CLAS",
      "label": "Berkel,Cady",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Berman,Spring Melody",
      "group": "IAFSE",
      "label": "Berman,Spring Melody",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Bernard,Harvey Russell",
      "group": "CLAS",
      "label": "Bernard,Harvey Russell",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Bernstein,Bianca L",
      "group": "CISA",
      "label": "Bernstein,Bianca L",
      "links": 2,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Bernstein,Katherine Arielle",
      "group": "MLFTC",
      "label": "Bernstein,Katherine Arielle",
      "links": 2,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Bertoni,Mariana Ines",
      "group": "IAFSE",
      "label": "Bertoni,Mariana Ines",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Bienenstock,Elisa Jayne",
      "group": "PUBSRV",
      "label": "Bienenstock,Elisa Jayne",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Bimonte-Nelson,Heather",
      "group": "CLAS",
      "label": "Bimonte-Nelson,Heather",
      "links": 7,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Bjork,Robert Eric",
      "group": "CLAS",
      "label": "Bjork,Robert Eric",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Blain Christen,Jennifer Mary",
      "group": "IAFSE",
      "label": "Blain Christen,Jennifer Mary",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Blais,Christopher Raymond",
      "group": "CLAS",
      "label": "Blais,Christopher Raymond",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Blakemore,Arthur E",
      "group": "EVPP",
      "label": "Blakemore,Arthur E",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Blankson,Gerald Kotey",
      "group": "EVPP",
      "label": "Blankson,Gerald Kotey",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Blasingame,James Bryan",
      "group": "CLAS",
      "label": "Blasingame,James Bryan",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Blattman,Joseph Nathan",
      "group": "CLAS",
      "label": "Blattman,Joseph Nathan",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Bliss,Daniel Wesley",
      "group": "IAFSE",
      "label": "Bliss,Daniel Wesley",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Boddy,Amy Marie",
      "group": "CLAS",
      "label": "Boddy,Amy Marie",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Boerner,Rochus",
      "group": "CLAS",
      "label": "Boerner,Rochus",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Boggess,Albert",
      "group": "CLAS",
      "label": "Boggess,Albert",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Boggess,May",
      "group": "CLAS",
      "label": "Boggess,May",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Bolin,Robert",
      "group": "CLAS",
      "label": "Bolin,Robert",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Boltz,Andrea Maria",
      "group": "GIOS",
      "label": "Boltz,Andrea Maria",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Bond,Angela Bowen",
      "group": "CONHI",
      "label": "Bond,Angela Bowen",
      "links": 0,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Boney,Jennifer Brooke",
      "group": "CLAS",
      "label": "Boney,Jennifer Brooke",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Bonifas,Robin P",
      "group": "PUBSRV",
      "label": "Bonifas,Robin P",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Boone,Christopher G",
      "group": "CLAS",
      "label": "Boone,Christopher G",
      "links": 5,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Boradkar,Prasad",
      "group": "HIDA",
      "label": "Boradkar,Prasad",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Borden,Steven A.",
      "group": "EVPP",
      "label": "Borden,Steven A.",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Borges,Chad Randolph",
      "group": "CLAS",
      "label": "Borges,Chad Randolph",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Borror,Connie Margaret",
      "group": "ARTS",
      "label": "Borror,Connie Margaret",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Bose,Maitrayee",
      "group": "CLAS",
      "label": "Bose,Maitrayee",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Bowden,Stuart Graham",
      "group": "IAFSE",
      "label": "Bowden,Stuart Graham",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Bowen,Annabell L",
      "group": "EXEC_ADMIN",
      "label": "Bowen,Annabell L",
      "links": 1,
      "group_code": 17
    }
  }, {
    "data": {
      "id": "Bowley,Kenneth S",
      "group": "CLAS",
      "label": "Bowley,Kenneth S",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Bowman,Catherine",
      "group": "CLAS",
      "label": "Bowman,Catherine",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Bowman,Diana Megan",
      "group": "SFIS",
      "label": "Bowman,Diana Megan",
      "links": 3,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Bowman,Judd David",
      "group": "CLAS",
      "label": "Bowman,Judd David",
      "links": 6,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Boyd,Aaron Kyle",
      "group": "CLAS",
      "label": "Boyd,Aaron Kyle",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Boyd,Robert",
      "group": "CLAS",
      "label": "Boyd,Robert",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Boyer,Treavor H.",
      "group": "IAFSE",
      "label": "Boyer,Treavor H.",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Bozeman,Barry",
      "group": "PUBSRV",
      "label": "Bozeman,Barry",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Bradley,Robert",
      "group": "CLAS",
      "label": "Bradley,Robert",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Brafman,David Adam",
      "group": "IAFSE",
      "label": "Brafman,David Adam",
      "links": 5,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Branaghan,Russell Joseph",
      "group": "IAFSE",
      "label": "Branaghan,Russell Joseph",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Branca,Caterina",
      "group": "CLAS",
      "label": "Branca,Caterina",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Branch,Boyd Mathoni",
      "group": "HIDA",
      "label": "Branch,Boyd Mathoni",
      "links": 2,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Brandt,William R",
      "group": "GIOS",
      "label": "Brandt,William R",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Brashears,William Scott",
      "group": "ARTS",
      "label": "Brashears,William Scott",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Brayboy,Bryan",
      "group": "CLAS",
      "label": "Brayboy,Bryan",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Breetz,Hanna Lori",
      "group": "GIOS",
      "label": "Breetz,Hanna Lori",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Bremner,Andrew",
      "group": "CLAS",
      "label": "Bremner,Andrew",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Bretschneider,Stuart Ira",
      "group": "PUBSRV",
      "label": "Bretschneider,Stuart Ira",
      "links": 3,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Brett,Joan F",
      "group": "WPC",
      "label": "Brett,Joan F",
      "links": 1,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Brewer Jr,Gene",
      "group": "CLAS",
      "label": "Brewer Jr,Gene",
      "links": 5,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Brian,Jennifer Elizabeth Dyck",
      "group": "BARRETT",
      "label": "Brian,Jennifer Elizabeth Dyck",
      "links": 2,
      "group_code": 18
    }
  }, {
    "data": {
      "id": "Briggs Jr,Ronald",
      "group": "EOSS",
      "label": "Briggs Jr,Ronald",
      "links": 1,
      "group_code": 19
    }
  }, {
    "data": {
      "id": "Brin,Adam Miles",
      "group": "CLAS",
      "label": "Brin,Adam Miles",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Brinkman,Daniel",
      "group": "CLAS",
      "label": "Brinkman,Daniel",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Broatch,Jennifer Ellen",
      "group": "ARTS",
      "label": "Broatch,Jennifer Ellen",
      "links": 3,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Broglio,Ronald",
      "group": "CLAS",
      "label": "Broglio,Ronald",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Brokaw,David Paul",
      "group": "CLAS",
      "label": "Brokaw,David Paul",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Brotman,Sarah Marie",
      "group": "CLAS",
      "label": "Brotman,Sarah Marie",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Brown,Albert Frederick",
      "group": "IAFSE",
      "label": "Brown,Albert Frederick",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Brown,Claudia G",
      "group": "HIDA",
      "label": "Brown,Claudia G",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Brown,Mary Ellen",
      "group": "PUBSRV",
      "label": "Brown,Mary Ellen",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Brownell,Sara",
      "group": "CLAS",
      "label": "Brownell,Sara",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Bruening,Meredith Margaret",
      "group": "CHS",
      "label": "Bruening,Meredith Margaret",
      "links": 6,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Brundiers,Katja",
      "group": "GIOS",
      "label": "Brundiers,Katja",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Bruner,Jason",
      "group": "CLAS",
      "label": "Bruner,Jason",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Brunhaver II,John Steven",
      "group": "IAFSE",
      "label": "Brunhaver II,John Steven",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Brunhaver,Samantha Ruth",
      "group": "IAFSE",
      "label": "Brunhaver,Samantha Ruth",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Brus,Evan James",
      "group": "CLAS",
      "label": "Brus,Evan James",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Buch,Rajesh",
      "group": "GIOS",
      "label": "Buch,Rajesh",
      "links": 2,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Budruk,Megha S",
      "group": "PUBSRV",
      "label": "Budruk,Megha S",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Buetow,Kenneth H",
      "group": "CLAS",
      "label": "Buetow,Kenneth H",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Buikstra,Jane Ellen",
      "group": "CLAS",
      "label": "Buikstra,Jane Ellen",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Buman,Matthew P",
      "group": "CHS",
      "label": "Buman,Matthew P",
      "links": 11,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Buneo,Christopher Alan",
      "group": "IAFSE",
      "label": "Buneo,Christopher Alan",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Burton,Matthew M.",
      "group": "CHS",
      "label": "Burton,Matthew M.",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Buseck,P R",
      "group": "CLAS",
      "label": "Buseck,P R",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Butler,Nathaniel Richard",
      "group": "CLAS",
      "label": "Butler,Nathaniel Richard",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Buttry,Daniel A.",
      "group": "CLAS",
      "label": "Buttry,Daniel A.",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Buzinde,Christine",
      "group": "PUBSRV",
      "label": "Buzinde,Christine",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Byck,Peter",
      "group": "WCJMC",
      "label": "Byck,Peter",
      "links": 2,
      "group_code": 20
    }
  }, {
    "data": {
      "id": "Caccamo,Antonella",
      "group": "BDI",
      "label": "Caccamo,Antonella",
      "links": 2,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Cacciatore,Joanne",
      "group": "PUBSRV",
      "label": "Cacciatore,Joanne",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Cadenas,German Andres",
      "group": "OKED",
      "label": "Cadenas,German Andres",
      "links": 1,
      "group_code": 21
    }
  }, {
    "data": {
      "id": "Cadillo-Quiroz,Hinsby",
      "group": "CLAS",
      "label": "Cadillo-Quiroz,Hinsby",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Cady,Linell E",
      "group": "CLAS",
      "label": "Cady,Linell E",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Cahill,Thomas Michael",
      "group": "ARTS",
      "label": "Cahill,Thomas Michael",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Calhoun,Ronald Joseph",
      "group": "IAFSE",
      "label": "Calhoun,Ronald Joseph",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Callahan,Christopher",
      "group": "WCJMC",
      "label": "Callahan,Christopher",
      "links": 1,
      "group_code": 20
    }
  }, {
    "data": {
      "id": "Camacho,Erika T",
      "group": "ARTS",
      "label": "Camacho,Erika T",
      "links": 2,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Candan,Kasim Selcuk",
      "group": "IAFSE",
      "label": "Candan,Kasim Selcuk",
      "links": 7,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Cantwell,Elizabeth Raye",
      "group": "OKED",
      "label": "Cantwell,Elizabeth Raye",
      "links": 1,
      "group_code": 21
    }
  }, {
    "data": {
      "id": "Cao,Yu",
      "group": "IAFSE",
      "label": "Cao,Yu",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Capco,David George",
      "group": "CLAS",
      "label": "Capco,David George",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Caplan,Michael Ryckman",
      "group": "IAFSE",
      "label": "Caplan,Michael Ryckman",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Carberry,Adam Robert",
      "group": "IAFSE",
      "label": "Carberry,Adam Robert",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Carney,Michelle Mohr",
      "group": "PUBSRV",
      "label": "Carney,Michelle Mohr",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Carpenter,Ray W",
      "group": "CLAS",
      "label": "Carpenter,Ray W",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Cartwright,Julia Ann",
      "group": "CLAS",
      "label": "Cartwright,Julia Ann",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Cartwright,Reed Austin",
      "group": "CLAS",
      "label": "Cartwright,Reed Austin",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Casas Arce,Pablo",
      "group": "WPC",
      "label": "Casas Arce,Pablo",
      "links": 1,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Castillo-Chavez,Carlos",
      "group": "CLAS",
      "label": "Castillo-Chavez,Carlos",
      "links": 5,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Castro,Felipe G",
      "group": "CONHI",
      "label": "Castro,Felipe G",
      "links": 4,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Cavalier,Darlene Faith",
      "group": "SFIS",
      "label": "Cavalier,Darlene Faith",
      "links": 3,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Cease,Arianne",
      "group": "GIOS",
      "label": "Cease,Arianne",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Cerveny,Randall Scott",
      "group": "CLAS",
      "label": "Cerveny,Randall Scott",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Cesarotti,Evelyn L",
      "group": "CONHI",
      "label": "Cesarotti,Evelyn L",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Chae,Junseok",
      "group": "IAFSE",
      "label": "Chae,Junseok",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Chakrabarti,Chaitali",
      "group": "IAFSE",
      "label": "Chakrabarti,Chaitali",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Chakraborti,Tathagata",
      "group": "IAFSE",
      "label": "Chakraborti,Tathagata",
      "links": 0,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Chakraborty,Shayok",
      "group": "IAFSE",
      "label": "Chakraborty,Shayok",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Chamberlain,Alyssa Anne Whitby",
      "group": "PUBSRV",
      "label": "Chamberlain,Alyssa Anne Whitby",
      "links": 3,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Chamberlin,Ralph Vary",
      "group": "CLAS",
      "label": "Chamberlin,Ralph Vary",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Chan,Candace Kay",
      "group": "IAFSE",
      "label": "Chan,Candace Kay",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Chan,Neng Iong",
      "group": "CLAS",
      "label": "Chan,Neng Iong",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Chang,Lan-Yun",
      "group": "CLAS",
      "label": "Chang,Lan-Yun",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Chang,Yung",
      "group": "CLAS",
      "label": "Chang,Yung",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Chasey,Allan Dee",
      "group": "IAFSE",
      "label": "Chasey,Allan Dee",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Chassin,Laurie",
      "group": "CLAS",
      "label": "Chassin,Laurie",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Chattopadhyay,Aditi",
      "group": "IAFSE",
      "label": "Chattopadhyay,Aditi",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Chavez,Ivette D",
      "group": "UCOLLEGE",
      "label": "Chavez,Ivette D",
      "links": 1,
      "group_code": 22
    }
  }, {
    "data": {
      "id": "Chawla,Nikhilesh",
      "group": "IAFSE",
      "label": "Chawla,Nikhilesh",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Chen,Angela Chia-Chen",
      "group": "CONHI",
      "label": "Chen,Angela Chia-Chen",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Chen,Fang",
      "group": "BDI",
      "label": "Chen,Fang",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Chen,Huaiyu",
      "group": "CLAS",
      "label": "Chen,Huaiyu",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Chen,Julian J-L",
      "group": "CLAS",
      "label": "Chen,Julian J-L",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Chen,Kangping",
      "group": "IAFSE",
      "label": "Chen,Kangping",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Chen,Qiang",
      "group": "CLAS",
      "label": "Chen,Qiang",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Chen,Shengxi",
      "group": "BDI",
      "label": "Chen,Shengxi",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Chen,Tingyong",
      "group": "CLAS",
      "label": "Chen,Tingyong",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Chen,Ying-Chih",
      "group": "MLFTC",
      "label": "Chen,Ying-Chih",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Chen,Yinong",
      "group": "IAFSE",
      "label": "Chen,Yinong",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Cheng,Chingwen",
      "group": "HIDA",
      "label": "Cheng,Chingwen",
      "links": 3,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Chester,Mikhail",
      "group": "IAFSE",
      "label": "Chester,Mikhail",
      "links": 9,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Chhabra,Deepak",
      "group": "PUBSRV",
      "label": "Chhabra,Deepak",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Chhetri,Nalini",
      "group": "SFIS",
      "label": "Chhetri,Nalini",
      "links": 3,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Chhetri,Netra B",
      "group": "SFIS",
      "label": "Chhetri,Netra B",
      "links": 4,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Childers,Daniel L",
      "group": "GIOS",
      "label": "Childers,Daniel L",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Chizmeshya,Andrew V",
      "group": "CLAS",
      "label": "Chizmeshya,Andrew V",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Cho,Sookja",
      "group": "CLAS",
      "label": "Cho,Sookja",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Choi,Ji Mi S",
      "group": "OKED",
      "label": "Choi,Ji Mi S",
      "links": 1,
      "group_code": 21
    }
  }, {
    "data": {
      "id": "Chong,Oswald Wk",
      "group": "IAFSE",
      "label": "Chong,Oswald Wk",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Chowdhury,Srabanti",
      "group": "IAFSE",
      "label": "Chowdhury,Srabanti",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Christensen,Philip R",
      "group": "CLAS",
      "label": "Christensen,Philip R",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Cisneros,Ernest",
      "group": "CLAS",
      "label": "Cisneros,Ernest",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Clark,Heather Marie Griller",
      "group": "MLFTC",
      "label": "Clark,Heather Marie Griller",
      "links": 2,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Clark,Jerome",
      "group": "IAFSE",
      "label": "Clark,Jerome",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Clark,Lawrence T",
      "group": "IAFSE",
      "label": "Clark,Lawrence T",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Clark,Patricia J",
      "group": "ARTS",
      "label": "Clark,Patricia J",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Clark,Susan Spierre",
      "group": "IAFSE",
      "label": "Clark,Susan Spierre",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Clarke,Amanda Bachtell",
      "group": "CLAS",
      "label": "Clarke,Amanda Bachtell",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Clemens,Katherine Michelle",
      "group": "OKED",
      "label": "Clemens,Katherine Michelle",
      "links": 1,
      "group_code": 21
    }
  }, {
    "data": {
      "id": "Cloutier,Scott",
      "group": "GIOS",
      "label": "Cloutier,Scott",
      "links": 2,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Cochran,Douglas",
      "group": "IAFSE",
      "label": "Cochran,Douglas",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Cohen,Adam",
      "group": "CLAS",
      "label": "Cohen,Adam",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Colaneri,Nicholas Frederick",
      "group": "IAFSE",
      "label": "Colaneri,Nicholas Frederick",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Colbourn,Charles Joseph",
      "group": "IAFSE",
      "label": "Colbourn,Charles Joseph",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Coleman,Grisha",
      "group": "HIDA",
      "label": "Coleman,Grisha",
      "links": 2,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Coleman,Paul David",
      "group": "BDI",
      "label": "Coleman,Paul David",
      "links": 5,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Coletta,Dawn",
      "group": "CHS",
      "label": "Coletta,Dawn",
      "links": 3,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Collins,James",
      "group": "CLAS",
      "label": "Collins,James",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Collis,Adam W",
      "group": "HIDA",
      "label": "Collis,Adam W",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Collofello,James Samuel",
      "group": "IAFSE",
      "label": "Collofello,James Samuel",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Compton,Carolyn",
      "group": "CLAS",
      "label": "Compton,Carolyn",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Connor,Carol Mcdonald",
      "group": "CLAS",
      "label": "Connor,Carol Mcdonald",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Conrad,Cheryl Diane",
      "group": "CLAS",
      "label": "Conrad,Cheryl Diane",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Conroy-Ben,Otakuye",
      "group": "IAFSE",
      "label": "Conroy-Ben,Otakuye",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Cooke,Nancy Jaworski",
      "group": "IAFSE",
      "label": "Cooke,Nancy Jaworski",
      "links": 5,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Coon,David Wayne",
      "group": "CONHI",
      "label": "Coon,David Wayne",
      "links": 4,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Corbin,William Robert",
      "group": "CLAS",
      "label": "Corbin,William Robert",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Corey,Frederick Charles",
      "group": "EVPP",
      "label": "Corey,Frederick Charles",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Corley,Elizabeth",
      "group": "PUBSRV",
      "label": "Corley,Elizabeth",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Corman,Steven Robert",
      "group": "CLAS",
      "label": "Corman,Steven Robert",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Coseo,Paul Joseph",
      "group": "HIDA",
      "label": "Coseo,Paul Joseph",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Cotter,Katie Lyn",
      "group": "PUBSRV",
      "label": "Cotter,Katie Lyn",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Coursen,Jerry Lee",
      "group": "IAFSE",
      "label": "Coursen,Jerry Lee",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Cox,Deborah J.",
      "group": "CISA",
      "label": "Cox,Deborah J.",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Craig,Scotty Dale",
      "group": "IAFSE",
      "label": "Craig,Scotty Dale",
      "links": 5,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Crespo,Noe Cuauhtemoc",
      "group": "CHS",
      "label": "Crespo,Noe Cuauhtemoc",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Critchlow,Donald",
      "group": "CLAS",
      "label": "Critchlow,Donald",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Crnic,Keith Alan",
      "group": "CLAS",
      "label": "Crnic,Keith Alan",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Crook,Sharon Marie",
      "group": "CLAS",
      "label": "Crook,Sharon Marie",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Crozier,Peter",
      "group": "IAFSE",
      "label": "Crozier,Peter",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Cruz,Evelyn Haydee",
      "group": "LAW",
      "label": "Cruz,Evelyn Haydee",
      "links": 1,
      "group_code": 6
    }
  }, {
    "data": {
      "id": "Culbertson,Robert John",
      "group": "CLAS",
      "label": "Culbertson,Robert John",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Cutter,Robert Joe",
      "group": "CLAS",
      "label": "Cutter,Robert Joe",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "D'Souza,Gary Xavier",
      "group": "CLAS",
      "label": "D'Souza,Gary Xavier",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Dahal,Som Nath",
      "group": "IAFSE",
      "label": "Dahal,Som Nath",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Dahlen,Paul R",
      "group": "IAFSE",
      "label": "Dahlen,Paul R",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Dahm,Werner J.",
      "group": "IAFSE",
      "label": "Dahm,Werner J.",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Dai,Lenore L",
      "group": "IAFSE",
      "label": "Dai,Lenore L",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Dale,Richard Eugene",
      "group": "PUBSRV",
      "label": "Dale,Richard Eugene",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Dallett,Nancy",
      "group": "EVPP",
      "label": "Dallett,Nancy",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Dalrymple,Michael S",
      "group": "OBF",
      "label": "Dalrymple,Michael S",
      "links": 1,
      "group_code": 12
    }
  }, {
    "data": {
      "id": "Daly,Elizabeth Susanne",
      "group": "CLAS",
      "label": "Daly,Elizabeth Susanne",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Daniels,Bryan",
      "group": "EVPP",
      "label": "Daniels,Bryan",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Darnall,Nicole",
      "group": "PUBSRV",
      "label": "Darnall,Nicole",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Das,Sumanta",
      "group": "IAFSE",
      "label": "Das,Sumanta",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Dasgupta,Partha",
      "group": "IAFSE",
      "label": "Dasgupta,Partha",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Daugherty,David B.",
      "group": "PUBSRV",
      "label": "Daugherty,David B.",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Dauksher,William J.",
      "group": "IAFSE",
      "label": "Dauksher,William J.",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Davidson,Joseph K",
      "group": "IAFSE",
      "label": "Davidson,Joseph K",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Davies,Paul",
      "group": "CLAS",
      "label": "Davies,Paul",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Davies,Pauline A",
      "group": "CLAS",
      "label": "Davies,Pauline A",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Davis,Cathy L",
      "group": "CLAS",
      "label": "Davis,Cathy L",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Davis,Kristina",
      "group": "CLAS",
      "label": "Davis,Kristina",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Davis,Mary C",
      "group": "CLAS",
      "label": "Davis,Mary C",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Davulcu,Hasan",
      "group": "IAFSE",
      "label": "Davulcu,Hasan",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Day,Stephanie Lynn",
      "group": "ISTL",
      "label": "Day,Stephanie Lynn",
      "links": 1,
      "group_code": 13
    }
  }, {
    "data": {
      "id": "De Los Santos Jr,Alfredo G",
      "group": "CLAS",
      "label": "De Los Santos Jr,Alfredo G",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Decker,Scott Henderson",
      "group": "PUBSRV",
      "label": "Decker,Scott Henderson",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Decourt,Boris",
      "group": "BDI",
      "label": "Decourt,Boris",
      "links": 3,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Dedkova,Larisa",
      "group": "BDI",
      "label": "Dedkova,Larisa",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Defaria,Rowan",
      "group": "HIDA",
      "label": "Defaria,Rowan",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Delay,Dawn Ann",
      "group": "CLAS",
      "label": "Delay,Dawn Ann",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Delmont,Matthew",
      "group": "CLAS",
      "label": "Delmont,Matthew",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Dempster,Thomas A",
      "group": "IAFSE",
      "label": "Dempster,Thomas A",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Deng,Shuguang",
      "group": "IAFSE",
      "label": "Deng,Shuguang",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Desch,Steven",
      "group": "CLAS",
      "label": "Desch,Steven",
      "links": 5,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Desouza,Kevin",
      "group": "PUBSRV",
      "label": "Desouza,Kevin",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Deviche,Pierre",
      "group": "CLAS",
      "label": "Deviche,Pierre",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Dey,Sandwip Kumar",
      "group": "IAFSE",
      "label": "Dey,Sandwip Kumar",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Diaz,Rodolfo Enrique",
      "group": "IAFSE",
      "label": "Diaz,Rodolfo Enrique",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Dickinson,Jared M",
      "group": "CHS",
      "label": "Dickinson,Jared M",
      "links": 5,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Diehnelt,Chris W",
      "group": "BDI",
      "label": "Diehnelt,Chris W",
      "links": 2,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Dietrich,Suzanne Wagner",
      "group": "ARTS",
      "label": "Dietrich,Suzanne Wagner",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Dinu,Valentin",
      "group": "CHS",
      "label": "Dinu,Valentin",
      "links": 5,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Dishion,Thomas",
      "group": "CLAS",
      "label": "Dishion,Thomas",
      "links": 5,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Dixon,Shane Yahlu",
      "group": "EVPP",
      "label": "Dixon,Shane Yahlu",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Doane,Leah D.",
      "group": "CLAS",
      "label": "Doane,Leah D.",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Doebbeling,Bradley Niel",
      "group": "CHS",
      "label": "Doebbeling,Bradley Niel",
      "links": 6,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Donhauser,Lindsey Gosma",
      "group": "GIOS",
      "label": "Donhauser,Lindsey Gosma",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Dooley,Kevin John",
      "group": "WPC",
      "label": "Dooley,Kevin John",
      "links": 2,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Dorman,Michael F",
      "group": "CHS",
      "label": "Dorman,Michael F",
      "links": 2,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Dorn,Ronald I",
      "group": "CLAS",
      "label": "Dorn,Ronald I",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Dorn,Sherman J",
      "group": "MLFTC",
      "label": "Dorn,Sherman J",
      "links": 2,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Douglas,Ian",
      "group": "ISTL",
      "label": "Douglas,Ian",
      "links": 2,
      "group_code": 13
    }
  }, {
    "data": {
      "id": "Dounskaia,Natalia",
      "group": "CHS",
      "label": "Dounskaia,Natalia",
      "links": 2,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Doupe,Adam",
      "group": "IAFSE",
      "label": "Doupe,Adam",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Drucker,Jeffery S",
      "group": "CLAS",
      "label": "Drucker,Jeffery S",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Dubois,Raymond",
      "group": "CHS",
      "label": "Dubois,Raymond",
      "links": 4,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Duell,Meghan Elizabeth",
      "group": "CLAS",
      "label": "Duell,Meghan Elizabeth",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Duggan,Mary Anne",
      "group": "CLAS",
      "label": "Duggan,Mary Anne",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Dunckley,Travis L",
      "group": "BDI",
      "label": "Dunckley,Travis L",
      "links": 2,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Dunham,Emilie T",
      "group": "CLAS",
      "label": "Dunham,Emilie T",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Dunlap,Daniel Robert",
      "group": "CLAS",
      "label": "Dunlap,Daniel Robert",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Duran,Nicholas",
      "group": "ARTS",
      "label": "Duran,Nicholas",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Durfee,Alesha D",
      "group": "CLAS",
      "label": "Durfee,Alesha D",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Dwyer,Christian",
      "group": "CLAS",
      "label": "Dwyer,Christian",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Eakin,Hallie C",
      "group": "GIOS",
      "label": "Eakin,Hallie C",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Earl,Stevan Ross",
      "group": "GIOS",
      "label": "Earl,Stevan Ross",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Early,Jessica Singer",
      "group": "CLAS",
      "label": "Early,Jessica Singer",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Easson,Damien",
      "group": "CLAS",
      "label": "Easson,Damien",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ebrahimkhani,Mohammad Reza",
      "group": "IAFSE",
      "label": "Ebrahimkhani,Mohammad Reza",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Edwards,Michael C",
      "group": "CLAS",
      "label": "Edwards,Michael C",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ehlenz,Meagan",
      "group": "CLAS",
      "label": "Ehlenz,Meagan",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Eisenberg,Nancy",
      "group": "CLAS",
      "label": "Eisenberg,Nancy",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ekiss,Gale Barbara",
      "group": "CLAS",
      "label": "Ekiss,Gale Barbara",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "El Asmar,Mounir",
      "group": "IAFSE",
      "label": "El Asmar,Mounir",
      "links": 5,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Elam,Kit K",
      "group": "CLAS",
      "label": "Elam,Kit K",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Elkins-Tanton,Linda",
      "group": "CLAS",
      "label": "Elkins-Tanton,Linda",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Elliott,Stephen Nelson",
      "group": "CLAS",
      "label": "Elliott,Stephen Nelson",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ellison,Leigh Anne",
      "group": "CLAS",
      "label": "Ellison,Leigh Anne",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ellsworth,Angela",
      "group": "HIDA",
      "label": "Ellsworth,Angela",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Elser,James Joseph",
      "group": "CLAS",
      "label": "Elser,James Joseph",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Elser,Monica Mueller",
      "group": "GIOS",
      "label": "Elser,Monica Mueller",
      "links": 3,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Ely,Tucker Drew",
      "group": "CLAS",
      "label": "Ely,Tucker Drew",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Emady,Heather Nicole",
      "group": "IAFSE",
      "label": "Emady,Heather Nicole",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Englin,Jeffrey Eric",
      "group": "WPC",
      "label": "Englin,Jeffrey Eric",
      "links": 2,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Erchul,William Patrick",
      "group": "CLAS",
      "label": "Erchul,William Patrick",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ernzen,James J",
      "group": "IAFSE",
      "label": "Ernzen,James J",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Essary,Alison Carol",
      "group": "CHS",
      "label": "Essary,Alison Carol",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Esser,Gregory M",
      "group": "HIDA",
      "label": "Esser,Gregory M",
      "links": 2,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Essig,Linda",
      "group": "HIDA",
      "label": "Essig,Linda",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Estes,Nicholas",
      "group": "CLAS",
      "label": "Estes,Nicholas",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Etheridge Woodson,Stephani",
      "group": "HIDA",
      "label": "Etheridge Woodson,Stephani",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Evans-Romaine,Dorothy Kathleen",
      "group": "CLAS",
      "label": "Evans-Romaine,Dorothy Kathleen",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Evans,Bronwynne C",
      "group": "CONHI",
      "label": "Evans,Bronwynne C",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Fabes,Richard Allen",
      "group": "CLAS",
      "label": "Fabes,Richard Allen",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Fabricius,William Van",
      "group": "CLAS",
      "label": "Fabricius,William Van",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Fahmi,Noureddine",
      "group": "BDI",
      "label": "Fahmi,Noureddine",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Fainekos,Georgios E.",
      "group": "IAFSE",
      "label": "Fainekos,Georgios E.",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Faleev,Nikolai",
      "group": "IAFSE",
      "label": "Faleev,Nikolai",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Falsetti,Anthony B",
      "group": "ARTS",
      "label": "Falsetti,Anthony B",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Farmer,Jack",
      "group": "CLAS",
      "label": "Farmer,Jack",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Farooque,Mahmud Ali",
      "group": "SFIS",
      "label": "Farooque,Mahmud Ali",
      "links": 2,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Farrand,Kathleen M.",
      "group": "MLFTC",
      "label": "Farrand,Kathleen M.",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Feeney,Mary K",
      "group": "PUBSRV",
      "label": "Feeney,Mary K",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Feinson,Stephen J",
      "group": "OKED",
      "label": "Feinson,Stephen J",
      "links": 1,
      "group_code": 21
    }
  }, {
    "data": {
      "id": "Feisst,Sabine Maria",
      "group": "HIDA",
      "label": "Feisst,Sabine Maria",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Feller,Andrea Leigh",
      "group": "HIDA",
      "label": "Feller,Andrea Leigh",
      "links": 2,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Fellmeth,Aaron Xavier",
      "group": "LAW",
      "label": "Fellmeth,Aaron Xavier",
      "links": 1,
      "group_code": 6
    }
  }, {
    "data": {
      "id": "Femiani,John C",
      "group": "IAFSE",
      "label": "Femiani,John C",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Ferguson-Colvin,Kristin Michel",
      "group": "PUBSRV",
      "label": "Ferguson-Colvin,Kristin Michel",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Ferry,David K",
      "group": "IAFSE",
      "label": "Ferry,David K",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Ferry,Lara Annette",
      "group": "ARTS",
      "label": "Ferry,Lara Annette",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Fewell,Jennifer Harrison",
      "group": "CLAS",
      "label": "Fewell,Jennifer Harrison",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Finn,Edward Frederick",
      "group": "HIDA",
      "label": "Finn,Edward Frederick",
      "links": 5,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Fischman,Gustavo Enrique",
      "group": "MLFTC",
      "label": "Fischman,Gustavo Enrique",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Fisher,Erik",
      "group": "SFIS",
      "label": "Fisher,Erik",
      "links": 1,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Fitzgerald,Mary M",
      "group": "HIDA",
      "label": "Fitzgerald,Mary M",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Flack,Kimberly Rae",
      "group": "WCJMC",
      "label": "Flack,Kimberly Rae",
      "links": 1,
      "group_code": 20
    }
  }, {
    "data": {
      "id": "Flores,Jodi Reeves",
      "group": "CLAS",
      "label": "Flores,Jodi Reeves",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Flory,Justin David",
      "group": "BDI",
      "label": "Flory,Justin David",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Foltz-Sweat,Jennifer Lynn",
      "group": "ARTS",
      "label": "Foltz-Sweat,Jennifer Lynn",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Forbes,Carolyn Elizabeth",
      "group": "CLAS",
      "label": "Forbes,Carolyn Elizabeth",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Forzani,Erica Silvia",
      "group": "IAFSE",
      "label": "Forzani,Erica Silvia",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Foulger,Teresa S",
      "group": "MLFTC",
      "label": "Foulger,Teresa S",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Fox,Cora Virginia",
      "group": "CLAS",
      "label": "Fox,Cora Virginia",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Fox,Peter",
      "group": "IAFSE",
      "label": "Fox,Peter",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Frakes,David",
      "group": "IAFSE",
      "label": "Frakes,David",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Francisco,Wilson Alex",
      "group": "CLAS",
      "label": "Francisco,Wilson Alex",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Franz,Nico Mario",
      "group": "CLAS",
      "label": "Franz,Nico Mario",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Frasch,Wayne D",
      "group": "CLAS",
      "label": "Frasch,Wayne D",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Fraser,Matthew P",
      "group": "IAFSE",
      "label": "Fraser,Matthew P",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Freakley,Benjamin Clark",
      "group": "EXEC_ADMIN",
      "label": "Freakley,Benjamin Clark",
      "links": 1,
      "group_code": 17
    }
  }, {
    "data": {
      "id": "Frenette,Alexandre",
      "group": "HIDA",
      "label": "Frenette,Alexandre",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Fromholz,Julia M",
      "group": "LAW",
      "label": "Fromholz,Julia M",
      "links": 2,
      "group_code": 6
    }
  }, {
    "data": {
      "id": "Fromme,Petra",
      "group": "CLAS",
      "label": "Fromme,Petra",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Fromme,Raimund",
      "group": "CLAS",
      "label": "Fromme,Raimund",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Frow,Emma Khamis",
      "group": "IAFSE",
      "label": "Frow,Emma Khamis",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Fu,Hongxia",
      "group": "ISTL",
      "label": "Fu,Hongxia",
      "links": 1,
      "group_code": 13
    }
  }, {
    "data": {
      "id": "Fu,Qiushi",
      "group": "IAFSE",
      "label": "Fu,Qiushi",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Gabbard,Ralph Barnhart",
      "group": "LIB",
      "label": "Gabbard,Ralph Barnhart",
      "links": 2,
      "group_code": 23
    }
  }, {
    "data": {
      "id": "Gabriel,Travis Saint James",
      "group": "CLAS",
      "label": "Gabriel,Travis Saint James",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Gaesser,Glenn Alan",
      "group": "CHS",
      "label": "Gaesser,Glenn Alan",
      "links": 5,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Gaffar,Ashraf",
      "group": "IAFSE",
      "label": "Gaffar,Ashraf",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Gallagher,Karen Louise",
      "group": "CHS",
      "label": "Gallagher,Karen Louise",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Ganesh,Tirupalavanam Gopal",
      "group": "IAFSE",
      "label": "Ganesh,Tirupalavanam Gopal",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Garcia-Pichel,Ferran",
      "group": "CLAS",
      "label": "Garcia-Pichel,Ferran",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Garcia,Antonio Agustin",
      "group": "IAFSE",
      "label": "Garcia,Antonio Agustin",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Garcia,Joseph Cr",
      "group": "PUBSRV",
      "label": "Garcia,Joseph Cr",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Garlapow,Megan E.",
      "group": "CLAS",
      "label": "Garlapow,Megan E.",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Garnero,Edward",
      "group": "CLAS",
      "label": "Garnero,Edward",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Garvie,Laurence A J",
      "group": "CLAS",
      "label": "Garvie,Laurence A J",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Gary,Kevin A",
      "group": "IAFSE",
      "label": "Gary,Kevin A",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Gaughan,Monica M",
      "group": "CLAS",
      "label": "Gaughan,Monica M",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Gaxiola,Roberto A",
      "group": "CLAS",
      "label": "Gaxiola,Roberto A",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Gee,Elisabeth Ruth",
      "group": "MLFTC",
      "label": "Gee,Elisabeth Ruth",
      "links": 2,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Gel,Aytekin",
      "group": "IAFSE",
      "label": "Gel,Aytekin",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Gel,Esma Senturk",
      "group": "IAFSE",
      "label": "Gel,Esma Senturk",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Gelb,Anne",
      "group": "CLAS",
      "label": "Gelb,Anne",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Georgescu,Matei",
      "group": "CLAS",
      "label": "Georgescu,Matei",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Gerber,Brian Joseph",
      "group": "PUBSRV",
      "label": "Gerber,Brian Joseph",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Gerber,Leah R",
      "group": "CLAS",
      "label": "Gerber,Leah R",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ghanem,Carla",
      "group": "CLAS",
      "label": "Ghanem,Carla",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Gharavi,Lance Eric",
      "group": "HIDA",
      "label": "Gharavi,Lance Eric",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Ghazarian,Arbi",
      "group": "IAFSE",
      "label": "Ghazarian,Arbi",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Ghirlanda,Giovanna",
      "group": "CLAS",
      "label": "Ghirlanda,Giovanna",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Gibson,Edd",
      "group": "IAFSE",
      "label": "Gibson,Edd",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Gile,Gillian Heather",
      "group": "CLAS",
      "label": "Gile,Gillian Heather",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Gilger,Kristin G",
      "group": "WCJMC",
      "label": "Gilger,Kristin G",
      "links": 2,
      "group_code": 20
    }
  }, {
    "data": {
      "id": "Gipson-Reichardt,Cassandra Dia",
      "group": "CLAS",
      "label": "Gipson-Reichardt,Cassandra Dia",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Glaser,Donald Michael",
      "group": "CLAS",
      "label": "Glaser,Donald Michael",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Glenberg,Arthur Mitchell",
      "group": "CLAS",
      "label": "Glenberg,Arthur Mitchell",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Glick,Jennifer Elyse",
      "group": "CLAS",
      "label": "Glick,Jennifer Elyse",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Glowacka,Halszka",
      "group": "CLAS",
      "label": "Glowacka,Halszka",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Gober,Patricia",
      "group": "CLAS",
      "label": "Gober,Patricia",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Godfrey,Diane Lee",
      "group": "MLFTC",
      "label": "Godfrey,Diane Lee",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Goklany,Sheba",
      "group": "IAFSE",
      "label": "Goklany,Sheba",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Goldinger,Stephen David",
      "group": "CLAS",
      "label": "Goldinger,Stephen David",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Golkhou,Vahid",
      "group": "CLAS",
      "label": "Golkhou,Vahid",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Gonzales-Macias,Laura",
      "group": "UCOLLEGE",
      "label": "Gonzales-Macias,Laura",
      "links": 1,
      "group_code": 22
    }
  }, {
    "data": {
      "id": "Gonzales,Nancy A",
      "group": "CLAS",
      "label": "Gonzales,Nancy A",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Gonzalez Velo,Yago",
      "group": "IAFSE",
      "label": "Gonzalez Velo,Yago",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Gonzalez-Santin,Edwin",
      "group": "PUBSRV",
      "label": "Gonzalez-Santin,Edwin",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Gonzalez,Graciela H",
      "group": "CHS",
      "label": "Gonzalez,Graciela H",
      "links": 4,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Goodnick,Stephen Marshall",
      "group": "IAFSE",
      "label": "Goodnick,Stephen Marshall",
      "links": 5,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Gordon,Gwyneth Williams",
      "group": "CLAS",
      "label": "Gordon,Gwyneth Williams",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Gordon,Samuel Bender",
      "group": "CLAS",
      "label": "Gordon,Samuel Bender",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Goryll,Michael",
      "group": "IAFSE",
      "label": "Goryll,Michael",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Goss,Jeffrey",
      "group": "IAFSE",
      "label": "Goss,Jeffrey",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Gould,Ian R",
      "group": "CLAS",
      "label": "Gould,Ian R",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Gracia,Emilia Maria",
      "group": "EVPP",
      "label": "Gracia,Emilia Maria",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Graffy,Elisabeth A",
      "group": "SFIS",
      "label": "Graffy,Elisabeth A",
      "links": 3,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Graham,Stephen E",
      "group": "MLFTC",
      "label": "Graham,Stephen E",
      "links": 4,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Grando,Maria Adela",
      "group": "CHS",
      "label": "Grando,Maria Adela",
      "links": 4,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Granger,Douglas",
      "group": "CLAS",
      "label": "Granger,Douglas",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Grau Torrent,David",
      "group": "IAFSE",
      "label": "Grau Torrent,David",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Graudejus,Oliver",
      "group": "CLAS",
      "label": "Graudejus,Oliver",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Graves,William",
      "group": "CLAS",
      "label": "Graves,William",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Gray,Robert D",
      "group": "IAFSE",
      "label": "Gray,Robert D",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Gray,Shelley Irene",
      "group": "CHS",
      "label": "Gray,Shelley Irene",
      "links": 4,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Grebitus,Carola",
      "group": "WPC",
      "label": "Grebitus,Carola",
      "links": 2,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Green,Alexander Arthur",
      "group": "CLAS",
      "label": "Green,Alexander Arthur",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Green,Douglas Mitchell",
      "group": "CISA",
      "label": "Green,Douglas Mitchell",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Green,Ellen",
      "group": "CHS",
      "label": "Green,Ellen",
      "links": 2,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Green,Matthew D",
      "group": "IAFSE",
      "label": "Green,Matthew D",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Green,Samuel",
      "group": "CLAS",
      "label": "Green,Samuel",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Greenes,Carole E.",
      "group": "IAFSE",
      "label": "Greenes,Carole E.",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Greenes,Robert",
      "group": "CHS",
      "label": "Greenes,Robert",
      "links": 3,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Greger,Bradley",
      "group": "IAFSE",
      "label": "Greger,Bradley",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Gregory-Mercado,Karen",
      "group": "CHS",
      "label": "Gregory-Mercado,Karen",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Grider-Potter,Neysa Ann",
      "group": "CLAS",
      "label": "Grider-Potter,Neysa Ann",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Griffin,Marie Louise",
      "group": "PUBSRV",
      "label": "Griffin,Marie Louise",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Grimm,Kevin John",
      "group": "CLAS",
      "label": "Grimm,Kevin John",
      "links": 9,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Grimm,Nancy B",
      "group": "CLAS",
      "label": "Grimm,Nancy B",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Groppi,Christopher E",
      "group": "CLAS",
      "label": "Groppi,Christopher E",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Grubesic,Anthony Hoyt",
      "group": "PUBSRV",
      "label": "Grubesic,Anthony Hoyt",
      "links": 3,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Gual Soler,Maria Margarita",
      "group": "SFIS",
      "label": "Gual Soler,Maria Margarita",
      "links": 1,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Guevarra Jr,Rudy Poscablo",
      "group": "CLAS",
      "label": "Guevarra Jr,Rudy Poscablo",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Gumel,Abba B",
      "group": "CLAS",
      "label": "Gumel,Abba B",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Guo,Jia",
      "group": "CLAS",
      "label": "Guo,Jia",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Guo,Yuanming",
      "group": "IAFSE",
      "label": "Guo,Yuanming",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Gupta,Sandeep Kumar S",
      "group": "IAFSE",
      "label": "Gupta,Sandeep Kumar S",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Gurney,Kevin Robert",
      "group": "CLAS",
      "label": "Gurney,Kevin Robert",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Gustavsson,Nora",
      "group": "PUBSRV",
      "label": "Gustavsson,Nora",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Guston,David H",
      "group": "SFIS",
      "label": "Guston,David H",
      "links": 1,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Gutkind,Lee",
      "group": "SFIS",
      "label": "Gutkind,Lee",
      "links": 1,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Guzzetti,Barbara Jean",
      "group": "ARTS",
      "label": "Guzzetti,Barbara Jean",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Hackett,Edward John",
      "group": "CLAS",
      "label": "Hackett,Edward John",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hackney Price,Jennifer Faye",
      "group": "ARTS",
      "label": "Hackney Price,Jennifer Faye",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Hagen,Bjoern",
      "group": "CLAS",
      "label": "Hagen,Bjoern",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Halavais,Alexander",
      "group": "ARTS",
      "label": "Halavais,Alexander",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Halden,Rolf",
      "group": "IAFSE",
      "label": "Halden,Rolf",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Hale,Anne Elizabeth",
      "group": "BDI",
      "label": "Hale,Anne Elizabeth",
      "links": 4,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Hale,Michelle Lynn",
      "group": "CLAS",
      "label": "Hale,Michelle Lynn",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hall,Deborah L",
      "group": "ARTS",
      "label": "Hall,Deborah L",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Hall,Sharon",
      "group": "CLAS",
      "label": "Hall,Sharon",
      "links": 6,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Halverson,Susan Marie",
      "group": "OKED",
      "label": "Halverson,Susan Marie",
      "links": 1,
      "group_code": 21
    }
  }, {
    "data": {
      "id": "Han,Seungyong",
      "group": "CLAS",
      "label": "Han,Seungyong",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hanemann,William Michael Micha",
      "group": "WPC",
      "label": "Hanemann,William Michael Micha",
      "links": 4,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Hanish,Laura D",
      "group": "CLAS",
      "label": "Hanish,Laura D",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hannah,Mark A",
      "group": "CLAS",
      "label": "Hannah,Mark A",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hanrahan,Jeanne Elizabeth",
      "group": "UCOLLEGE",
      "label": "Hanrahan,Jeanne Elizabeth",
      "links": 1,
      "group_code": 22
    }
  }, {
    "data": {
      "id": "Hansen,Debra Tumbula",
      "group": "BDI",
      "label": "Hansen,Debra Tumbula",
      "links": 2,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Hardgrove,Craig J",
      "group": "CLAS",
      "label": "Hardgrove,Craig J",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Harootunian,Gevork",
      "group": "CHS",
      "label": "Harootunian,Gevork",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Harp,Hilary",
      "group": "HIDA",
      "label": "Harp,Hilary",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Harrell,Susan Elizabeth",
      "group": "CONHI",
      "label": "Harrell,Susan Elizabeth",
      "links": 2,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Harris,Karen R",
      "group": "MLFTC",
      "label": "Harris,Karen R",
      "links": 2,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Harris,Lauren",
      "group": "MLFTC",
      "label": "Harris,Lauren",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Harrison,Jon Fewell",
      "group": "CLAS",
      "label": "Harrison,Jon Fewell",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hart,William",
      "group": "PUBSRV",
      "label": "Hart,William",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Hartnett,Hilairy",
      "group": "CLAS",
      "label": "Hartnett,Hilairy",
      "links": 7,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hartwell,Leland Harrison",
      "group": "MLFTC",
      "label": "Hartwell,Leland Harrison",
      "links": 3,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Hartz,Donna Alberta",
      "group": "CLAS",
      "label": "Hartz,Donna Alberta",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hauer,Jessica L",
      "group": "CLAS",
      "label": "Hauer,Jessica L",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hawkey,Corey James",
      "group": "OBF",
      "label": "Hawkey,Corey James",
      "links": 1,
      "group_code": 12
    }
  }, {
    "data": {
      "id": "Haydel,Shelley",
      "group": "CLAS",
      "label": "Haydel,Shelley",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hayes,Mark A",
      "group": "CLAS",
      "label": "Hayes,Mark A",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hayter,Christopher",
      "group": "PUBSRV",
      "label": "Hayter,Christopher",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "He,Jingrui",
      "group": "IAFSE",
      "label": "He,Jingrui",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "He,Ximin",
      "group": "IAFSE",
      "label": "He,Ximin",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Hecht,Sidney Michael",
      "group": "CLAS",
      "label": "Hecht,Sidney Michael",
      "links": 5,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hedberg,Eric Christopher",
      "group": "CLAS",
      "label": "Hedberg,Eric Christopher",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hedberg,William C",
      "group": "CLAS",
      "label": "Hedberg,William C",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hedman,Kory W",
      "group": "IAFSE",
      "label": "Hedman,Kory W",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Hegmon,Michelle",
      "group": "CLAS",
      "label": "Hegmon,Michelle",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Heimsath,Arjun",
      "group": "CLAS",
      "label": "Heimsath,Arjun",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hekler,Eric Chambers",
      "group": "CHS",
      "label": "Hekler,Eric Chambers",
      "links": 6,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Helm,Jim E",
      "group": "IAFSE",
      "label": "Helm,Jim E",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Helms  Tillery,Augusta K",
      "group": "CHS",
      "label": "Helms  Tillery,Augusta K",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Helms Tillery,Stephen I",
      "group": "IAFSE",
      "label": "Helms Tillery,Stephen I",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Henderson,Joseph Bryan",
      "group": "MLFTC",
      "label": "Henderson,Joseph Bryan",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Henderson,Mark Richard",
      "group": "IAFSE",
      "label": "Henderson,Mark Richard",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Henry,Adam Keith",
      "group": "EVPP",
      "label": "Henry,Adam Keith",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Hepburn,John Robert",
      "group": "PUBSRV",
      "label": "Hepburn,John Robert",
      "links": 3,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Herasimenka,Stanislau",
      "group": "IAFSE",
      "label": "Herasimenka,Stanislau",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Herbst,Chris M",
      "group": "PUBSRV",
      "label": "Herbst,Chris M",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Herche,Wesley",
      "group": "GSECURITY",
      "label": "Herche,Wesley",
      "links": 1,
      "group_code": 24
    }
  }, {
    "data": {
      "id": "Herckes,Pierre E H",
      "group": "CLAS",
      "label": "Herckes,Pierre E H",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hermanns,Carl Bruce",
      "group": "MLFTC",
      "label": "Hermanns,Carl Bruce",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Herrmann,Lisa Kay",
      "group": "GIOS",
      "label": "Herrmann,Lisa Kay",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Herrmann,Marcus",
      "group": "IAFSE",
      "label": "Herrmann,Marcus",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Hervig,Richard Lokke",
      "group": "CLAS",
      "label": "Hervig,Richard Lokke",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hess,Aaron R",
      "group": "CISA",
      "label": "Hess,Aaron R",
      "links": 2,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Hettel,Jacqueline Marie",
      "group": "SFIS",
      "label": "Hettel,Jacqueline Marie",
      "links": 4,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Heydt,Gerald",
      "group": "IAFSE",
      "label": "Heydt,Gerald",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Hildreth,Owen James",
      "group": "IAFSE",
      "label": "Hildreth,Owen James",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Hill,Vanessa Nelson",
      "group": "CONHI",
      "label": "Hill,Vanessa Nelson",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Hinde,Katherine J",
      "group": "CLAS",
      "label": "Hinde,Katherine J",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hiroi Dubay,Sheri Ryoko",
      "group": "CLAS",
      "label": "Hiroi Dubay,Sheri Ryoko",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hirt,Paul Wayne",
      "group": "CLAS",
      "label": "Hirt,Paul Wayne",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hjelmstad,Keith D",
      "group": "IAFSE",
      "label": "Hjelmstad,Keith D",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Hodbod,Jennifer Elizabeth",
      "group": "GIOS",
      "label": "Hodbod,Jennifer Elizabeth",
      "links": 2,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Hodge,James",
      "group": "LAW",
      "label": "Hodge,James",
      "links": 1,
      "group_code": 6
    }
  }, {
    "data": {
      "id": "Hodges,Kip Vernon",
      "group": "CLAS",
      "label": "Hodges,Kip Vernon",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hogle,Lisa Gibson",
      "group": "IAFSE",
      "label": "Hogle,Lisa Gibson",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Hogue,Brenda G",
      "group": "CLAS",
      "label": "Hogue,Brenda G",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Holbert,Keith Edwin",
      "group": "IAFSE",
      "label": "Holbert,Keith Edwin",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Holechek,Susan",
      "group": "BDI",
      "label": "Holechek,Susan",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Holl,Mark R",
      "group": "BDI",
      "label": "Holl,Mark R",
      "links": 2,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Holloway,Julianne L",
      "group": "IAFSE",
      "label": "Holloway,Julianne L",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Holman,Zachary Charles",
      "group": "IAFSE",
      "label": "Holman,Zachary Charles",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Hondula,David Michael",
      "group": "CLAS",
      "label": "Hondula,David Michael",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Honeycutt,Claire",
      "group": "IAFSE",
      "label": "Honeycutt,Claire",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Hong,Yi-Chun",
      "group": "MLFTC",
      "label": "Hong,Yi-Chun",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Honsberg,Christiana B",
      "group": "IAFSE",
      "label": "Honsberg,Christiana B",
      "links": 6,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Hood,Mary",
      "group": "HIDA",
      "label": "Hood,Mary",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Hooker,Steven Paul",
      "group": "CHS",
      "label": "Hooker,Steven Paul",
      "links": 2,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Horan,John Joseph",
      "group": "CISA",
      "label": "Horan,John Joseph",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Housman,Genevieve Anne",
      "group": "CLAS",
      "label": "Housman,Genevieve Anne",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Houston,Sandra L",
      "group": "IAFSE",
      "label": "Houston,Sandra L",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Hoy,Meredith Anne",
      "group": "HIDA",
      "label": "Hoy,Meredith Anne",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Hristovski,Kiril D",
      "group": "IAFSE",
      "label": "Hristovski,Kiril D",
      "links": 6,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Hruschka,Daniel Jacob",
      "group": "CLAS",
      "label": "Hruschka,Daniel Jacob",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Hsiao,Ihan",
      "group": "IAFSE",
      "label": "Hsiao,Ihan",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Hsu,Keng Hao",
      "group": "IAFSE",
      "label": "Hsu,Keng Hao",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Hsueh,Lily Yueh-Wen",
      "group": "PUBSRV",
      "label": "Hsueh,Lily Yueh-Wen",
      "links": 3,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Huang,Dijiang",
      "group": "IAFSE",
      "label": "Huang,Dijiang",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Huang,Huei-Ping",
      "group": "IAFSE",
      "label": "Huang,Huei-Ping",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Huberty,Jennifer Lynne",
      "group": "CHS",
      "label": "Huberty,Jennifer Lynne",
      "links": 4,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Hughes,Erika Elizabeth",
      "group": "HIDA",
      "label": "Hughes,Erika Elizabeth",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Hughner,Renee Shaw",
      "group": "WPC",
      "label": "Hughner,Renee Shaw",
      "links": 1,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Hunsaker,Beau Thomas",
      "group": "THUNDERBIRD",
      "label": "Hunsaker,Beau Thomas",
      "links": 1,
      "group_code": 25
    }
  }, {
    "data": {
      "id": "Hunt,Brett Thomas",
      "group": "PUBSRV",
      "label": "Hunt,Brett Thomas",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Hunting,Daniel W",
      "group": "PUBSRV",
      "label": "Hunting,Daniel W",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Hurlbut,James Benjamin",
      "group": "CLAS",
      "label": "Hurlbut,James Benjamin",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Husman,Jenefer",
      "group": "CLAS",
      "label": "Husman,Jenefer",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Iffert,Audrey Suzanne",
      "group": "OKED",
      "label": "Iffert,Audrey Suzanne",
      "links": 1,
      "group_code": 21
    }
  }, {
    "data": {
      "id": "Iida,Masumi",
      "group": "CLAS",
      "label": "Iida,Masumi",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Infurna,Frank",
      "group": "CLAS",
      "label": "Infurna,Frank",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ingalls,Todd Matthew",
      "group": "HIDA",
      "label": "Ingalls,Todd Matthew",
      "links": 3,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Ingram,Kelly Dawn",
      "group": "CHS",
      "label": "Ingram,Kelly Dawn",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Irish,Bradley James",
      "group": "CLAS",
      "label": "Irish,Bradley James",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Iwaniec,David M",
      "group": "GIOS",
      "label": "Iwaniec,David M",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Jackiewicz,Zdzislaw",
      "group": "CLAS",
      "label": "Jackiewicz,Zdzislaw",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Jackson,Kelly F",
      "group": "PUBSRV",
      "label": "Jackson,Kelly F",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Jacobs,Bertram Lewis",
      "group": "CLAS",
      "label": "Jacobs,Bertram Lewis",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Jacobs,Daniel C.",
      "group": "CLAS",
      "label": "Jacobs,Daniel C.",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Jacobs,Mark",
      "group": "CLAS",
      "label": "Jacobs,Mark",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Jacobson,Diana L",
      "group": "CONHI",
      "label": "Jacobson,Diana L",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Jager,Justin",
      "group": "CLAS",
      "label": "Jager,Justin",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Jang,Jaewon",
      "group": "IAFSE",
      "label": "Jang,Jaewon",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Jansen,Rolf A",
      "group": "CLAS",
      "label": "Jansen,Rolf A",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Janssen,Marcus Alexander",
      "group": "GIOS",
      "label": "Janssen,Marcus Alexander",
      "links": 4,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Javidan,Mansour",
      "group": "THUNDERBIRD",
      "label": "Javidan,Mansour",
      "links": 1,
      "group_code": 25
    }
  }, {
    "data": {
      "id": "Jaynes,Andrew Craig",
      "group": "LAW",
      "label": "Jaynes,Andrew Craig",
      "links": 1,
      "group_code": 6
    }
  }, {
    "data": {
      "id": "Jenkins,Lekelia Danielle",
      "group": "SFIS",
      "label": "Jenkins,Lekelia Danielle",
      "links": 2,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Jewell,Shannon Linda",
      "group": "CLAS",
      "label": "Jewell,Shannon Linda",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Jiang,Hanqing",
      "group": "IAFSE",
      "label": "Jiang,Hanqing",
      "links": 5,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Jiao,Yang",
      "group": "IAFSE",
      "label": "Jiao,Yang",
      "links": 6,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Jimenez-Silva,Margarita",
      "group": "MLFTC",
      "label": "Jimenez-Silva,Margarita",
      "links": 3,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Johnson,Alexander",
      "group": "CLAS",
      "label": "Johnson,Alexander",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Johnson,Crista Elcira",
      "group": "PUBSRV",
      "label": "Johnson,Crista Elcira",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Johnson,Garth Wayne",
      "group": "HIDA",
      "label": "Johnson,Garth Wayne",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Johnson,James Chadwick",
      "group": "ARTS",
      "label": "Johnson,James Chadwick",
      "links": 2,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Johnson,Nathan Gregory",
      "group": "IAFSE",
      "label": "Johnson,Nathan Gregory",
      "links": 6,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Johnson,Roger H",
      "group": "BDI",
      "label": "Johnson,Roger H",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Johnson,Ryan Miles",
      "group": "GIOS",
      "label": "Johnson,Ryan Miles",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Johnson,Shane Richard",
      "group": "IAFSE",
      "label": "Johnson,Shane Richard",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Johnson,William G",
      "group": "CHS",
      "label": "Johnson,William G",
      "links": 2,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Johnston,Carol S",
      "group": "CHS",
      "label": "Johnston,Carol S",
      "links": 7,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Johnston,Erik W",
      "group": "PUBSRV",
      "label": "Johnston,Erik W",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Johnston,Stephen Albert",
      "group": "CLAS",
      "label": "Johnston,Stephen Albert",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Jones,John W",
      "group": "CLAS",
      "label": "Jones,John W",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Jordan,Michelle E",
      "group": "MLFTC",
      "label": "Jordan,Michelle E",
      "links": 2,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Jordan,Shawn Senneff",
      "group": "IAFSE",
      "label": "Jordan,Shawn Senneff",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Joshi,Bhavin Ashok",
      "group": "CLAS",
      "label": "Joshi,Bhavin Ashok",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ju,Feng",
      "group": "IAFSE",
      "label": "Ju,Feng",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Juarez Rivera,Marisol",
      "group": "CLAS",
      "label": "Juarez Rivera,Marisol",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Judson,Eugene E",
      "group": "MLFTC",
      "label": "Judson,Eugene E",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Jurutka,Peter W",
      "group": "ARTS",
      "label": "Jurutka,Peter W",
      "links": 2,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Kaloush,Kamil Elias",
      "group": "IAFSE",
      "label": "Kaloush,Kamil Elias",
      "links": 5,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Kambhampati,Subbarao",
      "group": "IAFSE",
      "label": "Kambhampati,Subbarao",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Kandala,Srinivasa Srivatsav",
      "group": "OKED",
      "label": "Kandala,Srinivasa Srivatsav",
      "links": 2,
      "group_code": 21
    }
  }, {
    "data": {
      "id": "Kang,Dae Wook",
      "group": "BDI",
      "label": "Kang,Dae Wook",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Kang,Yun",
      "group": "CISA",
      "label": "Kang,Yun",
      "links": 2,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Kanthaswamy,Sreetharan K",
      "group": "ARTS",
      "label": "Kanthaswamy,Sreetharan K",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Kao,Ming-Hung",
      "group": "CLAS",
      "label": "Kao,Ming-Hung",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kaplan,Bruce",
      "group": "CHS",
      "label": "Kaplan,Bruce",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Kaplan,Robert G",
      "group": "HIDA",
      "label": "Kaplan,Robert G",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Kapstein,Ethan B",
      "group": "PUBSRV",
      "label": "Kapstein,Ethan B",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Karady,George G",
      "group": "IAFSE",
      "label": "Karady,George G",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Karam,Lina",
      "group": "IAFSE",
      "label": "Karam,Lina",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Kashiwagi,Dean Takeo",
      "group": "IAFSE",
      "label": "Kashiwagi,Dean Takeo",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Katchman,Benjamin A",
      "group": "BDI",
      "label": "Katchman,Benjamin A",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Katsanos,Christos",
      "group": "CLAS",
      "label": "Katsanos,Christos",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Katz,Charles",
      "group": "PUBSRV",
      "label": "Katz,Charles",
      "links": 3,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Kaufman,David",
      "group": "CHS",
      "label": "Kaufman,David",
      "links": 3,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Kavazanjian,Edward",
      "group": "IAFSE",
      "label": "Kavazanjian,Edward",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Kawski,Matthias",
      "group": "CLAS",
      "label": "Kawski,Matthias",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kellam,Nadia Nicole",
      "group": "IAFSE",
      "label": "Kellam,Nadia Nicole",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Keller,Colleen Sue",
      "group": "CONHI",
      "label": "Keller,Colleen Sue",
      "links": 4,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Keller,Gary D",
      "group": "CLAS",
      "label": "Keller,Gary D",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kelley,Douglas L",
      "group": "ARTS",
      "label": "Kelley,Douglas L",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Kelley,Michael Francis",
      "group": "MLFTC",
      "label": "Kelley,Michael Francis",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Kelly,Lesly",
      "group": "CONHI",
      "label": "Kelly,Lesly",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Kempany,Katherine Amara",
      "group": "PUBSRV",
      "label": "Kempany,Katherine Amara",
      "links": 0,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Kenrick,Douglas T",
      "group": "CLAS",
      "label": "Kenrick,Douglas T",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Khdour,Omar Mohammad",
      "group": "BDI",
      "label": "Khdour,Omar Mohammad",
      "links": 2,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Khoshmanesh,Mostafa",
      "group": "CLAS",
      "label": "Khoshmanesh,Mostafa",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kiaei,Sayfe",
      "group": "IAFSE",
      "label": "Kiaei,Sayfe",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Kiani,Samira",
      "group": "IAFSE",
      "label": "Kiani,Samira",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Kibler,Karen",
      "group": "BDI",
      "label": "Kibler,Karen",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Kiehl,Richard Arthur",
      "group": "IAFSE",
      "label": "Kiehl,Richard Arthur",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Kim,Gunwoo",
      "group": "HIDA",
      "label": "Kim,Gunwoo",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Kim,Wonsun",
      "group": "CONHI",
      "label": "Kim,Wonsun",
      "links": 2,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Kimbel,William Howard",
      "group": "CLAS",
      "label": "Kimbel,William Howard",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "King,Richard Roland",
      "group": "IAFSE",
      "label": "King,Richard Roland",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Kintigh,Keith William",
      "group": "CLAS",
      "label": "Kintigh,Keith William",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kinzig,Ann",
      "group": "CLAS",
      "label": "Kinzig,Ann",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kirian,Richard Adam",
      "group": "CLAS",
      "label": "Kirian,Richard Adam",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kirsch,Robert Emmanuel",
      "group": "CISA",
      "label": "Kirsch,Robert Emmanuel",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Kitch,Sally L",
      "group": "CLAS",
      "label": "Kitch,Sally L",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kitchen,Jennifer Nisha",
      "group": "IAFSE",
      "label": "Kitchen,Jennifer Nisha",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Klassen,Sarah Elizabeth",
      "group": "CLAS",
      "label": "Klassen,Sarah Elizabeth",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kleim,Jeffrey Allan",
      "group": "IAFSE",
      "label": "Kleim,Jeffrey Allan",
      "links": 5,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Klimek,Barbara G",
      "group": "PUBSRV",
      "label": "Klimek,Barbara G",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Knox,Gordon Mason",
      "group": "HIDA",
      "label": "Knox,Gordon Mason",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Knudson,Kelly",
      "group": "CLAS",
      "label": "Knudson,Kelly",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ko,Ara",
      "group": "CLAS",
      "label": "Ko,Ara",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ko,Byeongkwan",
      "group": "CLAS",
      "label": "Ko,Byeongkwan",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kobojek,Kimberly Sue",
      "group": "ARTS",
      "label": "Kobojek,Kimberly Sue",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Kodibagkar,Vikram D",
      "group": "IAFSE",
      "label": "Kodibagkar,Vikram D",
      "links": 5,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Koenigsknecht,Julius U",
      "group": "MLFTC",
      "label": "Koenigsknecht,Julius U",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Koerner,Mari",
      "group": "MLFTC",
      "label": "Koerner,Mari",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Komnenich,Pauline",
      "group": "CONHI",
      "label": "Komnenich,Pauline",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Kong,Wei",
      "group": "BDI",
      "label": "Kong,Wei",
      "links": 2,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Koppell,Jonathan",
      "group": "PUBSRV",
      "label": "Koppell,Jonathan",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Koptiuch,Kristin",
      "group": "ARTS",
      "label": "Koptiuch,Kristin",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Kornienko,Olga",
      "group": "CLAS",
      "label": "Kornienko,Olga",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Koro-Ljungberg,Mirka",
      "group": "MLFTC",
      "label": "Koro-Ljungberg,Mirka",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Kosiorek,Alexander S.",
      "group": "WCJMC",
      "label": "Kosiorek,Alexander S.",
      "links": 1,
      "group_code": 20
    }
  }, {
    "data": {
      "id": "Kostelich,Eric John",
      "group": "CLAS",
      "label": "Kostelich,Eric John",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kotschwar,Brett",
      "group": "CLAS",
      "label": "Kotschwar,Brett",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kouvetakis,John",
      "group": "CLAS",
      "label": "Kouvetakis,John",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kozicki,Michael N",
      "group": "IAFSE",
      "label": "Kozicki,Michael N",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Krajmalnik-Brown,Rosa",
      "group": "IAFSE",
      "label": "Krajmalnik-Brown,Rosa",
      "links": 7,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Kreiser,Kellie Jean",
      "group": "THUNDERBIRD",
      "label": "Kreiser,Kellie Jean",
      "links": 2,
      "group_code": 25
    }
  }, {
    "data": {
      "id": "Krishnamurthi,Narayanan",
      "group": "CONHI",
      "label": "Krishnamurthi,Narayanan",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Krysik,Judy Lynn",
      "group": "PUBSRV",
      "label": "Krysik,Judy Lynn",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Kuang,Yang",
      "group": "CLAS",
      "label": "Kuang,Yang",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kuby,Michael",
      "group": "CLAS",
      "label": "Kuby,Michael",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kuitche,Joseph Mathurin",
      "group": "IAFSE",
      "label": "Kuitche,Joseph Mathurin",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Kulinna,Pamela Hodges",
      "group": "MLFTC",
      "label": "Kulinna,Pamela Hodges",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Kulis,Stephen Stanley",
      "group": "CLAS",
      "label": "Kulis,Stephen Stanley",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kumar,Avishek Raman",
      "group": "CLAS",
      "label": "Kumar,Avishek Raman",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kurz,Alexander",
      "group": "CLAS",
      "label": "Kurz,Alexander",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kusumi,Kenro",
      "group": "CLAS",
      "label": "Kusumi,Kenro",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kuznetsov,Anastasia Stacey",
      "group": "HIDA",
      "label": "Kuznetsov,Anastasia Stacey",
      "links": 2,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Kwan,Sau Y",
      "group": "CLAS",
      "label": "Kwan,Sau Y",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Kwon,Kyounghee Hazel",
      "group": "ARTS",
      "label": "Kwon,Kyounghee Hazel",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Labaer,Joshua",
      "group": "CLAS",
      "label": "Labaer,Joshua",
      "links": 9,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Labelle,Jeffrey T",
      "group": "IAFSE",
      "label": "Labelle,Jeffrey T",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Lackner,Klaus S.",
      "group": "IAFSE",
      "label": "Lackner,Klaus S.",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Lacross,Amy Beth",
      "group": "CHS",
      "label": "Lacross,Amy Beth",
      "links": 2,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Ladd,Becky Kochenderfer",
      "group": "CLAS",
      "label": "Ladd,Becky Kochenderfer",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ladd,Gary W",
      "group": "CLAS",
      "label": "Ladd,Gary W",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lafford,Barbara A",
      "group": "CISA",
      "label": "Lafford,Barbara A",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Lai,Yen-Jung",
      "group": "BDI",
      "label": "Lai,Yen-Jung",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Lai,Ying-Cheng",
      "group": "IAFSE",
      "label": "Lai,Ying-Cheng",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Lake,Douglas Fletcher",
      "group": "CLAS",
      "label": "Lake,Douglas Fletcher",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lamb,Gerri",
      "group": "CONHI",
      "label": "Lamb,Gerri",
      "links": 4,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Lambson,Dawn Anita",
      "group": "CLAS",
      "label": "Lambson,Dawn Anita",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lammers,Peter",
      "group": "IAFSE",
      "label": "Lammers,Peter",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Lampert,Adam",
      "group": "CLAS",
      "label": "Lampert,Adam",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lancaster,Hope Sparks",
      "group": "CHS",
      "label": "Lancaster,Hope Sparks",
      "links": 0,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Lancaster,Shanyn Colleen",
      "group": "EOSS",
      "label": "Lancaster,Shanyn Colleen",
      "links": 1,
      "group_code": 19
    }
  }, {
    "data": {
      "id": "Lanchier,Nicolas",
      "group": "CLAS",
      "label": "Lanchier,Nicolas",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lande,Micah",
      "group": "IAFSE",
      "label": "Lande,Micah",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Lang,Jessica",
      "group": "CHS",
      "label": "Lang,Jessica",
      "links": 0,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Langbeheim,Elon E",
      "group": "MLFTC",
      "label": "Langbeheim,Elon E",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Langergraber,Kevin E",
      "group": "CLAS",
      "label": "Langergraber,Kevin E",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Langland,Jeffrey Olaf",
      "group": "BDI",
      "label": "Langland,Jeffrey Olaf",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Larkey,Linda Kathryn",
      "group": "CONHI",
      "label": "Larkey,Linda Kathryn",
      "links": 5,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Larkin,Kyle A",
      "group": "HIDA",
      "label": "Larkin,Kyle A",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Larsen,Dale L",
      "group": "PUBSRV",
      "label": "Larsen,Dale L",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Larsen,Wiley",
      "group": "OKED",
      "label": "Larsen,Wiley",
      "links": 2,
      "group_code": 21
    }
  }, {
    "data": {
      "id": "Larson,Kelli Leigh",
      "group": "CLAS",
      "label": "Larson,Kelli Leigh",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Larson,Rhett",
      "group": "LAW",
      "label": "Larson,Rhett",
      "links": 2,
      "group_code": 6
    }
  }, {
    "data": {
      "id": "Laubichler,Manfred Dietrich",
      "group": "CLAS",
      "label": "Laubichler,Manfred Dietrich",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lawrence,Samuel J",
      "group": "CLAS",
      "label": "Lawrence,Samuel J",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lebihan,Catherine C",
      "group": "EVPP",
      "label": "Lebihan,Catherine C",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Lecroy,Craig Winston",
      "group": "PUBSRV",
      "label": "Lecroy,Craig Winston",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Lederman,Linda Costigan",
      "group": "CLAS",
      "label": "Lederman,Linda Costigan",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lee,Allen",
      "group": "EVPP",
      "label": "Lee,Allen",
      "links": 2,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Lee,Chong Do",
      "group": "CHS",
      "label": "Lee,Chong Do",
      "links": 4,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Lee,Hyunglae",
      "group": "IAFSE",
      "label": "Lee,Hyunglae",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Lee,Joohyung",
      "group": "IAFSE",
      "label": "Lee,Joohyung",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Lee,Rebecca Elizabeth",
      "group": "CONHI",
      "label": "Lee,Rebecca Elizabeth",
      "links": 3,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Lee,Sara Astrid",
      "group": "CLAS",
      "label": "Lee,Sara Astrid",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lee,Taewoo",
      "group": "IAFSE",
      "label": "Lee,Taewoo",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Lee,Woojin",
      "group": "PUBSRV",
      "label": "Lee,Woojin",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Lee,Yann-Hang",
      "group": "IAFSE",
      "label": "Lee,Yann-Hang",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Lei,Qin",
      "group": "IAFSE",
      "label": "Lei,Qin",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Leinenweber,Kurt D",
      "group": "CLAS",
      "label": "Leinenweber,Kurt D",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Leland,Jeffrey Richard",
      "group": "CLAS",
      "label": "Leland,Jeffrey Richard",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lemery,Kathryn Sue",
      "group": "CLAS",
      "label": "Lemery,Kathryn Sue",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lenfesty,Hillary Louise",
      "group": "CLAS",
      "label": "Lenfesty,Hillary Louise",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lennon,Tara M",
      "group": "CLAS",
      "label": "Lennon,Tara M",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Leong,James Andrew Monton",
      "group": "CLAS",
      "label": "Leong,James Andrew Monton",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Leong,Karen",
      "group": "CLAS",
      "label": "Leong,Karen",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lepine,Jeffery A.",
      "group": "WPC",
      "label": "Lepine,Jeffery A.",
      "links": 1,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Lerman,Elizabeth A",
      "group": "HIDA",
      "label": "Lerman,Elizabeth A",
      "links": 4,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Lerman,Richard",
      "group": "ARTS",
      "label": "Lerman,Richard",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Lessios-Damerow,Julia L",
      "group": "EVPP",
      "label": "Lessios-Damerow,Julia L",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Lester,Neal Andre",
      "group": "CLAS",
      "label": "Lester,Neal Andre",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Levine,James Andrew",
      "group": "CHS",
      "label": "Levine,James Andrew",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Levitus,Marcia",
      "group": "CLAS",
      "label": "Levitus,Marcia",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Levy,Roy",
      "group": "CLAS",
      "label": "Levy,Roy",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Li,Baoxin",
      "group": "IAFSE",
      "label": "Li,Baoxin",
      "links": 6,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Li,Jialun",
      "group": "CLAS",
      "label": "Li,Jialun",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Li,Jian",
      "group": "IAFSE",
      "label": "Li,Jian",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Li,Jing",
      "group": "IAFSE",
      "label": "Li,Jing",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Li,Wei",
      "group": "CLAS",
      "label": "Li,Wei",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Li,Wenwen",
      "group": "CLAS",
      "label": "Li,Wenwen",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Li,Xiaoxiao",
      "group": "CLAS",
      "label": "Li,Xiaoxiao",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Liang,Jianming",
      "group": "CHS",
      "label": "Liang,Jianming",
      "links": 3,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Liao,Jianling",
      "group": "CLAS",
      "label": "Liao,Jianling",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lietz,Cynthia A",
      "group": "PUBSRV",
      "label": "Lietz,Cynthia A",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Lim,Julian",
      "group": "CLAS",
      "label": "Lim,Julian",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lin,Jerry Y S",
      "group": "IAFSE",
      "label": "Lin,Jerry Y S",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Lin,Su",
      "group": "CLAS",
      "label": "Lin,Su",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lind,Mary Laura",
      "group": "IAFSE",
      "label": "Lind,Mary Laura",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Linde,Jennifer Andrea",
      "group": "CLAS",
      "label": "Linde,Jennifer Andrea",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lindor,Keith Douglas",
      "group": "EVPP",
      "label": "Lindor,Keith Douglas",
      "links": 3,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Lindsay,Stuart",
      "group": "CLAS",
      "label": "Lindsay,Stuart",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lindstrom Johnson,Sarah Renee",
      "group": "CLAS",
      "label": "Lindstrom Johnson,Sarah Renee",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Line,Michael Robert",
      "group": "CLAS",
      "label": "Line,Michael Robert",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lineberry,Heather Sealy",
      "group": "HIDA",
      "label": "Lineberry,Heather Sealy",
      "links": 2,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Liou,Daniel Dinn-You",
      "group": "MLFTC",
      "label": "Liou,Daniel Dinn-You",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Lippincott,Dianna G",
      "group": "EVPP",
      "label": "Lippincott,Dianna G",
      "links": 3,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Liss,Julie M",
      "group": "CHS",
      "label": "Liss,Julie M",
      "links": 4,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Liu,Huan",
      "group": "IAFSE",
      "label": "Liu,Huan",
      "links": 7,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Liu,Jingyue",
      "group": "CLAS",
      "label": "Liu,Jingyue",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Liu,Li",
      "group": "CHS",
      "label": "Liu,Li",
      "links": 2,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Liu,Wei",
      "group": "CLAS",
      "label": "Liu,Wei",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Liu,Yan",
      "group": "CLAS",
      "label": "Liu,Yan",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Liu,Yongming",
      "group": "IAFSE",
      "label": "Liu,Yongming",
      "links": 6,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Lobo,Jose A",
      "group": "GIOS",
      "label": "Lobo,Jose A",
      "links": 3,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Lockard,Joe",
      "group": "CLAS",
      "label": "Lockard,Joe",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lockhart,Thurmon Eddy",
      "group": "IAFSE",
      "label": "Lockhart,Thurmon Eddy",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Lodato,Mark",
      "group": "WCJMC",
      "label": "Lodato,Mark",
      "links": 1,
      "group_code": 20
    }
  }, {
    "data": {
      "id": "London,Jeremi Shavonda",
      "group": "IAFSE",
      "label": "London,Jeremi Shavonda",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Loonstra,Jacqueline",
      "group": "MLFTC",
      "label": "Loonstra,Jacqueline",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Lopez,Juan Manuel",
      "group": "CLAS",
      "label": "Lopez,Juan Manuel",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lopez,Vera A",
      "group": "CLAS",
      "label": "Lopez,Vera A",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lou,Yingyan",
      "group": "IAFSE",
      "label": "Lou,Yingyan",
      "links": 5,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Loyd,Kerrie Anne",
      "group": "ARTS",
      "label": "Loyd,Kerrie Anne",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Lucio,Joanna Domenica",
      "group": "PUBSRV",
      "label": "Lucio,Joanna Domenica",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Lue,Lih-Fen",
      "group": "BDI",
      "label": "Lue,Lih-Fen",
      "links": 2,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Luecken,Linda J",
      "group": "CLAS",
      "label": "Luecken,Linda J",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lunardini,Cecilia",
      "group": "CLAS",
      "label": "Lunardini,Cecilia",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Luo,Xin",
      "group": "CHS",
      "label": "Luo,Xin",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Luthar,Suniya",
      "group": "CLAS",
      "label": "Luthar,Suniya",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Lyles,Annmarie Abu-Judom",
      "group": "CONHI",
      "label": "Lyles,Annmarie Abu-Judom",
      "links": 2,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Lynch,Heidi Marie",
      "group": "CHS",
      "label": "Lynch,Heidi Marie",
      "links": 0,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Lynk,Myles V",
      "group": "LAW",
      "label": "Lynk,Myles V",
      "links": 1,
      "group_code": 6
    }
  }, {
    "data": {
      "id": "Lyons,James Richard",
      "group": "CLAS",
      "label": "Lyons,James Richard",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ma,Duo",
      "group": "CLAS",
      "label": "Ma,Duo",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Macfadyen,Joshua",
      "group": "CLAS",
      "label": "Macfadyen,Joshua",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Maciejewski,Ross",
      "group": "IAFSE",
      "label": "Maciejewski,Ross",
      "links": 12,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Mackinnon,David Peter",
      "group": "CLAS",
      "label": "Mackinnon,David Peter",
      "links": 5,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mada Kannan,Arunachala Nadar",
      "group": "IAFSE",
      "label": "Mada Kannan,Arunachala Nadar",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Madison,Paige Ann",
      "group": "CLAS",
      "label": "Madison,Paige Ann",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Magee,Dewey Mitchell",
      "group": "BDI",
      "label": "Magee,Dewey Mitchell",
      "links": 2,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Maguire,Edward",
      "group": "PUBSRV",
      "label": "Maguire,Edward",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Mahalov,Alex",
      "group": "CLAS",
      "label": "Mahalov,Alex",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mahanti,Ashwina",
      "group": "CLAS",
      "label": "Mahanti,Ashwina",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mahanti,Prasun",
      "group": "CLAS",
      "label": "Mahanti,Prasun",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mahoney,Maren Michelle",
      "group": "SFIS",
      "label": "Mahoney,Maren Michelle",
      "links": 1,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Mai,Chuhong",
      "group": "CLAS",
      "label": "Mai,Chuhong",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Maienschein,Jane Ann",
      "group": "CLAS",
      "label": "Maienschein,Jane Ann",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Makin,Jean E",
      "group": "HIDA",
      "label": "Makin,Jean E",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Maley,Carlo Casbier",
      "group": "CLAS",
      "label": "Maley,Carlo Casbier",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Malhotra,Sangeeta",
      "group": "CLAS",
      "label": "Malhotra,Sangeeta",
      "links": 5,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Maltz,Arnold",
      "group": "WPC",
      "label": "Maltz,Arnold",
      "links": 1,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Mamlouk,Michael Sobhi",
      "group": "IAFSE",
      "label": "Mamlouk,Michael Sobhi",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Mandarino,Lawrence",
      "group": "CHS",
      "label": "Mandarino,Lawrence",
      "links": 4,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Mangone,Marco",
      "group": "CLAS",
      "label": "Mangone,Marco",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Manninen,Bertha Alvarez",
      "group": "ARTS",
      "label": "Manninen,Bertha Alvarez",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Manning,Linda Marie",
      "group": "PUBSRV",
      "label": "Manning,Linda Marie",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Mantie,Roger Allan",
      "group": "HIDA",
      "label": "Mantie,Roger Allan",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Manuel-Navarrete,David",
      "group": "GIOS",
      "label": "Manuel-Navarrete,David",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Marchant,Gary E",
      "group": "LAW",
      "label": "Marchant,Gary E",
      "links": 1,
      "group_code": 6
    }
  }, {
    "data": {
      "id": "Marcus,Andrew",
      "group": "BDI",
      "label": "Marcus,Andrew",
      "links": 2,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Marean,Curtis William",
      "group": "CLAS",
      "label": "Marean,Curtis William",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Marek,Karen Sue",
      "group": "CONHI",
      "label": "Marek,Karen Sue",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Marinelli,Donald",
      "group": "HIDA",
      "label": "Marinelli,Donald",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Marley,Scott Christopher",
      "group": "MLFTC",
      "label": "Marley,Scott Christopher",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Marley,Tennille Larzelere",
      "group": "CLAS",
      "label": "Marley,Tennille Larzelere",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mars,Carole Kathleen",
      "group": "GIOS",
      "label": "Mars,Carole Kathleen",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Marsh,Josephine Peyton",
      "group": "MLFTC",
      "label": "Marsh,Josephine Peyton",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Marsh,Paul Colburn",
      "group": "CLAS",
      "label": "Marsh,Paul Colburn",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Marshall,Pamela Ann",
      "group": "ARTS",
      "label": "Marshall,Pamela Ann",
      "links": 4,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Marsiglia,Flavio",
      "group": "PUBSRV",
      "label": "Marsiglia,Flavio",
      "links": 6,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Marsteller,Sara Jane",
      "group": "CLAS",
      "label": "Marsteller,Sara Jane",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Martin,Carol Lynn",
      "group": "CLAS",
      "label": "Martin,Carol Lynn",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Martin,Chris A",
      "group": "CISA",
      "label": "Martin,Chris A",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Martin,Joyce Ann",
      "group": "LIB",
      "label": "Martin,Joyce Ann",
      "links": 1,
      "group_code": 23
    }
  }, {
    "data": {
      "id": "Martinez,Airin D",
      "group": "CLAS",
      "label": "Martinez,Airin D",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Martinez,David",
      "group": "CLAS",
      "label": "Martinez,David",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Marvi,Hamidreza",
      "group": "IAFSE",
      "label": "Marvi,Hamidreza",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Marzke,Robert F",
      "group": "CLAS",
      "label": "Marzke,Robert F",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mascaro,Giuseppe",
      "group": "IAFSE",
      "label": "Mascaro,Giuseppe",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Massia,Stephen Paul",
      "group": "IAFSE",
      "label": "Massia,Stephen Paul",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Massimo,Nicholas Christopher",
      "group": "CLAS",
      "label": "Massimo,Nicholas Christopher",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mastroeni,Diego Fernando",
      "group": "BDI",
      "label": "Mastroeni,Diego Fernando",
      "links": 3,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Matera,Frances Rose",
      "group": "WCJMC",
      "label": "Matera,Frances Rose",
      "links": 1,
      "group_code": 20
    }
  }, {
    "data": {
      "id": "Mathur,Sarup Rani",
      "group": "MLFTC",
      "label": "Mathur,Sarup Rani",
      "links": 2,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Matyushov,Dmitry V",
      "group": "CLAS",
      "label": "Matyushov,Dmitry V",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Maupin,Jonathan Nathaniel",
      "group": "CLAS",
      "label": "Maupin,Jonathan Nathaniel",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mauricio,Anne Marie",
      "group": "CLAS",
      "label": "Mauricio,Anne Marie",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mauskopf,Philip",
      "group": "CLAS",
      "label": "Mauskopf,Philip",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mayes,Kristin Kay",
      "group": "SFIS",
      "label": "Mayes,Kristin Kay",
      "links": 2,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Maynard,Andrew",
      "group": "SFIS",
      "label": "Maynard,Andrew",
      "links": 3,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Mayyas,Abdel Ra'Ouf Turki",
      "group": "IAFSE",
      "label": "Mayyas,Abdel Ra'Ouf Turki",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Mazzola,Daniel J",
      "group": "WPC",
      "label": "Mazzola,Daniel J",
      "links": 1,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Mccartney,Martha Rogers",
      "group": "CLAS",
      "label": "Mccartney,Martha Rogers",
      "links": 5,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mcclain,Darya Denise",
      "group": "CONHI",
      "label": "Mcclain,Darya Denise",
      "links": 5,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Mcclure,Kimberlee",
      "group": "CLAS",
      "label": "Mcclure,Kimberlee",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mcclure,Samuel Manley",
      "group": "CLAS",
      "label": "Mcclure,Samuel Manley",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mccullough,Jeffrey Carroll",
      "group": "CHS",
      "label": "Mccullough,Jeffrey Carroll",
      "links": 3,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Mccullough,Kelly N",
      "group": "WCJMC",
      "label": "Mccullough,Kelly N",
      "links": 1,
      "group_code": 20
    }
  }, {
    "data": {
      "id": "Mcdaniel,Troy Lee",
      "group": "IAFSE",
      "label": "Mcdaniel,Troy Lee",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Mcfadden,Erica Skogebo",
      "group": "PUBSRV",
      "label": "Mcfadden,Erica Skogebo",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Mcgehee,Robert Thomas",
      "group": "GIOS",
      "label": "Mcgehee,Robert Thomas",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Mcgowen,John",
      "group": "IAFSE",
      "label": "Mcgowen,John",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Mcgraw,Kevin J",
      "group": "CLAS",
      "label": "Mcgraw,Kevin J",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mcgregor,Joan Lucy",
      "group": "CLAS",
      "label": "Mcgregor,Joan Lucy",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mcgurty,Iveta Silova",
      "group": "MLFTC",
      "label": "Mcgurty,Iveta Silova",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Mchenry,Albert L",
      "group": "CLAS",
      "label": "Mchenry,Albert L",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mcintyre,Scott Erin",
      "group": "ARTS",
      "label": "Mcintyre,Scott Erin",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Mckenna,Ann Frances",
      "group": "IAFSE",
      "label": "Mckenna,Ann Frances",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Mclaughlin,Claire P",
      "group": "EVPP",
      "label": "Mclaughlin,Claire P",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Mcmahon,Jeffrey D",
      "group": "HIDA",
      "label": "Mcmahon,Jeffrey D",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Mcnamara,Danielle S.",
      "group": "CLAS",
      "label": "Mcnamara,Danielle S.",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mcnulty,Julie Ann",
      "group": "CONHI",
      "label": "Mcnulty,Julie Ann",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Meier,Madeline Hogan",
      "group": "CLAS",
      "label": "Meier,Madeline Hogan",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Meldrum,Deirdre Ruth",
      "group": "IAFSE",
      "label": "Meldrum,Deirdre Ruth",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Melody,Noeleen",
      "group": "CLAS",
      "label": "Melody,Noeleen",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Meltzer,David E",
      "group": "MLFTC",
      "label": "Meltzer,David E",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Menary,Kyle Robert",
      "group": "CLAS",
      "label": "Menary,Kyle Robert",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Menendez,Jose",
      "group": "CLAS",
      "label": "Menendez,Jose",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Merritt,Joi Deshawn",
      "group": "MLFTC",
      "label": "Merritt,Joi Deshawn",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Messing,Jill Theresa",
      "group": "PUBSRV",
      "label": "Messing,Jill Theresa",
      "links": 3,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Meyer,Heather Mary",
      "group": "CLAS",
      "label": "Meyer,Heather Mary",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Meyers,Travis John",
      "group": "PUBSRV",
      "label": "Meyers,Travis John",
      "links": 0,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Michelaki,Konstantina-Eleni",
      "group": "CLAS",
      "label": "Michelaki,Konstantina-Eleni",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mickelson,Kristin",
      "group": "ARTS",
      "label": "Mickelson,Kristin",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Middel,Ariane Christine",
      "group": "CLAS",
      "label": "Middel,Ariane Christine",
      "links": 5,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Middleton,James Arthur",
      "group": "IAFSE",
      "label": "Middleton,James Arthur",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Mignolet,Marc Paul",
      "group": "IAFSE",
      "label": "Mignolet,Marc Paul",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Mikellides,Pavlos George",
      "group": "IAFSE",
      "label": "Mikellides,Pavlos George",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Milkoreit,Manjana",
      "group": "GIOS",
      "label": "Milkoreit,Manjana",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Miller,Cindy Faith",
      "group": "CLAS",
      "label": "Miller,Cindy Faith",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Miller,Clark Anson",
      "group": "SFIS",
      "label": "Miller,Clark Anson",
      "links": 3,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Miller,Jon",
      "group": "OKED",
      "label": "Miller,Jon",
      "links": 1,
      "group_code": 21
    }
  }, {
    "data": {
      "id": "Miller,Megan Marie",
      "group": "CLAS",
      "label": "Miller,Megan Marie",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mills,Jeremy H",
      "group": "CLAS",
      "label": "Mills,Jeremy H",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Milner,Fabio Augusto",
      "group": "CLAS",
      "label": "Milner,Fabio Augusto",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Minteer,Ben A",
      "group": "CLAS",
      "label": "Minteer,Ben A",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mirchandani,Pitu B.",
      "group": "IAFSE",
      "label": "Mirchandani,Pitu B.",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Mishra,Ashok Kumar",
      "group": "WPC",
      "label": "Mishra,Ashok Kumar",
      "links": 1,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Misra,Rajeev",
      "group": "CLAS",
      "label": "Misra,Rajeev",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mittelmann,Hans D",
      "group": "CLAS",
      "label": "Mittelmann,Hans D",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mobasher,Barzin",
      "group": "IAFSE",
      "label": "Mobasher,Barzin",
      "links": 5,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Monkiewicz,Jacqueline A",
      "group": "CLAS",
      "label": "Monkiewicz,Jacqueline A",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Montgomery,Douglas C",
      "group": "IAFSE",
      "label": "Montgomery,Douglas C",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Moody,Eric Kellan",
      "group": "CLAS",
      "label": "Moody,Eric Kellan",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mook,Laurie Ingrid",
      "group": "PUBSRV",
      "label": "Mook,Laurie Ingrid",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Moon,Barry Robert",
      "group": "ARTS",
      "label": "Moon,Barry Robert",
      "links": 2,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Moon,Penelope Adams",
      "group": "CLAS",
      "label": "Moon,Penelope Adams",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mooney,Sian",
      "group": "ARTS",
      "label": "Mooney,Sian",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Moore,Ana L",
      "group": "CLAS",
      "label": "Moore,Ana L",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Moore,Gary",
      "group": "CLAS",
      "label": "Moore,Gary",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Moore,Jacob Clark",
      "group": "EXEC_ADMIN",
      "label": "Moore,Jacob Clark",
      "links": 1,
      "group_code": 17
    }
  }, {
    "data": {
      "id": "Moore,Marianne Susan",
      "group": "CISA",
      "label": "Moore,Marianne Susan",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Moore,Thomas Andrew",
      "group": "CLAS",
      "label": "Moore,Thomas Andrew",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Morales,Julio",
      "group": "HIDA",
      "label": "Morales,Julio",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Moreno,Karen Inez",
      "group": "CHS",
      "label": "Moreno,Karen Inez",
      "links": 0,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Morgan,Thomas J. H.",
      "group": "CLAS",
      "label": "Morgan,Thomas J. H.",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Morris,Brenda C",
      "group": "CONHI",
      "label": "Morris,Brenda C",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Morris,Traci L",
      "group": "CLAS",
      "label": "Morris,Traci L",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Moses,Karen S",
      "group": "EOSS",
      "label": "Moses,Karen S",
      "links": 1,
      "group_code": 19
    }
  }, {
    "data": {
      "id": "Mosley,Lisa Elaine",
      "group": "OKED",
      "label": "Mosley,Lisa Elaine",
      "links": 1,
      "group_code": 21
    }
  }, {
    "data": {
      "id": "Mossberger,Karen",
      "group": "PUBSRV",
      "label": "Mossberger,Karen",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Moulton,Ian Frederick",
      "group": "CISA",
      "label": "Moulton,Ian Frederick",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Mu,Bin",
      "group": "IAFSE",
      "label": "Mu,Bin",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Mubayi,Anuj",
      "group": "ARTS",
      "label": "Mubayi,Anuj",
      "links": 3,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Mujica,Vladimiro",
      "group": "CLAS",
      "label": "Mujica,Vladimiro",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Mullane,Sarah Louise",
      "group": "CHS",
      "label": "Mullane,Sarah Louise",
      "links": 0,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Murcko,Anita C.",
      "group": "CHS",
      "label": "Murcko,Anita C.",
      "links": 2,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Murphy Erfani,Julie Ann",
      "group": "ARTS",
      "label": "Murphy Erfani,Julie Ann",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Muthuswamy,Jitendran",
      "group": "IAFSE",
      "label": "Muthuswamy,Jitendran",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Muzyka,Diann M",
      "group": "CONHI",
      "label": "Muzyka,Diann M",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Myint,Soe W",
      "group": "CLAS",
      "label": "Myint,Soe W",
      "links": 7,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Nahzi,Fron",
      "group": "GIOS",
      "label": "Nahzi,Fron",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Nailor,Natalie",
      "group": "MLFTC",
      "label": "Nailor,Natalie",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Nannenga,Brent Lane",
      "group": "IAFSE",
      "label": "Nannenga,Brent Lane",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Nation,Marcia L",
      "group": "GIOS",
      "label": "Nation,Marcia L",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Navarro-Mcelhaney,Kristine",
      "group": "CLAS",
      "label": "Navarro-Mcelhaney,Kristine",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Neal,Tess",
      "group": "ARTS",
      "label": "Neal,Tess",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Nedelkov,Dobrin",
      "group": "BDI",
      "label": "Nedelkov,Dobrin",
      "links": 3,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Neisewander,Janet Leigh",
      "group": "CLAS",
      "label": "Neisewander,Janet Leigh",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Neithalath,Narayanan",
      "group": "IAFSE",
      "label": "Neithalath,Narayanan",
      "links": 5,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Nelson,Ben A",
      "group": "CLAS",
      "label": "Nelson,Ben A",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Nelson,Brian Carl",
      "group": "IAFSE",
      "label": "Nelson,Brian Carl",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Nelson,David Michael",
      "group": "CLAS",
      "label": "Nelson,David Michael",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Nelson,Elizabeth Marie",
      "group": "CLAS",
      "label": "Nelson,Elizabeth Marie",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Nelson,Glen R",
      "group": "CONHI",
      "label": "Nelson,Glen R",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Nelson,Randall William",
      "group": "BDI",
      "label": "Nelson,Randall William",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Nemanich,Robert John",
      "group": "CLAS",
      "label": "Nemanich,Robert John",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Nesse,Randolph Martin",
      "group": "CLAS",
      "label": "Nesse,Randolph Martin",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Neuberg,Steven Laurence",
      "group": "CLAS",
      "label": "Neuberg,Steven Laurence",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Neuer,Susanne",
      "group": "CLAS",
      "label": "Neuer,Susanne",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Neveu,Marc Francois Laurent",
      "group": "CLAS",
      "label": "Neveu,Marc Francois Laurent",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Newbern,Jason M.",
      "group": "CLAS",
      "label": "Newbern,Jason M.",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Newfeld,Stuart J",
      "group": "CLAS",
      "label": "Newfeld,Stuart J",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Newman,Nathan",
      "group": "IAFSE",
      "label": "Newman,Nathan",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Nickerson,Cheryl",
      "group": "CLAS",
      "label": "Nickerson,Cheryl",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Nielsen,Ann Walker",
      "group": "MLFTC",
      "label": "Nielsen,Ann Walker",
      "links": 2,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Nielsen,David Ross",
      "group": "IAFSE",
      "label": "Nielsen,David Ross",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Nieves Colon,Maria Alejandra",
      "group": "CLAS",
      "label": "Nieves Colon,Maria Alejandra",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Nikkhah,Mehdi",
      "group": "IAFSE",
      "label": "Nikkhah,Mehdi",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Ning,Cun-Zheng",
      "group": "IAFSE",
      "label": "Ning,Cun-Zheng",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Nocek,Adam",
      "group": "HIDA",
      "label": "Nocek,Adam",
      "links": 2,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Nunez,Diane E",
      "group": "CONHI",
      "label": "Nunez,Diane E",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Nyaupane,Gyan P",
      "group": "PUBSRV",
      "label": "Nyaupane,Gyan P",
      "links": 3,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Nystrom,Eric Charles",
      "group": "CISA",
      "label": "Nystrom,Eric Charles",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "O'Neill Jr,Gerald Daniel",
      "group": "GIOS",
      "label": "O'Neill Jr,Gerald Daniel",
      "links": 2,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Oddo,Salvatore",
      "group": "BDI",
      "label": "Oddo,Salvatore",
      "links": 11,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Ogras,Umit Y.",
      "group": "IAFSE",
      "label": "Ogras,Umit Y.",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Oh,Young Kyun",
      "group": "CLAS",
      "label": "Oh,Young Kyun",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ohri-Vachaspati,Punam",
      "group": "CHS",
      "label": "Ohri-Vachaspati,Punam",
      "links": 5,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Okhremtchouk,Irina Stepanovna",
      "group": "MLFTC",
      "label": "Okhremtchouk,Irina Stepanovna",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Okie,Jordan",
      "group": "CLAS",
      "label": "Okie,Jordan",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Okun,Morris A",
      "group": "CLAS",
      "label": "Okun,Morris A",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Olive,Michael Foster",
      "group": "CLAS",
      "label": "Olive,Michael Foster",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Olson,Larry Wood",
      "group": "IAFSE",
      "label": "Olson,Larry Wood",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Olson,Loren",
      "group": "HIDA",
      "label": "Olson,Loren",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Ortiz,John Bryce",
      "group": "CLAS",
      "label": "Ortiz,John Bryce",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ostman,Rae Ellen Marie",
      "group": "SFIS",
      "label": "Ostman,Rae Ellen Marie",
      "links": 2,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Ostrom,Amy",
      "group": "WPC",
      "label": "Ostrom,Amy",
      "links": 1,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Oswald,Jay",
      "group": "IAFSE",
      "label": "Oswald,Jay",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Owaynat,Hadil Abdelrazeq",
      "group": "CLAS",
      "label": "Owaynat,Hadil Abdelrazeq",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ozev,Sule",
      "group": "IAFSE",
      "label": "Ozev,Sule",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Ozkan,Sefika Banu",
      "group": "CLAS",
      "label": "Ozkan,Sefika Banu",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Pahle,Robert",
      "group": "CLAS",
      "label": "Pahle,Robert",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Paine,Garth Crispan",
      "group": "HIDA",
      "label": "Paine,Garth Crispan",
      "links": 4,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Palta,Monica Marie",
      "group": "CLAS",
      "label": "Palta,Monica Marie",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Pan,Rong",
      "group": "IAFSE",
      "label": "Pan,Rong",
      "links": 5,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Panchanathan,Sethuraman",
      "group": "IAFSE",
      "label": "Panchanathan,Sethuraman",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Pangrazi,Connie Jo",
      "group": "MLFTC",
      "label": "Pangrazi,Connie Jo",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Panza,Kaitlyn Elizabeth",
      "group": "CLAS",
      "label": "Panza,Kaitlyn Elizabeth",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Papandreou-Suppappola,Antonia",
      "group": "IAFSE",
      "label": "Papandreou-Suppappola,Antonia",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Papotti,Paolo",
      "group": "IAFSE",
      "label": "Papotti,Paolo",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Parazynski,Scott",
      "group": "IAFSE",
      "label": "Parazynski,Scott",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Pardini,Dustin Andrew",
      "group": "PUBSRV",
      "label": "Pardini,Dustin Andrew",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Parikh,Maulik Kirit",
      "group": "CLAS",
      "label": "Parikh,Maulik Kirit",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Paris,Kristen Nicole",
      "group": "CLAS",
      "label": "Paris,Kristen Nicole",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Park,Jin",
      "group": "BDI",
      "label": "Park,Jin",
      "links": 5,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Park,Pori",
      "group": "CLAS",
      "label": "Park,Pori",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Parker,Marla Alexia",
      "group": "OKED",
      "label": "Parker,Marla Alexia",
      "links": 0,
      "group_code": 21
    }
  }, {
    "data": {
      "id": "Parker,Nathan Chandler",
      "group": "CLAS",
      "label": "Parker,Nathan Chandler",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Parmentier,Mary Jane C",
      "group": "SFIS",
      "label": "Parmentier,Mary Jane C",
      "links": 2,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Parrish,Kristen",
      "group": "IAFSE",
      "label": "Parrish,Kristen",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Parsey Jr,John Michael",
      "group": "IAFSE",
      "label": "Parsey Jr,John Michael",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Pasqualetti,Martin J",
      "group": "CLAS",
      "label": "Pasqualetti,Martin J",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Patel,Vimla",
      "group": "CHS",
      "label": "Patel,Vimla",
      "links": 2,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Patience,Jennifer Lynn",
      "group": "CLAS",
      "label": "Patience,Jennifer Lynn",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Patock-Peckham,Julie A",
      "group": "CLAS",
      "label": "Patock-Peckham,Julie A",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Paupert,Julien Henri",
      "group": "CLAS",
      "label": "Paupert,Julien Henri",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Pavlic,Theodore Paul",
      "group": "IAFSE",
      "label": "Pavlic,Theodore Paul",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Peck,Sidnee Kay",
      "group": "WPC",
      "label": "Peck,Sidnee Kay",
      "links": 1,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Peeples,Matthew Allen",
      "group": "CLAS",
      "label": "Peeples,Matthew Allen",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Peet,Matthew M",
      "group": "IAFSE",
      "label": "Peet,Matthew M",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Peet,Yulia V",
      "group": "IAFSE",
      "label": "Peet,Yulia V",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Pendyala,Ram Mohan",
      "group": "IAFSE",
      "label": "Pendyala,Ram Mohan",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Peng,Xihong",
      "group": "CISA",
      "label": "Peng,Xihong",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Penton,Christopher Ryan",
      "group": "CISA",
      "label": "Penton,Christopher Ryan",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Peralta,Pedro D",
      "group": "IAFSE",
      "label": "Peralta,Pedro D",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Perez,Gloria Adriana",
      "group": "CONHI",
      "label": "Perez,Gloria Adriana",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Perreault,Francois",
      "group": "IAFSE",
      "label": "Perreault,Francois",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Perrings,Charles Aubrey",
      "group": "CLAS",
      "label": "Perrings,Charles Aubrey",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Perry,Christopher Alexander",
      "group": "CONHI",
      "label": "Perry,Christopher Alexander",
      "links": 0,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Peter,Beate",
      "group": "CHS",
      "label": "Peter,Beate",
      "links": 4,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Peterson,Suzanne Joanna",
      "group": "WPC",
      "label": "Peterson,Suzanne Joanna",
      "links": 1,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Petrov,Megan Elise",
      "group": "CONHI",
      "label": "Petrov,Megan Elise",
      "links": 2,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Pettigrew,Jonathan",
      "group": "CLAS",
      "label": "Pettigrew,Jonathan",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Pettit,George Robert",
      "group": "CLAS",
      "label": "Pettit,George Robert",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Pettit,Robin Kathleen",
      "group": "CLAS",
      "label": "Pettit,Robin Kathleen",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Pfeiffer,Deirdre A",
      "group": "CLAS",
      "label": "Pfeiffer,Deirdre A",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Pharo,John Angelo",
      "group": "CLAS",
      "label": "Pharo,John Angelo",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Phelan,Patrick E",
      "group": "IAFSE",
      "label": "Phelan,Patrick E",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Phillips,Elizabeth Deutsch",
      "group": "EVPP",
      "label": "Phillips,Elizabeth Deutsch",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Phillips,Stephen M",
      "group": "IAFSE",
      "label": "Phillips,Stephen M",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Pierce-Mcmanamon,Francis P",
      "group": "CLAS",
      "label": "Pierce-Mcmanamon,Francis P",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Pijawka,David",
      "group": "CLAS",
      "label": "Pijawka,David",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Pilarisetty,Tarakeshwar",
      "group": "CLAS",
      "label": "Pilarisetty,Tarakeshwar",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Pina,Armando A",
      "group": "CLAS",
      "label": "Pina,Armando A",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Pinholster,Jacob Daniel",
      "group": "HIDA",
      "label": "Pinholster,Jacob Daniel",
      "links": 2,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Pipe,Teri Britt",
      "group": "CONHI",
      "label": "Pipe,Teri Britt",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Pittman,Andrea Lorraine",
      "group": "CHS",
      "label": "Pittman,Andrea Lorraine",
      "links": 2,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Pivovarova,Margarita",
      "group": "MLFTC",
      "label": "Pivovarova,Margarita",
      "links": 3,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Pizarro-Terrill,Jesenia Milagr",
      "group": "PUBSRV",
      "label": "Pizarro-Terrill,Jesenia Milagr",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Pizzarello,Sandra",
      "group": "CLAS",
      "label": "Pizzarello,Sandra",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Pizziconi,Vincent B",
      "group": "IAFSE",
      "label": "Pizziconi,Vincent B",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Pizzo,Melissa",
      "group": "EVPP",
      "label": "Pizzo,Melissa",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Podolnikova,Nataly",
      "group": "CLAS",
      "label": "Podolnikova,Nataly",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Polidoro,Beth",
      "group": "ARTS",
      "label": "Polidoro,Beth",
      "links": 3,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Pollat,Scott Lewis",
      "group": "IAFSE",
      "label": "Pollat,Scott Lewis",
      "links": 0,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Polt,Michael Christian",
      "group": "OKED",
      "label": "Polt,Michael Christian",
      "links": 1,
      "group_code": 21
    }
  }, {
    "data": {
      "id": "Polygerinos,Panagiotis",
      "group": "IAFSE",
      "label": "Polygerinos,Panagiotis",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Ponce,Fernando Agustin",
      "group": "CLAS",
      "label": "Ponce,Fernando Agustin",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Popat,Sudeep C",
      "group": "BDI",
      "label": "Popat,Sudeep C",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Poret-Peterson,Amisha T",
      "group": "CLAS",
      "label": "Poret-Peterson,Amisha T",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Porter,Michele",
      "group": "CLAS",
      "label": "Porter,Michele",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Powers,Jeanne",
      "group": "MLFTC",
      "label": "Powers,Jeanne",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Pratt,Megan E",
      "group": "CLAS",
      "label": "Pratt,Megan E",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Pratt,Stephen",
      "group": "CLAS",
      "label": "Pratt,Stephen",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Presson,Clark Cortelyou",
      "group": "CLAS",
      "label": "Presson,Clark Cortelyou",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Price,Dianne E",
      "group": "BDI",
      "label": "Price,Dianne E",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Puckett,Kathleen S",
      "group": "MLFTC",
      "label": "Puckett,Kathleen S",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Puzauskas,Katherine A",
      "group": "LAW",
      "label": "Puzauskas,Katherine A",
      "links": 1,
      "group_code": 6
    }
  }, {
    "data": {
      "id": "Qin,Jiangchao",
      "group": "IAFSE",
      "label": "Qin,Jiangchao",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Qing,Quan",
      "group": "CLAS",
      "label": "Qing,Quan",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Qiu,Ji",
      "group": "BDI",
      "label": "Qiu,Ji",
      "links": 3,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Qiu,Yueming",
      "group": "IAFSE",
      "label": "Qiu,Yueming",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Quay,Raymond G",
      "group": "GIOS",
      "label": "Quay,Raymond G",
      "links": 3,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Quigg,John C",
      "group": "CLAS",
      "label": "Quigg,John C",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Rajagopalan,Jagannathan",
      "group": "IAFSE",
      "label": "Rajagopalan,Jagannathan",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Rajan,Subramaniam Dharma",
      "group": "IAFSE",
      "label": "Rajan,Subramaniam Dharma",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Randall,Ashley Karay",
      "group": "CISA",
      "label": "Randall,Ashley Karay",
      "links": 2,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Raupp,Gregory Bruce",
      "group": "IAFSE",
      "label": "Raupp,Gregory Bruce",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Rawls,Jeffery Alan",
      "group": "CLAS",
      "label": "Rawls,Jeffery Alan",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Raymond,Jason R",
      "group": "CLAS",
      "label": "Raymond,Jason R",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Razdan,Anshuman",
      "group": "IAFSE",
      "label": "Razdan,Anshuman",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Redding,Kevin Edward",
      "group": "CLAS",
      "label": "Redding,Kevin Edward",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Reddy,Corianne Rogalsky",
      "group": "CHS",
      "label": "Reddy,Corianne Rogalsky",
      "links": 2,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Reddy,T Agami",
      "group": "HIDA",
      "label": "Reddy,T Agami",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Redman,Charles L",
      "group": "CLAS",
      "label": "Redman,Charles L",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Redman,Erin N",
      "group": "GIOS",
      "label": "Redman,Erin N",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Reed,Kaye E",
      "group": "CLAS",
      "label": "Reed,Kaye E",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Reed,Michael B",
      "group": "PUBLIC_AFFAIRS",
      "label": "Reed,Michael B",
      "links": 1,
      "group_code": 26
    }
  }, {
    "data": {
      "id": "Reffett,Kevin",
      "group": "WPC",
      "label": "Reffett,Kevin",
      "links": 1,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Rege,Kaushal",
      "group": "IAFSE",
      "label": "Rege,Kaushal",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Regier,Philip Roger",
      "group": "ONLINE",
      "label": "Regier,Philip Roger",
      "links": 1,
      "group_code": 27
    }
  }, {
    "data": {
      "id": "Reifsnider,Elizabeth Ann",
      "group": "CONHI",
      "label": "Reifsnider,Elizabeth Ann",
      "links": 5,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Reilly,Thomas Francis",
      "group": "PUBSRV",
      "label": "Reilly,Thomas Francis",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Reiman,Eric M",
      "group": "BDI",
      "label": "Reiman,Eric M",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Reiser,Mark R",
      "group": "CLAS",
      "label": "Reiser,Mark R",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Reisig,Kristy Holtfreter",
      "group": "PUBSRV",
      "label": "Reisig,Kristy Holtfreter",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Reisig,Michael",
      "group": "PUBSRV",
      "label": "Reisig,Michael",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Reisslein,Martin",
      "group": "IAFSE",
      "label": "Reisslein,Martin",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Ren,Fengbo",
      "group": "IAFSE",
      "label": "Ren,Fengbo",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Ren,Yi",
      "group": "IAFSE",
      "label": "Ren,Yi",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Renaud,Claire",
      "group": "CLAS",
      "label": "Renaud,Claire",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Restrepo,Maria Adelaida",
      "group": "CHS",
      "label": "Restrepo,Maria Adelaida",
      "links": 3,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Rey,Sergio J",
      "group": "CLAS",
      "label": "Rey,Sergio J",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Rhoads,James Ely",
      "group": "CLAS",
      "label": "Rhoads,James Ely",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Rhoden,Alyssa Rose",
      "group": "CLAS",
      "label": "Rhoden,Alyssa Rose",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Richa,Andrea W",
      "group": "IAFSE",
      "label": "Richa,Andrea W",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Richards,Timothy James",
      "group": "WPC",
      "label": "Richards,Timothy James",
      "links": 2,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Richert,Ranko",
      "group": "CLAS",
      "label": "Richert,Ranko",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Richter,Jennifer",
      "group": "SFIS",
      "label": "Richter,Jennifer",
      "links": 2,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Ridgway,Samantha Willow",
      "group": "CLAS",
      "label": "Ridgway,Samantha Willow",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Riley,William",
      "group": "CHS",
      "label": "Riley,William",
      "links": 2,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Ringhofer,Christian",
      "group": "CLAS",
      "label": "Ringhofer,Christian",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Risley-Curtiss,Christina",
      "group": "PUBSRV",
      "label": "Risley-Curtiss,Christina",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Ritchie,Barry G",
      "group": "CLAS",
      "label": "Ritchie,Barry G",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Rittmann,Bruce Edward",
      "group": "IAFSE",
      "label": "Rittmann,Bruce Edward",
      "links": 7,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Rivera,Daniel E",
      "group": "IAFSE",
      "label": "Rivera,Daniel E",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Roberson,Robert Wayne",
      "group": "CLAS",
      "label": "Roberson,Robert Wayne",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Robert,Jason",
      "group": "CLAS",
      "label": "Robert,Jason",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Roberts,Christopher Matthew",
      "group": "HIDA",
      "label": "Roberts,Christopher Matthew",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Roberts,Nicole Alicia",
      "group": "ARTS",
      "label": "Roberts,Nicole Alicia",
      "links": 2,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Robinson,Mark Southwick",
      "group": "CLAS",
      "label": "Robinson,Mark Southwick",
      "links": 6,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Rodrigues Augusto,Andre Filipe",
      "group": "IAFSE",
      "label": "Rodrigues Augusto,Andre Filipe",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Rodriguez,Armando A",
      "group": "IAFSE",
      "label": "Rodriguez,Armando A",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Roe-Sepowitz,Dominique",
      "group": "PUBSRV",
      "label": "Roe-Sepowitz,Dominique",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Roff,Heather Michelle",
      "group": "GSECURITY",
      "label": "Roff,Heather Michelle",
      "links": 1,
      "group_code": 24
    }
  }, {
    "data": {
      "id": "Rogers,Bradley Barney",
      "group": "IAFSE",
      "label": "Rogers,Bradley Barney",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Roggensack,Kurt",
      "group": "CLAS",
      "label": "Roggensack,Kurt",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Romaniello,Stephen Justin",
      "group": "CLAS",
      "label": "Romaniello,Stephen Justin",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Roosevelt,Stacia Stolzenberg",
      "group": "PUBSRV",
      "label": "Roosevelt,Stacia Stolzenberg",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Ros,Alexandra",
      "group": "CLAS",
      "label": "Ros,Alexandra",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ros,Robert",
      "group": "CLAS",
      "label": "Ros,Robert",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Roscoe,Rod David",
      "group": "IAFSE",
      "label": "Roscoe,Rod David",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Rosen,Julia K",
      "group": "EVPP",
      "label": "Rosen,Julia K",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Rosenberg,Michael",
      "group": "CLAS",
      "label": "Rosenberg,Michael",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Rosier,Kathlene M",
      "group": "LAW",
      "label": "Rosier,Kathlene M",
      "links": 1,
      "group_code": 6
    }
  }, {
    "data": {
      "id": "Ross,Emily",
      "group": "CLAS",
      "label": "Ross,Emily",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ross,Heather Maura",
      "group": "CONHI",
      "label": "Ross,Heather Maura",
      "links": 4,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Ruddell,Benjamin Lyle",
      "group": "IAFSE",
      "label": "Ruddell,Benjamin Lyle",
      "links": 6,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Ruff,Steven William",
      "group": "CLAS",
      "label": "Ruff,Steven William",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ruhi Vidal,Albert",
      "group": "CLAS",
      "label": "Ruhi Vidal,Albert",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Runger,George",
      "group": "IAFSE",
      "label": "Runger,George",
      "links": 11,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Rushforth,Richard Ray",
      "group": "GIOS",
      "label": "Rushforth,Richard Ray",
      "links": 2,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Ruston,Scott W",
      "group": "CLAS",
      "label": "Ruston,Scott W",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ruth,Alissa Alice",
      "group": "CLAS",
      "label": "Ruth,Alissa Alice",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Rutowski,Ronald L",
      "group": "CLAS",
      "label": "Rutowski,Ronald L",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Ryan,Edmund Michael Colum",
      "group": "CLAS",
      "label": "Ryan,Edmund Michael Colum",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Rykaczewski,Konrad",
      "group": "IAFSE",
      "label": "Rykaczewski,Konrad",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Sabo,John L",
      "group": "CLAS",
      "label": "Sabo,John L",
      "links": 5,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Sadleir,Rosalind Jane",
      "group": "IAFSE",
      "label": "Sadleir,Rosalind Jane",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Saewert,Karen J",
      "group": "CONHI",
      "label": "Saewert,Karen J",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Saffell,Erinanne Mooney",
      "group": "CLAS",
      "label": "Saffell,Erinanne Mooney",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Saidy-Hannah,Christina N",
      "group": "CLAS",
      "label": "Saidy-Hannah,Christina N",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Sailor,David J",
      "group": "CLAS",
      "label": "Sailor,David J",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Saks,Michael J",
      "group": "LAW",
      "label": "Saks,Michael J",
      "links": 1,
      "group_code": 6
    }
  }, {
    "data": {
      "id": "Sala,Osvaldo E.",
      "group": "CLAS",
      "label": "Sala,Osvaldo E.",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Salamone,Damien Thomas",
      "group": "CLAS",
      "label": "Salamone,Damien Thomas",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Salerno,Jessica Marie",
      "group": "ARTS",
      "label": "Salerno,Jessica Marie",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Salon,Deborah",
      "group": "CLAS",
      "label": "Salon,Deborah",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Saltmarsh,Sarah Schmaltz",
      "group": "MLFTC",
      "label": "Saltmarsh,Sarah Schmaltz",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Sampson,David Arthur",
      "group": "GIOS",
      "label": "Sampson,David Arthur",
      "links": 1,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Sampson,Robert R",
      "group": "OKED",
      "label": "Sampson,Robert R",
      "links": 1,
      "group_code": 21
    }
  }, {
    "data": {
      "id": "Samuelson,Hava Tirosh",
      "group": "CLAS",
      "label": "Samuelson,Hava Tirosh",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Sanabria,Federico",
      "group": "CLAS",
      "label": "Sanabria,Federico",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Sandler,Irwin Noah",
      "group": "CLAS",
      "label": "Sandler,Irwin Noah",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Sandrin,Susannah K",
      "group": "ARTS",
      "label": "Sandrin,Susannah K",
      "links": 2,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Sandrin,Todd Ryan",
      "group": "ARTS",
      "label": "Sandrin,Todd Ryan",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Sankar,Lalitha",
      "group": "IAFSE",
      "label": "Sankar,Lalitha",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Sannier,Adrian Vincent",
      "group": "ONLINE",
      "label": "Sannier,Adrian Vincent",
      "links": 1,
      "group_code": 27
    }
  }, {
    "data": {
      "id": "Santana,Robert Scott",
      "group": "CHS",
      "label": "Santana,Robert Scott",
      "links": 0,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Santanam,Raghu",
      "group": "WPC",
      "label": "Santanam,Raghu",
      "links": 1,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Santello,Marco",
      "group": "IAFSE",
      "label": "Santello,Marco",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Santos,Carlos Eduardo",
      "group": "CISA",
      "label": "Santos,Carlos Eduardo",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Saraniti,Marco",
      "group": "IAFSE",
      "label": "Saraniti,Marco",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Sarat,Leah M",
      "group": "CLAS",
      "label": "Sarat,Leah M",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Sarewitz,Daniel",
      "group": "SFIS",
      "label": "Sarewitz,Daniel",
      "links": 4,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Saripalli,Srikanth",
      "group": "CLAS",
      "label": "Saripalli,Srikanth",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Sarjoughian,Hessam Seyed",
      "group": "IAFSE",
      "label": "Sarjoughian,Hessam Seyed",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Sarwat,Mohamed",
      "group": "IAFSE",
      "label": "Sarwat,Mohamed",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Sato,Hiroyuki",
      "group": "CLAS",
      "label": "Sato,Hiroyuki",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Saul,Steven Eugene",
      "group": "CISA",
      "label": "Saul,Steven Eugene",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Savenye,Wilhelmina C",
      "group": "MLFTC",
      "label": "Savenye,Wilhelmina C",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Sayeed,Mohamed",
      "group": "UTO",
      "label": "Sayeed,Mohamed",
      "links": 1,
      "group_code": 28
    }
  }, {
    "data": {
      "id": "Sayres,Scott G",
      "group": "CLAS",
      "label": "Sayres,Scott G",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Scaglione,Anna",
      "group": "IAFSE",
      "label": "Scaglione,Anna",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Scannapieco,Evan",
      "group": "CLAS",
      "label": "Scannapieco,Evan",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Schaefer,David",
      "group": "CLAS",
      "label": "Schaefer,David",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Scherer,Nancy",
      "group": "CHS",
      "label": "Scherer,Nancy",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Schmidt,Kevin Edward",
      "group": "CLAS",
      "label": "Schmidt,Kevin Edward",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Schmitz,Troy Gordon",
      "group": "WPC",
      "label": "Schmitz,Troy Gordon",
      "links": 1,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Schoettle,Louis Noble",
      "group": "CLAS",
      "label": "Schoettle,Louis Noble",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Schrader,Devin Lee",
      "group": "CLAS",
      "label": "Schrader,Devin Lee",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Schreiner-Mcgraw,Adam Paul",
      "group": "CLAS",
      "label": "Schreiner-Mcgraw,Adam Paul",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Schugurensky,Daniel",
      "group": "PUBSRV",
      "label": "Schugurensky,Daniel",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Schulte,Ann C",
      "group": "CLAS",
      "label": "Schulte,Ann C",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Schwartz,Gary T",
      "group": "CLAS",
      "label": "Schwartz,Gary T",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Schweitzer,Nicholas",
      "group": "ARTS",
      "label": "Schweitzer,Nicholas",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Scotch,Matthew L",
      "group": "BDI",
      "label": "Scotch,Matthew L",
      "links": 4,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Scott,Kimberly A",
      "group": "CLAS",
      "label": "Scott,Kimberly A",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Scowen,Paul Andrew",
      "group": "CLAS",
      "label": "Scowen,Paul Andrew",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Seager,Thomas Payson",
      "group": "IAFSE",
      "label": "Seager,Thomas Payson",
      "links": 7,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Searle,Mark",
      "group": "EVPP",
      "label": "Searle,Mark",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Seaton,Eleanor",
      "group": "CLAS",
      "label": "Seaton,Eleanor",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Sebold,Brent James",
      "group": "IAFSE",
      "label": "Sebold,Brent James",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Sefair,Jorge Alberto",
      "group": "IAFSE",
      "label": "Sefair,Jorge Alberto",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Segal,Sabrina",
      "group": "CLAS",
      "label": "Segal,Sabrina",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Selin,Cynthia Lea",
      "group": "SFIS",
      "label": "Selin,Cynthia Lea",
      "links": 1,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Selover,Nancy Joan",
      "group": "CLAS",
      "label": "Selover,Nancy Joan",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Semken,Steven",
      "group": "CLAS",
      "label": "Semken,Steven",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Sen,Arunabha",
      "group": "IAFSE",
      "label": "Sen,Arunabha",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Seo,Dong Kyun",
      "group": "CLAS",
      "label": "Seo,Dong Kyun",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Seo,Jae-Sun",
      "group": "IAFSE",
      "label": "Seo,Jae-Sun",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Seyler,Sean Lee",
      "group": "CLAS",
      "label": "Seyler,Sean Lee",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Sha,Xin Wei",
      "group": "HIDA",
      "label": "Sha,Xin Wei",
      "links": 4,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Shabazz Sanders,Gregg Rashad",
      "group": "CLAS",
      "label": "Shabazz Sanders,Gregg Rashad",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Shafer,Michael S",
      "group": "PUBSRV",
      "label": "Shafer,Michael S",
      "links": 3,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Shaibi,Gabriel",
      "group": "CONHI",
      "label": "Shaibi,Gabriel",
      "links": 3,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Shakarian,Jana L",
      "group": "IAFSE",
      "label": "Shakarian,Jana L",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Shakarian,Paulo",
      "group": "IAFSE",
      "label": "Shakarian,Paulo",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Shan,Xiaonan",
      "group": "BDI",
      "label": "Shan,Xiaonan",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Sharp,Thomas",
      "group": "CLAS",
      "label": "Sharp,Thomas",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Shaw,Lesley Manson",
      "group": "CHS",
      "label": "Shaw,Lesley Manson",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Shearer,Nelma Beth",
      "group": "CONHI",
      "label": "Shearer,Nelma Beth",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Sheppard,Lorie",
      "group": "OBF",
      "label": "Sheppard,Lorie",
      "links": 1,
      "group_code": 12
    }
  }, {
    "data": {
      "id": "Shet Tilvi,Vithal Pandurang",
      "group": "CLAS",
      "label": "Shet Tilvi,Vithal Pandurang",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Shi,Yixin",
      "group": "CLAS",
      "label": "Shi,Yixin",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Shim,Sang-Heon",
      "group": "CLAS",
      "label": "Shim,Sang-Heon",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Shin,Cha-Nam",
      "group": "CONHI",
      "label": "Shin,Cha-Nam",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Shin,Dosun",
      "group": "EVPP",
      "label": "Shin,Dosun",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Shiota,Michelle Noelani",
      "group": "CLAS",
      "label": "Shiota,Michelle Noelani",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Shipstead,Zachary",
      "group": "ARTS",
      "label": "Shipstead,Zachary",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Shirzaei,Manoochehr",
      "group": "CLAS",
      "label": "Shirzaei,Manoochehr",
      "links": 5,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Shkolnik,Evgenya",
      "group": "CLAS",
      "label": "Shkolnik,Evgenya",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Shock,Everett",
      "group": "CLAS",
      "label": "Shock,Everett",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Shortliffe,Edward H",
      "group": "CHS",
      "label": "Shortliffe,Edward H",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Shrestha,Milan",
      "group": "GIOS",
      "label": "Shrestha,Milan",
      "links": 2,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Shrivastava,Aviral",
      "group": "IAFSE",
      "label": "Shrivastava,Aviral",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Shuaib,Abdelrahman Nasr",
      "group": "IAFSE",
      "label": "Shuaib,Abdelrahman Nasr",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Shutters,Shade Timothy",
      "group": "IAFSE",
      "label": "Shutters,Shade Timothy",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Si,Jennie",
      "group": "IAFSE",
      "label": "Si,Jennie",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Sieradzki,Karl",
      "group": "IAFSE",
      "label": "Sieradzki,Karl",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Sierks,Michael Richard",
      "group": "IAFSE",
      "label": "Sierks,Michael Richard",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Silcock,Burton William",
      "group": "WCJMC",
      "label": "Silcock,Burton William",
      "links": 2,
      "group_code": 20
    }
  }, {
    "data": {
      "id": "Silk,Joan Barbara",
      "group": "CLAS",
      "label": "Silk,Joan Barbara",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Silva,Victor Hugo",
      "group": "CLAS",
      "label": "Silva,Victor Hugo",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Silva,Yasin Nilton",
      "group": "ARTS",
      "label": "Silva,Yasin Nilton",
      "links": 2,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Simeone,Michael Paul",
      "group": "CLAS",
      "label": "Simeone,Michael Paul",
      "links": 5,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Simon,Arleyn W",
      "group": "CLAS",
      "label": "Simon,Arleyn W",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Simpson,Richard Kendall",
      "group": "CLAS",
      "label": "Simpson,Richard Kendall",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Sinha,Shahnawaz",
      "group": "IAFSE",
      "label": "Sinha,Shahnawaz",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Sipka,Danko Dan",
      "group": "CLAS",
      "label": "Sipka,Danko Dan",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Skorokhodov,Philip",
      "group": "CLAS",
      "label": "Skorokhodov,Philip",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Slade,Alexandra Avril Brewis",
      "group": "CLAS",
      "label": "Slade,Alexandra Avril Brewis",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Slivinski,Stephen Anthony",
      "group": "WPC",
      "label": "Slivinski,Stephen Anthony",
      "links": 1,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Smith,Barbara Symie",
      "group": "IAFSE",
      "label": "Smith,Barbara Symie",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Smith,Brian",
      "group": "CLAS",
      "label": "Smith,Brian",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Smith,David John",
      "group": "CLAS",
      "label": "Smith,David John",
      "links": 7,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Smith,Jacqueline Vella",
      "group": "EXEC_ADMIN",
      "label": "Smith,Jacqueline Vella",
      "links": 1,
      "group_code": 17
    }
  }, {
    "data": {
      "id": "Smith,Sharon D",
      "group": "EOSS",
      "label": "Smith,Sharon D",
      "links": 1,
      "group_code": 19
    }
  }, {
    "data": {
      "id": "Snyder,Russell Bradley",
      "group": "CLAS",
      "label": "Snyder,Russell Bradley",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Sodemann,Angela Ann",
      "group": "IAFSE",
      "label": "Sodemann,Angela Ann",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Sohoni,Sohum Ashok",
      "group": "IAFSE",
      "label": "Sohoni,Sohum Ashok",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Solanki,Kiran N.",
      "group": "IAFSE",
      "label": "Solanki,Kiran N.",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Solyom,Jessica Ann",
      "group": "CLAS",
      "label": "Solyom,Jessica Ann",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Sommerfeld,Milton R",
      "group": "IAFSE",
      "label": "Sommerfeld,Milton R",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Song,Qian",
      "group": "CLAS",
      "label": "Song,Qian",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Sottara,Davide",
      "group": "CHS",
      "label": "Sottara,Davide",
      "links": 4,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Spanias,Andreas Savva",
      "group": "IAFSE",
      "label": "Spanias,Andreas Savva",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Spanierman,Lisa Beth",
      "group": "CISA",
      "label": "Spanierman,Lisa Beth",
      "links": 2,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Spano,Mark L.",
      "group": "IAFSE",
      "label": "Spano,Mark L.",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Sparapani,Nicole J",
      "group": "ISTL",
      "label": "Sparapani,Nicole J",
      "links": 1,
      "group_code": 13
    }
  }, {
    "data": {
      "id": "Spence,John Charles",
      "group": "CLAS",
      "label": "Spence,John Charles",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Speyerer,Emerson Jacob",
      "group": "CLAS",
      "label": "Speyerer,Emerson Jacob",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Spindler,Robert Paul",
      "group": "LIB",
      "label": "Spindler,Robert Paul",
      "links": 1,
      "group_code": 23
    }
  }, {
    "data": {
      "id": "Spinrad,Tracy",
      "group": "CLAS",
      "label": "Spinrad,Tracy",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Spohn,Cassia Cathleen",
      "group": "PUBSRV",
      "label": "Spohn,Cassia Cathleen",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Squires,Kyle D",
      "group": "IAFSE",
      "label": "Squires,Kyle D",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Stabenfeldt,Sarah E",
      "group": "IAFSE",
      "label": "Stabenfeldt,Sarah E",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Stafford,Phillip",
      "group": "BDI",
      "label": "Stafford,Phillip",
      "links": 3,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Standley,Eileen",
      "group": "HIDA",
      "label": "Standley,Eileen",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Stanley,Richard H",
      "group": "EXEC_ADMIN",
      "label": "Stanley,Richard H",
      "links": 1,
      "group_code": 17
    }
  }, {
    "data": {
      "id": "Starrfield,Sumner Grosby",
      "group": "CLAS",
      "label": "Starrfield,Sumner Grosby",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Starzynski,Shoshanna",
      "group": "EVPP",
      "label": "Starzynski,Shoshanna",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Stats-Caldwell,Denise M",
      "group": "CHS",
      "label": "Stats-Caldwell,Denise M",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Stauffer,Sandra Lee",
      "group": "HIDA",
      "label": "Stauffer,Sandra Lee",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Stechel,Ellen B.",
      "group": "GIOS",
      "label": "Stechel,Ellen B.",
      "links": 5,
      "group_code": 2
    }
  }, {
    "data": {
      "id": "Steele,Kelly Patricia",
      "group": "CISA",
      "label": "Steele,Kelly Patricia",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Steimle,Timothy",
      "group": "CLAS",
      "label": "Steimle,Timothy",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Stein,Julian Everett",
      "group": "HIDA",
      "label": "Stein,Julian Everett",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Stempihar,Jeffrey John",
      "group": "IAFSE",
      "label": "Stempihar,Jeffrey John",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Stephanopoulos,Nicholas",
      "group": "CLAS",
      "label": "Stephanopoulos,Nicholas",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Sterner,Beckett",
      "group": "CLAS",
      "label": "Sterner,Beckett",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Stevens,Yvonne Angelica",
      "group": "LAW",
      "label": "Stevens,Yvonne Angelica",
      "links": 1,
      "group_code": 6
    }
  }, {
    "data": {
      "id": "Stojanowski,Christopher Michae",
      "group": "CLAS",
      "label": "Stojanowski,Christopher Michae",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Stone,Anne C",
      "group": "CLAS",
      "label": "Stone,Anne C",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Stopar,Julie D",
      "group": "CLAS",
      "label": "Stopar,Julie D",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Stritch,Justin Michael",
      "group": "PUBSRV",
      "label": "Stritch,Justin Michael",
      "links": 4,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Strumsky,Deborah",
      "group": "EVPP",
      "label": "Strumsky,Deborah",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Stufken,John",
      "group": "CLAS",
      "label": "Stufken,John",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Suk,Hye Won",
      "group": "CLAS",
      "label": "Suk,Hye Won",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Sullivan,Kenneth T",
      "group": "IAFSE",
      "label": "Sullivan,Kenneth T",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Sumida Huaman,Elizabeth",
      "group": "CLAS",
      "label": "Sumida Huaman,Elizabeth",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Sun,Fei",
      "group": "PUBSRV",
      "label": "Sun,Fei",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Surgent,Scott Adam",
      "group": "CLAS",
      "label": "Surgent,Scott Adam",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Suzart De Albuquerque,Fabio",
      "group": "CISA",
      "label": "Suzart De Albuquerque,Fabio",
      "links": 1,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Suzuki,Anne S",
      "group": "ARTS",
      "label": "Suzuki,Anne S",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Swadener,Elizabeth Blue",
      "group": "CLAS",
      "label": "Swadener,Elizabeth Blue",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Swan,Pamela D",
      "group": "CHS",
      "label": "Swan,Pamela D",
      "links": 2,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Swartz,Jonathan Ward",
      "group": "HIDA",
      "label": "Swartz,Jonathan Ward",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Sweat,Ken Gunter",
      "group": "ARTS",
      "label": "Sweat,Ken Gunter",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Sweazea,Karen Leanna",
      "group": "CHS",
      "label": "Sweazea,Karen Leanna",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Swindell,David",
      "group": "PUBSRV",
      "label": "Swindell,David",
      "links": 3,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Symonds,Sylvia Alicia",
      "group": "EOSS",
      "label": "Symonds,Sylvia Alicia",
      "links": 1,
      "group_code": 19
    }
  }, {
    "data": {
      "id": "Symonds,William",
      "group": "OKED",
      "label": "Symonds,William",
      "links": 1,
      "group_code": 21
    }
  }, {
    "data": {
      "id": "Syrotiuk,Violet",
      "group": "IAFSE",
      "label": "Syrotiuk,Violet",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Tachine,Amanda R",
      "group": "CLAS",
      "label": "Tachine,Amanda R",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Takahashi,Timothy Taro",
      "group": "IAFSE",
      "label": "Takahashi,Timothy Taro",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Takamura,John Hiroomi",
      "group": "HIDA",
      "label": "Takamura,John Hiroomi",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Talboom,Joshua S",
      "group": "CLAS",
      "label": "Talboom,Joshua S",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Tamizhmani,Govindasamy",
      "group": "IAFSE",
      "label": "Tamizhmani,Govindasamy",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Tang,Pingbo",
      "group": "IAFSE",
      "label": "Tang,Pingbo",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Tang,Wenbo",
      "group": "CLAS",
      "label": "Tang,Wenbo",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Tao,Meng",
      "group": "IAFSE",
      "label": "Tao,Meng",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Tao,Nongjian",
      "group": "IAFSE",
      "label": "Tao,Nongjian",
      "links": 6,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Tasevska,Natasha",
      "group": "CHS",
      "label": "Tasevska,Natasha",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Tasooji,Amaneh",
      "group": "IAFSE",
      "label": "Tasooji,Amaneh",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Taylor,Jesse Earl",
      "group": "CLAS",
      "label": "Taylor,Jesse Earl",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Taylor,Michelle Elizabeth",
      "group": "CLAS",
      "label": "Taylor,Michelle Elizabeth",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Taylor,Sydney June",
      "group": "IAFSE",
      "label": "Taylor,Sydney June",
      "links": 0,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Taylor,Thomas J",
      "group": "CLAS",
      "label": "Taylor,Thomas J",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Tebeau,Mark Thomas",
      "group": "CLAS",
      "label": "Tebeau,Mark Thomas",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Tein,Jenn-Yun",
      "group": "CLAS",
      "label": "Tein,Jenn-Yun",
      "links": 5,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Telep,Cody Webb",
      "group": "PUBSRV",
      "label": "Telep,Cody Webb",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Tepedelenlioglu,Cihan",
      "group": "IAFSE",
      "label": "Tepedelenlioglu,Cihan",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Tepper,Steven Jay",
      "group": "HIDA",
      "label": "Tepper,Steven Jay",
      "links": 2,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Terrill,William Charles",
      "group": "PUBSRV",
      "label": "Terrill,William Charles",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Thangavelautham,Jekanthan",
      "group": "CLAS",
      "label": "Thangavelautham,Jekanthan",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Thies,Cameron G",
      "group": "CLAS",
      "label": "Thies,Cameron G",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Thompson,John Curtis",
      "group": "OBF",
      "label": "Thompson,John Curtis",
      "links": 1,
      "group_code": 12
    }
  }, {
    "data": {
      "id": "Thompson,Michael Lloyd",
      "group": "OBF",
      "label": "Thompson,Michael Lloyd",
      "links": 1,
      "group_code": 12
    }
  }, {
    "data": {
      "id": "Thompson,Patrick W",
      "group": "CLAS",
      "label": "Thompson,Patrick W",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Thornton,Trevor John",
      "group": "IAFSE",
      "label": "Thornton,Trevor John",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Thorpe,Michael F",
      "group": "CLAS",
      "label": "Thorpe,Michael F",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Throop,Heather Lynne",
      "group": "CLAS",
      "label": "Throop,Heather Lynne",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Thyagarajan,Nithyanandan",
      "group": "CLAS",
      "label": "Thyagarajan,Nithyanandan",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Tian,Yanqing",
      "group": "BDI",
      "label": "Tian,Yanqing",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Till,Christy B",
      "group": "CLAS",
      "label": "Till,Christy B",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Timmes,Francis",
      "group": "CLAS",
      "label": "Timmes,Francis",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Tinapple,David A",
      "group": "HIDA",
      "label": "Tinapple,David A",
      "links": 5,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Tiokhin,Leonid",
      "group": "CLAS",
      "label": "Tiokhin,Leonid",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Tobias,Evan Sean",
      "group": "HIDA",
      "label": "Tobias,Evan Sean",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Tobin,Daniel Joseph",
      "group": "HIDA",
      "label": "Tobin,Daniel Joseph",
      "links": 0,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Todd,Michael Wayne",
      "group": "CONHI",
      "label": "Todd,Michael Wayne",
      "links": 14,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Toledo,Meynard John Lapore",
      "group": "CHS",
      "label": "Toledo,Meynard John Lapore",
      "links": 0,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Tong,Hanghang",
      "group": "IAFSE",
      "label": "Tong,Hanghang",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Tongay,Sefaattin",
      "group": "IAFSE",
      "label": "Tongay,Sefaattin",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Toon,Richard",
      "group": "CLAS",
      "label": "Toon,Richard",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Torres,Cesar I",
      "group": "IAFSE",
      "label": "Torres,Cesar I",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Towe,Bruce C",
      "group": "IAFSE",
      "label": "Towe,Bruce C",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Towers,Sherry Meleah Jean",
      "group": "CLAS",
      "label": "Towers,Sherry Meleah Jean",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Tracy,Sarah Jane",
      "group": "CLAS",
      "label": "Tracy,Sarah Jane",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Trastek,Victor Frederick",
      "group": "CHS",
      "label": "Trastek,Victor Frederick",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Treacy,Michael Matthew John",
      "group": "CLAS",
      "label": "Treacy,Michael Matthew John",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Trenchevska,Olgica",
      "group": "BDI",
      "label": "Trenchevska,Olgica",
      "links": 2,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Trifiro,Anthony J",
      "group": "CLAS",
      "label": "Trifiro,Anthony J",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Trimble,Steven Wesley",
      "group": "IAFSE",
      "label": "Trimble,Steven Wesley",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Trovitch,Ryan James",
      "group": "CLAS",
      "label": "Trovitch,Ryan James",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Trujillo,Rhett Diago",
      "group": "WPC",
      "label": "Trujillo,Rhett Diago",
      "links": 1,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Truong,Danh Dinh",
      "group": "IAFSE",
      "label": "Truong,Danh Dinh",
      "links": 0,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Tsai,Jiun-Yi",
      "group": "CLAS",
      "label": "Tsai,Jiun-Yi",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Tsakalis,Konstantinos",
      "group": "IAFSE",
      "label": "Tsakalis,Konstantinos",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Tsow,Tsing Wai",
      "group": "BDI",
      "label": "Tsow,Tsing Wai",
      "links": 2,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Tsuda,Takeyuki",
      "group": "CLAS",
      "label": "Tsuda,Takeyuki",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Turaga,Pavan Kumar",
      "group": "HIDA",
      "label": "Turaga,Pavan Kumar",
      "links": 3,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Turker,Ebru",
      "group": "CLAS",
      "label": "Turker,Ebru",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Turner II,Billie Lee",
      "group": "CLAS",
      "label": "Turner II,Billie Lee",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Turriziani Colonna,Federica",
      "group": "CLAS",
      "label": "Turriziani Colonna,Federica",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Tylavsky,Daniel John",
      "group": "IAFSE",
      "label": "Tylavsky,Daniel John",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Tyler,William James",
      "group": "IAFSE",
      "label": "Tyler,William James",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Ugarova,Tatiana P",
      "group": "CLAS",
      "label": "Ugarova,Tatiana P",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Umana-Taylor,Adriana J",
      "group": "CLAS",
      "label": "Umana-Taylor,Adriana J",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Underiner,Tamara Lou",
      "group": "HIDA",
      "label": "Underiner,Tamara Lou",
      "links": 1,
      "group_code": 16
    }
  }, {
    "data": {
      "id": "Underwood,Benjamin Shane",
      "group": "IAFSE",
      "label": "Underwood,Benjamin Shane",
      "links": 8,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Updegraff,Kimberly A",
      "group": "CLAS",
      "label": "Updegraff,Kimberly A",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Vachaspati,Tanmay",
      "group": "CLAS",
      "label": "Vachaspati,Tanmay",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Vaiana,Sara",
      "group": "CLAS",
      "label": "Vaiana,Sara",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Valencia,William Ruben",
      "group": "PUBSRV",
      "label": "Valencia,William Ruben",
      "links": 3,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Valente,Matthew",
      "group": "CLAS",
      "label": "Valente,Matthew",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Van De Sande,Carla",
      "group": "CLAS",
      "label": "Van De Sande,Carla",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Van Der Leeuw,Sander",
      "group": "CLAS",
      "label": "Van Der Leeuw,Sander",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Van Gelderen,Elly",
      "group": "CLAS",
      "label": "Van Gelderen,Elly",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Van Horn,Wade Dale",
      "group": "CLAS",
      "label": "Van Horn,Wade Dale",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Van Huisstede,Lauren Elizabeth",
      "group": "CLAS",
      "label": "Van Huisstede,Lauren Elizabeth",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Van Soest,Matthijs Cornelis",
      "group": "CLAS",
      "label": "Van Soest,Matthijs Cornelis",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Vanlehn,Kurt A",
      "group": "IAFSE",
      "label": "Vanlehn,Kurt A",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Vanmali,Binaben H",
      "group": "EVPP",
      "label": "Vanmali,Binaben H",
      "links": 1,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "Varnum,Michael E",
      "group": "CLAS",
      "label": "Varnum,Michael E",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Vasileska,Dragica",
      "group": "IAFSE",
      "label": "Vasileska,Dragica",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Vaughan,Linda",
      "group": "CHS",
      "label": "Vaughan,Linda",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Vega-Lopez,Sonia",
      "group": "CHS",
      "label": "Vega-Lopez,Sonia",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Vega,Sujey",
      "group": "CLAS",
      "label": "Vega,Sujey",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Velasquez,Donna Marie",
      "group": "CONHI",
      "label": "Velasquez,Donna Marie",
      "links": 1,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Velazquez,Ramon",
      "group": "BDI",
      "label": "Velazquez,Ramon",
      "links": 0,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Velez-Ibanez,Carlos",
      "group": "CLAS",
      "label": "Velez-Ibanez,Carlos",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Venkatesan,Arjunkrishna",
      "group": "BDI",
      "label": "Venkatesan,Arjunkrishna",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Veramendi,Gregory Francisco",
      "group": "WPC",
      "label": "Veramendi,Gregory Francisco",
      "links": 1,
      "group_code": 11
    }
  }, {
    "data": {
      "id": "Vermaas,Willem F J",
      "group": "CLAS",
      "label": "Vermaas,Willem F J",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Vernon,Brent",
      "group": "IAFSE",
      "label": "Vernon,Brent",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Vidt,Meghan Elise",
      "group": "CHS",
      "label": "Vidt,Meghan Elise",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Villalobos,Jesus R",
      "group": "IAFSE",
      "label": "Villalobos,Jesus R",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Vittal,Vijay",
      "group": "IAFSE",
      "label": "Vittal,Vijay",
      "links": 5,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Vivoni,Enrique",
      "group": "IAFSE",
      "label": "Vivoni,Enrique",
      "links": 6,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Vogt,Christine Ann",
      "group": "PUBSRV",
      "label": "Vogt,Christine Ann",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Von Hagen,Mark",
      "group": "CLAS",
      "label": "Von Hagen,Mark",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Vrudhula,Sarma B K",
      "group": "IAFSE",
      "label": "Vrudhula,Sarma B K",
      "links": 5,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Wadhwa,Meenakshi",
      "group": "CLAS",
      "label": "Wadhwa,Meenakshi",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Wagner-Dunbar,Faith Marg",
      "group": "MLFTC",
      "label": "Wagner-Dunbar,Faith Marg",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Wagner,Carl Edward",
      "group": "ARTS",
      "label": "Wagner,Carl Edward",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Wagner,Robert Vernon",
      "group": "CLAS",
      "label": "Wagner,Robert Vernon",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Waldman,David A",
      "group": "THUNDERBIRD",
      "label": "Waldman,David A",
      "links": 1,
      "group_code": 25
    }
  }, {
    "data": {
      "id": "Waldron,Vincent R",
      "group": "ARTS",
      "label": "Waldron,Vincent R",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Walker,Douglas Gordon",
      "group": "BDI",
      "label": "Walker,Douglas Gordon",
      "links": 3,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Walker,Erin Ashley",
      "group": "IAFSE",
      "label": "Walker,Erin Ashley",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Walker,Ian James",
      "group": "CLAS",
      "label": "Walker,Ian James",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Wallace,Danielle Marie",
      "group": "PUBSRV",
      "label": "Wallace,Danielle Marie",
      "links": 3,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Wallstrom,Garrick L",
      "group": "CHS",
      "label": "Wallstrom,Garrick L",
      "links": 8,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Walters,Debra Molina",
      "group": "MLFTC",
      "label": "Walters,Debra Molina",
      "links": 1,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Wang,Chao",
      "group": "IAFSE",
      "label": "Wang,Chao",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Wang,Dingzhi",
      "group": "BDI",
      "label": "Wang,Dingzhi",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Wang,Dongwen",
      "group": "CHS",
      "label": "Wang,Dongwen",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Wang,Liping",
      "group": "IAFSE",
      "label": "Wang,Liping",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Wang,Qing Hua",
      "group": "IAFSE",
      "label": "Wang,Qing Hua",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Wang,Robert Y.",
      "group": "IAFSE",
      "label": "Wang,Robert Y.",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Wang,Shaopeng",
      "group": "BDI",
      "label": "Wang,Shaopeng",
      "links": 2,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Wang,Xia",
      "group": "PUBSRV",
      "label": "Wang,Xia",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Wang,Xiao",
      "group": "IAFSE",
      "label": "Wang,Xiao",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Wang,Xu",
      "group": "CLAS",
      "label": "Wang,Xu",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Wang,Xuan",
      "group": "CLAS",
      "label": "Wang,Xuan",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Wang,Yalin",
      "group": "IAFSE",
      "label": "Wang,Yalin",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Wang,Zhihua",
      "group": "IAFSE",
      "label": "Wang,Zhihua",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Warner,Carolyn",
      "group": "CLAS",
      "label": "Warner,Carolyn",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Webb,Vincent J",
      "group": "PUBSRV",
      "label": "Webb,Vincent J",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Weidenaar,Kim Elizabeth",
      "group": "LAW",
      "label": "Weidenaar,Kim Elizabeth",
      "links": 1,
      "group_code": 6
    }
  }, {
    "data": {
      "id": "Weierstall,Uwe Juergen",
      "group": "CLAS",
      "label": "Weierstall,Uwe Juergen",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Welch,Eric W",
      "group": "PUBSRV",
      "label": "Welch,Eric W",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Welfert,Bruno Denis",
      "group": "CLAS",
      "label": "Welfert,Bruno Denis",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Wellington,Danika Fay",
      "group": "CLAS",
      "label": "Wellington,Danika Fay",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Wentz,Elizabeth Ann",
      "group": "CLAS",
      "label": "Wentz,Elizabeth Ann",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Wermers,James Edward",
      "group": "CISA",
      "label": "Wermers,James Edward",
      "links": 2,
      "group_code": 5
    }
  }, {
    "data": {
      "id": "Wernimont,Jacqueline",
      "group": "CLAS",
      "label": "Wernimont,Jacqueline",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Werth,Susanna",
      "group": "CLAS",
      "label": "Werth,Susanna",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Wertheimer,Eric H R",
      "group": "EVPP",
      "label": "Wertheimer,Eric H R",
      "links": 3,
      "group_code": 10
    }
  }, {
    "data": {
      "id": "West,Stephen G",
      "group": "CLAS",
      "label": "West,Stephen G",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "West,Stephen H",
      "group": "CLAS",
      "label": "West,Stephen H",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Westerhoff,Paul",
      "group": "IAFSE",
      "label": "Westerhoff,Paul",
      "links": 7,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Westlake,Garret M",
      "group": "OKED",
      "label": "Westlake,Garret M",
      "links": 1,
      "group_code": 21
    }
  }, {
    "data": {
      "id": "Wetmore,Jameson Michael",
      "group": "SFIS",
      "label": "Wetmore,Jameson Michael",
      "links": 2,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Wetzel,Jon",
      "group": "IAFSE",
      "label": "Wetzel,Jon",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Wetzel,Nicole Michelle",
      "group": "ARTS",
      "label": "Wetzel,Nicole Michelle",
      "links": 1,
      "group_code": 7
    }
  }, {
    "data": {
      "id": "Wharton,Christopher Mack",
      "group": "CHS",
      "label": "Wharton,Christopher Mack",
      "links": 3,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Whelan,Mary Kathryn",
      "group": "LIB",
      "label": "Whelan,Mary Kathryn",
      "links": 3,
      "group_code": 23
    }
  }, {
    "data": {
      "id": "Whipple,Kelin X",
      "group": "CLAS",
      "label": "Whipple,Kelin X",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Whisner,Corrie Marie",
      "group": "CHS",
      "label": "Whisner,Corrie Marie",
      "links": 2,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "White,Dave Douglas",
      "group": "PUBSRV",
      "label": "White,Dave Douglas",
      "links": 8,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "White,Mary A",
      "group": "ISTL",
      "label": "White,Mary A",
      "links": 1,
      "group_code": 13
    }
  }, {
    "data": {
      "id": "White,Michael D",
      "group": "PUBSRV",
      "label": "White,Michael D",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "White,Rebecca May Blumenauer",
      "group": "CLAS",
      "label": "White,Rebecca May Blumenauer",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Whitsett,Andrea Johns",
      "group": "PUBSRV",
      "label": "Whitsett,Andrea Johns",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Wiktor,Peter Jan",
      "group": "BDI",
      "label": "Wiktor,Peter Jan",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Wilcox,Martha Jeanne",
      "group": "MLFTC",
      "label": "Wilcox,Martha Jeanne",
      "links": 3,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Wilkens,Natalie Desrochers",
      "group": "CLAS",
      "label": "Wilkens,Natalie Desrochers",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Williams,David A",
      "group": "CLAS",
      "label": "Williams,David A",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Williams,Deborah L",
      "group": "CLAS",
      "label": "Williams,Deborah L",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Williams,Douglas Adrian",
      "group": "CLAS",
      "label": "Williams,Douglas Adrian",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Williams,Joann Clara",
      "group": "CLAS",
      "label": "Williams,Joann Clara",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Williams,Lela Rankin",
      "group": "PUBSRV",
      "label": "Williams,Lela Rankin",
      "links": 1,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Williams,Lynda B",
      "group": "CLAS",
      "label": "Williams,Lynda B",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Williamson,John Clint",
      "group": "OKED",
      "label": "Williamson,John Clint",
      "links": 2,
      "group_code": 21
    }
  }, {
    "data": {
      "id": "Willis,Wayne Tyrus",
      "group": "CHS",
      "label": "Willis,Wayne Tyrus",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Wilson Sayres,Melissa A",
      "group": "CLAS",
      "label": "Wilson Sayres,Melissa A",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Wilson-Rawls,Norma Jeanne",
      "group": "CLAS",
      "label": "Wilson-Rawls,Norma Jeanne",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Windhorst,Rogier A",
      "group": "CLAS",
      "label": "Windhorst,Rogier A",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Winterton,Jamie",
      "group": "GSECURITY",
      "label": "Winterton,Jamie",
      "links": 3,
      "group_code": 24
    }
  }, {
    "data": {
      "id": "Wittmann,Axel",
      "group": "CLAS",
      "label": "Wittmann,Axel",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Wolchik,Sharlene",
      "group": "CLAS",
      "label": "Wolchik,Sharlene",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Wolfersteig,Wendy L",
      "group": "PUBSRV",
      "label": "Wolfersteig,Wendy L",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Wolowiec-Fisher,Kimberly Chris",
      "group": "MLFTC",
      "label": "Wolowiec-Fisher,Kimberly Chris",
      "links": 2,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Wood,Reed Morrison",
      "group": "CLAS",
      "label": "Wood,Reed Morrison",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Woodall,Gina Marie Serignese",
      "group": "CLAS",
      "label": "Woodall,Gina Marie Serignese",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Woodbury,Neal Walter",
      "group": "CLAS",
      "label": "Woodbury,Neal Walter",
      "links": 6,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Wright,Allen B",
      "group": "IAFSE",
      "label": "Wright,Allen B",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Wright,Christian Douglas",
      "group": "CLAS",
      "label": "Wright,Christian Douglas",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Wright,Kevin A",
      "group": "PUBSRV",
      "label": "Wright,Kevin A",
      "links": 2,
      "group_code": 8
    }
  }, {
    "data": {
      "id": "Wright,Thorin",
      "group": "CLAS",
      "label": "Wright,Thorin",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Wu,Bing",
      "group": "IAFSE",
      "label": "Wu,Bing",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Wu,Carole-Jean",
      "group": "IAFSE",
      "label": "Wu,Carole-Jean",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Wu,Jun",
      "group": "CLAS",
      "label": "Wu,Jun",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Wu,Teresa",
      "group": "IAFSE",
      "label": "Wu,Teresa",
      "links": 5,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Wutich,Amber Elisabeth Yoder",
      "group": "CLAS",
      "label": "Wutich,Amber Elisabeth Yoder",
      "links": 4,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Wylie,Ruth",
      "group": "MLFTC",
      "label": "Wylie,Ruth",
      "links": 3,
      "group_code": 9
    }
  }, {
    "data": {
      "id": "Wynne,Clive",
      "group": "CLAS",
      "label": "Wynne,Clive",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Xian,Xiaojun",
      "group": "BDI",
      "label": "Xian,Xiaojun",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Xue,Guoliang",
      "group": "IAFSE",
      "label": "Xue,Guoliang",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Yamashiro,Carl Takeshi",
      "group": "CHS",
      "label": "Yamashiro,Carl Takeshi",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Yan,Hao",
      "group": "CLAS",
      "label": "Yan,Hao",
      "links": 7,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Yao,Yu",
      "group": "IAFSE",
      "label": "Yao,Yu",
      "links": 4,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Yarger,Jeffery Lynn",
      "group": "CLAS",
      "label": "Yarger,Jeffery Lynn",
      "links": 5,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Yau,Sik-Sang",
      "group": "IAFSE",
      "label": "Yau,Sik-Sang",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Ye,Nong",
      "group": "IAFSE",
      "label": "Ye,Nong",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Yeager,Cynthia Jean",
      "group": "THUNDERBIRD",
      "label": "Yeager,Cynthia Jean",
      "links": 0,
      "group_code": 25
    }
  }, {
    "data": {
      "id": "Yekani Fard,Masoud",
      "group": "IAFSE",
      "label": "Yekani Fard,Masoud",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Ying,Lei",
      "group": "IAFSE",
      "label": "Ying,Lei",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "York,Abigail",
      "group": "CLAS",
      "label": "York,Abigail",
      "links": 3,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Yost,William A",
      "group": "CHS",
      "label": "Yost,William A",
      "links": 2,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Young,Patrick",
      "group": "CLAS",
      "label": "Young,Patrick",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Youngbull,Aaron Cody",
      "group": "CLAS",
      "label": "Youngbull,Aaron Cody",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Youngstedt,Shawn D",
      "group": "CONHI",
      "label": "Youngstedt,Shawn D",
      "links": 2,
      "group_code": 3
    }
  }, {
    "data": {
      "id": "Yu,Hongbin",
      "group": "IAFSE",
      "label": "Yu,Hongbin",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Yu,Hongyu",
      "group": "IAFSE",
      "label": "Yu,Hongyu",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Yu,Shimeng",
      "group": "IAFSE",
      "label": "Yu,Shimeng",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Zachary,Gregg Pascal",
      "group": "SFIS",
      "label": "Zachary,Gregg Pascal",
      "links": 1,
      "group_code": 15
    }
  }, {
    "data": {
      "id": "Zaniewski,Anna",
      "group": "CLAS",
      "label": "Zaniewski,Anna",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Zapata,Claudia E",
      "group": "IAFSE",
      "label": "Zapata,Claudia E",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Zatsepin,Nadia",
      "group": "CLAS",
      "label": "Zatsepin,Nadia",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Zautra,Alex John",
      "group": "CLAS",
      "label": "Zautra,Alex John",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Zhai,Guang",
      "group": "CLAS",
      "label": "Zhai,Guang",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Zhang,Fei",
      "group": "BDI",
      "label": "Zhang,Fei",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Zhang,Jun Lei",
      "group": "CLAS",
      "label": "Zhang,Jun Lei",
      "links": 0,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Zhang,Junshan",
      "group": "IAFSE",
      "label": "Zhang,Junshan",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Zhang,Peiming",
      "group": "BDI",
      "label": "Zhang,Peiming",
      "links": 2,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Zhang,Wenlong",
      "group": "IAFSE",
      "label": "Zhang,Wenlong",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Zhang,Xia",
      "group": "CLAS",
      "label": "Zhang,Xia",
      "links": 1,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Zhang,Yanchao",
      "group": "IAFSE",
      "label": "Zhang,Yanchao",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Zhang,Yong-Hang",
      "group": "IAFSE",
      "label": "Zhang,Yong-Hang",
      "links": 6,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Zhang,Yu",
      "group": "IAFSE",
      "label": "Zhang,Yu",
      "links": 1,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Zhao,Ming",
      "group": "IAFSE",
      "label": "Zhao,Ming",
      "links": 2,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Zhao,Yuji",
      "group": "IAFSE",
      "label": "Zhao,Yuji",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Zhao,Zhan-Gong",
      "group": "BDI",
      "label": "Zhao,Zhan-Gong",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Zheng,Yi",
      "group": "CLAS",
      "label": "Zheng,Yi",
      "links": 2,
      "group_code": 1
    }
  }, {
    "data": {
      "id": "Zhou,Chen",
      "group": "BDI",
      "label": "Zhou,Chen",
      "links": 1,
      "group_code": 14
    }
  }, {
    "data": {
      "id": "Zhou,Xuesong",
      "group": "IAFSE",
      "label": "Zhou,Xuesong",
      "links": 3,
      "group_code": 0
    }
  }, {
    "data": {
      "id": "Zhou,Yi",
      "group": "CHS",
      "label": "Zhou,Yi",
      "links": 1,
      "group_code": 4
    }
  }, {
    "data": {
      "id": "Zolotov,Mikhail",
      "group": "CLAS",
      "label": "Zolotov,Mikhail",
      "links": 1,
      "group_code": 1
    }
  }],
  "edges": [{
    "data": {
      "source": "Abbas,James",
      "target": "Abbas,James"
    }
  }, {
    "data": {
      "source": "Abbas,James",
      "target": "Boggess,May"
    }
  }, {
    "data": {
      "source": "Abbas,James",
      "target": "Honeycutt,Claire"
    }
  }, {
    "data": {
      "source": "Abbas,James",
      "target": "Lockhart,Thurmon Eddy"
    }
  }, {
    "data": {
      "source": "Abbaszadegan,Morteza",
      "target": "Abbaszadegan,Morteza"
    }
  }, {
    "data": {
      "source": "Abbaszadegan,Morteza",
      "target": "Alum,Absar"
    }
  }, {
    "data": {
      "source": "Abbott,David Ralph",
      "target": "Abbott,David Ralph"
    }
  }, {
    "data": {
      "source": "Abbott,Joshua K",
      "target": "Abbott,Joshua K"
    }
  }, {
    "data": {
      "source": "Abdelmonem,Angie",
      "target": "Adelman,Madelaine Beth"
    }
  }, {
    "data": {
      "source": "Abry,Tashia",
      "target": "Abry,Tashia"
    }
  }, {
    "data": {
      "source": "Abry,Tashia",
      "target": "Duggan,Mary Anne"
    }
  }, {
    "data": {
      "source": "Abry,Tashia",
      "target": "Fabes,Richard Allen"
    }
  }, {
    "data": {
      "source": "Abry,Tashia",
      "target": "Wilkens,Natalie Desrochers"
    }
  }, {
    "data": {
      "source": "Adams,James Brewster",
      "target": "Adams,James Brewster"
    }
  }, {
    "data": {
      "source": "Adams,James Brewster",
      "target": "Krajmalnik-Brown,Rosa"
    }
  }, {
    "data": {
      "source": "Adams,Jeffrey M",
      "target": "Adams,Jeffrey M"
    }
  }, {
    "data": {
      "source": "Adams,Marc Anthony",
      "target": "Adams,Marc Anthony"
    }
  }, {
    "data": {
      "source": "Adrian,Ronald John",
      "target": "Adrian,Ronald John"
    }
  }, {
    "data": {
      "source": "Adrian,Ronald John",
      "target": "Peet,Yulia V"
    }
  }, {
    "data": {
      "source": "Agusdinata,Buyung",
      "target": "Agusdinata,Buyung"
    }
  }, {
    "data": {
      "source": "Ahn,Gail-Joon",
      "target": "Ahn,Gail-Joon"
    }
  }, {
    "data": {
      "source": "Ahn,Gail-Joon",
      "target": "Doupe,Adam"
    }
  }, {
    "data": {
      "source": "Ahn,Gail-Joon",
      "target": "Huang,Dijiang"
    }
  }, {
    "data": {
      "source": "Ainsworth,Barbara Ellen",
      "target": "Ainsworth,Barbara Ellen"
    }
  }, {
    "data": {
      "source": "Alarcon,Ricardo O",
      "target": "Alarcon,Ricardo O"
    }
  }, {
    "data": {
      "source": "Alford,Eddie Jim",
      "target": "Alford,Eddie Jim"
    }
  }, {
    "data": {
      "source": "Alford,Eddie Jim",
      "target": "Green,Douglas Mitchell"
    }
  }, {
    "data": {
      "source": "Alford,Terry Lynn",
      "target": "Alford,Terry Lynn"
    }
  }, {
    "data": {
      "source": "Allee,David Ray",
      "target": "Allee,David Ray"
    }
  }, {
    "data": {
      "source": "Allen,Daniel",
      "target": "Allen,Daniel"
    }
  }, {
    "data": {
      "source": "Allen,James Paul",
      "target": "Allen,James Paul"
    }
  }, {
    "data": {
      "source": "Allen,James Paul",
      "target": "Chen,Julian J-L"
    }
  }, {
    "data": {
      "source": "Allen,James Paul",
      "target": "Williams,Joann Clara"
    }
  }, {
    "data": {
      "source": "Amazeen,Eric",
      "target": "Amazeen,Eric"
    }
  }, {
    "data": {
      "source": "Amazeen,Eric",
      "target": "Brewer Jr,Gene"
    }
  }, {
    "data": {
      "source": "Amdam,Gro Vang",
      "target": "Amdam,Gro Vang"
    }
  }, {
    "data": {
      "source": "Ames,Victoria E",
      "target": "Ames,Victoria E"
    }
  }, {
    "data": {
      "source": "Amparano,Julie A",
      "target": "Amparano,Julie A"
    }
  }, {
    "data": {
      "source": "Amresh,Ashish",
      "target": "Amresh,Ashish"
    }
  }, {
    "data": {
      "source": "Amresh,Ashish",
      "target": "Bansal,Srividya Kona"
    }
  }, {
    "data": {
      "source": "Amresh,Ashish",
      "target": "Craig,Scotty Dale"
    }
  }, {
    "data": {
      "source": "Amresh,Ashish",
      "target": "Sohoni,Sohum Ashok"
    }
  }, {
    "data": {
      "source": "Anbar,Ariel David",
      "target": "Anbar,Ariel David"
    }
  }, {
    "data": {
      "source": "Anderies,John M",
      "target": "Anderies,John M"
    }
  }, {
    "data": {
      "source": "Anderies,John M",
      "target": "Breetz,Hanna Lori"
    }
  }, {
    "data": {
      "source": "Anderies,John M",
      "target": "Janssen,Marcus Alexander"
    }
  }, {
    "data": {
      "source": "Anderies,John M",
      "target": "Rodriguez,Armando A"
    }
  }, {
    "data": {
      "source": "Anderson,James R",
      "target": "Anderson,James R"
    }
  }, {
    "data": {
      "source": "Anderson,James R",
      "target": "Calhoun,Ronald Joseph"
    }
  }, {
    "data": {
      "source": "Anderson,James R",
      "target": "Chhetri,Nalini"
    }
  }, {
    "data": {
      "source": "Anderson,James R",
      "target": "Crozier,Peter"
    }
  }, {
    "data": {
      "source": "Anderson,James R",
      "target": "Runger,George"
    }
  }, {
    "data": {
      "source": "Anderson,Karen S",
      "target": "Anderson,Karen S"
    }
  }, {
    "data": {
      "source": "Anderson,Karen S",
      "target": "Blain Christen,Jennifer Mary"
    }
  }, {
    "data": {
      "source": "Anderson,Karen S",
      "target": "Borges,Chad Randolph"
    }
  }, {
    "data": {
      "source": "Anderson,Karen S",
      "target": "Goryll,Michael"
    }
  }, {
    "data": {
      "source": "Anderson,Karen S",
      "target": "Wilson Sayres,Melissa A"
    }
  }, {
    "data": {
      "source": "Andino,Jean M",
      "target": "Andino,Jean M"
    }
  }, {
    "data": {
      "source": "Angadi,Siddhartha Subhashchand",
      "target": "Angadi,Siddhartha Subhashchand"
    }
  }, {
    "data": {
      "source": "Angadi,Siddhartha Subhashchand",
      "target": "Dickinson,Jared M"
    }
  }, {
    "data": {
      "source": "Angadi,Siddhartha Subhashchand",
      "target": "Gaesser,Glenn Alan"
    }
  }, {
    "data": {
      "source": "Angadi,Siddhartha Subhashchand",
      "target": "Lee,Chong Do"
    }
  }, {
    "data": {
      "source": "Angell,Charles Austen",
      "target": "Angell,Charles Austen"
    }
  }, {
    "data": {
      "source": "Angilletta,Michael",
      "target": "Angilletta,Michael"
    }
  }, {
    "data": {
      "source": "Angilletta,Michael",
      "target": "Kusumi,Kenro"
    }
  }, {
    "data": {
      "source": "Anokye,Akua D",
      "target": "Anokye,Akua D"
    }
  }, {
    "data": {
      "source": "Anokye,Akua D",
      "target": "Murphy Erfani,Julie Ann"
    }
  }, {
    "data": {
      "source": "Anselin,Luc E",
      "target": "Anselin,Luc E"
    }
  }, {
    "data": {
      "source": "Ariaratnam,Samuel T",
      "target": "Ariaratnam,Samuel T"
    }
  }, {
    "data": {
      "source": "Arrowsmith,Ramon",
      "target": "Arrowsmith,Ramon"
    }
  }, {
    "data": {
      "source": "Artemiadis,Panagiotis K.",
      "target": "Artemiadis,Panagiotis K."
    }
  }, {
    "data": {
      "source": "Artiles,Alfredo",
      "target": "Artiles,Alfredo"
    }
  }, {
    "data": {
      "source": "Artiles,Alfredo",
      "target": "Dorn,Sherman J"
    }
  }, {
    "data": {
      "source": "Ashcraft,Robert F",
      "target": "Ashcraft,Robert F"
    }
  }, {
    "data": {
      "source": "Ashford,Jose Barry",
      "target": "Ashford,Jose Barry"
    }
  }, {
    "data": {
      "source": "Askin,Ronald Gene",
      "target": "Askin,Ronald Gene"
    }
  }, {
    "data": {
      "source": "Asphaug,Erik",
      "target": "Adamson,Eric Thomas"
    }
  }, {
    "data": {
      "source": "Asphaug,Erik",
      "target": "Asphaug,Erik"
    }
  }, {
    "data": {
      "source": "Asphaug,Erik",
      "target": "Barnaby,Hugh James"
    }
  }, {
    "data": {
      "source": "Asphaug,Erik",
      "target": "Chattopadhyay,Aditi"
    }
  }, {
    "data": {
      "source": "Asphaug,Erik",
      "target": "Chawla,Nikhilesh"
    }
  }, {
    "data": {
      "source": "Asphaug,Erik",
      "target": "Garvie,Laurence A J"
    }
  }, {
    "data": {
      "source": "Asphaug,Erik",
      "target": "Rhoden,Alyssa Rose"
    }
  }, {
    "data": {
      "source": "Asphaug,Erik",
      "target": "Scowen,Paul Andrew"
    }
  }, {
    "data": {
      "source": "Asphaug,Erik",
      "target": "Thangavelautham,Jekanthan"
    }
  }, {
    "data": {
      "source": "Atkinson,Robert Kenneth",
      "target": "Atkinson,Robert Kenneth"
    }
  }, {
    "data": {
      "source": "Atkinson,Robert Kenneth",
      "target": "Hess,Aaron R"
    }
  }, {
    "data": {
      "source": "Atkinson,Robert Kenneth",
      "target": "Runger,George"
    }
  }, {
    "data": {
      "source": "Aukes,Daniel Mcconnell",
      "target": "Aukes,Daniel Mcconnell"
    }
  }, {
    "data": {
      "source": "Aviles-Santiago,Manuel Gerardo",
      "target": "Aviles-Santiago,Manuel Gerardo"
    }
  }, {
    "data": {
      "source": "Axel,Joseph B",
      "target": "Axel,Joseph B"
    }
  }, {
    "data": {
      "source": "Axel,Joseph B",
      "target": "Lippincott,Dianna G"
    }
  }, {
    "data": {
      "source": "Axel,Joseph B",
      "target": "Mclaughlin,Claire P"
    }
  }, {
    "data": {
      "source": "Ayer,Steven",
      "target": "Atkinson,Robert Kenneth"
    }
  }, {
    "data": {
      "source": "Ayer,Steven",
      "target": "Ayer,Steven"
    }
  }, {
    "data": {
      "source": "Ayer,Steven",
      "target": "Emady,Heather Nicole"
    }
  }, {
    "data": {
      "source": "Ayer,Steven",
      "target": "Ernzen,James J"
    }
  }, {
    "data": {
      "source": "Ayyanar,Raja",
      "target": "Ayyanar,Raja"
    }
  }, {
    "data": {
      "source": "Ayyanar,Raja",
      "target": "Phillips,Stephen M"
    }
  }, {
    "data": {
      "source": "Ayyanar,Raja",
      "target": "Qin,Jiangchao"
    }
  }, {
    "data": {
      "source": "Ayyanar,Raja",
      "target": "Saraniti,Marco"
    }
  }, {
    "data": {
      "source": "Ayyanar,Raja",
      "target": "Vittal,Vijay"
    }
  }, {
    "data": {
      "source": "Ayyanar,Raja",
      "target": "Zhao,Yuji"
    }
  }, {
    "data": {
      "source": "Azuma,Tamiko",
      "target": "Azuma,Tamiko"
    }
  }, {
    "data": {
      "source": "Azuma,Tamiko",
      "target": "Gallagher,Karen Louise"
    }
  }, {
    "data": {
      "source": "Bakkaloglu,Bertan",
      "target": "Bakkaloglu,Bertan"
    }
  }, {
    "data": {
      "source": "Bakkaloglu,Bertan",
      "target": "Barnaby,Hugh James"
    }
  }, {
    "data": {
      "source": "Balanis,Constantine A",
      "target": "Balanis,Constantine A"
    }
  }, {
    "data": {
      "source": "Baldwin,Marjorie L",
      "target": "Baldwin,Marjorie L"
    }
  }, {
    "data": {
      "source": "Baldwin,Marjorie L",
      "target": "White,Rebecca May Blumenauer"
    }
  }, {
    "data": {
      "source": "Ball,Rebecca",
      "target": "Ball,Rebecca"
    }
  }, {
    "data": {
      "source": "Baluch,Debra Page",
      "target": "Baluch,Debra Page"
    }
  }, {
    "data": {
      "source": "Baluch,Debra Page",
      "target": "Gipson-Reichardt,Cassandra Dia"
    }
  }, {
    "data": {
      "source": "Baluch,Debra Page",
      "target": "Newbern,Jason M."
    }
  }, {
    "data": {
      "source": "Baluch,Debra Page",
      "target": "Newfeld,Stuart J"
    }
  }, {
    "data": {
      "source": "Baluch,Debra Page",
      "target": "Nickerson,Cheryl"
    }
  }, {
    "data": {
      "source": "Baluch,Debra Page",
      "target": "Olive,Michael Foster"
    }
  }, {
    "data": {
      "source": "Baluch,Debra Page",
      "target": "Stabenfeldt,Sarah E"
    }
  }, {
    "data": {
      "source": "Baluch,Debra Page",
      "target": "Ugarova,Tatiana P"
    }
  }, {
    "data": {
      "source": "Bansal,Srividya Kona",
      "target": "Bansal,Srividya Kona"
    }
  }, {
    "data": {
      "source": "Bansal,Srividya Kona",
      "target": "Candan,Kasim Selcuk"
    }
  }, {
    "data": {
      "source": "Barab,Sasha A.",
      "target": "Barab,Sasha A."
    }
  }, {
    "data": {
      "source": "Baral,Chitta Ranjan",
      "target": "Baral,Chitta Ranjan"
    }
  }, {
    "data": {
      "source": "Baral,Chitta Ranjan",
      "target": "Lee,Joohyung"
    }
  }, {
    "data": {
      "source": "Baral,Chitta Ranjan",
      "target": "Li,Baoxin"
    }
  }, {
    "data": {
      "source": "Baral,Chitta Ranjan",
      "target": "Shakarian,Jana L"
    }
  }, {
    "data": {
      "source": "Baral,Chitta Ranjan",
      "target": "Shakarian,Paulo"
    }
  }, {
    "data": {
      "source": "Baral,Chitta Ranjan",
      "target": "Xue,Guoliang"
    }
  }, {
    "data": {
      "source": "Barnaby,Hugh James",
      "target": "Bakkaloglu,Bertan"
    }
  }, {
    "data": {
      "source": "Barnaby,Hugh James",
      "target": "Barnaby,Hugh James"
    }
  }, {
    "data": {
      "source": "Barnaby,Hugh James",
      "target": "Gonzalez Velo,Yago"
    }
  }, {
    "data": {
      "source": "Barnaby,Hugh James",
      "target": "Holbert,Keith Edwin"
    }
  }, {
    "data": {
      "source": "Barnaby,Hugh James",
      "target": "Kozicki,Michael N"
    }
  }, {
    "data": {
      "source": "Barnaby,Hugh James",
      "target": "Vrudhula,Sarma B K"
    }
  }, {
    "data": {
      "source": "Barnaby,Hugh James",
      "target": "Yu,Shimeng"
    }
  }, {
    "data": {
      "source": "Barnard,Wendy Miedel",
      "target": "Barnard,Wendy Miedel"
    }
  }, {
    "data": {
      "source": "Barnard,Wendy Miedel",
      "target": "White,Mary A"
    }
  }, {
    "data": {
      "source": "Barton,C Michael",
      "target": "Barton,C Michael"
    }
  }, {
    "data": {
      "source": "Barton,C Michael",
      "target": "Buetow,Kenneth H"
    }
  }, {
    "data": {
      "source": "Barton,C Michael",
      "target": "Gurney,Kevin Robert"
    }
  }, {
    "data": {
      "source": "Barton,C Michael",
      "target": "Janssen,Marcus Alexander"
    }
  }, {
    "data": {
      "source": "Barton,C Michael",
      "target": "Lee,Allen"
    }
  }, {
    "data": {
      "source": "Barton,C Michael",
      "target": "Lobo,Jose A"
    }
  }, {
    "data": {
      "source": "Basham,Melody Ann",
      "target": "Basham,Melody Ann"
    }
  }, {
    "data": {
      "source": "Basham,Melody Ann",
      "target": "Franz,Nico Mario"
    }
  }, {
    "data": {
      "source": "Batalden,Stephen K",
      "target": "Batalden,Stephen K"
    }
  }, {
    "data": {
      "source": "Batalden,Stephen K",
      "target": "Brokaw,David Paul"
    }
  }, {
    "data": {
      "source": "Batalden,Stephen K",
      "target": "Evans-Romaine,Dorothy Kathleen"
    }
  }, {
    "data": {
      "source": "Batalden,Stephen K",
      "target": "Sipka,Danko Dan"
    }
  }, {
    "data": {
      "source": "Batova,Tatiana",
      "target": "Batova,Tatiana"
    }
  }, {
    "data": {
      "source": "Baxter,Aryn R",
      "target": "Baxter,Aryn R"
    }
  }, {
    "data": {
      "source": "Bazzi,Rida A",
      "target": "Bazzi,Rida A"
    }
  }, {
    "data": {
      "source": "Beal,Sarah Elaine",
      "target": "Beal,Sarah Elaine"
    }
  }, {
    "data": {
      "source": "Beal,Sarah Elaine",
      "target": "Saltmarsh,Sarah Schmaltz"
    }
  }, {
    "data": {
      "source": "Bean,Heather",
      "target": "Bean,Heather"
    }
  }, {
    "data": {
      "source": "Beardsley,Audrey Lee",
      "target": "Beardsley,Audrey Lee"
    }
  }, {
    "data": {
      "source": "Beardsley,Audrey Lee",
      "target": "Broatch,Jennifer Ellen"
    }
  }, {
    "data": {
      "source": "Beardsley,Audrey Lee",
      "target": "Pivovarova,Margarita"
    }
  }, {
    "data": {
      "source": "Bebout,Lee",
      "target": "Bebout,Lee"
    }
  }, {
    "data": {
      "source": "Bebout,Lee",
      "target": "Delmont,Matthew"
    }
  }, {
    "data": {
      "source": "Bebout,Lee",
      "target": "Leong,Karen"
    }
  }, {
    "data": {
      "source": "Bebout,Lee",
      "target": "Sarat,Leah M"
    }
  }, {
    "data": {
      "source": "Bebout,Lee",
      "target": "Shabazz Sanders,Gregg Rashad"
    }
  }, {
    "data": {
      "source": "Bebout,Lee",
      "target": "Vega,Sujey"
    }
  }, {
    "data": {
      "source": "Beckman,Laura Owen",
      "target": "Wang,Xia"
    }
  }, {
    "data": {
      "source": "Beckstein,Oliver",
      "target": "Beckstein,Oliver"
    }
  }, {
    "data": {
      "source": "Begay,Victor Harvinn",
      "target": "Begay,Victor Harvinn"
    }
  }, {
    "data": {
      "source": "Bekki,Jennifer Mcneill",
      "target": "Bekki,Jennifer Mcneill"
    }
  }, {
    "data": {
      "source": "Bekki,Jennifer Mcneill",
      "target": "Brunhaver,Samantha Ruth"
    }
  }, {
    "data": {
      "source": "Bekki,Jennifer Mcneill",
      "target": "Gel,Esma Senturk"
    }
  }, {
    "data": {
      "source": "Bekki,Jennifer Mcneill",
      "target": "Runger,George"
    }
  }, {
    "data": {
      "source": "Bell III,James",
      "target": "Bell III,James"
    }
  }, {
    "data": {
      "source": "Ben Amor,Hani",
      "target": "Ben Amor,Hani"
    }
  }, {
    "data": {
      "source": "Ben Amor,Hani",
      "target": "Ogras,Umit Y."
    }
  }, {
    "data": {
      "source": "Ben Amor,Hani",
      "target": "Ozev,Sule"
    }
  }, {
    "data": {
      "source": "Ben Amor,Hani",
      "target": "Vrudhula,Sarma B K"
    }
  }, {
    "data": {
      "source": "Bennett,Ira Mccoy",
      "target": "Bennett,Ira Mccoy"
    }
  }, {
    "data": {
      "source": "Bennett,Ira Mccoy",
      "target": "Johnston,Erik W"
    }
  }, {
    "data": {
      "source": "Bennett,Michael George",
      "target": "Bennett,Michael George"
    }
  }, {
    "data": {
      "source": "Bennett,Michael George",
      "target": "Bowman,Diana Megan"
    }
  }, {
    "data": {
      "source": "Bennett,Michael George",
      "target": "Simeone,Michael Paul"
    }
  }, {
    "data": {
      "source": "Berisha,Visar Shahin",
      "target": "Berisha,Visar Shahin"
    }
  }, {
    "data": {
      "source": "Berisha,Visar Shahin",
      "target": "Buman,Matthew P"
    }
  }, {
    "data": {
      "source": "Berisha,Visar Shahin",
      "target": "Evans-Romaine,Dorothy Kathleen"
    }
  }, {
    "data": {
      "source": "Berisha,Visar Shahin",
      "target": "Ingram,Kelly Dawn"
    }
  }, {
    "data": {
      "source": "Berisha,Visar Shahin",
      "target": "Lacross,Amy Beth"
    }
  }, {
    "data": {
      "source": "Berisha,Visar Shahin",
      "target": "Liss,Julie M"
    }
  }, {
    "data": {
      "source": "Berisha,Visar Shahin",
      "target": "Peter,Beate"
    }
  }, {
    "data": {
      "source": "Berisha,Visar Shahin",
      "target": "Reddy,Corianne Rogalsky"
    }
  }, {
    "data": {
      "source": "Berisha,Visar Shahin",
      "target": "Scaglione,Anna"
    }
  }, {
    "data": {
      "source": "Berkel,Cady",
      "target": "Berkel,Cady"
    }
  }, {
    "data": {
      "source": "Berkel,Cady",
      "target": "Dishion,Thomas"
    }
  }, {
    "data": {
      "source": "Berkel,Cady",
      "target": "Grimm,Kevin John"
    }
  }, {
    "data": {
      "source": "Berkel,Cady",
      "target": "Mauricio,Anne Marie"
    }
  }, {
    "data": {
      "source": "Berman,Spring Melody",
      "target": "Berman,Spring Melody"
    }
  }, {
    "data": {
      "source": "Bernstein,Bianca L",
      "target": "Bekki,Jennifer Mcneill"
    }
  }, {
    "data": {
      "source": "Bernstein,Bianca L",
      "target": "Bernstein,Bianca L"
    }
  }, {
    "data": {
      "source": "Bernstein,Bianca L",
      "target": "Randall,Ashley Karay"
    }
  }, {
    "data": {
      "source": "Bertoni,Mariana Ines",
      "target": "Bertoni,Mariana Ines"
    }
  }, {
    "data": {
      "source": "Bertoni,Mariana Ines",
      "target": "Hildreth,Owen James"
    }
  }, {
    "data": {
      "source": "Bienenstock,Elisa Jayne",
      "target": "Bienenstock,Elisa Jayne"
    }
  }, {
    "data": {
      "source": "Bienenstock,Elisa Jayne",
      "target": "Corman,Steven Robert"
    }
  }, {
    "data": {
      "source": "Bienenstock,Elisa Jayne",
      "target": "Desouza,Kevin"
    }
  }, {
    "data": {
      "source": "Bienenstock,Elisa Jayne",
      "target": "Ruston,Scott W"
    }
  }, {
    "data": {
      "source": "Bimonte-Nelson,Heather",
      "target": "Bimonte-Nelson,Heather"
    }
  }, {
    "data": {
      "source": "Bimonte-Nelson,Heather",
      "target": "Coleman,Paul David"
    }
  }, {
    "data": {
      "source": "Bimonte-Nelson,Heather",
      "target": "Conrad,Cheryl Diane"
    }
  }, {
    "data": {
      "source": "Bimonte-Nelson,Heather",
      "target": "Coon,David Wayne"
    }
  }, {
    "data": {
      "source": "Bimonte-Nelson,Heather",
      "target": "Decourt,Boris"
    }
  }, {
    "data": {
      "source": "Bimonte-Nelson,Heather",
      "target": "Oddo,Salvatore"
    }
  }, {
    "data": {
      "source": "Bimonte-Nelson,Heather",
      "target": "Sierks,Michael Richard"
    }
  }, {
    "data": {
      "source": "Bimonte-Nelson,Heather",
      "target": "Smith,Brian"
    }
  }, {
    "data": {
      "source": "Bjork,Robert Eric",
      "target": "Bjork,Robert Eric"
    }
  }, {
    "data": {
      "source": "Blain Christen,Jennifer Mary",
      "target": "Blain Christen,Jennifer Mary"
    }
  }, {
    "data": {
      "source": "Blakemore,Arthur E",
      "target": "Adams,Gary B"
    }
  }, {
    "data": {
      "source": "Blakemore,Arthur E",
      "target": "Bates,Denise Eileen"
    }
  }, {
    "data": {
      "source": "Blakemore,Arthur E",
      "target": "Blakemore,Arthur E"
    }
  }, {
    "data": {
      "source": "Blakemore,Arthur E",
      "target": "Goldinger,Stephen David"
    }
  }, {
    "data": {
      "source": "Blakemore,Arthur E",
      "target": "Holechek,Susan"
    }
  }, {
    "data": {
      "source": "Blakemore,Arthur E",
      "target": "Williams,Douglas Adrian"
    }
  }, {
    "data": {
      "source": "Blankson,Gerald Kotey",
      "target": "Blankson,Gerald Kotey"
    }
  }, {
    "data": {
      "source": "Blasingame,James Bryan",
      "target": "Blasingame,James Bryan"
    }
  }, {
    "data": {
      "source": "Blattman,Joseph Nathan",
      "target": "Blattman,Joseph Nathan"
    }
  }, {
    "data": {
      "source": "Blattman,Joseph Nathan",
      "target": "Yan,Hao"
    }
  }, {
    "data": {
      "source": "Bliss,Daniel Wesley",
      "target": "Bliss,Daniel Wesley"
    }
  }, {
    "data": {
      "source": "Bliss,Daniel Wesley",
      "target": "Cochran,Douglas"
    }
  }, {
    "data": {
      "source": "Bond,Angela Bowen",
      "target": "Reifsnider,Elizabeth Ann"
    }
  }, {
    "data": {
      "source": "Bonifas,Robin P",
      "target": "Bonifas,Robin P"
    }
  }, {
    "data": {
      "source": "Boone,Christopher G",
      "target": "Aggarwal,Rimjhim M"
    }
  }, {
    "data": {
      "source": "Boone,Christopher G",
      "target": "Boone,Christopher G"
    }
  }, {
    "data": {
      "source": "Boone,Christopher G",
      "target": "Chester,Mikhail"
    }
  }, {
    "data": {
      "source": "Boone,Christopher G",
      "target": "Gurney,Kevin Robert"
    }
  }, {
    "data": {
      "source": "Boone,Christopher G",
      "target": "Hall,Sharon"
    }
  }, {
    "data": {
      "source": "Boone,Christopher G",
      "target": "Larson,Kelli Leigh"
    }
  }, {
    "data": {
      "source": "Boone,Christopher G",
      "target": "Lobo,Jose A"
    }
  }, {
    "data": {
      "source": "Boone,Christopher G",
      "target": "Middel,Ariane Christine"
    }
  }, {
    "data": {
      "source": "Boone,Christopher G",
      "target": "Myint,Soe W"
    }
  }, {
    "data": {
      "source": "Boone,Christopher G",
      "target": "Sailor,David J"
    }
  }, {
    "data": {
      "source": "Boone,Christopher G",
      "target": "Shutters,Shade Timothy"
    }
  }, {
    "data": {
      "source": "Boone,Christopher G",
      "target": "Turner II,Billie Lee"
    }
  }, {
    "data": {
      "source": "Boone,Christopher G",
      "target": "York,Abigail"
    }
  }, {
    "data": {
      "source": "Boradkar,Prasad",
      "target": "Boone,Christopher G"
    }
  }, {
    "data": {
      "source": "Boradkar,Prasad",
      "target": "Boradkar,Prasad"
    }
  }, {
    "data": {
      "source": "Boradkar,Prasad",
      "target": "Larkin,Kyle A"
    }
  }, {
    "data": {
      "source": "Boradkar,Prasad",
      "target": "Shin,Dosun"
    }
  }, {
    "data": {
      "source": "Boradkar,Prasad",
      "target": "Trimble,Steven Wesley"
    }
  }, {
    "data": {
      "source": "Boradkar,Prasad",
      "target": "Trujillo,Rhett Diago"
    }
  }, {
    "data": {
      "source": "Borges,Chad Randolph",
      "target": "Borges,Chad Randolph"
    }
  }, {
    "data": {
      "source": "Borges,Chad Randolph",
      "target": "Compton,Carolyn"
    }
  }, {
    "data": {
      "source": "Borges,Chad Randolph",
      "target": "Wallstrom,Garrick L"
    }
  }, {
    "data": {
      "source": "Borror,Connie Margaret",
      "target": "Borror,Connie Margaret"
    }
  }, {
    "data": {
      "source": "Bose,Maitrayee",
      "target": "Bose,Maitrayee"
    }
  }, {
    "data": {
      "source": "Bowden,Stuart Graham",
      "target": "Bowden,Stuart Graham"
    }
  }, {
    "data": {
      "source": "Bowden,Stuart Graham",
      "target": "Dahal,Som Nath"
    }
  }, {
    "data": {
      "source": "Bowden,Stuart Graham",
      "target": "Dauksher,William J."
    }
  }, {
    "data": {
      "source": "Bowden,Stuart Graham",
      "target": "Faleev,Nikolai"
    }
  }, {
    "data": {
      "source": "Bowden,Stuart Graham",
      "target": "Herasimenka,Stanislau"
    }
  }, {
    "data": {
      "source": "Bowden,Stuart Graham",
      "target": "Honsberg,Christiana B"
    }
  }, {
    "data": {
      "source": "Bowden,Stuart Graham",
      "target": "King,Richard Roland"
    }
  }, {
    "data": {
      "source": "Bowden,Stuart Graham",
      "target": "Rodrigues Augusto,Andre Filipe"
    }
  }, {
    "data": {
      "source": "Bowman,Diana Megan",
      "target": "Bowman,Diana Megan"
    }
  }, {
    "data": {
      "source": "Bowman,Diana Megan",
      "target": "Maynard,Andrew"
    }
  }, {
    "data": {
      "source": "Bowman,Judd David",
      "target": "Bowman,Judd David"
    }
  }, {
    "data": {
      "source": "Bowman,Judd David",
      "target": "Christensen,Philip R"
    }
  }, {
    "data": {
      "source": "Bowman,Judd David",
      "target": "Gharavi,Lance Eric"
    }
  }, {
    "data": {
      "source": "Bowman,Judd David",
      "target": "Saffell,Erinanne Mooney"
    }
  }, {
    "data": {
      "source": "Bowman,Judd David",
      "target": "Sharp,Thomas"
    }
  }, {
    "data": {
      "source": "Boyer,Treavor H.",
      "target": "Abbaszadegan,Morteza"
    }
  }, {
    "data": {
      "source": "Boyer,Treavor H.",
      "target": "Ariaratnam,Samuel T"
    }
  }, {
    "data": {
      "source": "Boyer,Treavor H.",
      "target": "Boyer,Treavor H."
    }
  }, {
    "data": {
      "source": "Boyer,Treavor H.",
      "target": "Chong,Oswald Wk"
    }
  }, {
    "data": {
      "source": "Boyer,Treavor H.",
      "target": "Parrish,Kristen"
    }
  }, {
    "data": {
      "source": "Boyer,Treavor H.",
      "target": "Westerhoff,Paul"
    }
  }, {
    "data": {
      "source": "Bozeman,Barry",
      "target": "Bozeman,Barry"
    }
  }, {
    "data": {
      "source": "Bozeman,Barry",
      "target": "Corley,Elizabeth"
    }
  }, {
    "data": {
      "source": "Bozeman,Barry",
      "target": "Feeney,Mary K"
    }
  }, {
    "data": {
      "source": "Bozeman,Barry",
      "target": "Stritch,Justin Michael"
    }
  }, {
    "data": {
      "source": "Bradley,Robert",
      "target": "Bradley,Robert"
    }
  }, {
    "data": {
      "source": "Bradley,Robert",
      "target": "Iida,Masumi"
    }
  }, {
    "data": {
      "source": "Brafman,David Adam",
      "target": "Brafman,David Adam"
    }
  }, {
    "data": {
      "source": "Branca,Caterina",
      "target": "Oddo,Salvatore"
    }
  }, {
    "data": {
      "source": "Brandt,William R",
      "target": "Borden,Steven A."
    }
  }, {
    "data": {
      "source": "Brandt,William R",
      "target": "Brandt,William R"
    }
  }, {
    "data": {
      "source": "Brandt,William R",
      "target": "Calhoun,Ronald Joseph"
    }
  }, {
    "data": {
      "source": "Brandt,William R",
      "target": "Clark,Susan Spierre"
    }
  }, {
    "data": {
      "source": "Brandt,William R",
      "target": "Cloutier,Scott"
    }
  }, {
    "data": {
      "source": "Brandt,William R",
      "target": "Hettel,Jacqueline Marie"
    }
  }, {
    "data": {
      "source": "Brandt,William R",
      "target": "Johnson,Nathan Gregory"
    }
  }, {
    "data": {
      "source": "Brandt,William R",
      "target": "Seager,Thomas Payson"
    }
  }, {
    "data": {
      "source": "Brandt,William R",
      "target": "Shakarian,Paulo"
    }
  }, {
    "data": {
      "source": "Brandt,William R",
      "target": "Simeone,Michael Paul"
    }
  }, {
    "data": {
      "source": "Brandt,William R",
      "target": "Tracy,Sarah Jane"
    }
  }, {
    "data": {
      "source": "Brandt,William R",
      "target": "Youngbull,Aaron Cody"
    }
  }, {
    "data": {
      "source": "Brashears,William Scott",
      "target": "Brashears,William Scott"
    }
  }, {
    "data": {
      "source": "Brayboy,Bryan",
      "target": "Brayboy,Bryan"
    }
  }, {
    "data": {
      "source": "Bremner,Andrew",
      "target": "Bremner,Andrew"
    }
  }, {
    "data": {
      "source": "Bretschneider,Stuart Ira",
      "target": "Bozeman,Barry"
    }
  }, {
    "data": {
      "source": "Bretschneider,Stuart Ira",
      "target": "Bretschneider,Stuart Ira"
    }
  }, {
    "data": {
      "source": "Bretschneider,Stuart Ira",
      "target": "Corley,Elizabeth"
    }
  }, {
    "data": {
      "source": "Bretschneider,Stuart Ira",
      "target": "Stritch,Justin Michael"
    }
  }, {
    "data": {
      "source": "Brewer Jr,Gene",
      "target": "Blais,Christopher Raymond"
    }
  }, {
    "data": {
      "source": "Brewer Jr,Gene",
      "target": "Brewer Jr,Gene"
    }
  }, {
    "data": {
      "source": "Brewer Jr,Gene",
      "target": "Cohen,Adam"
    }
  }, {
    "data": {
      "source": "Brian,Jennifer Elizabeth Dyck",
      "target": "Brian,Jennifer Elizabeth Dyck"
    }
  }, {
    "data": {
      "source": "Briggs Jr,Ronald",
      "target": "Briggs Jr,Ronald"
    }
  }, {
    "data": {
      "source": "Briggs Jr,Ronald",
      "target": "Smith,Sharon D"
    }
  }, {
    "data": {
      "source": "Brinkman,Daniel",
      "target": "Brinkman,Daniel"
    }
  }, {
    "data": {
      "source": "Brinkman,Daniel",
      "target": "Ringhofer,Christian"
    }
  }, {
    "data": {
      "source": "Brokaw,David Paul",
      "target": "Brokaw,David Paul"
    }
  }, {
    "data": {
      "source": "Brotman,Sarah Marie",
      "target": "Wilson Sayres,Melissa A"
    }
  }, {
    "data": {
      "source": "Brown,Claudia G",
      "target": "Brown,Claudia G"
    }
  }, {
    "data": {
      "source": "Brown,Claudia G",
      "target": "Gabbard,Ralph Barnhart"
    }
  }, {
    "data": {
      "source": "Brown,Claudia G",
      "target": "Makin,Jean E"
    }
  }, {
    "data": {
      "source": "Brown,Mary Ellen",
      "target": "Brown,Mary Ellen"
    }
  }, {
    "data": {
      "source": "Brown,Mary Ellen",
      "target": "Cotter,Katie Lyn"
    }
  }, {
    "data": {
      "source": "Brown,Mary Ellen",
      "target": "Lecroy,Craig Winston"
    }
  }, {
    "data": {
      "source": "Brown,Mary Ellen",
      "target": "Telep,Cody Webb"
    }
  }, {
    "data": {
      "source": "Brownell,Sara",
      "target": "Brownell,Sara"
    }
  }, {
    "data": {
      "source": "Brownell,Sara",
      "target": "Hartnett,Hilairy"
    }
  }, {
    "data": {
      "source": "Brownell,Sara",
      "target": "Wright,Christian Douglas"
    }
  }, {
    "data": {
      "source": "Brownell,Sara",
      "target": "Zaniewski,Anna"
    }
  }, {
    "data": {
      "source": "Bruening,Meredith Margaret",
      "target": "Adams,Marc Anthony"
    }
  }, {
    "data": {
      "source": "Bruening,Meredith Margaret",
      "target": "Bruening,Meredith Margaret"
    }
  }, {
    "data": {
      "source": "Bruening,Meredith Margaret",
      "target": "Mcclain,Darya Denise"
    }
  }, {
    "data": {
      "source": "Bruening,Meredith Margaret",
      "target": "Ohri-Vachaspati,Punam"
    }
  }, {
    "data": {
      "source": "Bruening,Meredith Margaret",
      "target": "Reifsnider,Elizabeth Ann"
    }
  }, {
    "data": {
      "source": "Bruening,Meredith Margaret",
      "target": "Richards,Timothy James"
    }
  }, {
    "data": {
      "source": "Bruening,Meredith Margaret",
      "target": "Todd,Michael Wayne"
    }
  }, {
    "data": {
      "source": "Bruner,Jason",
      "target": "Benkert,Volker"
    }
  }, {
    "data": {
      "source": "Bruner,Jason",
      "target": "Bruner,Jason"
    }
  }, {
    "data": {
      "source": "Brunhaver II,John Steven",
      "target": "Brunhaver II,John Steven"
    }
  }, {
    "data": {
      "source": "Brunhaver II,John Steven",
      "target": "Clark,Lawrence T"
    }
  }, {
    "data": {
      "source": "Brunhaver,Samantha Ruth",
      "target": "Brunhaver,Samantha Ruth"
    }
  }, {
    "data": {
      "source": "Brus,Evan James",
      "target": "Collins,James"
    }
  }, {
    "data": {
      "source": "Buch,Rajesh",
      "target": "Bretschneider,Stuart Ira"
    }
  }, {
    "data": {
      "source": "Buch,Rajesh",
      "target": "Buch,Rajesh"
    }
  }, {
    "data": {
      "source": "Buch,Rajesh",
      "target": "Chhetri,Nalini"
    }
  }, {
    "data": {
      "source": "Buch,Rajesh",
      "target": "Darnall,Nicole"
    }
  }, {
    "data": {
      "source": "Buch,Rajesh",
      "target": "El Asmar,Mounir"
    }
  }, {
    "data": {
      "source": "Buch,Rajesh",
      "target": "Hsueh,Lily Yueh-Wen"
    }
  }, {
    "data": {
      "source": "Buch,Rajesh",
      "target": "Parmentier,Mary Jane C"
    }
  }, {
    "data": {
      "source": "Buch,Rajesh",
      "target": "Stritch,Justin Michael"
    }
  }, {
    "data": {
      "source": "Budruk,Megha S",
      "target": "Budruk,Megha S"
    }
  }, {
    "data": {
      "source": "Budruk,Megha S",
      "target": "Valencia,William Ruben"
    }
  }, {
    "data": {
      "source": "Budruk,Megha S",
      "target": "White,Dave Douglas"
    }
  }, {
    "data": {
      "source": "Buetow,Kenneth H",
      "target": "Buetow,Kenneth H"
    }
  }, {
    "data": {
      "source": "Buetow,Kenneth H",
      "target": "Kusumi,Kenro"
    }
  }, {
    "data": {
      "source": "Buetow,Kenneth H",
      "target": "Wilson Sayres,Melissa A"
    }
  }, {
    "data": {
      "source": "Buikstra,Jane Ellen",
      "target": "Buikstra,Jane Ellen"
    }
  }, {
    "data": {
      "source": "Buman,Matthew P",
      "target": "Buman,Matthew P"
    }
  }, {
    "data": {
      "source": "Buman,Matthew P",
      "target": "Gaesser,Glenn Alan"
    }
  }, {
    "data": {
      "source": "Buman,Matthew P",
      "target": "Hekler,Eric Chambers"
    }
  }, {
    "data": {
      "source": "Buman,Matthew P",
      "target": "Huberty,Jennifer Lynne"
    }
  }, {
    "data": {
      "source": "Buman,Matthew P",
      "target": "Mcclain,Darya Denise"
    }
  }, {
    "data": {
      "source": "Buman,Matthew P",
      "target": "Petrov,Megan Elise"
    }
  }, {
    "data": {
      "source": "Buman,Matthew P",
      "target": "Todd,Michael Wayne"
    }
  }, {
    "data": {
      "source": "Buneo,Christopher Alan",
      "target": "Artemiadis,Panagiotis K."
    }
  }, {
    "data": {
      "source": "Buneo,Christopher Alan",
      "target": "Buneo,Christopher Alan"
    }
  }, {
    "data": {
      "source": "Buneo,Christopher Alan",
      "target": "Kleim,Jeffrey Allan"
    }
  }, {
    "data": {
      "source": "Buseck,P R",
      "target": "Anbar,Ariel David"
    }
  }, {
    "data": {
      "source": "Buseck,P R",
      "target": "Buseck,P R"
    }
  }, {
    "data": {
      "source": "Buseck,P R",
      "target": "Desch,Steven"
    }
  }, {
    "data": {
      "source": "Buseck,P R",
      "target": "Elkins-Tanton,Linda"
    }
  }, {
    "data": {
      "source": "Buseck,P R",
      "target": "Leinenweber,Kurt D"
    }
  }, {
    "data": {
      "source": "Buseck,P R",
      "target": "Romaniello,Stephen Justin"
    }
  }, {
    "data": {
      "source": "Buseck,P R",
      "target": "Shim,Sang-Heon"
    }
  }, {
    "data": {
      "source": "Buseck,P R",
      "target": "Wu,Jun"
    }
  }, {
    "data": {
      "source": "Butler,Nathaniel Richard",
      "target": "Butler,Nathaniel Richard"
    }
  }, {
    "data": {
      "source": "Butler,Nathaniel Richard",
      "target": "Malhotra,Sangeeta"
    }
  }, {
    "data": {
      "source": "Butler,Nathaniel Richard",
      "target": "Mauskopf,Philip"
    }
  }, {
    "data": {
      "source": "Butler,Nathaniel Richard",
      "target": "Patience,Jennifer Lynn"
    }
  }, {
    "data": {
      "source": "Butler,Nathaniel Richard",
      "target": "Rhoads,James Ely"
    }
  }, {
    "data": {
      "source": "Butler,Nathaniel Richard",
      "target": "Scowen,Paul Andrew"
    }
  }, {
    "data": {
      "source": "Butler,Nathaniel Richard",
      "target": "Windhorst,Rogier A"
    }
  }, {
    "data": {
      "source": "Buttry,Daniel A.",
      "target": "Buttry,Daniel A."
    }
  }, {
    "data": {
      "source": "Buttry,Daniel A.",
      "target": "Middleton,James Arthur"
    }
  }, {
    "data": {
      "source": "Buzinde,Christine",
      "target": "Buzinde,Christine"
    }
  }, {
    "data": {
      "source": "Buzinde,Christine",
      "target": "Nyaupane,Gyan P"
    }
  }, {
    "data": {
      "source": "Byck,Peter",
      "target": "Byck,Peter"
    }
  }, {
    "data": {
      "source": "Caccamo,Antonella",
      "target": "Caccamo,Antonella"
    }
  }, {
    "data": {
      "source": "Caccamo,Antonella",
      "target": "Coleman,Paul David"
    }
  }, {
    "data": {
      "source": "Caccamo,Antonella",
      "target": "Mastroeni,Diego Fernando"
    }
  }, {
    "data": {
      "source": "Caccamo,Antonella",
      "target": "Oddo,Salvatore"
    }
  }, {
    "data": {
      "source": "Cadenas,German Andres",
      "target": "Cadenas,German Andres"
    }
  }, {
    "data": {
      "source": "Cadillo-Quiroz,Hinsby",
      "target": "Cadillo-Quiroz,Hinsby"
    }
  }, {
    "data": {
      "source": "Calhoun,Ronald Joseph",
      "target": "Calhoun,Ronald Joseph"
    }
  }, {
    "data": {
      "source": "Callahan,Christopher",
      "target": "Callahan,Christopher"
    }
  }, {
    "data": {
      "source": "Callahan,Christopher",
      "target": "Silcock,Burton William"
    }
  }, {
    "data": {
      "source": "Camacho,Erika T",
      "target": "Camacho,Erika T"
    }
  }, {
    "data": {
      "source": "Candan,Kasim Selcuk",
      "target": "Ahn,Gail-Joon"
    }
  }, {
    "data": {
      "source": "Candan,Kasim Selcuk",
      "target": "Candan,Kasim Selcuk"
    }
  }, {
    "data": {
      "source": "Candan,Kasim Selcuk",
      "target": "Liu,Huan"
    }
  }, {
    "data": {
      "source": "Candan,Kasim Selcuk",
      "target": "Mirchandani,Pitu B."
    }
  }, {
    "data": {
      "source": "Candan,Kasim Selcuk",
      "target": "Sabo,John L"
    }
  }, {
    "data": {
      "source": "Candan,Kasim Selcuk",
      "target": "Wu,Teresa"
    }
  }, {
    "data": {
      "source": "Candan,Kasim Selcuk",
      "target": "Zhao,Ming"
    }
  }, {
    "data": {
      "source": "Cantwell,Elizabeth Raye",
      "target": "Cantwell,Elizabeth Raye"
    }
  }, {
    "data": {
      "source": "Cantwell,Elizabeth Raye",
      "target": "Halden,Rolf"
    }
  }, {
    "data": {
      "source": "Cantwell,Elizabeth Raye",
      "target": "Shakarian,Paulo"
    }
  }, {
    "data": {
      "source": "Cantwell,Elizabeth Raye",
      "target": "Shutters,Shade Timothy"
    }
  }, {
    "data": {
      "source": "Cantwell,Elizabeth Raye",
      "target": "Venkatesan,Arjunkrishna"
    }
  }, {
    "data": {
      "source": "Cantwell,Elizabeth Raye",
      "target": "White,Dave Douglas"
    }
  }, {
    "data": {
      "source": "Cao,Yu",
      "target": "Berisha,Visar Shahin"
    }
  }, {
    "data": {
      "source": "Cao,Yu",
      "target": "Branaghan,Russell Joseph"
    }
  }, {
    "data": {
      "source": "Cao,Yu",
      "target": "Cao,Yu"
    }
  }, {
    "data": {
      "source": "Cao,Yu",
      "target": "Chae,Junseok"
    }
  }, {
    "data": {
      "source": "Cao,Yu",
      "target": "He,Jingrui"
    }
  }, {
    "data": {
      "source": "Cao,Yu",
      "target": "Seo,Jae-Sun"
    }
  }, {
    "data": {
      "source": "Cao,Yu",
      "target": "Vrudhula,Sarma B K"
    }
  }, {
    "data": {
      "source": "Cao,Yu",
      "target": "Yu,Shimeng"
    }
  }, {
    "data": {
      "source": "Caplan,Michael Ryckman",
      "target": "Caplan,Michael Ryckman"
    }
  }, {
    "data": {
      "source": "Carberry,Adam Robert",
      "target": "Carberry,Adam Robert"
    }
  }, {
    "data": {
      "source": "Carney,Michelle Mohr",
      "target": "Carney,Michelle Mohr"
    }
  }, {
    "data": {
      "source": "Carney,Michelle Mohr",
      "target": "Gustavsson,Nora"
    }
  }, {
    "data": {
      "source": "Carney,Michelle Mohr",
      "target": "Risley-Curtiss,Christina"
    }
  }, {
    "data": {
      "source": "Cartwright,Julia Ann",
      "target": "Cartwright,Julia Ann"
    }
  }, {
    "data": {
      "source": "Cartwright,Reed Austin",
      "target": "Cartwright,Reed Austin"
    }
  }, {
    "data": {
      "source": "Casas Arce,Pablo",
      "target": "Casas Arce,Pablo"
    }
  }, {
    "data": {
      "source": "Castillo-Chavez,Carlos",
      "target": "Castillo-Chavez,Carlos"
    }
  }, {
    "data": {
      "source": "Castro,Felipe G",
      "target": "Barrera,Manuel"
    }
  }, {
    "data": {
      "source": "Castro,Felipe G",
      "target": "Castro,Felipe G"
    }
  }, {
    "data": {
      "source": "Cavalier,Darlene Faith",
      "target": "Cavalier,Darlene Faith"
    }
  }, {
    "data": {
      "source": "Cavalier,Darlene Faith",
      "target": "Lande,Micah"
    }
  }, {
    "data": {
      "source": "Cesarotti,Evelyn L",
      "target": "Castro,Felipe G"
    }
  }, {
    "data": {
      "source": "Cesarotti,Evelyn L",
      "target": "Cesarotti,Evelyn L"
    }
  }, {
    "data": {
      "source": "Cesarotti,Evelyn L",
      "target": "Hill,Vanessa Nelson"
    }
  }, {
    "data": {
      "source": "Cesarotti,Evelyn L",
      "target": "Muzyka,Diann M"
    }
  }, {
    "data": {
      "source": "Chae,Junseok",
      "target": "Chae,Junseok"
    }
  }, {
    "data": {
      "source": "Chae,Junseok",
      "target": "Kozicki,Michael N"
    }
  }, {
    "data": {
      "source": "Chakrabarti,Chaitali",
      "target": "Chakrabarti,Chaitali"
    }
  }, {
    "data": {
      "source": "Chakraborti,Tathagata",
      "target": "Kambhampati,Subbarao"
    }
  }, {
    "data": {
      "source": "Chamberlain,Alyssa Anne Whitby",
      "target": "Chamberlain,Alyssa Anne Whitby"
    }
  }, {
    "data": {
      "source": "Chan,Candace Kay",
      "target": "Chan,Candace Kay"
    }
  }, {
    "data": {
      "source": "Chan,Candace Kay",
      "target": "Peng,Xihong"
    }
  }, {
    "data": {
      "source": "Chan,Neng Iong",
      "target": "Elser,James Joseph"
    }
  }, {
    "data": {
      "source": "Chang,Yung",
      "target": "Chang,Yung"
    }
  }, {
    "data": {
      "source": "Chang,Yung",
      "target": "Fahmi,Noureddine"
    }
  }, {
    "data": {
      "source": "Chang,Yung",
      "target": "Yan,Hao"
    }
  }, {
    "data": {
      "source": "Chassin,Laurie",
      "target": "Chassin,Laurie"
    }
  }, {
    "data": {
      "source": "Chassin,Laurie",
      "target": "Grimm,Kevin John"
    }
  }, {
    "data": {
      "source": "Chassin,Laurie",
      "target": "Mackinnon,David Peter"
    }
  }, {
    "data": {
      "source": "Chassin,Laurie",
      "target": "Presson,Clark Cortelyou"
    }
  }, {
    "data": {
      "source": "Chattopadhyay,Aditi",
      "target": "Beckstein,Oliver"
    }
  }, {
    "data": {
      "source": "Chattopadhyay,Aditi",
      "target": "Chattopadhyay,Aditi"
    }
  }, {
    "data": {
      "source": "Chattopadhyay,Aditi",
      "target": "Dai,Lenore L"
    }
  }, {
    "data": {
      "source": "Chavez,Ivette D",
      "target": "Chavez,Ivette D"
    }
  }, {
    "data": {
      "source": "Chawla,Nikhilesh",
      "target": "Chawla,Nikhilesh"
    }
  }, {
    "data": {
      "source": "Chawla,Nikhilesh",
      "target": "Solanki,Kiran N."
    }
  }, {
    "data": {
      "source": "Chen,Angela Chia-Chen",
      "target": "Amresh,Ashish"
    }
  }, {
    "data": {
      "source": "Chen,Angela Chia-Chen",
      "target": "Castro,Felipe G"
    }
  }, {
    "data": {
      "source": "Chen,Angela Chia-Chen",
      "target": "Chen,Angela Chia-Chen"
    }
  }, {
    "data": {
      "source": "Chen,Angela Chia-Chen",
      "target": "Kim,Wonsun"
    }
  }, {
    "data": {
      "source": "Chen,Angela Chia-Chen",
      "target": "Larkey,Linda Kathryn"
    }
  }, {
    "data": {
      "source": "Chen,Angela Chia-Chen",
      "target": "Todd,Michael Wayne"
    }
  }, {
    "data": {
      "source": "Chen,Fang",
      "target": "Chen,Fang"
    }
  }, {
    "data": {
      "source": "Chen,Huaiyu",
      "target": "Chen,Huaiyu"
    }
  }, {
    "data": {
      "source": "Chen,Julian J-L",
      "target": "Chen,Julian J-L"
    }
  }, {
    "data": {
      "source": "Chen,Kangping",
      "target": "Chen,Kangping"
    }
  }, {
    "data": {
      "source": "Chen,Kangping",
      "target": "Oswald,Jay"
    }
  }, {
    "data": {
      "source": "Chen,Qiang",
      "target": "Chen,Qiang"
    }
  }, {
    "data": {
      "source": "Chen,Shengxi",
      "target": "Chen,Shengxi"
    }
  }, {
    "data": {
      "source": "Chen,Shengxi",
      "target": "Hecht,Sidney Michael"
    }
  }, {
    "data": {
      "source": "Chen,Tingyong",
      "target": "Chen,Tingyong"
    }
  }, {
    "data": {
      "source": "Chen,Tingyong",
      "target": "Mccartney,Martha Rogers"
    }
  }, {
    "data": {
      "source": "Chen,Ying-Chih",
      "target": "Chen,Ying-Chih"
    }
  }, {
    "data": {
      "source": "Chen,Yinong",
      "target": "Chen,Yinong"
    }
  }, {
    "data": {
      "source": "Chen,Yinong",
      "target": "Lee,Yann-Hang"
    }
  }, {
    "data": {
      "source": "Cheng,Chingwen",
      "target": "Cheng,Chingwen"
    }
  }, {
    "data": {
      "source": "Cheng,Chingwen",
      "target": "Palta,Monica Marie"
    }
  }, {
    "data": {
      "source": "Chester,Mikhail",
      "target": "Chester,Mikhail"
    }
  }, {
    "data": {
      "source": "Chester,Mikhail",
      "target": "Hondula,David Michael"
    }
  }, {
    "data": {
      "source": "Chester,Mikhail",
      "target": "Kuby,Michael"
    }
  }, {
    "data": {
      "source": "Chester,Mikhail",
      "target": "Lou,Yingyan"
    }
  }, {
    "data": {
      "source": "Chester,Mikhail",
      "target": "Mahalov,Alex"
    }
  }, {
    "data": {
      "source": "Chester,Mikhail",
      "target": "Middel,Ariane Christine"
    }
  }, {
    "data": {
      "source": "Chester,Mikhail",
      "target": "Mirchandani,Pitu B."
    }
  }, {
    "data": {
      "source": "Chester,Mikhail",
      "target": "Pendyala,Ram Mohan"
    }
  }, {
    "data": {
      "source": "Chester,Mikhail",
      "target": "Salon,Deborah"
    }
  }, {
    "data": {
      "source": "Chester,Mikhail",
      "target": "Underwood,Benjamin Shane"
    }
  }, {
    "data": {
      "source": "Chhabra,Deepak",
      "target": "Chhabra,Deepak"
    }
  }, {
    "data": {
      "source": "Chhetri,Nalini",
      "target": "Chhetri,Nalini"
    }
  }, {
    "data": {
      "source": "Chhetri,Nalini",
      "target": "Selover,Nancy Joan"
    }
  }, {
    "data": {
      "source": "Chhetri,Netra B",
      "target": "Chhetri,Netra B"
    }
  }, {
    "data": {
      "source": "Chhetri,Netra B",
      "target": "Hall,Sharon"
    }
  }, {
    "data": {
      "source": "Chhetri,Netra B",
      "target": "Henderson,Mark Richard"
    }
  }, {
    "data": {
      "source": "Chhetri,Netra B",
      "target": "Rogers,Bradley Barney"
    }
  }, {
    "data": {
      "source": "Chhetri,Netra B",
      "target": "Shrestha,Milan"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Abbott,Joshua K"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Aggarwal,Rimjhim M"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Allen,Daniel"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Anderies,John M"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Ball,Rebecca"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Bateman,Heather Lyn"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Boone,Christopher G"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Cadillo-Quiroz,Hinsby"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Cheng,Chingwen"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Chester,Mikhail"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Childers,Daniel L"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Coseo,Paul Joseph"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Deviche,Pierre"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Earl,Stevan Ross"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Elser,Monica Mueller"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Fox,Peter"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Georgescu,Matei"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Grimm,Nancy B"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Hall,Sharon"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Hartnett,Hilairy"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Herckes,Pierre E H"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Hondula,David Michael"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Iwaniec,David M"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Johnson,James Chadwick"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Kim,Gunwoo"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Larson,Kelli Leigh"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Li,Wenwen"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Li,Xiaoxiao"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Martin,Chris A"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Mcgraw,Kevin J"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Myint,Soe W"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Nation,Marcia L"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Quay,Raymond G"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Redman,Charles L"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Ruddell,Benjamin Lyle"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Sailor,David J"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Sampson,David Arthur"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Selover,Nancy Joan"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Shrestha,Milan"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Throop,Heather Lynne"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Turner II,Billie Lee"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Vivoni,Enrique"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Wang,Zhihua"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Wentz,Elizabeth Ann"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Westerhoff,Paul"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "White,Dave Douglas"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "Wutich,Amber Elisabeth Yoder"
    }
  }, {
    "data": {
      "source": "Childers,Daniel L",
      "target": "York,Abigail"
    }
  }, {
    "data": {
      "source": "Cho,Sookja",
      "target": "Cho,Sookja"
    }
  }, {
    "data": {
      "source": "Choi,Ji Mi S",
      "target": "Choi,Ji Mi S"
    }
  }, {
    "data": {
      "source": "Choi,Ji Mi S",
      "target": "Elkins-Tanton,Linda"
    }
  }, {
    "data": {
      "source": "Choi,Ji Mi S",
      "target": "Halverson,Susan Marie"
    }
  }, {
    "data": {
      "source": "Choi,Ji Mi S",
      "target": "Ruth,Alissa Alice"
    }
  }, {
    "data": {
      "source": "Choi,Ji Mi S",
      "target": "Seager,Thomas Payson"
    }
  }, {
    "data": {
      "source": "Chong,Oswald Wk",
      "target": "Abbaszadegan,Morteza"
    }
  }, {
    "data": {
      "source": "Chong,Oswald Wk",
      "target": "Aggarwal,Rimjhim M"
    }
  }, {
    "data": {
      "source": "Chong,Oswald Wk",
      "target": "Ariaratnam,Samuel T"
    }
  }, {
    "data": {
      "source": "Chong,Oswald Wk",
      "target": "Chong,Oswald Wk"
    }
  }, {
    "data": {
      "source": "Chong,Oswald Wk",
      "target": "Hong,Yi-Chun"
    }
  }, {
    "data": {
      "source": "Chong,Oswald Wk",
      "target": "Lai,Ying-Cheng"
    }
  }, {
    "data": {
      "source": "Chong,Oswald Wk",
      "target": "Liu,Huan"
    }
  }, {
    "data": {
      "source": "Chong,Oswald Wk",
      "target": "Savenye,Wilhelmina C"
    }
  }, {
    "data": {
      "source": "Chong,Oswald Wk",
      "target": "Ye,Nong"
    }
  }, {
    "data": {
      "source": "Chowdhury,Srabanti",
      "target": "Chowdhury,Srabanti"
    }
  }, {
    "data": {
      "source": "Christensen,Philip R",
      "target": "Christensen,Philip R"
    }
  }, {
    "data": {
      "source": "Clark,Heather Marie Griller",
      "target": "Clark,Heather Marie Griller"
    }
  }, {
    "data": {
      "source": "Clark,Heather Marie Griller",
      "target": "Mathur,Sarup Rani"
    }
  }, {
    "data": {
      "source": "Clark,Jerome",
      "target": "Clark,Jerome"
    }
  }, {
    "data": {
      "source": "Clark,Lawrence T",
      "target": "Clark,Lawrence T"
    }
  }, {
    "data": {
      "source": "Clarke,Amanda Bachtell",
      "target": "Arrowsmith,Ramon"
    }
  }, {
    "data": {
      "source": "Clarke,Amanda Bachtell",
      "target": "Clarke,Amanda Bachtell"
    }
  }, {
    "data": {
      "source": "Clarke,Amanda Bachtell",
      "target": "Hartnett,Hilairy"
    }
  }, {
    "data": {
      "source": "Clarke,Amanda Bachtell",
      "target": "Roggensack,Kurt"
    }
  }, {
    "data": {
      "source": "Clemens,Katherine Michelle",
      "target": "Clemens,Katherine Michelle"
    }
  }, {
    "data": {
      "source": "Cloutier,Scott",
      "target": "Angilletta,Michael"
    }
  }, {
    "data": {
      "source": "Cloutier,Scott",
      "target": "Budruk,Megha S"
    }
  }, {
    "data": {
      "source": "Cloutier,Scott",
      "target": "Cease,Arianne"
    }
  }, {
    "data": {
      "source": "Cloutier,Scott",
      "target": "Cloutier,Scott"
    }
  }, {
    "data": {
      "source": "Cloutier,Scott",
      "target": "Hall,Sharon"
    }
  }, {
    "data": {
      "source": "Cloutier,Scott",
      "target": "Lucio,Joanna Domenica"
    }
  }, {
    "data": {
      "source": "Cohen,Adam",
      "target": "Brewer Jr,Gene"
    }
  }, {
    "data": {
      "source": "Cohen,Adam",
      "target": "Cohen,Adam"
    }
  }, {
    "data": {
      "source": "Cohen,Adam",
      "target": "Doane,Leah D."
    }
  }, {
    "data": {
      "source": "Cohen,Adam",
      "target": "Grimm,Kevin John"
    }
  }, {
    "data": {
      "source": "Cohen,Adam",
      "target": "Warner,Carolyn"
    }
  }, {
    "data": {
      "source": "Colaneri,Nicholas Frederick",
      "target": "Colaneri,Nicholas Frederick"
    }
  }, {
    "data": {
      "source": "Coleman,Paul David",
      "target": "Bimonte-Nelson,Heather"
    }
  }, {
    "data": {
      "source": "Coleman,Paul David",
      "target": "Coleman,Paul David"
    }
  }, {
    "data": {
      "source": "Coleman,Paul David",
      "target": "Hecht,Sidney Michael"
    }
  }, {
    "data": {
      "source": "Coleman,Paul David",
      "target": "Khdour,Omar Mohammad"
    }
  }, {
    "data": {
      "source": "Coleman,Paul David",
      "target": "Mastroeni,Diego Fernando"
    }
  }, {
    "data": {
      "source": "Coleman,Paul David",
      "target": "Oddo,Salvatore"
    }
  }, {
    "data": {
      "source": "Coletta,Dawn",
      "target": "Coletta,Dawn"
    }
  }, {
    "data": {
      "source": "Coletta,Dawn",
      "target": "Mandarino,Lawrence"
    }
  }, {
    "data": {
      "source": "Coletta,Dawn",
      "target": "Willis,Wayne Tyrus"
    }
  }, {
    "data": {
      "source": "Collis,Adam W",
      "target": "Collis,Adam W"
    }
  }, {
    "data": {
      "source": "Collofello,James Samuel",
      "target": "Collofello,James Samuel"
    }
  }, {
    "data": {
      "source": "Collofello,James Samuel",
      "target": "Peck,Sidnee Kay"
    }
  }, {
    "data": {
      "source": "Collofello,James Samuel",
      "target": "Sebold,Brent James"
    }
  }, {
    "data": {
      "source": "Compton,Carolyn",
      "target": "Compton,Carolyn"
    }
  }, {
    "data": {
      "source": "Compton,Carolyn",
      "target": "Labaer,Joshua"
    }
  }, {
    "data": {
      "source": "Connor,Carol Mcdonald",
      "target": "Atkinson,Robert Kenneth"
    }
  }, {
    "data": {
      "source": "Connor,Carol Mcdonald",
      "target": "Connor,Carol Mcdonald"
    }
  }, {
    "data": {
      "source": "Connor,Carol Mcdonald",
      "target": "Day,Stephanie Lynn"
    }
  }, {
    "data": {
      "source": "Connor,Carol Mcdonald",
      "target": "Douglas,Ian"
    }
  }, {
    "data": {
      "source": "Connor,Carol Mcdonald",
      "target": "Gee,Elisabeth Ruth"
    }
  }, {
    "data": {
      "source": "Connor,Carol Mcdonald",
      "target": "Glenberg,Arthur Mitchell"
    }
  }, {
    "data": {
      "source": "Connor,Carol Mcdonald",
      "target": "Graham,Stephen E"
    }
  }, {
    "data": {
      "source": "Connor,Carol Mcdonald",
      "target": "Gray,Shelley Irene"
    }
  }, {
    "data": {
      "source": "Connor,Carol Mcdonald",
      "target": "Grimm,Kevin John"
    }
  }, {
    "data": {
      "source": "Connor,Carol Mcdonald",
      "target": "Harris,Karen R"
    }
  }, {
    "data": {
      "source": "Connor,Carol Mcdonald",
      "target": "Mcnamara,Danielle S."
    }
  }, {
    "data": {
      "source": "Connor,Carol Mcdonald",
      "target": "Schulte,Ann C"
    }
  }, {
    "data": {
      "source": "Connor,Carol Mcdonald",
      "target": "Sparapani,Nicole J"
    }
  }, {
    "data": {
      "source": "Connor,Carol Mcdonald",
      "target": "Walker,Erin Ashley"
    }
  }, {
    "data": {
      "source": "Conrad,Cheryl Diane",
      "target": "Bimonte-Nelson,Heather"
    }
  }, {
    "data": {
      "source": "Conrad,Cheryl Diane",
      "target": "Conrad,Cheryl Diane"
    }
  }, {
    "data": {
      "source": "Conrad,Cheryl Diane",
      "target": "Newbern,Jason M."
    }
  }, {
    "data": {
      "source": "Conroy-Ben,Otakuye",
      "target": "Conroy-Ben,Otakuye"
    }
  }, {
    "data": {
      "source": "Coon,David Wayne",
      "target": "Coon,David Wayne"
    }
  }, {
    "data": {
      "source": "Coon,David Wayne",
      "target": "Todd,Michael Wayne"
    }
  }, {
    "data": {
      "source": "Corbin,William Robert",
      "target": "Chassin,Laurie"
    }
  }, {
    "data": {
      "source": "Corbin,William Robert",
      "target": "Corbin,William Robert"
    }
  }, {
    "data": {
      "source": "Corbin,William Robert",
      "target": "Mackinnon,David Peter"
    }
  }, {
    "data": {
      "source": "Corbin,William Robert",
      "target": "Meier,Madeline Hogan"
    }
  }, {
    "data": {
      "source": "Corey,Frederick Charles",
      "target": "Corey,Frederick Charles"
    }
  }, {
    "data": {
      "source": "Corey,Frederick Charles",
      "target": "Nailor,Natalie"
    }
  }, {
    "data": {
      "source": "Corey,Frederick Charles",
      "target": "Wilcox,Martha Jeanne"
    }
  }, {
    "data": {
      "source": "Corman,Steven Robert",
      "target": "Adame,Bradley Joseph"
    }
  }, {
    "data": {
      "source": "Corman,Steven Robert",
      "target": "Berisha,Visar Shahin"
    }
  }, {
    "data": {
      "source": "Corman,Steven Robert",
      "target": "Bliss,Daniel Wesley"
    }
  }, {
    "data": {
      "source": "Corman,Steven Robert",
      "target": "Corman,Steven Robert"
    }
  }, {
    "data": {
      "source": "Corman,Steven Robert",
      "target": "Ruston,Scott W"
    }
  }, {
    "data": {
      "source": "Corman,Steven Robert",
      "target": "Tsai,Jiun-Yi"
    }
  }, {
    "data": {
      "source": "Cotter,Katie Lyn",
      "target": "Brown,Mary Ellen"
    }
  }, {
    "data": {
      "source": "Cotter,Katie Lyn",
      "target": "Cotter,Katie Lyn"
    }
  }, {
    "data": {
      "source": "Cox,Deborah J.",
      "target": "Cox,Deborah J."
    }
  }, {
    "data": {
      "source": "Craig,Scotty Dale",
      "target": "Craig,Scotty Dale"
    }
  }, {
    "data": {
      "source": "Craig,Scotty Dale",
      "target": "Roscoe,Rod David"
    }
  }, {
    "data": {
      "source": "Craig,Scotty Dale",
      "target": "Sohoni,Sohum Ashok"
    }
  }, {
    "data": {
      "source": "Critchlow,Donald",
      "target": "Critchlow,Donald"
    }
  }, {
    "data": {
      "source": "Crnic,Keith Alan",
      "target": "Crnic,Keith Alan"
    }
  }, {
    "data": {
      "source": "Crook,Sharon Marie",
      "target": "Castillo-Chavez,Carlos"
    }
  }, {
    "data": {
      "source": "Crook,Sharon Marie",
      "target": "Crook,Sharon Marie"
    }
  }, {
    "data": {
      "source": "Crook,Sharon Marie",
      "target": "Greger,Bradley"
    }
  }, {
    "data": {
      "source": "Crook,Sharon Marie",
      "target": "Helms Tillery,Stephen I"
    }
  }, {
    "data": {
      "source": "Crook,Sharon Marie",
      "target": "Kao,Ming-Hung"
    }
  }, {
    "data": {
      "source": "Crook,Sharon Marie",
      "target": "Si,Jennie"
    }
  }, {
    "data": {
      "source": "Crook,Sharon Marie",
      "target": "Smith,Brian"
    }
  }, {
    "data": {
      "source": "Crook,Sharon Marie",
      "target": "Wang,Yalin"
    }
  }, {
    "data": {
      "source": "Crook,Sharon Marie",
      "target": "Zhou,Yi"
    }
  }, {
    "data": {
      "source": "Crozier,Peter",
      "target": "Crozier,Peter"
    }
  }, {
    "data": {
      "source": "Culbertson,Robert John",
      "target": "Culbertson,Robert John"
    }
  }, {
    "data": {
      "source": "Culbertson,Robert John",
      "target": "Judson,Eugene E"
    }
  }, {
    "data": {
      "source": "Cutter,Robert Joe",
      "target": "Liao,Jianling"
    }
  }, {
    "data": {
      "source": "D'Souza,Gary Xavier",
      "target": "Decourt,Boris"
    }
  }, {
    "data": {
      "source": "Dahlen,Paul R",
      "target": "Dahlen,Paul R"
    }
  }, {
    "data": {
      "source": "Dahlen,Paul R",
      "target": "Guo,Yuanming"
    }
  }, {
    "data": {
      "source": "Dahlen,Paul R",
      "target": "Krajmalnik-Brown,Rosa"
    }
  }, {
    "data": {
      "source": "Dahlen,Paul R",
      "target": "Westerhoff,Paul"
    }
  }, {
    "data": {
      "source": "Dahm,Werner J.",
      "target": "Dahm,Werner J."
    }
  }, {
    "data": {
      "source": "Dale,Richard Eugene",
      "target": "Dale,Richard Eugene"
    }
  }, {
    "data": {
      "source": "Daly,Elizabeth Susanne",
      "target": "Schwartz,Gary T"
    }
  }, {
    "data": {
      "source": "Darnall,Nicole",
      "target": "Bretschneider,Stuart Ira"
    }
  }, {
    "data": {
      "source": "Darnall,Nicole",
      "target": "Darnall,Nicole"
    }
  }, {
    "data": {
      "source": "Darnall,Nicole",
      "target": "Hsueh,Lily Yueh-Wen"
    }
  }, {
    "data": {
      "source": "Darnall,Nicole",
      "target": "Stritch,Justin Michael"
    }
  }, {
    "data": {
      "source": "Dasgupta,Partha",
      "target": "Dasgupta,Partha"
    }
  }, {
    "data": {
      "source": "Dasgupta,Partha",
      "target": "Shrivastava,Aviral"
    }
  }, {
    "data": {
      "source": "Daugherty,David B.",
      "target": "Manning,Linda Marie"
    }
  }, {
    "data": {
      "source": "Davidson,Joseph K",
      "target": "Davidson,Joseph K"
    }
  }, {
    "data": {
      "source": "Davis,Kristina",
      "target": "Groppi,Christopher E"
    }
  }, {
    "data": {
      "source": "Davis,Mary C",
      "target": "Davis,Mary C"
    }
  }, {
    "data": {
      "source": "Davis,Mary C",
      "target": "Grimm,Kevin John"
    }
  }, {
    "data": {
      "source": "Davis,Mary C",
      "target": "Lemery,Kathryn Sue"
    }
  }, {
    "data": {
      "source": "Davulcu,Hasan",
      "target": "Davulcu,Hasan"
    }
  }, {
    "data": {
      "source": "Davulcu,Hasan",
      "target": "Forbes,Carolyn Elizabeth"
    }
  }, {
    "data": {
      "source": "Davulcu,Hasan",
      "target": "Kandala,Srinivasa Srivatsav"
    }
  }, {
    "data": {
      "source": "Decourt,Boris",
      "target": "Decourt,Boris"
    }
  }, {
    "data": {
      "source": "Delay,Dawn Ann",
      "target": "Delay,Dawn Ann"
    }
  }, {
    "data": {
      "source": "Delay,Dawn Ann",
      "target": "Hanish,Laura D"
    }
  }, {
    "data": {
      "source": "Delmont,Matthew",
      "target": "Broglio,Ronald"
    }
  }, {
    "data": {
      "source": "Delmont,Matthew",
      "target": "Delmont,Matthew"
    }
  }, {
    "data": {
      "source": "Delmont,Matthew",
      "target": "Oh,Young Kyun"
    }
  }, {
    "data": {
      "source": "Dempster,Thomas A",
      "target": "Dempster,Thomas A"
    }
  }, {
    "data": {
      "source": "Deng,Shuguang",
      "target": "Deng,Shuguang"
    }
  }, {
    "data": {
      "source": "Deng,Shuguang",
      "target": "Lammers,Peter"
    }
  }, {
    "data": {
      "source": "Desch,Steven",
      "target": "Desch,Steven"
    }
  }, {
    "data": {
      "source": "Deviche,Pierre",
      "target": "Deviche,Pierre"
    }
  }, {
    "data": {
      "source": "Dey,Sandwip Kumar",
      "target": "Dey,Sandwip Kumar"
    }
  }, {
    "data": {
      "source": "Dey,Sandwip Kumar",
      "target": "Marzke,Robert F"
    }
  }, {
    "data": {
      "source": "Diaz,Rodolfo Enrique",
      "target": "Aberle,James T"
    }
  }, {
    "data": {
      "source": "Diaz,Rodolfo Enrique",
      "target": "Diaz,Rodolfo Enrique"
    }
  }, {
    "data": {
      "source": "Diaz,Rodolfo Enrique",
      "target": "Sieradzki,Karl"
    }
  }, {
    "data": {
      "source": "Dickinson,Jared M",
      "target": "Angadi,Siddhartha Subhashchand"
    }
  }, {
    "data": {
      "source": "Dickinson,Jared M",
      "target": "Dickinson,Jared M"
    }
  }, {
    "data": {
      "source": "Dickinson,Jared M",
      "target": "Gaesser,Glenn Alan"
    }
  }, {
    "data": {
      "source": "Dickinson,Jared M",
      "target": "Lee,Chong Do"
    }
  }, {
    "data": {
      "source": "Diehnelt,Chris W",
      "target": "Diehnelt,Chris W"
    }
  }, {
    "data": {
      "source": "Dinu,Valentin",
      "target": "Dinu,Valentin"
    }
  }, {
    "data": {
      "source": "Dishion,Thomas",
      "target": "Dishion,Thomas"
    }
  }, {
    "data": {
      "source": "Dishion,Thomas",
      "target": "Lemery,Kathryn Sue"
    }
  }, {
    "data": {
      "source": "Dishion,Thomas",
      "target": "Mackinnon,David Peter"
    }
  }, {
    "data": {
      "source": "Dishion,Thomas",
      "target": "Mauricio,Anne Marie"
    }
  }, {
    "data": {
      "source": "Dishion,Thomas",
      "target": "Sandler,Irwin Noah"
    }
  }, {
    "data": {
      "source": "Dishion,Thomas",
      "target": "Tein,Jenn-Yun"
    }
  }, {
    "data": {
      "source": "Dixon,Shane Yahlu",
      "target": "Dixon,Shane Yahlu"
    }
  }, {
    "data": {
      "source": "Dixon,Shane Yahlu",
      "target": "Gracia,Emilia Maria"
    }
  }, {
    "data": {
      "source": "Dixon,Shane Yahlu",
      "target": "Lippincott,Dianna G"
    }
  }, {
    "data": {
      "source": "Dixon,Shane Yahlu",
      "target": "Starzynski,Shoshanna"
    }
  }, {
    "data": {
      "source": "Doebbeling,Bradley Niel",
      "target": "Doebbeling,Bradley Niel"
    }
  }, {
    "data": {
      "source": "Doebbeling,Bradley Niel",
      "target": "Grando,Maria Adela"
    }
  }, {
    "data": {
      "source": "Dooley,Kevin John",
      "target": "Barber,Jonathan"
    }
  }, {
    "data": {
      "source": "Dooley,Kevin John",
      "target": "Dalrymple,Michael S"
    }
  }, {
    "data": {
      "source": "Dooley,Kevin John",
      "target": "Dooley,Kevin John"
    }
  }, {
    "data": {
      "source": "Dooley,Kevin John",
      "target": "Hawkey,Corey James"
    }
  }, {
    "data": {
      "source": "Dooley,Kevin John",
      "target": "Mars,Carole Kathleen"
    }
  }, {
    "data": {
      "source": "Dooley,Kevin John",
      "target": "Sheppard,Lorie"
    }
  }, {
    "data": {
      "source": "Dorman,Michael F",
      "target": "Berisha,Visar Shahin"
    }
  }, {
    "data": {
      "source": "Dorman,Michael F",
      "target": "Dorman,Michael F"
    }
  }, {
    "data": {
      "source": "Dorn,Ronald I",
      "target": "Dorn,Ronald I"
    }
  }, {
    "data": {
      "source": "Dorn,Ronald I",
      "target": "Jimenez-Silva,Margarita"
    }
  }, {
    "data": {
      "source": "Douglas,Ian",
      "target": "Douglas,Ian"
    }
  }, {
    "data": {
      "source": "Dounskaia,Natalia",
      "target": "Dounskaia,Natalia"
    }
  }, {
    "data": {
      "source": "Dounskaia,Natalia",
      "target": "Lee,Chong Do"
    }
  }, {
    "data": {
      "source": "Doupe,Adam",
      "target": "Ahn,Gail-Joon"
    }
  }, {
    "data": {
      "source": "Doupe,Adam",
      "target": "Doupe,Adam"
    }
  }, {
    "data": {
      "source": "Drucker,Jeffery S",
      "target": "Drucker,Jeffery S"
    }
  }, {
    "data": {
      "source": "Dubois,Raymond",
      "target": "Dubois,Raymond"
    }
  }, {
    "data": {
      "source": "Dubois,Raymond",
      "target": "Wang,Dingzhi"
    }
  }, {
    "data": {
      "source": "Duell,Meghan Elizabeth",
      "target": "Duell,Meghan Elizabeth"
    }
  }, {
    "data": {
      "source": "Duell,Meghan Elizabeth",
      "target": "Smith,Brian"
    }
  }, {
    "data": {
      "source": "Dunckley,Travis L",
      "target": "Dunckley,Travis L"
    }
  }, {
    "data": {
      "source": "Dunckley,Travis L",
      "target": "Oddo,Salvatore"
    }
  }, {
    "data": {
      "source": "Dunham,Emilie T",
      "target": "Wadhwa,Meenakshi"
    }
  }, {
    "data": {
      "source": "Dunlap,Daniel Robert",
      "target": "Wadhwa,Meenakshi"
    }
  }, {
    "data": {
      "source": "Durfee,Alesha D",
      "target": "Durfee,Alesha D"
    }
  }, {
    "data": {
      "source": "Durfee,Alesha D",
      "target": "Messing,Jill Theresa"
    }
  }, {
    "data": {
      "source": "Dwyer,Christian",
      "target": "Dwyer,Christian"
    }
  }, {
    "data": {
      "source": "Dwyer,Christian",
      "target": "Tongay,Sefaattin"
    }
  }, {
    "data": {
      "source": "Eakin,Hallie C",
      "target": "Eakin,Hallie C"
    }
  }, {
    "data": {
      "source": "Eakin,Hallie C",
      "target": "Hackett,Edward John"
    }
  }, {
    "data": {
      "source": "Eakin,Hallie C",
      "target": "Mahanti,Ashwina"
    }
  }, {
    "data": {
      "source": "Early,Jessica Singer",
      "target": "Early,Jessica Singer"
    }
  }, {
    "data": {
      "source": "Early,Jessica Singer",
      "target": "Saidy-Hannah,Christina N"
    }
  }, {
    "data": {
      "source": "Easson,Damien",
      "target": "Easson,Damien"
    }
  }, {
    "data": {
      "source": "Ebrahimkhani,Mohammad Reza",
      "target": "Ebrahimkhani,Mohammad Reza"
    }
  }, {
    "data": {
      "source": "Ekiss,Gale Barbara",
      "target": "Davis,Cathy L"
    }
  }, {
    "data": {
      "source": "Ekiss,Gale Barbara",
      "target": "Dorn,Ronald I"
    }
  }, {
    "data": {
      "source": "Ekiss,Gale Barbara",
      "target": "Ekiss,Gale Barbara"
    }
  }, {
    "data": {
      "source": "Ekiss,Gale Barbara",
      "target": "Godfrey,Diane Lee"
    }
  }, {
    "data": {
      "source": "El Asmar,Mounir",
      "target": "Bearup,Wylie K"
    }
  }, {
    "data": {
      "source": "El Asmar,Mounir",
      "target": "Chester,Mikhail"
    }
  }, {
    "data": {
      "source": "El Asmar,Mounir",
      "target": "El Asmar,Mounir"
    }
  }, {
    "data": {
      "source": "El Asmar,Mounir",
      "target": "Ernzen,James J"
    }
  }, {
    "data": {
      "source": "El Asmar,Mounir",
      "target": "Underwood,Benjamin Shane"
    }
  }, {
    "data": {
      "source": "Elam,Kit K",
      "target": "Chassin,Laurie"
    }
  }, {
    "data": {
      "source": "Elam,Kit K",
      "target": "Dinu,Valentin"
    }
  }, {
    "data": {
      "source": "Elam,Kit K",
      "target": "Dishion,Thomas"
    }
  }, {
    "data": {
      "source": "Elam,Kit K",
      "target": "Elam,Kit K"
    }
  }, {
    "data": {
      "source": "Elam,Kit K",
      "target": "Lemery,Kathryn Sue"
    }
  }, {
    "data": {
      "source": "Elkins-Tanton,Linda",
      "target": "Bell III,James"
    }
  }, {
    "data": {
      "source": "Elkins-Tanton,Linda",
      "target": "Elkins-Tanton,Linda"
    }
  }, {
    "data": {
      "source": "Elliott,Stephen Nelson",
      "target": "Elliott,Stephen Nelson"
    }
  }, {
    "data": {
      "source": "Elliott,Stephen Nelson",
      "target": "Kurz,Alexander"
    }
  }, {
    "data": {
      "source": "Elliott,Stephen Nelson",
      "target": "Schulte,Ann C"
    }
  }, {
    "data": {
      "source": "Ellsworth,Angela",
      "target": "Broglio,Ronald"
    }
  }, {
    "data": {
      "source": "Ellsworth,Angela",
      "target": "Ellsworth,Angela"
    }
  }, {
    "data": {
      "source": "Ellsworth,Angela",
      "target": "Hooker,Steven Paul"
    }
  }, {
    "data": {
      "source": "Ellsworth,Angela",
      "target": "Lineberry,Heather Sealy"
    }
  }, {
    "data": {
      "source": "Elser,James Joseph",
      "target": "Elser,James Joseph"
    }
  }, {
    "data": {
      "source": "Elser,James Joseph",
      "target": "Hall,Sharon"
    }
  }, {
    "data": {
      "source": "Elser,James Joseph",
      "target": "Rittmann,Bruce Edward"
    }
  }, {
    "data": {
      "source": "Ely,Tucker Drew",
      "target": "Ely,Tucker Drew"
    }
  }, {
    "data": {
      "source": "Emady,Heather Nicole",
      "target": "Emady,Heather Nicole"
    }
  }, {
    "data": {
      "source": "Emady,Heather Nicole",
      "target": "Lin,Jerry Y S"
    }
  }, {
    "data": {
      "source": "Emady,Heather Nicole",
      "target": "Wertheimer,Eric H R"
    }
  }, {
    "data": {
      "source": "Englin,Jeffrey Eric",
      "target": "Englin,Jeffrey Eric"
    }
  }, {
    "data": {
      "source": "Erchul,William Patrick",
      "target": "Erchul,William Patrick"
    }
  }, {
    "data": {
      "source": "Essary,Alison Carol",
      "target": "Essary,Alison Carol"
    }
  }, {
    "data": {
      "source": "Essig,Linda",
      "target": "Essig,Linda"
    }
  }, {
    "data": {
      "source": "Evans-Romaine,Dorothy Kathleen",
      "target": "Evans-Romaine,Dorothy Kathleen"
    }
  }, {
    "data": {
      "source": "Evans,Bronwynne C",
      "target": "Coon,David Wayne"
    }
  }, {
    "data": {
      "source": "Evans,Bronwynne C",
      "target": "Evans,Bronwynne C"
    }
  }, {
    "data": {
      "source": "Evans,Bronwynne C",
      "target": "Todd,Michael Wayne"
    }
  }, {
    "data": {
      "source": "Fabricius,William Van",
      "target": "Fabricius,William Van"
    }
  }, {
    "data": {
      "source": "Fabricius,William Van",
      "target": "Sandler,Irwin Noah"
    }
  }, {
    "data": {
      "source": "Fabricius,William Van",
      "target": "Tein,Jenn-Yun"
    }
  }, {
    "data": {
      "source": "Fabricius,William Van",
      "target": "West,Stephen G"
    }
  }, {
    "data": {
      "source": "Fainekos,Georgios E.",
      "target": "Fainekos,Georgios E."
    }
  }, {
    "data": {
      "source": "Faleev,Nikolai",
      "target": "Faleev,Nikolai"
    }
  }, {
    "data": {
      "source": "Faleev,Nikolai",
      "target": "Honsberg,Christiana B"
    }
  }, {
    "data": {
      "source": "Falsetti,Anthony B",
      "target": "Falsetti,Anthony B"
    }
  }, {
    "data": {
      "source": "Farmer,Jack",
      "target": "Farmer,Jack"
    }
  }, {
    "data": {
      "source": "Farooque,Mahmud Ali",
      "target": "Bennett,Ira Mccoy"
    }
  }, {
    "data": {
      "source": "Farooque,Mahmud Ali",
      "target": "Brian,Jennifer Elizabeth Dyck"
    }
  }, {
    "data": {
      "source": "Farooque,Mahmud Ali",
      "target": "Cavalier,Darlene Faith"
    }
  }, {
    "data": {
      "source": "Farooque,Mahmud Ali",
      "target": "Farooque,Mahmud Ali"
    }
  }, {
    "data": {
      "source": "Farooque,Mahmud Ali",
      "target": "Sarewitz,Daniel"
    }
  }, {
    "data": {
      "source": "Feinson,Stephen J",
      "target": "Feinson,Stephen J"
    }
  }, {
    "data": {
      "source": "Feller,Andrea Leigh",
      "target": "Feller,Andrea Leigh"
    }
  }, {
    "data": {
      "source": "Feller,Andrea Leigh",
      "target": "Lineberry,Heather Sealy"
    }
  }, {
    "data": {
      "source": "Femiani,John C",
      "target": "Femiani,John C"
    }
  }, {
    "data": {
      "source": "Femiani,John C",
      "target": "Razdan,Anshuman"
    }
  }, {
    "data": {
      "source": "Ferry,David K",
      "target": "Ferry,David K"
    }
  }, {
    "data": {
      "source": "Fewell,Jennifer Harrison",
      "target": "Fewell,Jennifer Harrison"
    }
  }, {
    "data": {
      "source": "Fewell,Jennifer Harrison",
      "target": "Harrison,Jon Fewell"
    }
  }, {
    "data": {
      "source": "Fewell,Jennifer Harrison",
      "target": "Kang,Yun"
    }
  }, {
    "data": {
      "source": "Fewell,Jennifer Harrison",
      "target": "Pavlic,Theodore Paul"
    }
  }, {
    "data": {
      "source": "Fewell,Jennifer Harrison",
      "target": "Pratt,Stephen"
    }
  }, {
    "data": {
      "source": "Finn,Edward Frederick",
      "target": "Finn,Edward Frederick"
    }
  }, {
    "data": {
      "source": "Finn,Edward Frederick",
      "target": "Tinapple,David A"
    }
  }, {
    "data": {
      "source": "Finn,Edward Frederick",
      "target": "Wylie,Ruth"
    }
  }, {
    "data": {
      "source": "Fisher,Erik",
      "target": "Fisher,Erik"
    }
  }, {
    "data": {
      "source": "Fisher,Erik",
      "target": "Seager,Thomas Payson"
    }
  }, {
    "data": {
      "source": "Fisher,Erik",
      "target": "Simeone,Michael Paul"
    }
  }, {
    "data": {
      "source": "Flack,Kimberly Rae",
      "target": "Flack,Kimberly Rae"
    }
  }, {
    "data": {
      "source": "Forzani,Erica Silvia",
      "target": "Ainsworth,Barbara Ellen"
    }
  }, {
    "data": {
      "source": "Forzani,Erica Silvia",
      "target": "Archambault,Leanna"
    }
  }, {
    "data": {
      "source": "Forzani,Erica Silvia",
      "target": "Buman,Matthew P"
    }
  }, {
    "data": {
      "source": "Forzani,Erica Silvia",
      "target": "Forzani,Erica Silvia"
    }
  }, {
    "data": {
      "source": "Forzani,Erica Silvia",
      "target": "Hale,Anne Elizabeth"
    }
  }, {
    "data": {
      "source": "Forzani,Erica Silvia",
      "target": "Hartwell,Leland Harrison"
    }
  }, {
    "data": {
      "source": "Forzani,Erica Silvia",
      "target": "Hekler,Eric Chambers"
    }
  }, {
    "data": {
      "source": "Forzani,Erica Silvia",
      "target": "Lind,Mary Laura"
    }
  }, {
    "data": {
      "source": "Forzani,Erica Silvia",
      "target": "Ross,Heather Maura"
    }
  }, {
    "data": {
      "source": "Forzani,Erica Silvia",
      "target": "Tao,Nongjian"
    }
  }, {
    "data": {
      "source": "Forzani,Erica Silvia",
      "target": "Tsow,Tsing Wai"
    }
  }, {
    "data": {
      "source": "Forzani,Erica Silvia",
      "target": "Zhang,Yanchao"
    }
  }, {
    "data": {
      "source": "Foulger,Teresa S",
      "target": "Foulger,Teresa S"
    }
  }, {
    "data": {
      "source": "Fox,Cora Virginia",
      "target": "Fox,Cora Virginia"
    }
  }, {
    "data": {
      "source": "Fox,Cora Virginia",
      "target": "Irish,Bradley James"
    }
  }, {
    "data": {
      "source": "Fox,Peter",
      "target": "Fox,Peter"
    }
  }, {
    "data": {
      "source": "Frakes,David",
      "target": "Frakes,David"
    }
  }, {
    "data": {
      "source": "Franz,Nico Mario",
      "target": "Franz,Nico Mario"
    }
  }, {
    "data": {
      "source": "Frasch,Wayne D",
      "target": "Frasch,Wayne D"
    }
  }, {
    "data": {
      "source": "Fraser,Matthew P",
      "target": "Fraser,Matthew P"
    }
  }, {
    "data": {
      "source": "Fromholz,Julia M",
      "target": "Cruz,Evelyn Haydee"
    }
  }, {
    "data": {
      "source": "Fromholz,Julia M",
      "target": "Fromholz,Julia M"
    }
  }, {
    "data": {
      "source": "Fromholz,Julia M",
      "target": "Williamson,John Clint"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Anderson,Karen S"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Dubois,Raymond"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Fromme,Petra"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Fromme,Raimund"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Graves,William"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Hansen,Debra Tumbula"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Holl,Mark R"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Kirian,Richard Adam"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Labaer,Joshua"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Liu,Wei"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Mills,Jeremy H"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Nannenga,Brent Lane"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Qiu,Ji"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Ros,Alexandra"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Sayres,Scott G"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Spence,John Charles"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Tao,Nongjian"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Van Horn,Wade Dale"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Wang,Shaopeng"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Weierstall,Uwe Juergen"
    }
  }, {
    "data": {
      "source": "Fromme,Petra",
      "target": "Wiktor,Peter Jan"
    }
  }, {
    "data": {
      "source": "Frow,Emma Khamis",
      "target": "Frow,Emma Khamis"
    }
  }, {
    "data": {
      "source": "Fu,Hongxia",
      "target": "Fu,Hongxia"
    }
  }, {
    "data": {
      "source": "Fu,Qiushi",
      "target": "Fu,Qiushi"
    }
  }, {
    "data": {
      "source": "Gabbard,Ralph Barnhart",
      "target": "Gabbard,Ralph Barnhart"
    }
  }, {
    "data": {
      "source": "Gabriel,Travis Saint James",
      "target": "Asphaug,Erik"
    }
  }, {
    "data": {
      "source": "Gaesser,Glenn Alan",
      "target": "Angadi,Siddhartha Subhashchand"
    }
  }, {
    "data": {
      "source": "Gaesser,Glenn Alan",
      "target": "Dickinson,Jared M"
    }
  }, {
    "data": {
      "source": "Gaesser,Glenn Alan",
      "target": "Gaesser,Glenn Alan"
    }
  }, {
    "data": {
      "source": "Gaesser,Glenn Alan",
      "target": "Johnston,Carol S"
    }
  }, {
    "data": {
      "source": "Gaesser,Glenn Alan",
      "target": "Katsanos,Christos"
    }
  }, {
    "data": {
      "source": "Gaesser,Glenn Alan",
      "target": "Keller,Colleen Sue"
    }
  }, {
    "data": {
      "source": "Gaffar,Ashraf",
      "target": "Gaffar,Ashraf"
    }
  }, {
    "data": {
      "source": "Ganesh,Tirupalavanam Gopal",
      "target": "Ganesh,Tirupalavanam Gopal"
    }
  }, {
    "data": {
      "source": "Garcia-Pichel,Ferran",
      "target": "Garcia-Pichel,Ferran"
    }
  }, {
    "data": {
      "source": "Garcia,Antonio Agustin",
      "target": "Andino,Jean M"
    }
  }, {
    "data": {
      "source": "Garcia,Antonio Agustin",
      "target": "Castillo-Chavez,Carlos"
    }
  }, {
    "data": {
      "source": "Garcia,Antonio Agustin",
      "target": "De Los Santos Jr,Alfredo G"
    }
  }, {
    "data": {
      "source": "Garcia,Antonio Agustin",
      "target": "Garcia,Antonio Agustin"
    }
  }, {
    "data": {
      "source": "Garcia,Antonio Agustin",
      "target": "Keller,Gary D"
    }
  }, {
    "data": {
      "source": "Garcia,Antonio Agustin",
      "target": "Mchenry,Albert L"
    }
  }, {
    "data": {
      "source": "Garcia,Antonio Agustin",
      "target": "Moore,Ana L"
    }
  }, {
    "data": {
      "source": "Garcia,Joseph Cr",
      "target": "Garcia,Joseph Cr"
    }
  }, {
    "data": {
      "source": "Garlapow,Megan E.",
      "target": "Harrison,Jon Fewell"
    }
  }, {
    "data": {
      "source": "Garnero,Edward",
      "target": "Garnero,Edward"
    }
  }, {
    "data": {
      "source": "Garvie,Laurence A J",
      "target": "Garvie,Laurence A J"
    }
  }, {
    "data": {
      "source": "Gary,Kevin A",
      "target": "Bansal,Srividya Kona"
    }
  }, {
    "data": {
      "source": "Gary,Kevin A",
      "target": "Gary,Kevin A"
    }
  }, {
    "data": {
      "source": "Gary,Kevin A",
      "target": "Mazzola,Daniel J"
    }
  }, {
    "data": {
      "source": "Gary,Kevin A",
      "target": "Roscoe,Rod David"
    }
  }, {
    "data": {
      "source": "Gaughan,Monica M",
      "target": "Baker,Dale Rose"
    }
  }, {
    "data": {
      "source": "Gaughan,Monica M",
      "target": "Gaughan,Monica M"
    }
  }, {
    "data": {
      "source": "Gaughan,Monica M",
      "target": "Kimbel,William Howard"
    }
  }, {
    "data": {
      "source": "Gaughan,Monica M",
      "target": "Michelaki,Konstantina-Eleni"
    }
  }, {
    "data": {
      "source": "Gaughan,Monica M",
      "target": "Reed,Kaye E"
    }
  }, {
    "data": {
      "source": "Gaughan,Monica M",
      "target": "Silk,Joan Barbara"
    }
  }, {
    "data": {
      "source": "Gaughan,Monica M",
      "target": "Stojanowski,Christopher Michae"
    }
  }, {
    "data": {
      "source": "Gaughan,Monica M",
      "target": "Vanmali,Binaben H"
    }
  }, {
    "data": {
      "source": "Gaxiola,Roberto A",
      "target": "Gaxiola,Roberto A"
    }
  }, {
    "data": {
      "source": "Gee,Elisabeth Ruth",
      "target": "Gee,Elisabeth Ruth"
    }
  }, {
    "data": {
      "source": "Gel,Aytekin",
      "target": "Emady,Heather Nicole"
    }
  }, {
    "data": {
      "source": "Gel,Aytekin",
      "target": "Gel,Aytekin"
    }
  }, {
    "data": {
      "source": "Gel,Aytekin",
      "target": "Jiao,Yang"
    }
  }, {
    "data": {
      "source": "Gel,Esma Senturk",
      "target": "Gel,Esma Senturk"
    }
  }, {
    "data": {
      "source": "Georgescu,Matei",
      "target": "Georgescu,Matei"
    }
  }, {
    "data": {
      "source": "Gerber,Brian Joseph",
      "target": "Gerber,Brian Joseph"
    }
  }, {
    "data": {
      "source": "Gerber,Leah R",
      "target": "Candan,Kasim Selcuk"
    }
  }, {
    "data": {
      "source": "Gerber,Leah R",
      "target": "Franz,Nico Mario"
    }
  }, {
    "data": {
      "source": "Gerber,Leah R",
      "target": "Gerber,Leah R"
    }
  }, {
    "data": {
      "source": "Gerber,Leah R",
      "target": "Papotti,Paolo"
    }
  }, {
    "data": {
      "source": "Gerber,Leah R",
      "target": "Polidoro,Beth"
    }
  }, {
    "data": {
      "source": "Ghazarian,Arbi",
      "target": "Ghazarian,Arbi"
    }
  }, {
    "data": {
      "source": "Ghirlanda,Giovanna",
      "target": "Ghirlanda,Giovanna"
    }
  }, {
    "data": {
      "source": "Ghirlanda,Giovanna",
      "target": "Ozkan,Sefika Banu"
    }
  }, {
    "data": {
      "source": "Ghirlanda,Giovanna",
      "target": "Wang,Xu"
    }
  }, {
    "data": {
      "source": "Gibson,Edd",
      "target": "El Asmar,Mounir"
    }
  }, {
    "data": {
      "source": "Gibson,Edd",
      "target": "Gibson,Edd"
    }
  }, {
    "data": {
      "source": "Gile,Gillian Heather",
      "target": "Gile,Gillian Heather"
    }
  }, {
    "data": {
      "source": "Gile,Gillian Heather",
      "target": "Hayes,Mark A"
    }
  }, {
    "data": {
      "source": "Gipson-Reichardt,Cassandra Dia",
      "target": "Gipson-Reichardt,Cassandra Dia"
    }
  }, {
    "data": {
      "source": "Glaser,Donald Michael",
      "target": "Hartnett,Hilairy"
    }
  }, {
    "data": {
      "source": "Glowacka,Halszka",
      "target": "Glowacka,Halszka"
    }
  }, {
    "data": {
      "source": "Goklany,Sheba",
      "target": "Goklany,Sheba"
    }
  }, {
    "data": {
      "source": "Golkhou,Vahid",
      "target": "Butler,Nathaniel Richard"
    }
  }, {
    "data": {
      "source": "Gonzalez-Santin,Edwin",
      "target": "Gonzalez-Santin,Edwin"
    }
  }, {
    "data": {
      "source": "Gonzalez,Graciela H",
      "target": "Gonzalez,Graciela H"
    }
  }, {
    "data": {
      "source": "Gonzalez,Graciela H",
      "target": "Scotch,Matthew L"
    }
  }, {
    "data": {
      "source": "Goodnick,Stephen Marshall",
      "target": "Ayyanar,Raja"
    }
  }, {
    "data": {
      "source": "Goodnick,Stephen Marshall",
      "target": "Goodnick,Stephen Marshall"
    }
  }, {
    "data": {
      "source": "Goodnick,Stephen Marshall",
      "target": "Heydt,Gerald"
    }
  }, {
    "data": {
      "source": "Goodnick,Stephen Marshall",
      "target": "Honsberg,Christiana B"
    }
  }, {
    "data": {
      "source": "Goodnick,Stephen Marshall",
      "target": "Lei,Qin"
    }
  }, {
    "data": {
      "source": "Goodnick,Stephen Marshall",
      "target": "Mccartney,Martha Rogers"
    }
  }, {
    "data": {
      "source": "Goodnick,Stephen Marshall",
      "target": "Miller,Jon"
    }
  }, {
    "data": {
      "source": "Goodnick,Stephen Marshall",
      "target": "Qin,Jiangchao"
    }
  }, {
    "data": {
      "source": "Goodnick,Stephen Marshall",
      "target": "Saraniti,Marco"
    }
  }, {
    "data": {
      "source": "Goodnick,Stephen Marshall",
      "target": "Smith,David John"
    }
  }, {
    "data": {
      "source": "Goodnick,Stephen Marshall",
      "target": "Vittal,Vijay"
    }
  }, {
    "data": {
      "source": "Gordon,Gwyneth Williams",
      "target": "Anbar,Ariel David"
    }
  }, {
    "data": {
      "source": "Gordon,Gwyneth Williams",
      "target": "Gordon,Gwyneth Williams"
    }
  }, {
    "data": {
      "source": "Gordon,Samuel Bender",
      "target": "Mauskopf,Philip"
    }
  }, {
    "data": {
      "source": "Goss,Jeffrey",
      "target": "Goss,Jeffrey"
    }
  }, {
    "data": {
      "source": "Goss,Jeffrey",
      "target": "Hunsaker,Beau Thomas"
    }
  }, {
    "data": {
      "source": "Goss,Jeffrey",
      "target": "Nielsen,Ann Walker"
    }
  }, {
    "data": {
      "source": "Gould,Ian R",
      "target": "Gould,Ian R"
    }
  }, {
    "data": {
      "source": "Gould,Ian R",
      "target": "Hartnett,Hilairy"
    }
  }, {
    "data": {
      "source": "Gould,Ian R",
      "target": "Shock,Everett"
    }
  }, {
    "data": {
      "source": "Gould,Ian R",
      "target": "Williams,Lynda B"
    }
  }, {
    "data": {
      "source": "Graffy,Elisabeth A",
      "target": "Graffy,Elisabeth A"
    }
  }, {
    "data": {
      "source": "Graffy,Elisabeth A",
      "target": "Hettel,Jacqueline Marie"
    }
  }, {
    "data": {
      "source": "Graffy,Elisabeth A",
      "target": "Stechel,Ellen B."
    }
  }, {
    "data": {
      "source": "Graham,Stephen E",
      "target": "Graham,Stephen E"
    }
  }, {
    "data": {
      "source": "Grando,Maria Adela",
      "target": "Grando,Maria Adela"
    }
  }, {
    "data": {
      "source": "Grando,Maria Adela",
      "target": "Murcko,Anita C."
    }
  }, {
    "data": {
      "source": "Grando,Maria Adela",
      "target": "Saks,Michael J"
    }
  }, {
    "data": {
      "source": "Grando,Maria Adela",
      "target": "Sottara,Davide"
    }
  }, {
    "data": {
      "source": "Grando,Maria Adela",
      "target": "Todd,Michael Wayne"
    }
  }, {
    "data": {
      "source": "Granger,Douglas",
      "target": "Granger,Douglas"
    }
  }, {
    "data": {
      "source": "Grau Torrent,David",
      "target": "Ayer,Steven"
    }
  }, {
    "data": {
      "source": "Grau Torrent,David",
      "target": "Grau Torrent,David"
    }
  }, {
    "data": {
      "source": "Grau Torrent,David",
      "target": "Hannah,Mark A"
    }
  }, {
    "data": {
      "source": "Grau Torrent,David",
      "target": "London,Jeremi Shavonda"
    }
  }, {
    "data": {
      "source": "Grau Torrent,David",
      "target": "Underwood,Benjamin Shane"
    }
  }, {
    "data": {
      "source": "Graves,William",
      "target": "Graves,William"
    }
  }, {
    "data": {
      "source": "Graves,William",
      "target": "Holl,Mark R"
    }
  }, {
    "data": {
      "source": "Graves,William",
      "target": "Johnson,Roger H"
    }
  }, {
    "data": {
      "source": "Graves,William",
      "target": "Spence,John Charles"
    }
  }, {
    "data": {
      "source": "Gray,Robert D",
      "target": "Gray,Robert D"
    }
  }, {
    "data": {
      "source": "Gray,Shelley Irene",
      "target": "Graham,Stephen E"
    }
  }, {
    "data": {
      "source": "Gray,Shelley Irene",
      "target": "Gray,Shelley Irene"
    }
  }, {
    "data": {
      "source": "Gray,Shelley Irene",
      "target": "Green,Samuel"
    }
  }, {
    "data": {
      "source": "Gray,Shelley Irene",
      "target": "Pittman,Andrea Lorraine"
    }
  }, {
    "data": {
      "source": "Gray,Shelley Irene",
      "target": "Restrepo,Maria Adelaida"
    }
  }, {
    "data": {
      "source": "Gray,Shelley Irene",
      "target": "Wilcox,Martha Jeanne"
    }
  }, {
    "data": {
      "source": "Gray,Shelley Irene",
      "target": "Zheng,Yi"
    }
  }, {
    "data": {
      "source": "Grebitus,Carola",
      "target": "Grebitus,Carola"
    }
  }, {
    "data": {
      "source": "Green,Alexander Arthur",
      "target": "Green,Alexander Arthur"
    }
  }, {
    "data": {
      "source": "Green,Alexander Arthur",
      "target": "Wang,Qing Hua"
    }
  }, {
    "data": {
      "source": "Green,Ellen",
      "target": "Green,Ellen"
    }
  }, {
    "data": {
      "source": "Green,Matthew D",
      "target": "Green,Matthew D"
    }
  }, {
    "data": {
      "source": "Green,Matthew D",
      "target": "Holloway,Julianne L"
    }
  }, {
    "data": {
      "source": "Green,Matthew D",
      "target": "Kaplan,Bruce"
    }
  }, {
    "data": {
      "source": "Green,Matthew D",
      "target": "Lin,Jerry Y S"
    }
  }, {
    "data": {
      "source": "Green,Matthew D",
      "target": "Lind,Mary Laura"
    }
  }, {
    "data": {
      "source": "Green,Matthew D",
      "target": "Yarger,Jeffery Lynn"
    }
  }, {
    "data": {
      "source": "Greenes,Carole E.",
      "target": "Greenes,Carole E."
    }
  }, {
    "data": {
      "source": "Greenes,Robert",
      "target": "Greenes,Robert"
    }
  }, {
    "data": {
      "source": "Greger,Bradley",
      "target": "Greger,Bradley"
    }
  }, {
    "data": {
      "source": "Grider-Potter,Neysa Ann",
      "target": "Kimbel,William Howard"
    }
  }, {
    "data": {
      "source": "Grimm,Kevin John",
      "target": "Grimm,Kevin John"
    }
  }, {
    "data": {
      "source": "Grimm,Nancy B",
      "target": "Grimm,Nancy B"
    }
  }, {
    "data": {
      "source": "Grimm,Nancy B",
      "target": "Hartnett,Hilairy"
    }
  }, {
    "data": {
      "source": "Groppi,Christopher E",
      "target": "Aberle,James T"
    }
  }, {
    "data": {
      "source": "Groppi,Christopher E",
      "target": "Clarke,Amanda Bachtell"
    }
  }, {
    "data": {
      "source": "Groppi,Christopher E",
      "target": "Groppi,Christopher E"
    }
  }, {
    "data": {
      "source": "Groppi,Christopher E",
      "target": "Mauskopf,Philip"
    }
  }, {
    "data": {
      "source": "Groppi,Christopher E",
      "target": "Thangavelautham,Jekanthan"
    }
  }, {
    "data": {
      "source": "Grubesic,Anthony Hoyt",
      "target": "Chamberlain,Alyssa Anne Whitby"
    }
  }, {
    "data": {
      "source": "Grubesic,Anthony Hoyt",
      "target": "Grubesic,Anthony Hoyt"
    }
  }, {
    "data": {
      "source": "Grubesic,Anthony Hoyt",
      "target": "Maciejewski,Ross"
    }
  }, {
    "data": {
      "source": "Grubesic,Anthony Hoyt",
      "target": "Messing,Jill Theresa"
    }
  }, {
    "data": {
      "source": "Grubesic,Anthony Hoyt",
      "target": "Wallace,Danielle Marie"
    }
  }, {
    "data": {
      "source": "Gual Soler,Maria Margarita",
      "target": "Gual Soler,Maria Margarita"
    }
  }, {
    "data": {
      "source": "Gual Soler,Maria Margarita",
      "target": "Parmentier,Mary Jane C"
    }
  }, {
    "data": {
      "source": "Gual Soler,Maria Margarita",
      "target": "Seager,Thomas Payson"
    }
  }, {
    "data": {
      "source": "Guevarra Jr,Rudy Poscablo",
      "target": "Guevarra Jr,Rudy Poscablo"
    }
  }, {
    "data": {
      "source": "Gumel,Abba B",
      "target": "Gumel,Abba B"
    }
  }, {
    "data": {
      "source": "Gumel,Abba B",
      "target": "Mascaro,Giuseppe"
    }
  }, {
    "data": {
      "source": "Guo,Jia",
      "target": "Guo,Jia"
    }
  }, {
    "data": {
      "source": "Guo,Jia",
      "target": "Liang,Jianming"
    }
  }, {
    "data": {
      "source": "Guo,Jia",
      "target": "Meldrum,Deirdre Ruth"
    }
  }, {
    "data": {
      "source": "Guo,Jia",
      "target": "Wang,Xiao"
    }
  }, {
    "data": {
      "source": "Gupta,Sandeep Kumar S",
      "target": "Banerjee,Ayan"
    }
  }, {
    "data": {
      "source": "Gupta,Sandeep Kumar S",
      "target": "Bruening,Meredith Margaret"
    }
  }, {
    "data": {
      "source": "Gupta,Sandeep Kumar S",
      "target": "Gupta,Sandeep Kumar S"
    }
  }, {
    "data": {
      "source": "Gupta,Sandeep Kumar S",
      "target": "Ren,Fengbo"
    }
  }, {
    "data": {
      "source": "Gupta,Sandeep Kumar S",
      "target": "Tao,Nongjian"
    }
  }, {
    "data": {
      "source": "Gurney,Kevin Robert",
      "target": "Gurney,Kevin Robert"
    }
  }, {
    "data": {
      "source": "Guston,David H",
      "target": "Guston,David H"
    }
  }, {
    "data": {
      "source": "Guzzetti,Barbara Jean",
      "target": "Guzzetti,Barbara Jean"
    }
  }, {
    "data": {
      "source": "Hagen,Bjoern",
      "target": "Bolin,Robert"
    }
  }, {
    "data": {
      "source": "Hagen,Bjoern",
      "target": "Cheng,Chingwen"
    }
  }, {
    "data": {
      "source": "Hagen,Bjoern",
      "target": "Clark,Susan Spierre"
    }
  }, {
    "data": {
      "source": "Hagen,Bjoern",
      "target": "Hagen,Bjoern"
    }
  }, {
    "data": {
      "source": "Hagen,Bjoern",
      "target": "Pijawka,David"
    }
  }, {
    "data": {
      "source": "Hagen,Bjoern",
      "target": "Quay,Raymond G"
    }
  }, {
    "data": {
      "source": "Halden,Rolf",
      "target": "Bruening,Meredith Margaret"
    }
  }, {
    "data": {
      "source": "Halden,Rolf",
      "target": "Dooley,Kevin John"
    }
  }, {
    "data": {
      "source": "Halden,Rolf",
      "target": "Englin,Jeffrey Eric"
    }
  }, {
    "data": {
      "source": "Halden,Rolf",
      "target": "Gaxiola,Roberto A"
    }
  }, {
    "data": {
      "source": "Halden,Rolf",
      "target": "Grebitus,Carola"
    }
  }, {
    "data": {
      "source": "Halden,Rolf",
      "target": "Green,Matthew D"
    }
  }, {
    "data": {
      "source": "Halden,Rolf",
      "target": "Halden,Rolf"
    }
  }, {
    "data": {
      "source": "Halden,Rolf",
      "target": "Hodbod,Jennifer Elizabeth"
    }
  }, {
    "data": {
      "source": "Halden,Rolf",
      "target": "Hughner,Renee Shaw"
    }
  }, {
    "data": {
      "source": "Halden,Rolf",
      "target": "Mishra,Ashok Kumar"
    }
  }, {
    "data": {
      "source": "Halden,Rolf",
      "target": "Ohri-Vachaspati,Punam"
    }
  }, {
    "data": {
      "source": "Halden,Rolf",
      "target": "Richards,Timothy James"
    }
  }, {
    "data": {
      "source": "Halden,Rolf",
      "target": "Ruddell,Benjamin Lyle"
    }
  }, {
    "data": {
      "source": "Halden,Rolf",
      "target": "Schmitz,Troy Gordon"
    }
  }, {
    "data": {
      "source": "Halden,Rolf",
      "target": "Seager,Thomas Payson"
    }
  }, {
    "data": {
      "source": "Halden,Rolf",
      "target": "Wharton,Christopher Mack"
    }
  }, {
    "data": {
      "source": "Halden,Rolf",
      "target": "White,Dave Douglas"
    }
  }, {
    "data": {
      "source": "Hale,Anne Elizabeth",
      "target": "Hale,Anne Elizabeth"
    }
  }, {
    "data": {
      "source": "Hale,Anne Elizabeth",
      "target": "Hartwell,Leland Harrison"
    }
  }, {
    "data": {
      "source": "Hale,Michelle Lynn",
      "target": "Hale,Michelle Lynn"
    }
  }, {
    "data": {
      "source": "Hall,Sharon",
      "target": "Hall,Sharon"
    }
  }, {
    "data": {
      "source": "Hall,Sharon",
      "target": "Larson,Kelli Leigh"
    }
  }, {
    "data": {
      "source": "Han,Seungyong",
      "target": "Han,Seungyong"
    }
  }, {
    "data": {
      "source": "Hannah,Mark A",
      "target": "Hannah,Mark A"
    }
  }, {
    "data": {
      "source": "Hanrahan,Jeanne Elizabeth",
      "target": "Bowen,Annabell L"
    }
  }, {
    "data": {
      "source": "Hanrahan,Jeanne Elizabeth",
      "target": "Gonzales-Macias,Laura"
    }
  }, {
    "data": {
      "source": "Hanrahan,Jeanne Elizabeth",
      "target": "Hanrahan,Jeanne Elizabeth"
    }
  }, {
    "data": {
      "source": "Hanrahan,Jeanne Elizabeth",
      "target": "Moore,Jacob Clark"
    }
  }, {
    "data": {
      "source": "Hansen,Debra Tumbula",
      "target": "Fromme,Petra"
    }
  }, {
    "data": {
      "source": "Hansen,Debra Tumbula",
      "target": "Hansen,Debra Tumbula"
    }
  }, {
    "data": {
      "source": "Hansen,Debra Tumbula",
      "target": "Hogue,Brenda G"
    }
  }, {
    "data": {
      "source": "Hansen,Debra Tumbula",
      "target": "Johnston,Stephen Albert"
    }
  }, {
    "data": {
      "source": "Hansen,Debra Tumbula",
      "target": "Liu,Wei"
    }
  }, {
    "data": {
      "source": "Hardgrove,Craig J",
      "target": "Hardgrove,Craig J"
    }
  }, {
    "data": {
      "source": "Harrell,Susan Elizabeth",
      "target": "Harrell,Susan Elizabeth"
    }
  }, {
    "data": {
      "source": "Harris,Karen R",
      "target": "Graham,Stephen E"
    }
  }, {
    "data": {
      "source": "Harris,Karen R",
      "target": "Harris,Karen R"
    }
  }, {
    "data": {
      "source": "Harris,Lauren",
      "target": "Harris,Lauren"
    }
  }, {
    "data": {
      "source": "Harrison,Jon Fewell",
      "target": "Harrison,Jon Fewell"
    }
  }, {
    "data": {
      "source": "Hart,William",
      "target": "Hart,William"
    }
  }, {
    "data": {
      "source": "Hartnett,Hilairy",
      "target": "Garcia-Pichel,Ferran"
    }
  }, {
    "data": {
      "source": "Hartnett,Hilairy",
      "target": "Hartnett,Hilairy"
    }
  }, {
    "data": {
      "source": "Hartnett,Hilairy",
      "target": "Poret-Peterson,Amisha T"
    }
  }, {
    "data": {
      "source": "Hartwell,Leland Harrison",
      "target": "Hale,Anne Elizabeth"
    }
  }, {
    "data": {
      "source": "Hartwell,Leland Harrison",
      "target": "Hartwell,Leland Harrison"
    }
  }, {
    "data": {
      "source": "Hartz,Donna Alberta",
      "target": "Hartz,Donna Alberta"
    }
  }, {
    "data": {
      "source": "Hauer,Jessica L",
      "target": "Hauer,Jessica L"
    }
  }, {
    "data": {
      "source": "Haydel,Shelley",
      "target": "Haydel,Shelley"
    }
  }, {
    "data": {
      "source": "Haydel,Shelley",
      "target": "Liu,Wei"
    }
  }, {
    "data": {
      "source": "Haydel,Shelley",
      "target": "Park,Jin"
    }
  }, {
    "data": {
      "source": "Haydel,Shelley",
      "target": "Seo,Dong Kyun"
    }
  }, {
    "data": {
      "source": "Hayes,Mark A",
      "target": "Hayes,Mark A"
    }
  }, {
    "data": {
      "source": "Hayes,Mark A",
      "target": "Taylor,Thomas J"
    }
  }, {
    "data": {
      "source": "Hayter,Christopher",
      "target": "Hayter,Christopher"
    }
  }, {
    "data": {
      "source": "He,Jingrui",
      "target": "He,Jingrui"
    }
  }, {
    "data": {
      "source": "He,Jingrui",
      "target": "Tong,Hanghang"
    }
  }, {
    "data": {
      "source": "He,Ximin",
      "target": "He,Ximin"
    }
  }, {
    "data": {
      "source": "He,Ximin",
      "target": "Jiang,Hanqing"
    }
  }, {
    "data": {
      "source": "He,Ximin",
      "target": "Kavazanjian,Edward"
    }
  }, {
    "data": {
      "source": "Hecht,Sidney Michael",
      "target": "Dedkova,Larisa"
    }
  }, {
    "data": {
      "source": "Hecht,Sidney Michael",
      "target": "Hecht,Sidney Michael"
    }
  }, {
    "data": {
      "source": "Hedberg,Eric Christopher",
      "target": "Hart,William"
    }
  }, {
    "data": {
      "source": "Hedberg,Eric Christopher",
      "target": "Hedberg,Eric Christopher"
    }
  }, {
    "data": {
      "source": "Hedberg,William C",
      "target": "Hedberg,William C"
    }
  }, {
    "data": {
      "source": "Hegmon,Michelle",
      "target": "Brin,Adam Miles"
    }
  }, {
    "data": {
      "source": "Hegmon,Michelle",
      "target": "Hegmon,Michelle"
    }
  }, {
    "data": {
      "source": "Hegmon,Michelle",
      "target": "Pierce-Mcmanamon,Francis P"
    }
  }, {
    "data": {
      "source": "Hegmon,Michelle",
      "target": "Whelan,Mary Kathryn"
    }
  }, {
    "data": {
      "source": "Heimsath,Arjun",
      "target": "Heimsath,Arjun"
    }
  }, {
    "data": {
      "source": "Heimsath,Arjun",
      "target": "Whipple,Kelin X"
    }
  }, {
    "data": {
      "source": "Hekler,Eric Chambers",
      "target": "Adams,Marc Anthony"
    }
  }, {
    "data": {
      "source": "Hekler,Eric Chambers",
      "target": "Buman,Matthew P"
    }
  }, {
    "data": {
      "source": "Hekler,Eric Chambers",
      "target": "Hekler,Eric Chambers"
    }
  }, {
    "data": {
      "source": "Hekler,Eric Chambers",
      "target": "Huberty,Jennifer Lynne"
    }
  }, {
    "data": {
      "source": "Hekler,Eric Chambers",
      "target": "Larkey,Linda Kathryn"
    }
  }, {
    "data": {
      "source": "Hekler,Eric Chambers",
      "target": "Rivera,Daniel E"
    }
  }, {
    "data": {
      "source": "Hekler,Eric Chambers",
      "target": "Todd,Michael Wayne"
    }
  }, {
    "data": {
      "source": "Helm,Jim E",
      "target": "Cooke,Nancy Jaworski"
    }
  }, {
    "data": {
      "source": "Helm,Jim E",
      "target": "Helm,Jim E"
    }
  }, {
    "data": {
      "source": "Helms Tillery,Stephen I",
      "target": "Buneo,Christopher Alan"
    }
  }, {
    "data": {
      "source": "Helms Tillery,Stephen I",
      "target": "Candan,Kasim Selcuk"
    }
  }, {
    "data": {
      "source": "Helms Tillery,Stephen I",
      "target": "Helms Tillery,Stephen I"
    }
  }, {
    "data": {
      "source": "Helms Tillery,Stephen I",
      "target": "Kodibagkar,Vikram D"
    }
  }, {
    "data": {
      "source": "Helms Tillery,Stephen I",
      "target": "Robert,Jason"
    }
  }, {
    "data": {
      "source": "Helms Tillery,Stephen I",
      "target": "Sadleir,Rosalind Jane"
    }
  }, {
    "data": {
      "source": "Helms Tillery,Stephen I",
      "target": "Tyler,William James"
    }
  }, {
    "data": {
      "source": "Henderson,Joseph Bryan",
      "target": "Beardsley,Audrey Lee"
    }
  }, {
    "data": {
      "source": "Henderson,Joseph Bryan",
      "target": "Henderson,Joseph Bryan"
    }
  }, {
    "data": {
      "source": "Henry,Adam Keith",
      "target": "Henry,Adam Keith"
    }
  }, {
    "data": {
      "source": "Herbst,Chris M",
      "target": "Herbst,Chris M"
    }
  }, {
    "data": {
      "source": "Herckes,Pierre E H",
      "target": "Herckes,Pierre E H"
    }
  }, {
    "data": {
      "source": "Herckes,Pierre E H",
      "target": "Westerhoff,Paul"
    }
  }, {
    "data": {
      "source": "Hermanns,Carl Bruce",
      "target": "Hermanns,Carl Bruce"
    }
  }, {
    "data": {
      "source": "Herrmann,Marcus",
      "target": "Herrmann,Marcus"
    }
  }, {
    "data": {
      "source": "Hervig,Richard Lokke",
      "target": "Hervig,Richard Lokke"
    }
  }, {
    "data": {
      "source": "Hess,Aaron R",
      "target": "Hess,Aaron R"
    }
  }, {
    "data": {
      "source": "Hess,Aaron R",
      "target": "Linde,Jennifer Andrea"
    }
  }, {
    "data": {
      "source": "Hess,Aaron R",
      "target": "Tracy,Sarah Jane"
    }
  }, {
    "data": {
      "source": "Hettel,Jacqueline Marie",
      "target": "Adamson,Joni Lynn"
    }
  }, {
    "data": {
      "source": "Hettel,Jacqueline Marie",
      "target": "Graffy,Elisabeth A"
    }
  }, {
    "data": {
      "source": "Hettel,Jacqueline Marie",
      "target": "Hettel,Jacqueline Marie"
    }
  }, {
    "data": {
      "source": "Hettel,Jacqueline Marie",
      "target": "Mahoney,Maren Michelle"
    }
  }, {
    "data": {
      "source": "Hettel,Jacqueline Marie",
      "target": "Mayes,Kristin Kay"
    }
  }, {
    "data": {
      "source": "Hettel,Jacqueline Marie",
      "target": "Maynard,Andrew"
    }
  }, {
    "data": {
      "source": "Hettel,Jacqueline Marie",
      "target": "Miller,Clark Anson"
    }
  }, {
    "data": {
      "source": "Hettel,Jacqueline Marie",
      "target": "Richter,Jennifer"
    }
  }, {
    "data": {
      "source": "Heydt,Gerald",
      "target": "Ayyanar,Raja"
    }
  }, {
    "data": {
      "source": "Heydt,Gerald",
      "target": "Heydt,Gerald"
    }
  }, {
    "data": {
      "source": "Heydt,Gerald",
      "target": "Holbert,Keith Edwin"
    }
  }, {
    "data": {
      "source": "Heydt,Gerald",
      "target": "Karady,George G"
    }
  }, {
    "data": {
      "source": "Heydt,Gerald",
      "target": "Tylavsky,Daniel John"
    }
  }, {
    "data": {
      "source": "Heydt,Gerald",
      "target": "Vittal,Vijay"
    }
  }, {
    "data": {
      "source": "Hildreth,Owen James",
      "target": "Alford,Terry Lynn"
    }
  }, {
    "data": {
      "source": "Hildreth,Owen James",
      "target": "Hildreth,Owen James"
    }
  }, {
    "data": {
      "source": "Hiroi Dubay,Sheri Ryoko",
      "target": "Bimonte-Nelson,Heather"
    }
  }, {
    "data": {
      "source": "Hiroi Dubay,Sheri Ryoko",
      "target": "Hiroi Dubay,Sheri Ryoko"
    }
  }, {
    "data": {
      "source": "Hiroi Dubay,Sheri Ryoko",
      "target": "Oddo,Salvatore"
    }
  }, {
    "data": {
      "source": "Hirt,Paul Wayne",
      "target": "Hirt,Paul Wayne"
    }
  }, {
    "data": {
      "source": "Hirt,Paul Wayne",
      "target": "Lim,Julian"
    }
  }, {
    "data": {
      "source": "Hirt,Paul Wayne",
      "target": "Macfadyen,Joshua"
    }
  }, {
    "data": {
      "source": "Hirt,Paul Wayne",
      "target": "Tebeau,Mark Thomas"
    }
  }, {
    "data": {
      "source": "Hjelmstad,Keith D",
      "target": "Hjelmstad,Keith D"
    }
  }, {
    "data": {
      "source": "Hjelmstad,Keith D",
      "target": "Middleton,James Arthur"
    }
  }, {
    "data": {
      "source": "Hjelmstad,Keith D",
      "target": "Olson,Loren"
    }
  }, {
    "data": {
      "source": "Hjelmstad,Keith D",
      "target": "Seager,Thomas Payson"
    }
  }, {
    "data": {
      "source": "Hjelmstad,Keith D",
      "target": "Tinapple,David A"
    }
  }, {
    "data": {
      "source": "Hjelmstad,Keith D",
      "target": "Tracy,Sarah Jane"
    }
  }, {
    "data": {
      "source": "Hodbod,Jennifer Elizabeth",
      "target": "Buch,Rajesh"
    }
  }, {
    "data": {
      "source": "Hodbod,Jennifer Elizabeth",
      "target": "Byck,Peter"
    }
  }, {
    "data": {
      "source": "Hodbod,Jennifer Elizabeth",
      "target": "Hodbod,Jennifer Elizabeth"
    }
  }, {
    "data": {
      "source": "Hodge,James",
      "target": "Hodge,James"
    }
  }, {
    "data": {
      "source": "Hodge,James",
      "target": "Weidenaar,Kim Elizabeth"
    }
  }, {
    "data": {
      "source": "Hodges,Kip Vernon",
      "target": "Hodges,Kip Vernon"
    }
  }, {
    "data": {
      "source": "Hodges,Kip Vernon",
      "target": "Van Soest,Matthijs Cornelis"
    }
  }, {
    "data": {
      "source": "Hogue,Brenda G",
      "target": "Hogue,Brenda G"
    }
  }, {
    "data": {
      "source": "Holbert,Keith Edwin",
      "target": "Holbert,Keith Edwin"
    }
  }, {
    "data": {
      "source": "Holloway,Julianne L",
      "target": "Holloway,Julianne L"
    }
  }, {
    "data": {
      "source": "Holman,Zachary Charles",
      "target": "Bertoni,Mariana Ines"
    }
  }, {
    "data": {
      "source": "Holman,Zachary Charles",
      "target": "Holman,Zachary Charles"
    }
  }, {
    "data": {
      "source": "Holman,Zachary Charles",
      "target": "Tamizhmani,Govindasamy"
    }
  }, {
    "data": {
      "source": "Holman,Zachary Charles",
      "target": "Thornton,Trevor John"
    }
  }, {
    "data": {
      "source": "Holman,Zachary Charles",
      "target": "Zhang,Yong-Hang"
    }
  }, {
    "data": {
      "source": "Hondula,David Michael",
      "target": "Cerveny,Randall Scott"
    }
  }, {
    "data": {
      "source": "Hondula,David Michael",
      "target": "Hondula,David Michael"
    }
  }, {
    "data": {
      "source": "Hondula,David Michael",
      "target": "Middel,Ariane Christine"
    }
  }, {
    "data": {
      "source": "Hondula,David Michael",
      "target": "Selover,Nancy Joan"
    }
  }, {
    "data": {
      "source": "Honeycutt,Claire",
      "target": "Honeycutt,Claire"
    }
  }, {
    "data": {
      "source": "Honsberg,Christiana B",
      "target": "Bowden,Stuart Graham"
    }
  }, {
    "data": {
      "source": "Honsberg,Christiana B",
      "target": "Faleev,Nikolai"
    }
  }, {
    "data": {
      "source": "Honsberg,Christiana B",
      "target": "Goodnick,Stephen Marshall"
    }
  }, {
    "data": {
      "source": "Honsberg,Christiana B",
      "target": "Honsberg,Christiana B"
    }
  }, {
    "data": {
      "source": "Honsberg,Christiana B",
      "target": "Husman,Jenefer"
    }
  }, {
    "data": {
      "source": "Honsberg,Christiana B",
      "target": "King,Richard Roland"
    }
  }, {
    "data": {
      "source": "Honsberg,Christiana B",
      "target": "Smith,David John"
    }
  }, {
    "data": {
      "source": "Hood,Mary",
      "target": "Hood,Mary"
    }
  }, {
    "data": {
      "source": "Hooker,Steven Paul",
      "target": "Hooker,Steven Paul"
    }
  }, {
    "data": {
      "source": "Housman,Genevieve Anne",
      "target": "Stone,Anne C"
    }
  }, {
    "data": {
      "source": "Houston,Sandra L",
      "target": "Houston,Sandra L"
    }
  }, {
    "data": {
      "source": "Hoy,Meredith Anne",
      "target": "Finn,Edward Frederick"
    }
  }, {
    "data": {
      "source": "Hoy,Meredith Anne",
      "target": "Harp,Hilary"
    }
  }, {
    "data": {
      "source": "Hoy,Meredith Anne",
      "target": "Hoy,Meredith Anne"
    }
  }, {
    "data": {
      "source": "Hoy,Meredith Anne",
      "target": "Moon,Barry Robert"
    }
  }, {
    "data": {
      "source": "Hoy,Meredith Anne",
      "target": "Wernimont,Jacqueline"
    }
  }, {
    "data": {
      "source": "Hristovski,Kiril D",
      "target": "Brown,Albert Frederick"
    }
  }, {
    "data": {
      "source": "Hristovski,Kiril D",
      "target": "Hristovski,Kiril D"
    }
  }, {
    "data": {
      "source": "Hristovski,Kiril D",
      "target": "Olson,Larry Wood"
    }
  }, {
    "data": {
      "source": "Hruschka,Daniel Jacob",
      "target": "Hruschka,Daniel Jacob"
    }
  }, {
    "data": {
      "source": "Hsiao,Ihan",
      "target": "Hsiao,Ihan"
    }
  }, {
    "data": {
      "source": "Hsiao,Ihan",
      "target": "Li,Baoxin"
    }
  }, {
    "data": {
      "source": "Hsu,Keng Hao",
      "target": "Hsu,Keng Hao"
    }
  }, {
    "data": {
      "source": "Hsu,Keng Hao",
      "target": "Mada Kannan,Arunachala Nadar"
    }
  }, {
    "data": {
      "source": "Hsueh,Lily Yueh-Wen",
      "target": "Hsueh,Lily Yueh-Wen"
    }
  }, {
    "data": {
      "source": "Huang,Dijiang",
      "target": "Ahn,Gail-Joon"
    }
  }, {
    "data": {
      "source": "Huang,Dijiang",
      "target": "Chen,Yinong"
    }
  }, {
    "data": {
      "source": "Huang,Dijiang",
      "target": "Hsiao,Ihan"
    }
  }, {
    "data": {
      "source": "Huang,Dijiang",
      "target": "Huang,Dijiang"
    }
  }, {
    "data": {
      "source": "Huang,Dijiang",
      "target": "Liu,Huan"
    }
  }, {
    "data": {
      "source": "Huang,Dijiang",
      "target": "Vanlehn,Kurt A"
    }
  }, {
    "data": {
      "source": "Huang,Huei-Ping",
      "target": "Chhetri,Netra B"
    }
  }, {
    "data": {
      "source": "Huang,Huei-Ping",
      "target": "Huang,Huei-Ping"
    }
  }, {
    "data": {
      "source": "Huang,Huei-Ping",
      "target": "Myint,Soe W"
    }
  }, {
    "data": {
      "source": "Huberty,Jennifer Lynne",
      "target": "Buman,Matthew P"
    }
  }, {
    "data": {
      "source": "Huberty,Jennifer Lynne",
      "target": "Cacciatore,Joanne"
    }
  }, {
    "data": {
      "source": "Huberty,Jennifer Lynne",
      "target": "Huberty,Jennifer Lynne"
    }
  }, {
    "data": {
      "source": "Huberty,Jennifer Lynne",
      "target": "Lee,Rebecca Elizabeth"
    }
  }, {
    "data": {
      "source": "Huberty,Jennifer Lynne",
      "target": "Luecken,Linda J"
    }
  }, {
    "data": {
      "source": "Huberty,Jennifer Lynne",
      "target": "Mcclain,Darya Denise"
    }
  }, {
    "data": {
      "source": "Huberty,Jennifer Lynne",
      "target": "Wallstrom,Garrick L"
    }
  }, {
    "data": {
      "source": "Hughes,Erika Elizabeth",
      "target": "Branch,Boyd Mathoni"
    }
  }, {
    "data": {
      "source": "Hughes,Erika Elizabeth",
      "target": "Dallett,Nancy"
    }
  }, {
    "data": {
      "source": "Hughes,Erika Elizabeth",
      "target": "Hughes,Erika Elizabeth"
    }
  }, {
    "data": {
      "source": "Hunt,Brett Thomas",
      "target": "Hunt,Brett Thomas"
    }
  }, {
    "data": {
      "source": "Hunting,Daniel W",
      "target": "Hunting,Daniel W"
    }
  }, {
    "data": {
      "source": "Hunting,Daniel W",
      "target": "Whitsett,Andrea Johns"
    }
  }, {
    "data": {
      "source": "Hurlbut,James Benjamin",
      "target": "Bennett,Gaymon L"
    }
  }, {
    "data": {
      "source": "Hurlbut,James Benjamin",
      "target": "Cady,Linell E"
    }
  }, {
    "data": {
      "source": "Hurlbut,James Benjamin",
      "target": "Hurlbut,James Benjamin"
    }
  }, {
    "data": {
      "source": "Hurlbut,James Benjamin",
      "target": "Samuelson,Hava Tirosh"
    }
  }, {
    "data": {
      "source": "Hurlbut,James Benjamin",
      "target": "Zachary,Gregg Pascal"
    }
  }, {
    "data": {
      "source": "Husman,Jenefer",
      "target": "Husman,Jenefer"
    }
  }, {
    "data": {
      "source": "Infurna,Frank",
      "target": "Grimm,Kevin John"
    }
  }, {
    "data": {
      "source": "Infurna,Frank",
      "target": "Infurna,Frank"
    }
  }, {
    "data": {
      "source": "Infurna,Frank",
      "target": "Luthar,Suniya"
    }
  }, {
    "data": {
      "source": "Ingalls,Todd Matthew",
      "target": "Ingalls,Todd Matthew"
    }
  }, {
    "data": {
      "source": "Ingalls,Todd Matthew",
      "target": "Roberts,Christopher Matthew"
    }
  }, {
    "data": {
      "source": "Ingalls,Todd Matthew",
      "target": "Sha,Xin Wei"
    }
  }, {
    "data": {
      "source": "Ingalls,Todd Matthew",
      "target": "Stein,Julian Everett"
    }
  }, {
    "data": {
      "source": "Jackiewicz,Zdzislaw",
      "target": "Jackiewicz,Zdzislaw"
    }
  }, {
    "data": {
      "source": "Jacobs,Bertram Lewis",
      "target": "Jacobs,Bertram Lewis"
    }
  }, {
    "data": {
      "source": "Jacobs,Bertram Lewis",
      "target": "Kibler,Karen"
    }
  }, {
    "data": {
      "source": "Jacobs,Bertram Lewis",
      "target": "Langland,Jeffrey Olaf"
    }
  }, {
    "data": {
      "source": "Jacobs,Daniel C.",
      "target": "Bowman,Judd David"
    }
  }, {
    "data": {
      "source": "Jacobson,Diana L",
      "target": "Belyea,Michael John"
    }
  }, {
    "data": {
      "source": "Jacobson,Diana L",
      "target": "Jacobson,Diana L"
    }
  }, {
    "data": {
      "source": "Jacobson,Diana L",
      "target": "Ohri-Vachaspati,Punam"
    }
  }, {
    "data": {
      "source": "Jager,Justin",
      "target": "Jager,Justin"
    }
  }, {
    "data": {
      "source": "Jang,Jaewon",
      "target": "Jang,Jaewon"
    }
  }, {
    "data": {
      "source": "Jang,Jaewon",
      "target": "Perreault,Francois"
    }
  }, {
    "data": {
      "source": "Janssen,Marcus Alexander",
      "target": "Aggarwal,Rimjhim M"
    }
  }, {
    "data": {
      "source": "Janssen,Marcus Alexander",
      "target": "Anderies,John M"
    }
  }, {
    "data": {
      "source": "Janssen,Marcus Alexander",
      "target": "Barton,C Michael"
    }
  }, {
    "data": {
      "source": "Janssen,Marcus Alexander",
      "target": "Janssen,Marcus Alexander"
    }
  }, {
    "data": {
      "source": "Janssen,Marcus Alexander",
      "target": "Lee,Allen"
    }
  }, {
    "data": {
      "source": "Janssen,Marcus Alexander",
      "target": "Myint,Soe W"
    }
  }, {
    "data": {
      "source": "Janssen,Marcus Alexander",
      "target": "Vivoni,Enrique"
    }
  }, {
    "data": {
      "source": "Jenkins,Lekelia Danielle",
      "target": "Jenkins,Lekelia Danielle"
    }
  }, {
    "data": {
      "source": "Jenkins,Lekelia Danielle",
      "target": "Lerman,Elizabeth A"
    }
  }, {
    "data": {
      "source": "Jewell,Shannon Linda",
      "target": "Jackson,Kelly F"
    }
  }, {
    "data": {
      "source": "Jewell,Shannon Linda",
      "target": "Luecken,Linda J"
    }
  }, {
    "data": {
      "source": "Jiang,Hanqing",
      "target": "He,Ximin"
    }
  }, {
    "data": {
      "source": "Jiang,Hanqing",
      "target": "Jiang,Hanqing"
    }
  }, {
    "data": {
      "source": "Jiang,Hanqing",
      "target": "Mignolet,Marc Paul"
    }
  }, {
    "data": {
      "source": "Jiang,Hanqing",
      "target": "Tongay,Sefaattin"
    }
  }, {
    "data": {
      "source": "Jiang,Hanqing",
      "target": "Yu,Hongbin"
    }
  }, {
    "data": {
      "source": "Jiao,Yang",
      "target": "Jiao,Yang"
    }
  }, {
    "data": {
      "source": "Jimenez-Silva,Margarita",
      "target": "Bernstein,Katherine Arielle"
    }
  }, {
    "data": {
      "source": "Jimenez-Silva,Margarita",
      "target": "Jimenez-Silva,Margarita"
    }
  }, {
    "data": {
      "source": "Johnson,Crista Elcira",
      "target": "Johnson,Crista Elcira"
    }
  }, {
    "data": {
      "source": "Johnson,Crista Elcira",
      "target": "Keller,Colleen Sue"
    }
  }, {
    "data": {
      "source": "Johnson,Crista Elcira",
      "target": "Marsiglia,Flavio"
    }
  }, {
    "data": {
      "source": "Johnson,Garth Wayne",
      "target": "Johnson,Garth Wayne"
    }
  }, {
    "data": {
      "source": "Johnson,Nathan Gregory",
      "target": "Graffy,Elisabeth A"
    }
  }, {
    "data": {
      "source": "Johnson,Nathan Gregory",
      "target": "Johnson,Nathan Gregory"
    }
  }, {
    "data": {
      "source": "Johnson,Nathan Gregory",
      "target": "Razdan,Anshuman"
    }
  }, {
    "data": {
      "source": "Johnson,Nathan Gregory",
      "target": "Ruddell,Benjamin Lyle"
    }
  }, {
    "data": {
      "source": "Johnson,Nathan Gregory",
      "target": "Stechel,Ellen B."
    }
  }, {
    "data": {
      "source": "Johnson,Ryan Miles",
      "target": "Donhauser,Lindsey Gosma"
    }
  }, {
    "data": {
      "source": "Johnson,Ryan Miles",
      "target": "Johnson,Ryan Miles"
    }
  }, {
    "data": {
      "source": "Johnson,Ryan Miles",
      "target": "O'Neill Jr,Gerald Daniel"
    }
  }, {
    "data": {
      "source": "Johnson,Shane Richard",
      "target": "Johnson,Shane Richard"
    }
  }, {
    "data": {
      "source": "Johnson,Shane Richard",
      "target": "Zhang,Yong-Hang"
    }
  }, {
    "data": {
      "source": "Johnston,Carol S",
      "target": "Johnston,Carol S"
    }
  }, {
    "data": {
      "source": "Johnston,Stephen Albert",
      "target": "Diehnelt,Chris W"
    }
  }, {
    "data": {
      "source": "Johnston,Stephen Albert",
      "target": "Johnston,Stephen Albert"
    }
  }, {
    "data": {
      "source": "Johnston,Stephen Albert",
      "target": "Stafford,Phillip"
    }
  }, {
    "data": {
      "source": "Johnston,Stephen Albert",
      "target": "Woodbury,Neal Walter"
    }
  }, {
    "data": {
      "source": "Jones,John W",
      "target": "Jones,John W"
    }
  }, {
    "data": {
      "source": "Jordan,Michelle E",
      "target": "Husman,Jenefer"
    }
  }, {
    "data": {
      "source": "Jordan,Michelle E",
      "target": "Jordan,Michelle E"
    }
  }, {
    "data": {
      "source": "Jordan,Shawn Senneff",
      "target": "Jordan,Shawn Senneff"
    }
  }, {
    "data": {
      "source": "Joshi,Bhavin Ashok",
      "target": "Malhotra,Sangeeta"
    }
  }, {
    "data": {
      "source": "Ju,Feng",
      "target": "Ju,Feng"
    }
  }, {
    "data": {
      "source": "Juarez Rivera,Marisol",
      "target": "Farmer,Jack"
    }
  }, {
    "data": {
      "source": "Jurutka,Peter W",
      "target": "Jurutka,Peter W"
    }
  }, {
    "data": {
      "source": "Kaloush,Kamil Elias",
      "target": "Chester,Mikhail"
    }
  }, {
    "data": {
      "source": "Kaloush,Kamil Elias",
      "target": "El Asmar,Mounir"
    }
  }, {
    "data": {
      "source": "Kaloush,Kamil Elias",
      "target": "Kaloush,Kamil Elias"
    }
  }, {
    "data": {
      "source": "Kaloush,Kamil Elias",
      "target": "Mamlouk,Michael Sobhi"
    }
  }, {
    "data": {
      "source": "Kaloush,Kamil Elias",
      "target": "Stempihar,Jeffrey John"
    }
  }, {
    "data": {
      "source": "Kaloush,Kamil Elias",
      "target": "Underwood,Benjamin Shane"
    }
  }, {
    "data": {
      "source": "Kambhampati,Subbarao",
      "target": "Cooke,Nancy Jaworski"
    }
  }, {
    "data": {
      "source": "Kambhampati,Subbarao",
      "target": "Kambhampati,Subbarao"
    }
  }, {
    "data": {
      "source": "Kang,Yun",
      "target": "Kang,Yun"
    }
  }, {
    "data": {
      "source": "Kang,Yun",
      "target": "Lanchier,Nicolas"
    }
  }, {
    "data": {
      "source": "Kanthaswamy,Sreetharan K",
      "target": "Kanthaswamy,Sreetharan K"
    }
  }, {
    "data": {
      "source": "Kaplan,Robert G",
      "target": "Kaplan,Robert G"
    }
  }, {
    "data": {
      "source": "Kaplan,Robert G",
      "target": "Lamb,Gerri"
    }
  }, {
    "data": {
      "source": "Kaplan,Robert G",
      "target": "Price,Dianne E"
    }
  }, {
    "data": {
      "source": "Kapstein,Ethan B",
      "target": "Kapstein,Ethan B"
    }
  }, {
    "data": {
      "source": "Karady,George G",
      "target": "Karady,George G"
    }
  }, {
    "data": {
      "source": "Karam,Lina",
      "target": "Karam,Lina"
    }
  }, {
    "data": {
      "source": "Kashiwagi,Dean Takeo",
      "target": "Kashiwagi,Dean Takeo"
    }
  }, {
    "data": {
      "source": "Katchman,Benjamin A",
      "target": "Anderson,Karen S"
    }
  }, {
    "data": {
      "source": "Katchman,Benjamin A",
      "target": "Katchman,Benjamin A"
    }
  }, {
    "data": {
      "source": "Katsanos,Christos",
      "target": "Coletta,Dawn"
    }
  }, {
    "data": {
      "source": "Katsanos,Christos",
      "target": "Dickinson,Jared M"
    }
  }, {
    "data": {
      "source": "Katsanos,Christos",
      "target": "Katsanos,Christos"
    }
  }, {
    "data": {
      "source": "Katsanos,Christos",
      "target": "Mandarino,Lawrence"
    }
  }, {
    "data": {
      "source": "Katz,Charles",
      "target": "Decker,Scott Henderson"
    }
  }, {
    "data": {
      "source": "Katz,Charles",
      "target": "Griffin,Marie Louise"
    }
  }, {
    "data": {
      "source": "Katz,Charles",
      "target": "Hepburn,John Robert"
    }
  }, {
    "data": {
      "source": "Katz,Charles",
      "target": "Katz,Charles"
    }
  }, {
    "data": {
      "source": "Katz,Charles",
      "target": "Spohn,Cassia Cathleen"
    }
  }, {
    "data": {
      "source": "Katz,Charles",
      "target": "Webb,Vincent J"
    }
  }, {
    "data": {
      "source": "Kaufman,David",
      "target": "Burton,Matthew M."
    }
  }, {
    "data": {
      "source": "Kaufman,David",
      "target": "Doebbeling,Bradley Niel"
    }
  }, {
    "data": {
      "source": "Kaufman,David",
      "target": "Grando,Maria Adela"
    }
  }, {
    "data": {
      "source": "Kaufman,David",
      "target": "Kaufman,David"
    }
  }, {
    "data": {
      "source": "Kaufman,David",
      "target": "Runger,George"
    }
  }, {
    "data": {
      "source": "Kavazanjian,Edward",
      "target": "Kavazanjian,Edward"
    }
  }, {
    "data": {
      "source": "Kawski,Matthias",
      "target": "Kawski,Matthias"
    }
  }, {
    "data": {
      "source": "Kellam,Nadia Nicole",
      "target": "Kellam,Nadia Nicole"
    }
  }, {
    "data": {
      "source": "Kelley,Michael Francis",
      "target": "Bernstein,Katherine Arielle"
    }
  }, {
    "data": {
      "source": "Kelley,Michael Francis",
      "target": "Farrand,Kathleen M."
    }
  }, {
    "data": {
      "source": "Kelley,Michael Francis",
      "target": "Kelley,Michael Francis"
    }
  }, {
    "data": {
      "source": "Kelley,Michael Francis",
      "target": "Marley,Scott Christopher"
    }
  }, {
    "data": {
      "source": "Kelly,Lesly",
      "target": "Kelly,Lesly"
    }
  }, {
    "data": {
      "source": "Kempany,Katherine Amara",
      "target": "Hepburn,John Robert"
    }
  }, {
    "data": {
      "source": "Kenrick,Douglas T",
      "target": "Grimm,Kevin John"
    }
  }, {
    "data": {
      "source": "Kenrick,Douglas T",
      "target": "Kenrick,Douglas T"
    }
  }, {
    "data": {
      "source": "Kenrick,Douglas T",
      "target": "Lemery,Kathryn Sue"
    }
  }, {
    "data": {
      "source": "Kenrick,Douglas T",
      "target": "Neuberg,Steven Laurence"
    }
  }, {
    "data": {
      "source": "Khdour,Omar Mohammad",
      "target": "Hecht,Sidney Michael"
    }
  }, {
    "data": {
      "source": "Khdour,Omar Mohammad",
      "target": "Khdour,Omar Mohammad"
    }
  }, {
    "data": {
      "source": "Khoshmanesh,Mostafa",
      "target": "Shirzaei,Manoochehr"
    }
  }, {
    "data": {
      "source": "Kiaei,Sayfe",
      "target": "Bakkaloglu,Bertan"
    }
  }, {
    "data": {
      "source": "Kiaei,Sayfe",
      "target": "Kiaei,Sayfe"
    }
  }, {
    "data": {
      "source": "Kiani,Samira",
      "target": "Ebrahimkhani,Mohammad Reza"
    }
  }, {
    "data": {
      "source": "Kiani,Samira",
      "target": "Kiani,Samira"
    }
  }, {
    "data": {
      "source": "Kiehl,Richard Arthur",
      "target": "Chamberlin,Ralph Vary"
    }
  }, {
    "data": {
      "source": "Kiehl,Richard Arthur",
      "target": "Chen,Tingyong"
    }
  }, {
    "data": {
      "source": "Kiehl,Richard Arthur",
      "target": "Kiehl,Richard Arthur"
    }
  }, {
    "data": {
      "source": "Kiehl,Richard Arthur",
      "target": "Lai,Ying-Cheng"
    }
  }, {
    "data": {
      "source": "Kiehl,Richard Arthur",
      "target": "Tongay,Sefaattin"
    }
  }, {
    "data": {
      "source": "Kim,Wonsun",
      "target": "Kim,Wonsun"
    }
  }, {
    "data": {
      "source": "Kim,Wonsun",
      "target": "Larkey,Linda Kathryn"
    }
  }, {
    "data": {
      "source": "Kim,Wonsun",
      "target": "Mcnulty,Julie Ann"
    }
  }, {
    "data": {
      "source": "Kim,Wonsun",
      "target": "Todd,Michael Wayne"
    }
  }, {
    "data": {
      "source": "Kimbel,William Howard",
      "target": "Kimbel,William Howard"
    }
  }, {
    "data": {
      "source": "King,Richard Roland",
      "target": "Honsberg,Christiana B"
    }
  }, {
    "data": {
      "source": "King,Richard Roland",
      "target": "King,Richard Roland"
    }
  }, {
    "data": {
      "source": "Kintigh,Keith William",
      "target": "Abbott,David Ralph"
    }
  }, {
    "data": {
      "source": "Kintigh,Keith William",
      "target": "Brin,Adam Miles"
    }
  }, {
    "data": {
      "source": "Kintigh,Keith William",
      "target": "Ellison,Leigh Anne"
    }
  }, {
    "data": {
      "source": "Kintigh,Keith William",
      "target": "Flores,Jodi Reeves"
    }
  }, {
    "data": {
      "source": "Kintigh,Keith William",
      "target": "Kintigh,Keith William"
    }
  }, {
    "data": {
      "source": "Kintigh,Keith William",
      "target": "Kinzig,Ann"
    }
  }, {
    "data": {
      "source": "Kintigh,Keith William",
      "target": "Martinez,David"
    }
  }, {
    "data": {
      "source": "Kintigh,Keith William",
      "target": "Pierce-Mcmanamon,Francis P"
    }
  }, {
    "data": {
      "source": "Kintigh,Keith William",
      "target": "Simeone,Michael Paul"
    }
  }, {
    "data": {
      "source": "Kintigh,Keith William",
      "target": "Toon,Richard"
    }
  }, {
    "data": {
      "source": "Kintigh,Keith William",
      "target": "Whelan,Mary Kathryn"
    }
  }, {
    "data": {
      "source": "Kirsch,Robert Emmanuel",
      "target": "Kirsch,Robert Emmanuel"
    }
  }, {
    "data": {
      "source": "Kitch,Sally L",
      "target": "Kitch,Sally L"
    }
  }, {
    "data": {
      "source": "Kitchen,Jennifer Nisha",
      "target": "Kitchen,Jennifer Nisha"
    }
  }, {
    "data": {
      "source": "Kitchen,Jennifer Nisha",
      "target": "Ozev,Sule"
    }
  }, {
    "data": {
      "source": "Kitchen,Jennifer Nisha",
      "target": "Vrudhula,Sarma B K"
    }
  }, {
    "data": {
      "source": "Klassen,Sarah Elizabeth",
      "target": "Nelson,Ben A"
    }
  }, {
    "data": {
      "source": "Kleim,Jeffrey Allan",
      "target": "Kleim,Jeffrey Allan"
    }
  }, {
    "data": {
      "source": "Klimek,Barbara G",
      "target": "Androff Jr,David Kime"
    }
  }, {
    "data": {
      "source": "Klimek,Barbara G",
      "target": "Klimek,Barbara G"
    }
  }, {
    "data": {
      "source": "Knox,Gordon Mason",
      "target": "Knox,Gordon Mason"
    }
  }, {
    "data": {
      "source": "Knudson,Kelly",
      "target": "Knudson,Kelly"
    }
  }, {
    "data": {
      "source": "Ko,Ara",
      "target": "Vivoni,Enrique"
    }
  }, {
    "data": {
      "source": "Ko,Byeongkwan",
      "target": "Shim,Sang-Heon"
    }
  }, {
    "data": {
      "source": "Kobojek,Kimberly Sue",
      "target": "Kobojek,Kimberly Sue"
    }
  }, {
    "data": {
      "source": "Kodibagkar,Vikram D",
      "target": "Frakes,David"
    }
  }, {
    "data": {
      "source": "Kodibagkar,Vikram D",
      "target": "Kodibagkar,Vikram D"
    }
  }, {
    "data": {
      "source": "Kodibagkar,Vikram D",
      "target": "Tian,Yanqing"
    }
  }, {
    "data": {
      "source": "Kodibagkar,Vikram D",
      "target": "Yarger,Jeffery Lynn"
    }
  }, {
    "data": {
      "source": "Koenigsknecht,Julius U",
      "target": "Koenigsknecht,Julius U"
    }
  }, {
    "data": {
      "source": "Koerner,Mari",
      "target": "Koerner,Mari"
    }
  }, {
    "data": {
      "source": "Komnenich,Pauline",
      "target": "Komnenich,Pauline"
    }
  }, {
    "data": {
      "source": "Kong,Wei",
      "target": "Kong,Wei"
    }
  }, {
    "data": {
      "source": "Kong,Wei",
      "target": "Nickerson,Cheryl"
    }
  }, {
    "data": {
      "source": "Kong,Wei",
      "target": "Shi,Yixin"
    }
  }, {
    "data": {
      "source": "Koppell,Jonathan",
      "target": "Koppell,Jonathan"
    }
  }, {
    "data": {
      "source": "Koppell,Jonathan",
      "target": "Valencia,William Ruben"
    }
  }, {
    "data": {
      "source": "Koptiuch,Kristin",
      "target": "Clark,Patricia J"
    }
  }, {
    "data": {
      "source": "Koptiuch,Kristin",
      "target": "Koptiuch,Kristin"
    }
  }, {
    "data": {
      "source": "Koptiuch,Kristin",
      "target": "Lerman,Richard"
    }
  }, {
    "data": {
      "source": "Kornienko,Olga",
      "target": "Granger,Douglas"
    }
  }, {
    "data": {
      "source": "Kornienko,Olga",
      "target": "Kornienko,Olga"
    }
  }, {
    "data": {
      "source": "Kornienko,Olga",
      "target": "Schaefer,David"
    }
  }, {
    "data": {
      "source": "Koro-Ljungberg,Mirka",
      "target": "Koro-Ljungberg,Mirka"
    }
  }, {
    "data": {
      "source": "Kosiorek,Alexander S.",
      "target": "Kosiorek,Alexander S."
    }
  }, {
    "data": {
      "source": "Kostelich,Eric John",
      "target": "Boggess,Albert"
    }
  }, {
    "data": {
      "source": "Kostelich,Eric John",
      "target": "Jacobs,Mark"
    }
  }, {
    "data": {
      "source": "Kostelich,Eric John",
      "target": "Kostelich,Eric John"
    }
  }, {
    "data": {
      "source": "Kostelich,Eric John",
      "target": "Kuang,Yang"
    }
  }, {
    "data": {
      "source": "Kostelich,Eric John",
      "target": "Milner,Fabio Augusto"
    }
  }, {
    "data": {
      "source": "Kotschwar,Brett",
      "target": "Kotschwar,Brett"
    }
  }, {
    "data": {
      "source": "Kouvetakis,John",
      "target": "Kouvetakis,John"
    }
  }, {
    "data": {
      "source": "Kouvetakis,John",
      "target": "Menendez,Jose"
    }
  }, {
    "data": {
      "source": "Kozicki,Michael N",
      "target": "Barnaby,Hugh James"
    }
  }, {
    "data": {
      "source": "Kozicki,Michael N",
      "target": "Kozicki,Michael N"
    }
  }, {
    "data": {
      "source": "Krajmalnik-Brown,Rosa",
      "target": "Bimonte-Nelson,Heather"
    }
  }, {
    "data": {
      "source": "Krajmalnik-Brown,Rosa",
      "target": "Krajmalnik-Brown,Rosa"
    }
  }, {
    "data": {
      "source": "Krajmalnik-Brown,Rosa",
      "target": "Marcus,Andrew"
    }
  }, {
    "data": {
      "source": "Krajmalnik-Brown,Rosa",
      "target": "Rittmann,Bruce Edward"
    }
  }, {
    "data": {
      "source": "Kreiser,Kellie Jean",
      "target": "Kreiser,Kellie Jean"
    }
  }, {
    "data": {
      "source": "Krishnamurthi,Narayanan",
      "target": "Abbas,James"
    }
  }, {
    "data": {
      "source": "Krishnamurthi,Narayanan",
      "target": "Krishnamurthi,Narayanan"
    }
  }, {
    "data": {
      "source": "Krishnamurthi,Narayanan",
      "target": "Larkey,Linda Kathryn"
    }
  }, {
    "data": {
      "source": "Krishnamurthi,Narayanan",
      "target": "Todd,Michael Wayne"
    }
  }, {
    "data": {
      "source": "Krysik,Judy Lynn",
      "target": "Anthony,Elizabeth"
    }
  }, {
    "data": {
      "source": "Krysik,Judy Lynn",
      "target": "Krysik,Judy Lynn"
    }
  }, {
    "data": {
      "source": "Kuang,Yang",
      "target": "Kuang,Yang"
    }
  }, {
    "data": {
      "source": "Kuby,Michael",
      "target": "Chester,Mikhail"
    }
  }, {
    "data": {
      "source": "Kuby,Michael",
      "target": "Kuby,Michael"
    }
  }, {
    "data": {
      "source": "Kuby,Michael",
      "target": "Lou,Yingyan"
    }
  }, {
    "data": {
      "source": "Kuby,Michael",
      "target": "Maltz,Arnold"
    }
  }, {
    "data": {
      "source": "Kuby,Michael",
      "target": "Pendyala,Ram Mohan"
    }
  }, {
    "data": {
      "source": "Kuby,Michael",
      "target": "Salon,Deborah"
    }
  }, {
    "data": {
      "source": "Kuby,Michael",
      "target": "Underwood,Benjamin Shane"
    }
  }, {
    "data": {
      "source": "Kuby,Michael",
      "target": "Villalobos,Jesus R"
    }
  }, {
    "data": {
      "source": "Kuby,Michael",
      "target": "Welch,Eric W"
    }
  }, {
    "data": {
      "source": "Kuitche,Joseph Mathurin",
      "target": "Kuitche,Joseph Mathurin"
    }
  }, {
    "data": {
      "source": "Kuitche,Joseph Mathurin",
      "target": "Pan,Rong"
    }
  }, {
    "data": {
      "source": "Kuitche,Joseph Mathurin",
      "target": "Tamizhmani,Govindasamy"
    }
  }, {
    "data": {
      "source": "Kuitche,Joseph Mathurin",
      "target": "Wu,Teresa"
    }
  }, {
    "data": {
      "source": "Kulinna,Pamela Hodges",
      "target": "Kulinna,Pamela Hodges"
    }
  }, {
    "data": {
      "source": "Kumar,Avishek Raman",
      "target": "Ozkan,Sefika Banu"
    }
  }, {
    "data": {
      "source": "Kurz,Alexander",
      "target": "Elliott,Stephen Nelson"
    }
  }, {
    "data": {
      "source": "Kurz,Alexander",
      "target": "Kurz,Alexander"
    }
  }, {
    "data": {
      "source": "Kusumi,Kenro",
      "target": "Kusumi,Kenro"
    }
  }, {
    "data": {
      "source": "Kusumi,Kenro",
      "target": "Mangone,Marco"
    }
  }, {
    "data": {
      "source": "Kusumi,Kenro",
      "target": "Wilson-Rawls,Norma Jeanne"
    }
  }, {
    "data": {
      "source": "Kuznetsov,Anastasia Stacey",
      "target": "Coleman,Grisha"
    }
  }, {
    "data": {
      "source": "Kuznetsov,Anastasia Stacey",
      "target": "Finn,Edward Frederick"
    }
  }, {
    "data": {
      "source": "Kuznetsov,Anastasia Stacey",
      "target": "Kuznetsov,Anastasia Stacey"
    }
  }, {
    "data": {
      "source": "Kuznetsov,Anastasia Stacey",
      "target": "Nocek,Adam"
    }
  }, {
    "data": {
      "source": "Kuznetsov,Anastasia Stacey",
      "target": "Paine,Garth Crispan"
    }
  }, {
    "data": {
      "source": "Kuznetsov,Anastasia Stacey",
      "target": "Sha,Xin Wei"
    }
  }, {
    "data": {
      "source": "Kuznetsov,Anastasia Stacey",
      "target": "Tinapple,David A"
    }
  }, {
    "data": {
      "source": "Kuznetsov,Anastasia Stacey",
      "target": "Turaga,Pavan Kumar"
    }
  }, {
    "data": {
      "source": "Kwan,Sau Y",
      "target": "Ahn,Gail-Joon"
    }
  }, {
    "data": {
      "source": "Kwan,Sau Y",
      "target": "Gonzales,Nancy A"
    }
  }, {
    "data": {
      "source": "Kwan,Sau Y",
      "target": "Graudejus,Oliver"
    }
  }, {
    "data": {
      "source": "Kwan,Sau Y",
      "target": "Grimm,Kevin John"
    }
  }, {
    "data": {
      "source": "Kwan,Sau Y",
      "target": "Kwan,Sau Y"
    }
  }, {
    "data": {
      "source": "Kwan,Sau Y",
      "target": "Okun,Morris A"
    }
  }, {
    "data": {
      "source": "Kwon,Kyounghee Hazel",
      "target": "Halavais,Alexander"
    }
  }, {
    "data": {
      "source": "Kwon,Kyounghee Hazel",
      "target": "Kwon,Kyounghee Hazel"
    }
  }, {
    "data": {
      "source": "Labaer,Joshua",
      "target": "Adams,James Brewster"
    }
  }, {
    "data": {
      "source": "Labaer,Joshua",
      "target": "Anderson,Karen S"
    }
  }, {
    "data": {
      "source": "Labaer,Joshua",
      "target": "Labaer,Joshua"
    }
  }, {
    "data": {
      "source": "Labaer,Joshua",
      "target": "Lindsay,Stuart"
    }
  }, {
    "data": {
      "source": "Labaer,Joshua",
      "target": "Magee,Dewey Mitchell"
    }
  }, {
    "data": {
      "source": "Labaer,Joshua",
      "target": "Nikkhah,Mehdi"
    }
  }, {
    "data": {
      "source": "Labaer,Joshua",
      "target": "Park,Jin"
    }
  }, {
    "data": {
      "source": "Labaer,Joshua",
      "target": "Qiu,Ji"
    }
  }, {
    "data": {
      "source": "Labaer,Joshua",
      "target": "Wallstrom,Garrick L"
    }
  }, {
    "data": {
      "source": "Labelle,Jeffrey T",
      "target": "Labelle,Jeffrey T"
    }
  }, {
    "data": {
      "source": "Labelle,Jeffrey T",
      "target": "Pavlic,Theodore Paul"
    }
  }, {
    "data": {
      "source": "Lackner,Klaus S.",
      "target": "Anbar,Ariel David"
    }
  }, {
    "data": {
      "source": "Lackner,Klaus S.",
      "target": "Buttry,Daniel A."
    }
  }, {
    "data": {
      "source": "Lackner,Klaus S.",
      "target": "Chizmeshya,Andrew V"
    }
  }, {
    "data": {
      "source": "Lackner,Klaus S.",
      "target": "Hanemann,William Michael Micha"
    }
  }, {
    "data": {
      "source": "Lackner,Klaus S.",
      "target": "Lackner,Klaus S."
    }
  }, {
    "data": {
      "source": "Lackner,Klaus S.",
      "target": "Lin,Jerry Y S"
    }
  }, {
    "data": {
      "source": "Lackner,Klaus S.",
      "target": "Mu,Bin"
    }
  }, {
    "data": {
      "source": "Lackner,Klaus S.",
      "target": "Rittmann,Bruce Edward"
    }
  }, {
    "data": {
      "source": "Lackner,Klaus S.",
      "target": "Sarewitz,Daniel"
    }
  }, {
    "data": {
      "source": "Lackner,Klaus S.",
      "target": "Stechel,Ellen B."
    }
  }, {
    "data": {
      "source": "Lackner,Klaus S.",
      "target": "Wright,Allen B"
    }
  }, {
    "data": {
      "source": "Ladd,Becky Kochenderfer",
      "target": "Ladd,Becky Kochenderfer"
    }
  }, {
    "data": {
      "source": "Ladd,Becky Kochenderfer",
      "target": "Ladd,Gary W"
    }
  }, {
    "data": {
      "source": "Lai,Ying-Cheng",
      "target": "Lai,Ying-Cheng"
    }
  }, {
    "data": {
      "source": "Lai,Ying-Cheng",
      "target": "Ning,Cun-Zheng"
    }
  }, {
    "data": {
      "source": "Lai,Ying-Cheng",
      "target": "Scaglione,Anna"
    }
  }, {
    "data": {
      "source": "Lai,Ying-Cheng",
      "target": "Yao,Yu"
    }
  }, {
    "data": {
      "source": "Lake,Douglas Fletcher",
      "target": "Lake,Douglas Fletcher"
    }
  }, {
    "data": {
      "source": "Lake,Douglas Fletcher",
      "target": "Nedelkov,Dobrin"
    }
  }, {
    "data": {
      "source": "Lamb,Gerri",
      "target": "Doebbeling,Bradley Niel"
    }
  }, {
    "data": {
      "source": "Lamb,Gerri",
      "target": "Harootunian,Gevork"
    }
  }, {
    "data": {
      "source": "Lamb,Gerri",
      "target": "Lamb,Gerri"
    }
  }, {
    "data": {
      "source": "Lamb,Gerri",
      "target": "Runger,George"
    }
  }, {
    "data": {
      "source": "Lammers,Peter",
      "target": "Deng,Shuguang"
    }
  }, {
    "data": {
      "source": "Lammers,Peter",
      "target": "Gibson,Edd"
    }
  }, {
    "data": {
      "source": "Lammers,Peter",
      "target": "Hristovski,Kiril D"
    }
  }, {
    "data": {
      "source": "Lammers,Peter",
      "target": "Johnson,Nathan Gregory"
    }
  }, {
    "data": {
      "source": "Lammers,Peter",
      "target": "Krajmalnik-Brown,Rosa"
    }
  }, {
    "data": {
      "source": "Lammers,Peter",
      "target": "Lammers,Peter"
    }
  }, {
    "data": {
      "source": "Lammers,Peter",
      "target": "Rittmann,Bruce Edward"
    }
  }, {
    "data": {
      "source": "Lammers,Peter",
      "target": "Torres,Cesar I"
    }
  }, {
    "data": {
      "source": "Lampert,Adam",
      "target": "Lampert,Adam"
    }
  }, {
    "data": {
      "source": "Lancaster,Hope Sparks",
      "target": "Dinu,Valentin"
    }
  }, {
    "data": {
      "source": "Lancaster,Hope Sparks",
      "target": "Peter,Beate"
    }
  }, {
    "data": {
      "source": "Lancaster,Shanyn Colleen",
      "target": "Lancaster,Shanyn Colleen"
    }
  }, {
    "data": {
      "source": "Lanchier,Nicolas",
      "target": "Lanchier,Nicolas"
    }
  }, {
    "data": {
      "source": "Lande,Micah",
      "target": "Cavalier,Darlene Faith"
    }
  }, {
    "data": {
      "source": "Lande,Micah",
      "target": "Lande,Micah"
    }
  }, {
    "data": {
      "source": "Lang,Jessica",
      "target": "Dubois,Raymond"
    }
  }, {
    "data": {
      "source": "Langbeheim,Elon E",
      "target": "Langbeheim,Elon E"
    }
  }, {
    "data": {
      "source": "Langbeheim,Elon E",
      "target": "Merritt,Joi Deshawn"
    }
  }, {
    "data": {
      "source": "Langergraber,Kevin E",
      "target": "Langergraber,Kevin E"
    }
  }, {
    "data": {
      "source": "Larkey,Linda Kathryn",
      "target": "Larkey,Linda Kathryn"
    }
  }, {
    "data": {
      "source": "Larsen,Wiley",
      "target": "Larsen,Wiley"
    }
  }, {
    "data": {
      "source": "Laubichler,Manfred Dietrich",
      "target": "Daniels,Bryan"
    }
  }, {
    "data": {
      "source": "Laubichler,Manfred Dietrich",
      "target": "Laubichler,Manfred Dietrich"
    }
  }, {
    "data": {
      "source": "Laubichler,Manfred Dietrich",
      "target": "Maienschein,Jane Ann"
    }
  }, {
    "data": {
      "source": "Lawrence,Samuel J",
      "target": "Bowley,Kenneth S"
    }
  }, {
    "data": {
      "source": "Lawrence,Samuel J",
      "target": "Estes,Nicholas"
    }
  }, {
    "data": {
      "source": "Lawrence,Samuel J",
      "target": "Johnson,Alexander"
    }
  }, {
    "data": {
      "source": "Lawrence,Samuel J",
      "target": "Lawrence,Samuel J"
    }
  }, {
    "data": {
      "source": "Lawrence,Samuel J",
      "target": "Leland,Jeffrey Richard"
    }
  }, {
    "data": {
      "source": "Lawrence,Samuel J",
      "target": "Robinson,Mark Southwick"
    }
  }, {
    "data": {
      "source": "Lawrence,Samuel J",
      "target": "Silva,Victor Hugo"
    }
  }, {
    "data": {
      "source": "Lebihan,Catherine C",
      "target": "Lebihan,Catherine C"
    }
  }, {
    "data": {
      "source": "Lee,Hyunglae",
      "target": "Artemiadis,Panagiotis K."
    }
  }, {
    "data": {
      "source": "Lee,Hyunglae",
      "target": "Lee,Hyunglae"
    }
  }, {
    "data": {
      "source": "Lee,Joohyung",
      "target": "Lee,Joohyung"
    }
  }, {
    "data": {
      "source": "Lee,Rebecca Elizabeth",
      "target": "Bruening,Meredith Margaret"
    }
  }, {
    "data": {
      "source": "Lee,Rebecca Elizabeth",
      "target": "Castro,Felipe G"
    }
  }, {
    "data": {
      "source": "Lee,Rebecca Elizabeth",
      "target": "Crespo,Noe Cuauhtemoc"
    }
  }, {
    "data": {
      "source": "Lee,Rebecca Elizabeth",
      "target": "Keller,Colleen Sue"
    }
  }, {
    "data": {
      "source": "Lee,Rebecca Elizabeth",
      "target": "Lee,Rebecca Elizabeth"
    }
  }, {
    "data": {
      "source": "Lee,Rebecca Elizabeth",
      "target": "Marsiglia,Flavio"
    }
  }, {
    "data": {
      "source": "Lee,Rebecca Elizabeth",
      "target": "Reifsnider,Elizabeth Ann"
    }
  }, {
    "data": {
      "source": "Lee,Rebecca Elizabeth",
      "target": "Shaibi,Gabriel"
    }
  }, {
    "data": {
      "source": "Lee,Rebecca Elizabeth",
      "target": "Todd,Michael Wayne"
    }
  }, {
    "data": {
      "source": "Lee,Sara Astrid",
      "target": "Ghanem,Carla"
    }
  }, {
    "data": {
      "source": "Lee,Sara Astrid",
      "target": "Lee,Sara Astrid"
    }
  }, {
    "data": {
      "source": "Lee,Taewoo",
      "target": "Lee,Taewoo"
    }
  }, {
    "data": {
      "source": "Lee,Yann-Hang",
      "target": "Lee,Yann-Hang"
    }
  }, {
    "data": {
      "source": "Leinenweber,Kurt D",
      "target": "Leinenweber,Kurt D"
    }
  }, {
    "data": {
      "source": "Lenfesty,Hillary Louise",
      "target": "Lenfesty,Hillary Louise"
    }
  }, {
    "data": {
      "source": "Lennon,Tara M",
      "target": "Lennon,Tara M"
    }
  }, {
    "data": {
      "source": "Lennon,Tara M",
      "target": "Woodall,Gina Marie Serignese"
    }
  }, {
    "data": {
      "source": "Leong,James Andrew Monton",
      "target": "Leong,James Andrew Monton"
    }
  }, {
    "data": {
      "source": "Lerman,Elizabeth A",
      "target": "Berisha,Visar Shahin"
    }
  }, {
    "data": {
      "source": "Lerman,Elizabeth A",
      "target": "Defaria,Rowan"
    }
  }, {
    "data": {
      "source": "Lerman,Elizabeth A",
      "target": "Jenkins,Lekelia Danielle"
    }
  }, {
    "data": {
      "source": "Lerman,Elizabeth A",
      "target": "Lerman,Elizabeth A"
    }
  }, {
    "data": {
      "source": "Lerman,Elizabeth A",
      "target": "Tinapple,David A"
    }
  }, {
    "data": {
      "source": "Lester,Neal Andre",
      "target": "Lester,Neal Andre"
    }
  }, {
    "data": {
      "source": "Levine,James Andrew",
      "target": "Han,Seungyong"
    }
  }, {
    "data": {
      "source": "Levine,James Andrew",
      "target": "Levine,James Andrew"
    }
  }, {
    "data": {
      "source": "Levine,James Andrew",
      "target": "Slade,Alexandra Avril Brewis"
    }
  }, {
    "data": {
      "source": "Levine,James Andrew",
      "target": "Williams,Deborah L"
    }
  }, {
    "data": {
      "source": "Levitus,Marcia",
      "target": "Levitus,Marcia"
    }
  }, {
    "data": {
      "source": "Levy,Roy",
      "target": "Levy,Roy"
    }
  }, {
    "data": {
      "source": "Li,Baoxin",
      "target": "Balasooriya,Janaka Lalit"
    }
  }, {
    "data": {
      "source": "Li,Baoxin",
      "target": "Chen,Yinong"
    }
  }, {
    "data": {
      "source": "Li,Baoxin",
      "target": "Davulcu,Hasan"
    }
  }, {
    "data": {
      "source": "Li,Baoxin",
      "target": "Ganesh,Tirupalavanam Gopal"
    }
  }, {
    "data": {
      "source": "Li,Baoxin",
      "target": "Hsiao,Ihan"
    }
  }, {
    "data": {
      "source": "Li,Baoxin",
      "target": "Li,Baoxin"
    }
  }, {
    "data": {
      "source": "Li,Baoxin",
      "target": "Liu,Huan"
    }
  }, {
    "data": {
      "source": "Li,Baoxin",
      "target": "Nelson,Brian Carl"
    }
  }, {
    "data": {
      "source": "Li,Baoxin",
      "target": "Richa,Andrea W"
    }
  }, {
    "data": {
      "source": "Li,Baoxin",
      "target": "Walker,Erin Ashley"
    }
  }, {
    "data": {
      "source": "Li,Jialun",
      "target": "Li,Jialun"
    }
  }, {
    "data": {
      "source": "Li,Jialun",
      "target": "Mahalov,Alex"
    }
  }, {
    "data": {
      "source": "Li,Jian",
      "target": "Li,Jian"
    }
  }, {
    "data": {
      "source": "Li,Jing",
      "target": "Kao,Ming-Hung"
    }
  }, {
    "data": {
      "source": "Li,Jing",
      "target": "Li,Jing"
    }
  }, {
    "data": {
      "source": "Li,Jing",
      "target": "Wu,Teresa"
    }
  }, {
    "data": {
      "source": "Li,Wei",
      "target": "Li,Wei"
    }
  }, {
    "data": {
      "source": "Li,Wenwen",
      "target": "Li,Wenwen"
    }
  }, {
    "data": {
      "source": "Liang,Jianming",
      "target": "Chakraborty,Shayok"
    }
  }, {
    "data": {
      "source": "Liang,Jianming",
      "target": "Frakes,David"
    }
  }, {
    "data": {
      "source": "Liang,Jianming",
      "target": "Greenes,Robert"
    }
  }, {
    "data": {
      "source": "Liang,Jianming",
      "target": "Liang,Jianming"
    }
  }, {
    "data": {
      "source": "Liang,Jianming",
      "target": "Runger,George"
    }
  }, {
    "data": {
      "source": "Liang,Jianming",
      "target": "Wallstrom,Garrick L"
    }
  }, {
    "data": {
      "source": "Lietz,Cynthia A",
      "target": "Lietz,Cynthia A"
    }
  }, {
    "data": {
      "source": "Lietz,Cynthia A",
      "target": "Valencia,William Ruben"
    }
  }, {
    "data": {
      "source": "Lin,Jerry Y S",
      "target": "Lin,Jerry Y S"
    }
  }, {
    "data": {
      "source": "Lind,Mary Laura",
      "target": "Forzani,Erica Silvia"
    }
  }, {
    "data": {
      "source": "Lind,Mary Laura",
      "target": "Green,Matthew D"
    }
  }, {
    "data": {
      "source": "Lind,Mary Laura",
      "target": "Lind,Mary Laura"
    }
  }, {
    "data": {
      "source": "Lindor,Keith Douglas",
      "target": "Lindor,Keith Douglas"
    }
  }, {
    "data": {
      "source": "Lindsay,Stuart",
      "target": "Lindsay,Stuart"
    }
  }, {
    "data": {
      "source": "Lindsay,Stuart",
      "target": "Woodbury,Neal Walter"
    }
  }, {
    "data": {
      "source": "Lindsay,Stuart",
      "target": "Zhang,Peiming"
    }
  }, {
    "data": {
      "source": "Lindstrom Johnson,Sarah Renee",
      "target": "Lindstrom Johnson,Sarah Renee"
    }
  }, {
    "data": {
      "source": "Line,Michael Robert",
      "target": "Line,Michael Robert"
    }
  }, {
    "data": {
      "source": "Liou,Daniel Dinn-You",
      "target": "Liou,Daniel Dinn-You"
    }
  }, {
    "data": {
      "source": "Lippincott,Dianna G",
      "target": "Lippincott,Dianna G"
    }
  }, {
    "data": {
      "source": "Liss,Julie M",
      "target": "Berisha,Visar Shahin"
    }
  }, {
    "data": {
      "source": "Liss,Julie M",
      "target": "Lacross,Amy Beth"
    }
  }, {
    "data": {
      "source": "Liss,Julie M",
      "target": "Liss,Julie M"
    }
  }, {
    "data": {
      "source": "Liu,Huan",
      "target": "Bernard,Harvey Russell"
    }
  }, {
    "data": {
      "source": "Liu,Huan",
      "target": "Li,Baoxin"
    }
  }, {
    "data": {
      "source": "Liu,Huan",
      "target": "Liu,Huan"
    }
  }, {
    "data": {
      "source": "Liu,Jingyue",
      "target": "Buttry,Daniel A."
    }
  }, {
    "data": {
      "source": "Liu,Jingyue",
      "target": "Liu,Jingyue"
    }
  }, {
    "data": {
      "source": "Liu,Li",
      "target": "Chang,Yung"
    }
  }, {
    "data": {
      "source": "Liu,Li",
      "target": "Liu,Li"
    }
  }, {
    "data": {
      "source": "Liu,Li",
      "target": "Runger,George"
    }
  }, {
    "data": {
      "source": "Liu,Wei",
      "target": "Liu,Wei"
    }
  }, {
    "data": {
      "source": "Liu,Yan",
      "target": "Liu,Yan"
    }
  }, {
    "data": {
      "source": "Liu,Yongming",
      "target": "Liu,Yongming"
    }
  }, {
    "data": {
      "source": "Lockard,Joe",
      "target": "Lockard,Joe"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Abbas,James"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Amresh,Ashish"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Branaghan,Russell Joseph"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Buneo,Christopher Alan"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Chasey,Allan Dee"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Chong,Oswald Wk"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Cooke,Nancy Jaworski"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Craig,Scotty Dale"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Gray,Robert D"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Helms Tillery,Stephen I"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Hogle,Lisa Gibson"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Honeycutt,Claire"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Kleim,Jeffrey Allan"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Lee,Hyunglae"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Lockhart,Thurmon Eddy"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Roscoe,Rod David"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Santello,Marco"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Tang,Pingbo"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Wu,Bing"
    }
  }, {
    "data": {
      "source": "Lockhart,Thurmon Eddy",
      "target": "Zhang,Wenlong"
    }
  }, {
    "data": {
      "source": "Lodato,Mark",
      "target": "Lodato,Mark"
    }
  }, {
    "data": {
      "source": "London,Jeremi Shavonda",
      "target": "London,Jeremi Shavonda"
    }
  }, {
    "data": {
      "source": "Loonstra,Jacqueline",
      "target": "Ball,Deborah"
    }
  }, {
    "data": {
      "source": "Loonstra,Jacqueline",
      "target": "Loonstra,Jacqueline"
    }
  }, {
    "data": {
      "source": "Lopez,Juan Manuel",
      "target": "Lopez,Juan Manuel"
    }
  }, {
    "data": {
      "source": "Lou,Yingyan",
      "target": "Lou,Yingyan"
    }
  }, {
    "data": {
      "source": "Lou,Yingyan",
      "target": "Zhou,Xuesong"
    }
  }, {
    "data": {
      "source": "Loyd,Kerrie Anne",
      "target": "Loyd,Kerrie Anne"
    }
  }, {
    "data": {
      "source": "Lue,Lih-Fen",
      "target": "Lue,Lih-Fen"
    }
  }, {
    "data": {
      "source": "Lue,Lih-Fen",
      "target": "Walker,Douglas Gordon"
    }
  }, {
    "data": {
      "source": "Lunardini,Cecilia",
      "target": "Lunardini,Cecilia"
    }
  }, {
    "data": {
      "source": "Luo,Xin",
      "target": "Dorman,Michael F"
    }
  }, {
    "data": {
      "source": "Luo,Xin",
      "target": "Luo,Xin"
    }
  }, {
    "data": {
      "source": "Luo,Xin",
      "target": "Yost,William A"
    }
  }, {
    "data": {
      "source": "Lyles,Annmarie Abu-Judom",
      "target": "Amresh,Ashish"
    }
  }, {
    "data": {
      "source": "Lyles,Annmarie Abu-Judom",
      "target": "Huberty,Jennifer Lynne"
    }
  }, {
    "data": {
      "source": "Lyles,Annmarie Abu-Judom",
      "target": "Lee,Rebecca Elizabeth"
    }
  }, {
    "data": {
      "source": "Lyles,Annmarie Abu-Judom",
      "target": "Lyles,Annmarie Abu-Judom"
    }
  }, {
    "data": {
      "source": "Lyles,Annmarie Abu-Judom",
      "target": "Mcclain,Darya Denise"
    }
  }, {
    "data": {
      "source": "Lyles,Annmarie Abu-Judom",
      "target": "Todd,Michael Wayne"
    }
  }, {
    "data": {
      "source": "Lynch,Heidi Marie",
      "target": "Dickinson,Jared M"
    }
  }, {
    "data": {
      "source": "Lynch,Heidi Marie",
      "target": "Johnston,Carol S"
    }
  }, {
    "data": {
      "source": "Lynch,Heidi Marie",
      "target": "Wharton,Christopher Mack"
    }
  }, {
    "data": {
      "source": "Lyons,James Richard",
      "target": "Bose,Maitrayee"
    }
  }, {
    "data": {
      "source": "Lyons,James Richard",
      "target": "Lyons,James Richard"
    }
  }, {
    "data": {
      "source": "Ma,Duo",
      "target": "Green,Alexander Arthur"
    }
  }, {
    "data": {
      "source": "Macfadyen,Joshua",
      "target": "Macfadyen,Joshua"
    }
  }, {
    "data": {
      "source": "Maciejewski,Ross",
      "target": "Aggarwal,Rimjhim M"
    }
  }, {
    "data": {
      "source": "Maciejewski,Ross",
      "target": "Cooke,Nancy Jaworski"
    }
  }, {
    "data": {
      "source": "Maciejewski,Ross",
      "target": "Gumel,Abba B"
    }
  }, {
    "data": {
      "source": "Maciejewski,Ross",
      "target": "Maciejewski,Ross"
    }
  }, {
    "data": {
      "source": "Maciejewski,Ross",
      "target": "Mascaro,Giuseppe"
    }
  }, {
    "data": {
      "source": "Maciejewski,Ross",
      "target": "Sarjoughian,Hessam Seyed"
    }
  }, {
    "data": {
      "source": "Maciejewski,Ross",
      "target": "White,Dave Douglas"
    }
  }, {
    "data": {
      "source": "Maciejewski,Ross",
      "target": "Winterton,Jamie"
    }
  }, {
    "data": {
      "source": "Mada Kannan,Arunachala Nadar",
      "target": "Hsu,Keng Hao"
    }
  }, {
    "data": {
      "source": "Mada Kannan,Arunachala Nadar",
      "target": "Mada Kannan,Arunachala Nadar"
    }
  }, {
    "data": {
      "source": "Mada Kannan,Arunachala Nadar",
      "target": "Mayyas,Abdel Ra'Ouf Turki"
    }
  }, {
    "data": {
      "source": "Mada Kannan,Arunachala Nadar",
      "target": "Razdan,Anshuman"
    }
  }, {
    "data": {
      "source": "Madison,Paige Ann",
      "target": "Maienschein,Jane Ann"
    }
  }, {
    "data": {
      "source": "Magee,Dewey Mitchell",
      "target": "Labaer,Joshua"
    }
  }, {
    "data": {
      "source": "Magee,Dewey Mitchell",
      "target": "Magee,Dewey Mitchell"
    }
  }, {
    "data": {
      "source": "Maguire,Edward",
      "target": "Maguire,Edward"
    }
  }, {
    "data": {
      "source": "Mahalov,Alex",
      "target": "Li,Jialun"
    }
  }, {
    "data": {
      "source": "Mahalov,Alex",
      "target": "Mahalov,Alex"
    }
  }, {
    "data": {
      "source": "Mahanti,Prasun",
      "target": "Mahanti,Prasun"
    }
  }, {
    "data": {
      "source": "Mahanti,Prasun",
      "target": "Robinson,Mark Southwick"
    }
  }, {
    "data": {
      "source": "Mahanti,Prasun",
      "target": "Sato,Hiroyuki"
    }
  }, {
    "data": {
      "source": "Mai,Chuhong",
      "target": "Desch,Steven"
    }
  }, {
    "data": {
      "source": "Maienschein,Jane Ann",
      "target": "Maienschein,Jane Ann"
    }
  }, {
    "data": {
      "source": "Maley,Carlo Casbier",
      "target": "Aktipis,C Athena"
    }
  }, {
    "data": {
      "source": "Maley,Carlo Casbier",
      "target": "Boddy,Amy Marie"
    }
  }, {
    "data": {
      "source": "Maley,Carlo Casbier",
      "target": "Davies,Paul"
    }
  }, {
    "data": {
      "source": "Maley,Carlo Casbier",
      "target": "Davies,Pauline A"
    }
  }, {
    "data": {
      "source": "Maley,Carlo Casbier",
      "target": "Dubois,Raymond"
    }
  }, {
    "data": {
      "source": "Maley,Carlo Casbier",
      "target": "Maley,Carlo Casbier"
    }
  }, {
    "data": {
      "source": "Malhotra,Sangeeta",
      "target": "Malhotra,Sangeeta"
    }
  }, {
    "data": {
      "source": "Malhotra,Sangeeta",
      "target": "Rhoads,James Ely"
    }
  }, {
    "data": {
      "source": "Mamlouk,Michael Sobhi",
      "target": "Kaloush,Kamil Elias"
    }
  }, {
    "data": {
      "source": "Mamlouk,Michael Sobhi",
      "target": "Mamlouk,Michael Sobhi"
    }
  }, {
    "data": {
      "source": "Mamlouk,Michael Sobhi",
      "target": "Mobasher,Barzin"
    }
  }, {
    "data": {
      "source": "Mamlouk,Michael Sobhi",
      "target": "Neithalath,Narayanan"
    }
  }, {
    "data": {
      "source": "Mamlouk,Michael Sobhi",
      "target": "Underwood,Benjamin Shane"
    }
  }, {
    "data": {
      "source": "Mamlouk,Michael Sobhi",
      "target": "Zapata,Claudia E"
    }
  }, {
    "data": {
      "source": "Mandarino,Lawrence",
      "target": "Mandarino,Lawrence"
    }
  }, {
    "data": {
      "source": "Mangone,Marco",
      "target": "Mangone,Marco"
    }
  }, {
    "data": {
      "source": "Mangone,Marco",
      "target": "Rawls,Jeffery Alan"
    }
  }, {
    "data": {
      "source": "Manninen,Bertha Alvarez",
      "target": "Manninen,Bertha Alvarez"
    }
  }, {
    "data": {
      "source": "Manninen,Bertha Alvarez",
      "target": "Marshall,Pamela Ann"
    }
  }, {
    "data": {
      "source": "Mantie,Roger Allan",
      "target": "Mantie,Roger Allan"
    }
  }, {
    "data": {
      "source": "Manuel-Navarrete,David",
      "target": "Manuel-Navarrete,David"
    }
  }, {
    "data": {
      "source": "Marchant,Gary E",
      "target": "Frow,Emma Khamis"
    }
  }, {
    "data": {
      "source": "Marchant,Gary E",
      "target": "Hurlbut,James Benjamin"
    }
  }, {
    "data": {
      "source": "Marchant,Gary E",
      "target": "Marchant,Gary E"
    }
  }, {
    "data": {
      "source": "Marchant,Gary E",
      "target": "Runger,George"
    }
  }, {
    "data": {
      "source": "Marchant,Gary E",
      "target": "Stevens,Yvonne Angelica"
    }
  }, {
    "data": {
      "source": "Marcus,Andrew",
      "target": "Marcus,Andrew"
    }
  }, {
    "data": {
      "source": "Marean,Curtis William",
      "target": "Marean,Curtis William"
    }
  }, {
    "data": {
      "source": "Marek,Karen Sue",
      "target": "Marek,Karen Sue"
    }
  }, {
    "data": {
      "source": "Marley,Tennille Larzelere",
      "target": "Marley,Tennille Larzelere"
    }
  }, {
    "data": {
      "source": "Marsh,Josephine Peyton",
      "target": "Fischman,Gustavo Enrique"
    }
  }, {
    "data": {
      "source": "Marsh,Josephine Peyton",
      "target": "Marsh,Josephine Peyton"
    }
  }, {
    "data": {
      "source": "Marsh,Paul Colburn",
      "target": "Marsh,Paul Colburn"
    }
  }, {
    "data": {
      "source": "Marshall,Pamela Ann",
      "target": "Broatch,Jennifer Ellen"
    }
  }, {
    "data": {
      "source": "Marshall,Pamela Ann",
      "target": "Cahill,Thomas Michael"
    }
  }, {
    "data": {
      "source": "Marshall,Pamela Ann",
      "target": "Foltz-Sweat,Jennifer Lynn"
    }
  }, {
    "data": {
      "source": "Marshall,Pamela Ann",
      "target": "Marshall,Pamela Ann"
    }
  }, {
    "data": {
      "source": "Marshall,Pamela Ann",
      "target": "Sweat,Ken Gunter"
    }
  }, {
    "data": {
      "source": "Marsiglia,Flavio",
      "target": "Ayon,Cecilia"
    }
  }, {
    "data": {
      "source": "Marsiglia,Flavio",
      "target": "Bradley,Robert"
    }
  }, {
    "data": {
      "source": "Marsiglia,Flavio",
      "target": "Ferguson-Colvin,Kristin Michel"
    }
  }, {
    "data": {
      "source": "Marsiglia,Flavio",
      "target": "Keller,Colleen Sue"
    }
  }, {
    "data": {
      "source": "Marsiglia,Flavio",
      "target": "Kulis,Stephen Stanley"
    }
  }, {
    "data": {
      "source": "Marsiglia,Flavio",
      "target": "Marsiglia,Flavio"
    }
  }, {
    "data": {
      "source": "Marsiglia,Flavio",
      "target": "Shaibi,Gabriel"
    }
  }, {
    "data": {
      "source": "Marsiglia,Flavio",
      "target": "Wutich,Amber Elisabeth Yoder"
    }
  }, {
    "data": {
      "source": "Marsteller,Sara Jane",
      "target": "Knudson,Kelly"
    }
  }, {
    "data": {
      "source": "Martin,Carol Lynn",
      "target": "Delay,Dawn Ann"
    }
  }, {
    "data": {
      "source": "Martin,Carol Lynn",
      "target": "Hanish,Laura D"
    }
  }, {
    "data": {
      "source": "Martin,Carol Lynn",
      "target": "Martin,Carol Lynn"
    }
  }, {
    "data": {
      "source": "Martinez,Airin D",
      "target": "Martinez,Airin D"
    }
  }, {
    "data": {
      "source": "Martinez,Airin D",
      "target": "Ohri-Vachaspati,Punam"
    }
  }, {
    "data": {
      "source": "Martinez,David",
      "target": "Hettel,Jacqueline Marie"
    }
  }, {
    "data": {
      "source": "Martinez,David",
      "target": "Martin,Joyce Ann"
    }
  }, {
    "data": {
      "source": "Martinez,David",
      "target": "Martinez,David"
    }
  }, {
    "data": {
      "source": "Marvi,Hamidreza",
      "target": "Berman,Spring Melody"
    }
  }, {
    "data": {
      "source": "Marvi,Hamidreza",
      "target": "Emady,Heather Nicole"
    }
  }, {
    "data": {
      "source": "Marvi,Hamidreza",
      "target": "Kodibagkar,Vikram D"
    }
  }, {
    "data": {
      "source": "Marvi,Hamidreza",
      "target": "Marvi,Hamidreza"
    }
  }, {
    "data": {
      "source": "Mascaro,Giuseppe",
      "target": "Chester,Mikhail"
    }
  }, {
    "data": {
      "source": "Mascaro,Giuseppe",
      "target": "Hondula,David Michael"
    }
  }, {
    "data": {
      "source": "Mascaro,Giuseppe",
      "target": "Maciejewski,Ross"
    }
  }, {
    "data": {
      "source": "Mascaro,Giuseppe",
      "target": "Mascaro,Giuseppe"
    }
  }, {
    "data": {
      "source": "Massia,Stephen Paul",
      "target": "Massia,Stephen Paul"
    }
  }, {
    "data": {
      "source": "Massia,Stephen Paul",
      "target": "Pizziconi,Vincent B"
    }
  }, {
    "data": {
      "source": "Massimo,Nicholas Christopher",
      "target": "Collins,James"
    }
  }, {
    "data": {
      "source": "Mastroeni,Diego Fernando",
      "target": "Brafman,David Adam"
    }
  }, {
    "data": {
      "source": "Mastroeni,Diego Fernando",
      "target": "Coleman,Paul David"
    }
  }, {
    "data": {
      "source": "Mastroeni,Diego Fernando",
      "target": "Mastroeni,Diego Fernando"
    }
  }, {
    "data": {
      "source": "Mastroeni,Diego Fernando",
      "target": "Oddo,Salvatore"
    }
  }, {
    "data": {
      "source": "Mathur,Sarup Rani",
      "target": "Clark,Heather Marie Griller"
    }
  }, {
    "data": {
      "source": "Mathur,Sarup Rani",
      "target": "Mathur,Sarup Rani"
    }
  }, {
    "data": {
      "source": "Matyushov,Dmitry V",
      "target": "Matyushov,Dmitry V"
    }
  }, {
    "data": {
      "source": "Maupin,Jonathan Nathaniel",
      "target": "Maupin,Jonathan Nathaniel"
    }
  }, {
    "data": {
      "source": "Mauricio,Anne Marie",
      "target": "Mauricio,Anne Marie"
    }
  }, {
    "data": {
      "source": "Mauskopf,Philip",
      "target": "Groppi,Christopher E"
    }
  }, {
    "data": {
      "source": "Mauskopf,Philip",
      "target": "Mauskopf,Philip"
    }
  }, {
    "data": {
      "source": "Mayes,Kristin Kay",
      "target": "Mayes,Kristin Kay"
    }
  }, {
    "data": {
      "source": "Mayes,Kristin Kay",
      "target": "Parker,Nathan Chandler"
    }
  }, {
    "data": {
      "source": "Mayes,Kristin Kay",
      "target": "Pasqualetti,Martin J"
    }
  }, {
    "data": {
      "source": "Mayes,Kristin Kay",
      "target": "Qiu,Yueming"
    }
  }, {
    "data": {
      "source": "Maynard,Andrew",
      "target": "Bowman,Diana Megan"
    }
  }, {
    "data": {
      "source": "Maynard,Andrew",
      "target": "Farooque,Mahmud Ali"
    }
  }, {
    "data": {
      "source": "Maynard,Andrew",
      "target": "Maynard,Andrew"
    }
  }, {
    "data": {
      "source": "Maynard,Andrew",
      "target": "Polygerinos,Panagiotis"
    }
  }, {
    "data": {
      "source": "Maynard,Andrew",
      "target": "Ross,Heather Maura"
    }
  }, {
    "data": {
      "source": "Maynard,Andrew",
      "target": "Selin,Cynthia Lea"
    }
  }, {
    "data": {
      "source": "Mayyas,Abdel Ra'Ouf Turki",
      "target": "Mayyas,Abdel Ra'Ouf Turki"
    }
  }, {
    "data": {
      "source": "Mccartney,Martha Rogers",
      "target": "Mccartney,Martha Rogers"
    }
  }, {
    "data": {
      "source": "Mcclure,Kimberlee",
      "target": "Mcclure,Kimberlee"
    }
  }, {
    "data": {
      "source": "Mcclure,Samuel Manley",
      "target": "Blais,Christopher Raymond"
    }
  }, {
    "data": {
      "source": "Mcclure,Samuel Manley",
      "target": "Brewer Jr,Gene"
    }
  }, {
    "data": {
      "source": "Mcclure,Samuel Manley",
      "target": "Mcclure,Kimberlee"
    }
  }, {
    "data": {
      "source": "Mcclure,Samuel Manley",
      "target": "Mcclure,Samuel Manley"
    }
  }, {
    "data": {
      "source": "Mccullough,Jeffrey Carroll",
      "target": "Mccullough,Jeffrey Carroll"
    }
  }, {
    "data": {
      "source": "Mccullough,Jeffrey Carroll",
      "target": "Riley,William"
    }
  }, {
    "data": {
      "source": "Mccullough,Kelly N",
      "target": "Mccullough,Kelly N"
    }
  }, {
    "data": {
      "source": "Mcfadden,Erica Skogebo",
      "target": "Barab,Sasha A."
    }
  }, {
    "data": {
      "source": "Mcfadden,Erica Skogebo",
      "target": "Gilger,Kristin G"
    }
  }, {
    "data": {
      "source": "Mcfadden,Erica Skogebo",
      "target": "Matera,Frances Rose"
    }
  }, {
    "data": {
      "source": "Mcfadden,Erica Skogebo",
      "target": "Mcfadden,Erica Skogebo"
    }
  }, {
    "data": {
      "source": "Mcfadden,Erica Skogebo",
      "target": "Wolowiec-Fisher,Kimberly Chris"
    }
  }, {
    "data": {
      "source": "Mcgowen,John",
      "target": "Dempster,Thomas A"
    }
  }, {
    "data": {
      "source": "Mcgowen,John",
      "target": "Mcgowen,John"
    }
  }, {
    "data": {
      "source": "Mcgraw,Kevin J",
      "target": "Mcgraw,Kevin J"
    }
  }, {
    "data": {
      "source": "Mcgregor,Joan Lucy",
      "target": "Mcgregor,Joan Lucy"
    }
  }, {
    "data": {
      "source": "Mcgurty,Iveta Silova",
      "target": "Dorn,Sherman J"
    }
  }, {
    "data": {
      "source": "Mcgurty,Iveta Silova",
      "target": "Mcgurty,Iveta Silova"
    }
  }, {
    "data": {
      "source": "Mcintyre,Scott Erin",
      "target": "Bansal,Srividya Kona"
    }
  }, {
    "data": {
      "source": "Mcintyre,Scott Erin",
      "target": "Mcintyre,Scott Erin"
    }
  }, {
    "data": {
      "source": "Mckenna,Ann Frances",
      "target": "Bekki,Jennifer Mcneill"
    }
  }, {
    "data": {
      "source": "Mckenna,Ann Frances",
      "target": "Brunhaver,Samantha Ruth"
    }
  }, {
    "data": {
      "source": "Mckenna,Ann Frances",
      "target": "Carberry,Adam Robert"
    }
  }, {
    "data": {
      "source": "Mckenna,Ann Frances",
      "target": "Collofello,James Samuel"
    }
  }, {
    "data": {
      "source": "Mckenna,Ann Frances",
      "target": "London,Jeremi Shavonda"
    }
  }, {
    "data": {
      "source": "Mckenna,Ann Frances",
      "target": "Mckenna,Ann Frances"
    }
  }, {
    "data": {
      "source": "Mcnamara,Danielle S.",
      "target": "Duran,Nicholas"
    }
  }, {
    "data": {
      "source": "Mcnamara,Danielle S.",
      "target": "Mcnamara,Danielle S."
    }
  }, {
    "data": {
      "source": "Meier,Madeline Hogan",
      "target": "Chassin,Laurie"
    }
  }, {
    "data": {
      "source": "Meier,Madeline Hogan",
      "target": "Edwards,Michael C"
    }
  }, {
    "data": {
      "source": "Meier,Madeline Hogan",
      "target": "Meier,Madeline Hogan"
    }
  }, {
    "data": {
      "source": "Meier,Madeline Hogan",
      "target": "Pardini,Dustin Andrew"
    }
  }, {
    "data": {
      "source": "Meldrum,Deirdre Ruth",
      "target": "Meldrum,Deirdre Ruth"
    }
  }, {
    "data": {
      "source": "Meltzer,David E",
      "target": "Meltzer,David E"
    }
  }, {
    "data": {
      "source": "Menary,Kyle Robert",
      "target": "Corbin,William Robert"
    }
  }, {
    "data": {
      "source": "Menary,Kyle Robert",
      "target": "Doane,Leah D."
    }
  }, {
    "data": {
      "source": "Menary,Kyle Robert",
      "target": "Menary,Kyle Robert"
    }
  }, {
    "data": {
      "source": "Messing,Jill Theresa",
      "target": "Androff Jr,David Kime"
    }
  }, {
    "data": {
      "source": "Messing,Jill Theresa",
      "target": "Messing,Jill Theresa"
    }
  }, {
    "data": {
      "source": "Meyer,Heather Mary",
      "target": "Meyer,Heather Mary"
    }
  }, {
    "data": {
      "source": "Meyers,Travis John",
      "target": "Wright,Kevin A"
    }
  }, {
    "data": {
      "source": "Mickelson,Kristin",
      "target": "Mickelson,Kristin"
    }
  }, {
    "data": {
      "source": "Middel,Ariane Christine",
      "target": "Maciejewski,Ross"
    }
  }, {
    "data": {
      "source": "Middel,Ariane Christine",
      "target": "Middel,Ariane Christine"
    }
  }, {
    "data": {
      "source": "Mignolet,Marc Paul",
      "target": "Mignolet,Marc Paul"
    }
  }, {
    "data": {
      "source": "Mikellides,Pavlos George",
      "target": "Mikellides,Pavlos George"
    }
  }, {
    "data": {
      "source": "Milkoreit,Manjana",
      "target": "Finn,Edward Frederick"
    }
  }, {
    "data": {
      "source": "Milkoreit,Manjana",
      "target": "Milkoreit,Manjana"
    }
  }, {
    "data": {
      "source": "Milkoreit,Manjana",
      "target": "Miller,Clark Anson"
    }
  }, {
    "data": {
      "source": "Milkoreit,Manjana",
      "target": "Richter,Jennifer"
    }
  }, {
    "data": {
      "source": "Milkoreit,Manjana",
      "target": "Wylie,Ruth"
    }
  }, {
    "data": {
      "source": "Miller,Cindy Faith",
      "target": "Miller,Cindy Faith"
    }
  }, {
    "data": {
      "source": "Miller,Cindy Faith",
      "target": "Reisslein,Martin"
    }
  }, {
    "data": {
      "source": "Miller,Clark Anson",
      "target": "Bennett,Gaymon L"
    }
  }, {
    "data": {
      "source": "Miller,Clark Anson",
      "target": "Hale,Anne Elizabeth"
    }
  }, {
    "data": {
      "source": "Miller,Clark Anson",
      "target": "Hurlbut,James Benjamin"
    }
  }, {
    "data": {
      "source": "Miller,Clark Anson",
      "target": "Labelle,Jeffrey T"
    }
  }, {
    "data": {
      "source": "Miller,Clark Anson",
      "target": "Maciejewski,Ross"
    }
  }, {
    "data": {
      "source": "Miller,Clark Anson",
      "target": "Miller,Clark Anson"
    }
  }, {
    "data": {
      "source": "Miller,Clark Anson",
      "target": "Ross,Heather Maura"
    }
  }, {
    "data": {
      "source": "Miller,Clark Anson",
      "target": "Wernimont,Jacqueline"
    }
  }, {
    "data": {
      "source": "Miller,Clark Anson",
      "target": "Winterton,Jamie"
    }
  }, {
    "data": {
      "source": "Miller,Clark Anson",
      "target": "Woodbury,Neal Walter"
    }
  }, {
    "data": {
      "source": "Miller,Megan Marie",
      "target": "Shirzaei,Manoochehr"
    }
  }, {
    "data": {
      "source": "Mills,Jeremy H",
      "target": "Mills,Jeremy H"
    }
  }, {
    "data": {
      "source": "Milner,Fabio Augusto",
      "target": "Boerner,Rochus"
    }
  }, {
    "data": {
      "source": "Milner,Fabio Augusto",
      "target": "Boney,Jennifer Brooke"
    }
  }, {
    "data": {
      "source": "Milner,Fabio Augusto",
      "target": "Horan,John Joseph"
    }
  }, {
    "data": {
      "source": "Milner,Fabio Augusto",
      "target": "Milner,Fabio Augusto"
    }
  }, {
    "data": {
      "source": "Minteer,Ben A",
      "target": "Minteer,Ben A"
    }
  }, {
    "data": {
      "source": "Mirchandani,Pitu B.",
      "target": "Chester,Mikhail"
    }
  }, {
    "data": {
      "source": "Mirchandani,Pitu B.",
      "target": "Fainekos,Georgios E."
    }
  }, {
    "data": {
      "source": "Mirchandani,Pitu B.",
      "target": "Li,Baoxin"
    }
  }, {
    "data": {
      "source": "Mirchandani,Pitu B.",
      "target": "Lou,Yingyan"
    }
  }, {
    "data": {
      "source": "Mirchandani,Pitu B.",
      "target": "Maciejewski,Ross"
    }
  }, {
    "data": {
      "source": "Mirchandani,Pitu B.",
      "target": "Mirchandani,Pitu B."
    }
  }, {
    "data": {
      "source": "Mirchandani,Pitu B.",
      "target": "Pan,Rong"
    }
  }, {
    "data": {
      "source": "Mirchandani,Pitu B.",
      "target": "Pavlic,Theodore Paul"
    }
  }, {
    "data": {
      "source": "Mirchandani,Pitu B.",
      "target": "Sefair,Jorge Alberto"
    }
  }, {
    "data": {
      "source": "Mirchandani,Pitu B.",
      "target": "Wu,Teresa"
    }
  }, {
    "data": {
      "source": "Mirchandani,Pitu B.",
      "target": "Zhou,Xuesong"
    }
  }, {
    "data": {
      "source": "Misra,Rajeev",
      "target": "Misra,Rajeev"
    }
  }, {
    "data": {
      "source": "Mittelmann,Hans D",
      "target": "Mittelmann,Hans D"
    }
  }, {
    "data": {
      "source": "Mobasher,Barzin",
      "target": "Abbaszadegan,Morteza"
    }
  }, {
    "data": {
      "source": "Mobasher,Barzin",
      "target": "Mignolet,Marc Paul"
    }
  }, {
    "data": {
      "source": "Mobasher,Barzin",
      "target": "Mobasher,Barzin"
    }
  }, {
    "data": {
      "source": "Mobasher,Barzin",
      "target": "Neithalath,Narayanan"
    }
  }, {
    "data": {
      "source": "Monkiewicz,Jacqueline A",
      "target": "Bowman,Judd David"
    }
  }, {
    "data": {
      "source": "Montgomery,Douglas C",
      "target": "Montgomery,Douglas C"
    }
  }, {
    "data": {
      "source": "Moody,Eric Kellan",
      "target": "Elser,James Joseph"
    }
  }, {
    "data": {
      "source": "Moody,Eric Kellan",
      "target": "Sabo,John L"
    }
  }, {
    "data": {
      "source": "Mook,Laurie Ingrid",
      "target": "Mook,Laurie Ingrid"
    }
  }, {
    "data": {
      "source": "Mook,Laurie Ingrid",
      "target": "Schugurensky,Daniel"
    }
  }, {
    "data": {
      "source": "Moon,Barry Robert",
      "target": "Marinelli,Donald"
    }
  }, {
    "data": {
      "source": "Moon,Barry Robert",
      "target": "Moon,Barry Robert"
    }
  }, {
    "data": {
      "source": "Moon,Barry Robert",
      "target": "Paine,Garth Crispan"
    }
  }, {
    "data": {
      "source": "Moon,Penelope Adams",
      "target": "Moon,Penelope Adams"
    }
  }, {
    "data": {
      "source": "Moon,Penelope Adams",
      "target": "Navarro-Mcelhaney,Kristine"
    }
  }, {
    "data": {
      "source": "Moore,Gary",
      "target": "Moore,Gary"
    }
  }, {
    "data": {
      "source": "Moore,Marianne Susan",
      "target": "Moore,Marianne Susan"
    }
  }, {
    "data": {
      "source": "Morales,Julio",
      "target": "Feller,Andrea Leigh"
    }
  }, {
    "data": {
      "source": "Morales,Julio",
      "target": "Morales,Julio"
    }
  }, {
    "data": {
      "source": "Moreno,Karen Inez",
      "target": "Swan,Pamela D"
    }
  }, {
    "data": {
      "source": "Morgan,Thomas J. H.",
      "target": "Boyd,Robert"
    }
  }, {
    "data": {
      "source": "Morgan,Thomas J. H.",
      "target": "Morgan,Thomas J. H."
    }
  }, {
    "data": {
      "source": "Morris,Brenda C",
      "target": "Morris,Brenda C"
    }
  }, {
    "data": {
      "source": "Morris,Traci L",
      "target": "Morris,Traci L"
    }
  }, {
    "data": {
      "source": "Moses,Karen S",
      "target": "Moses,Karen S"
    }
  }, {
    "data": {
      "source": "Mosley,Lisa Elaine",
      "target": "Mosley,Lisa Elaine"
    }
  }, {
    "data": {
      "source": "Mossberger,Karen",
      "target": "Mossberger,Karen"
    }
  }, {
    "data": {
      "source": "Moulton,Ian Frederick",
      "target": "Lafford,Barbara A"
    }
  }, {
    "data": {
      "source": "Moulton,Ian Frederick",
      "target": "Moulton,Ian Frederick"
    }
  }, {
    "data": {
      "source": "Moulton,Ian Frederick",
      "target": "Wermers,James Edward"
    }
  }, {
    "data": {
      "source": "Mu,Bin",
      "target": "Jiao,Yang"
    }
  }, {
    "data": {
      "source": "Mu,Bin",
      "target": "Lackner,Klaus S."
    }
  }, {
    "data": {
      "source": "Mu,Bin",
      "target": "Liu,Jingyue"
    }
  }, {
    "data": {
      "source": "Mu,Bin",
      "target": "Liu,Yongming"
    }
  }, {
    "data": {
      "source": "Mu,Bin",
      "target": "Mu,Bin"
    }
  }, {
    "data": {
      "source": "Mubayi,Anuj",
      "target": "Castillo-Chavez,Carlos"
    }
  }, {
    "data": {
      "source": "Mubayi,Anuj",
      "target": "Mubayi,Anuj"
    }
  }, {
    "data": {
      "source": "Mullane,Sarah Louise",
      "target": "Buman,Matthew P"
    }
  }, {
    "data": {
      "source": "Muthuswamy,Jitendran",
      "target": "Muthuswamy,Jitendran"
    }
  }, {
    "data": {
      "source": "Muthuswamy,Jitendran",
      "target": "Towe,Bruce C"
    }
  }, {
    "data": {
      "source": "Myint,Soe W",
      "target": "Chhetri,Netra B"
    }
  }, {
    "data": {
      "source": "Myint,Soe W",
      "target": "Myint,Soe W"
    }
  }, {
    "data": {
      "source": "Myint,Soe W",
      "target": "Wang,Zhihua"
    }
  }, {
    "data": {
      "source": "Nahzi,Fron",
      "target": "Fellmeth,Aaron Xavier"
    }
  }, {
    "data": {
      "source": "Nahzi,Fron",
      "target": "Fromholz,Julia M"
    }
  }, {
    "data": {
      "source": "Nahzi,Fron",
      "target": "Herche,Wesley"
    }
  }, {
    "data": {
      "source": "Nahzi,Fron",
      "target": "Hristovski,Kiril D"
    }
  }, {
    "data": {
      "source": "Nahzi,Fron",
      "target": "Larson,Rhett"
    }
  }, {
    "data": {
      "source": "Nahzi,Fron",
      "target": "Lynk,Myles V"
    }
  }, {
    "data": {
      "source": "Nahzi,Fron",
      "target": "Nahzi,Fron"
    }
  }, {
    "data": {
      "source": "Nahzi,Fron",
      "target": "Rushforth,Richard Ray"
    }
  }, {
    "data": {
      "source": "Nahzi,Fron",
      "target": "Swindell,David"
    }
  }, {
    "data": {
      "source": "Nannenga,Brent Lane",
      "target": "Nannenga,Brent Lane"
    }
  }, {
    "data": {
      "source": "Neal,Tess",
      "target": "Neal,Tess"
    }
  }, {
    "data": {
      "source": "Nedelkov,Dobrin",
      "target": "Nedelkov,Dobrin"
    }
  }, {
    "data": {
      "source": "Nedelkov,Dobrin",
      "target": "Trenchevska,Olgica"
    }
  }, {
    "data": {
      "source": "Nedelkov,Dobrin",
      "target": "Wallstrom,Garrick L"
    }
  }, {
    "data": {
      "source": "Neisewander,Janet Leigh",
      "target": "Neisewander,Janet Leigh"
    }
  }, {
    "data": {
      "source": "Neithalath,Narayanan",
      "target": "Chawla,Nikhilesh"
    }
  }, {
    "data": {
      "source": "Neithalath,Narayanan",
      "target": "Chester,Mikhail"
    }
  }, {
    "data": {
      "source": "Neithalath,Narayanan",
      "target": "Das,Sumanta"
    }
  }, {
    "data": {
      "source": "Neithalath,Narayanan",
      "target": "Ganesh,Tirupalavanam Gopal"
    }
  }, {
    "data": {
      "source": "Neithalath,Narayanan",
      "target": "Liu,Yongming"
    }
  }, {
    "data": {
      "source": "Neithalath,Narayanan",
      "target": "Marzke,Robert F"
    }
  }, {
    "data": {
      "source": "Neithalath,Narayanan",
      "target": "Mobasher,Barzin"
    }
  }, {
    "data": {
      "source": "Neithalath,Narayanan",
      "target": "Neithalath,Narayanan"
    }
  }, {
    "data": {
      "source": "Neithalath,Narayanan",
      "target": "Rajan,Subramaniam Dharma"
    }
  }, {
    "data": {
      "source": "Nelson,Ben A",
      "target": "Nelson,Ben A"
    }
  }, {
    "data": {
      "source": "Nelson,Ben A",
      "target": "Redman,Charles L"
    }
  }, {
    "data": {
      "source": "Nelson,Brian Carl",
      "target": "Bowman,Catherine"
    }
  }, {
    "data": {
      "source": "Nelson,Brian Carl",
      "target": "Bowman,Judd David"
    }
  }, {
    "data": {
      "source": "Nelson,Brian Carl",
      "target": "Jordan,Michelle E"
    }
  }, {
    "data": {
      "source": "Nelson,Brian Carl",
      "target": "Nelson,Brian Carl"
    }
  }, {
    "data": {
      "source": "Nelson,Elizabeth Marie",
      "target": "Nelson,Elizabeth Marie"
    }
  }, {
    "data": {
      "source": "Nelson,Glen R",
      "target": "Harrell,Susan Elizabeth"
    }
  }, {
    "data": {
      "source": "Nelson,Glen R",
      "target": "Lamb,Gerri"
    }
  }, {
    "data": {
      "source": "Nelson,Glen R",
      "target": "Nelson,Glen R"
    }
  }, {
    "data": {
      "source": "Nelson,Glen R",
      "target": "Saewert,Karen J"
    }
  }, {
    "data": {
      "source": "Nelson,Glen R",
      "target": "Shaw,Lesley Manson"
    }
  }, {
    "data": {
      "source": "Nemanich,Robert John",
      "target": "Alarcon,Ricardo O"
    }
  }, {
    "data": {
      "source": "Nemanich,Robert John",
      "target": "Goodnick,Stephen Marshall"
    }
  }, {
    "data": {
      "source": "Nemanich,Robert John",
      "target": "Kouvetakis,John"
    }
  }, {
    "data": {
      "source": "Nemanich,Robert John",
      "target": "Menendez,Jose"
    }
  }, {
    "data": {
      "source": "Nemanich,Robert John",
      "target": "Nemanich,Robert John"
    }
  }, {
    "data": {
      "source": "Nemanich,Robert John",
      "target": "Smith,David John"
    }
  }, {
    "data": {
      "source": "Nemanich,Robert John",
      "target": "Zaniewski,Anna"
    }
  }, {
    "data": {
      "source": "Nesse,Randolph Martin",
      "target": "Nesse,Randolph Martin"
    }
  }, {
    "data": {
      "source": "Neuer,Susanne",
      "target": "Neuer,Susanne"
    }
  }, {
    "data": {
      "source": "Neveu,Marc Francois Laurent",
      "target": "Desch,Steven"
    }
  }, {
    "data": {
      "source": "Neveu,Marc Francois Laurent",
      "target": "Neveu,Marc Francois Laurent"
    }
  }, {
    "data": {
      "source": "Newbern,Jason M.",
      "target": "Bimonte-Nelson,Heather"
    }
  }, {
    "data": {
      "source": "Newbern,Jason M.",
      "target": "Newbern,Jason M."
    }
  }, {
    "data": {
      "source": "Newbern,Jason M.",
      "target": "Sanabria,Federico"
    }
  }, {
    "data": {
      "source": "Newfeld,Stuart J",
      "target": "Francisco,Wilson Alex"
    }
  }, {
    "data": {
      "source": "Newfeld,Stuart J",
      "target": "Labaer,Joshua"
    }
  }, {
    "data": {
      "source": "Newfeld,Stuart J",
      "target": "Newfeld,Stuart J"
    }
  }, {
    "data": {
      "source": "Newfeld,Stuart J",
      "target": "Rutowski,Ronald L"
    }
  }, {
    "data": {
      "source": "Newman,Nathan",
      "target": "Newman,Nathan"
    }
  }, {
    "data": {
      "source": "Nickerson,Cheryl",
      "target": "Barrila,Jennifer A"
    }
  }, {
    "data": {
      "source": "Nickerson,Cheryl",
      "target": "Lake,Douglas Fletcher"
    }
  }, {
    "data": {
      "source": "Nickerson,Cheryl",
      "target": "Nickerson,Cheryl"
    }
  }, {
    "data": {
      "source": "Nickerson,Cheryl",
      "target": "Stafford,Phillip"
    }
  }, {
    "data": {
      "source": "Nielsen,Ann Walker",
      "target": "Nielsen,Ann Walker"
    }
  }, {
    "data": {
      "source": "Nielsen,David Ross",
      "target": "Nielsen,David Ross"
    }
  }, {
    "data": {
      "source": "Nieves Colon,Maria Alejandra",
      "target": "Stone,Anne C"
    }
  }, {
    "data": {
      "source": "Nikkhah,Mehdi",
      "target": "Brafman,David Adam"
    }
  }, {
    "data": {
      "source": "Nikkhah,Mehdi",
      "target": "Chae,Junseok"
    }
  }, {
    "data": {
      "source": "Nikkhah,Mehdi",
      "target": "Labaer,Joshua"
    }
  }, {
    "data": {
      "source": "Nikkhah,Mehdi",
      "target": "Nikkhah,Mehdi"
    }
  }, {
    "data": {
      "source": "Nikkhah,Mehdi",
      "target": "Park,Jin"
    }
  }, {
    "data": {
      "source": "Nikkhah,Mehdi",
      "target": "Vernon,Brent"
    }
  }, {
    "data": {
      "source": "Ning,Cun-Zheng",
      "target": "Liu,Yan"
    }
  }, {
    "data": {
      "source": "Ning,Cun-Zheng",
      "target": "Ning,Cun-Zheng"
    }
  }, {
    "data": {
      "source": "Ning,Cun-Zheng",
      "target": "Wang,Chao"
    }
  }, {
    "data": {
      "source": "Ning,Cun-Zheng",
      "target": "Yan,Hao"
    }
  }, {
    "data": {
      "source": "Nocek,Adam",
      "target": "Kuznetsov,Anastasia Stacey"
    }
  }, {
    "data": {
      "source": "Nocek,Adam",
      "target": "Nocek,Adam"
    }
  }, {
    "data": {
      "source": "Nunez,Diane E",
      "target": "Nunez,Diane E"
    }
  }, {
    "data": {
      "source": "Nyaupane,Gyan P",
      "target": "Larsen,Dale L"
    }
  }, {
    "data": {
      "source": "Nyaupane,Gyan P",
      "target": "Nyaupane,Gyan P"
    }
  }, {
    "data": {
      "source": "Nystrom,Eric Charles",
      "target": "Nystrom,Eric Charles"
    }
  }, {
    "data": {
      "source": "O'Neill Jr,Gerald Daniel",
      "target": "O'Neill Jr,Gerald Daniel"
    }
  }, {
    "data": {
      "source": "Oddo,Salvatore",
      "target": "Caccamo,Antonella"
    }
  }, {
    "data": {
      "source": "Oddo,Salvatore",
      "target": "Coleman,Paul David"
    }
  }, {
    "data": {
      "source": "Oddo,Salvatore",
      "target": "Oddo,Salvatore"
    }
  }, {
    "data": {
      "source": "Ogras,Umit Y.",
      "target": "Bliss,Daniel Wesley"
    }
  }, {
    "data": {
      "source": "Ogras,Umit Y.",
      "target": "Chakrabarti,Chaitali"
    }
  }, {
    "data": {
      "source": "Ogras,Umit Y.",
      "target": "Ogras,Umit Y."
    }
  }, {
    "data": {
      "source": "Ogras,Umit Y.",
      "target": "Ozev,Sule"
    }
  }, {
    "data": {
      "source": "Oh,Young Kyun",
      "target": "Oh,Young Kyun"
    }
  }, {
    "data": {
      "source": "Ohri-Vachaspati,Punam",
      "target": "Ohri-Vachaspati,Punam"
    }
  }, {
    "data": {
      "source": "Ohri-Vachaspati,Punam",
      "target": "Todd,Michael Wayne"
    }
  }, {
    "data": {
      "source": "Okhremtchouk,Irina Stepanovna",
      "target": "Okhremtchouk,Irina Stepanovna"
    }
  }, {
    "data": {
      "source": "Okie,Jordan",
      "target": "Okie,Jordan"
    }
  }, {
    "data": {
      "source": "Olive,Michael Foster",
      "target": "Gipson-Reichardt,Cassandra Dia"
    }
  }, {
    "data": {
      "source": "Olive,Michael Foster",
      "target": "Neisewander,Janet Leigh"
    }
  }, {
    "data": {
      "source": "Olive,Michael Foster",
      "target": "Newbern,Jason M."
    }
  }, {
    "data": {
      "source": "Olive,Michael Foster",
      "target": "Olive,Michael Foster"
    }
  }, {
    "data": {
      "source": "Olson,Larry Wood",
      "target": "Hristovski,Kiril D"
    }
  }, {
    "data": {
      "source": "Olson,Larry Wood",
      "target": "Olson,Larry Wood"
    }
  }, {
    "data": {
      "source": "Ortiz,John Bryce",
      "target": "Conrad,Cheryl Diane"
    }
  }, {
    "data": {
      "source": "Ostman,Rae Ellen Marie",
      "target": "Bennett,Ira Mccoy"
    }
  }, {
    "data": {
      "source": "Ostman,Rae Ellen Marie",
      "target": "Gutkind,Lee"
    }
  }, {
    "data": {
      "source": "Ostman,Rae Ellen Marie",
      "target": "Ostman,Rae Ellen Marie"
    }
  }, {
    "data": {
      "source": "Ostman,Rae Ellen Marie",
      "target": "Robert,Jason"
    }
  }, {
    "data": {
      "source": "Ostman,Rae Ellen Marie",
      "target": "Sarewitz,Daniel"
    }
  }, {
    "data": {
      "source": "Ostman,Rae Ellen Marie",
      "target": "Wetmore,Jameson Michael"
    }
  }, {
    "data": {
      "source": "Ostrom,Amy",
      "target": "Ostrom,Amy"
    }
  }, {
    "data": {
      "source": "Oswald,Jay",
      "target": "Liu,Yongming"
    }
  }, {
    "data": {
      "source": "Oswald,Jay",
      "target": "Oswald,Jay"
    }
  }, {
    "data": {
      "source": "Oswald,Jay",
      "target": "Peralta,Pedro D"
    }
  }, {
    "data": {
      "source": "Owaynat,Hadil Abdelrazeq",
      "target": "Ugarova,Tatiana P"
    }
  }, {
    "data": {
      "source": "Ozev,Sule",
      "target": "Blain Christen,Jennifer Mary"
    }
  }, {
    "data": {
      "source": "Ozev,Sule",
      "target": "Kitchen,Jennifer Nisha"
    }
  }, {
    "data": {
      "source": "Ozev,Sule",
      "target": "Ogras,Umit Y."
    }
  }, {
    "data": {
      "source": "Ozev,Sule",
      "target": "Ozev,Sule"
    }
  }, {
    "data": {
      "source": "Ozkan,Sefika Banu",
      "target": "Ghirlanda,Giovanna"
    }
  }, {
    "data": {
      "source": "Ozkan,Sefika Banu",
      "target": "Ozkan,Sefika Banu"
    }
  }, {
    "data": {
      "source": "Pahle,Robert",
      "target": "Mubayi,Anuj"
    }
  }, {
    "data": {
      "source": "Pahle,Robert",
      "target": "Pahle,Robert"
    }
  }, {
    "data": {
      "source": "Pahle,Robert",
      "target": "Scotch,Matthew L"
    }
  }, {
    "data": {
      "source": "Paine,Garth Crispan",
      "target": "Feisst,Sabine Maria"
    }
  }, {
    "data": {
      "source": "Paine,Garth Crispan",
      "target": "Paine,Garth Crispan"
    }
  }, {
    "data": {
      "source": "Pan,Rong",
      "target": "Chakraborty,Shayok"
    }
  }, {
    "data": {
      "source": "Pan,Rong",
      "target": "Ju,Feng"
    }
  }, {
    "data": {
      "source": "Pan,Rong",
      "target": "Kao,Ming-Hung"
    }
  }, {
    "data": {
      "source": "Pan,Rong",
      "target": "Mcdaniel,Troy Lee"
    }
  }, {
    "data": {
      "source": "Pan,Rong",
      "target": "Montgomery,Douglas C"
    }
  }, {
    "data": {
      "source": "Pan,Rong",
      "target": "Pan,Rong"
    }
  }, {
    "data": {
      "source": "Pan,Rong",
      "target": "Raupp,Gregory Bruce"
    }
  }, {
    "data": {
      "source": "Pangrazi,Connie Jo",
      "target": "Begay,Victor Harvinn"
    }
  }, {
    "data": {
      "source": "Pangrazi,Connie Jo",
      "target": "Pangrazi,Connie Jo"
    }
  }, {
    "data": {
      "source": "Panza,Kaitlyn Elizabeth",
      "target": "Dishion,Thomas"
    }
  }, {
    "data": {
      "source": "Papandreou-Suppappola,Antonia",
      "target": "Chakrabarti,Chaitali"
    }
  }, {
    "data": {
      "source": "Papandreou-Suppappola,Antonia",
      "target": "Papandreou-Suppappola,Antonia"
    }
  }, {
    "data": {
      "source": "Papotti,Paolo",
      "target": "Askin,Ronald Gene"
    }
  }, {
    "data": {
      "source": "Parazynski,Scott",
      "target": "Parazynski,Scott"
    }
  }, {
    "data": {
      "source": "Parazynski,Scott",
      "target": "Saripalli,Srikanth"
    }
  }, {
    "data": {
      "source": "Parazynski,Scott",
      "target": "Thangavelautham,Jekanthan"
    }
  }, {
    "data": {
      "source": "Pardini,Dustin Andrew",
      "target": "Pardini,Dustin Andrew"
    }
  }, {
    "data": {
      "source": "Parikh,Maulik Kirit",
      "target": "Davies,Paul"
    }
  }, {
    "data": {
      "source": "Parikh,Maulik Kirit",
      "target": "Parikh,Maulik Kirit"
    }
  }, {
    "data": {
      "source": "Park,Jin",
      "target": "Adams,James Brewster"
    }
  }, {
    "data": {
      "source": "Park,Jin",
      "target": "Kang,Dae Wook"
    }
  }, {
    "data": {
      "source": "Park,Jin",
      "target": "Krajmalnik-Brown,Rosa"
    }
  }, {
    "data": {
      "source": "Park,Jin",
      "target": "Labaer,Joshua"
    }
  }, {
    "data": {
      "source": "Park,Jin",
      "target": "Park,Jin"
    }
  }, {
    "data": {
      "source": "Park,Pori",
      "target": "Park,Pori"
    }
  }, {
    "data": {
      "source": "Parker,Marla Alexia",
      "target": "Hayter,Christopher"
    }
  }, {
    "data": {
      "source": "Parker,Marla Alexia",
      "target": "Iffert,Audrey Suzanne"
    }
  }, {
    "data": {
      "source": "Parker,Nathan Chandler",
      "target": "Parker,Nathan Chandler"
    }
  }, {
    "data": {
      "source": "Parrish,Kristen",
      "target": "Parrish,Kristen"
    }
  }, {
    "data": {
      "source": "Parsey Jr,John Michael",
      "target": "Parsey Jr,John Michael"
    }
  }, {
    "data": {
      "source": "Pasqualetti,Martin J",
      "target": "Pasqualetti,Martin J"
    }
  }, {
    "data": {
      "source": "Patel,Vimla",
      "target": "Patel,Vimla"
    }
  }, {
    "data": {
      "source": "Patience,Jennifer Lynn",
      "target": "Patience,Jennifer Lynn"
    }
  }, {
    "data": {
      "source": "Patock-Peckham,Julie A",
      "target": "Patock-Peckham,Julie A"
    }
  }, {
    "data": {
      "source": "Paupert,Julien Henri",
      "target": "Paupert,Julien Henri"
    }
  }, {
    "data": {
      "source": "Pavlic,Theodore Paul",
      "target": "Pavlic,Theodore Paul"
    }
  }, {
    "data": {
      "source": "Pavlic,Theodore Paul",
      "target": "Pratt,Stephen"
    }
  }, {
    "data": {
      "source": "Peeples,Matthew Allen",
      "target": "Peeples,Matthew Allen"
    }
  }, {
    "data": {
      "source": "Peet,Matthew M",
      "target": "Peet,Matthew M"
    }
  }, {
    "data": {
      "source": "Peet,Yulia V",
      "target": "Peet,Matthew M"
    }
  }, {
    "data": {
      "source": "Peet,Yulia V",
      "target": "Peet,Yulia V"
    }
  }, {
    "data": {
      "source": "Pendyala,Ram Mohan",
      "target": "Kaloush,Kamil Elias"
    }
  }, {
    "data": {
      "source": "Pendyala,Ram Mohan",
      "target": "Mobasher,Barzin"
    }
  }, {
    "data": {
      "source": "Pendyala,Ram Mohan",
      "target": "Neithalath,Narayanan"
    }
  }, {
    "data": {
      "source": "Pendyala,Ram Mohan",
      "target": "Pendyala,Ram Mohan"
    }
  }, {
    "data": {
      "source": "Pendyala,Ram Mohan",
      "target": "Underwood,Benjamin Shane"
    }
  }, {
    "data": {
      "source": "Penton,Christopher Ryan",
      "target": "Penton,Christopher Ryan"
    }
  }, {
    "data": {
      "source": "Peralta,Pedro D",
      "target": "Peralta,Pedro D"
    }
  }, {
    "data": {
      "source": "Perez,Gloria Adriana",
      "target": "Perez,Gloria Adriana"
    }
  }, {
    "data": {
      "source": "Perreault,Francois",
      "target": "Perreault,Francois"
    }
  }, {
    "data": {
      "source": "Perreault,Francois",
      "target": "Sinha,Shahnawaz"
    }
  }, {
    "data": {
      "source": "Perreault,Francois",
      "target": "Westerhoff,Paul"
    }
  }, {
    "data": {
      "source": "Perrings,Charles Aubrey",
      "target": "Perrings,Charles Aubrey"
    }
  }, {
    "data": {
      "source": "Perry,Christopher Alexander",
      "target": "Youngstedt,Shawn D"
    }
  }, {
    "data": {
      "source": "Peter,Beate",
      "target": "Dinu,Valentin"
    }
  }, {
    "data": {
      "source": "Peter,Beate",
      "target": "Peter,Beate"
    }
  }, {
    "data": {
      "source": "Peterson,Suzanne Joanna",
      "target": "Lepine,Jeffery A."
    }
  }, {
    "data": {
      "source": "Peterson,Suzanne Joanna",
      "target": "Peterson,Suzanne Joanna"
    }
  }, {
    "data": {
      "source": "Petrov,Megan Elise",
      "target": "Buman,Matthew P"
    }
  }, {
    "data": {
      "source": "Petrov,Megan Elise",
      "target": "Mcclain,Darya Denise"
    }
  }, {
    "data": {
      "source": "Petrov,Megan Elise",
      "target": "Petrov,Megan Elise"
    }
  }, {
    "data": {
      "source": "Pettigrew,Jonathan",
      "target": "Lederman,Linda Costigan"
    }
  }, {
    "data": {
      "source": "Pettigrew,Jonathan",
      "target": "Pettigrew,Jonathan"
    }
  }, {
    "data": {
      "source": "Pettit,George Robert",
      "target": "Melody,Noeleen"
    }
  }, {
    "data": {
      "source": "Pettit,George Robert",
      "target": "Pettit,George Robert"
    }
  }, {
    "data": {
      "source": "Pettit,George Robert",
      "target": "Pettit,Robin Kathleen"
    }
  }, {
    "data": {
      "source": "Pfeiffer,Deirdre A",
      "target": "Chamberlain,Alyssa Anne Whitby"
    }
  }, {
    "data": {
      "source": "Pfeiffer,Deirdre A",
      "target": "Grubesic,Anthony Hoyt"
    }
  }, {
    "data": {
      "source": "Pfeiffer,Deirdre A",
      "target": "Pfeiffer,Deirdre A"
    }
  }, {
    "data": {
      "source": "Pfeiffer,Deirdre A",
      "target": "Wallace,Danielle Marie"
    }
  }, {
    "data": {
      "source": "Pharo,John Angelo",
      "target": "Malhotra,Sangeeta"
    }
  }, {
    "data": {
      "source": "Pierce-Mcmanamon,Francis P",
      "target": "Abbott,David Ralph"
    }
  }, {
    "data": {
      "source": "Pierce-Mcmanamon,Francis P",
      "target": "Ellison,Leigh Anne"
    }
  }, {
    "data": {
      "source": "Pierce-Mcmanamon,Francis P",
      "target": "Kintigh,Keith William"
    }
  }, {
    "data": {
      "source": "Pierce-Mcmanamon,Francis P",
      "target": "Martinez,David"
    }
  }, {
    "data": {
      "source": "Pierce-Mcmanamon,Francis P",
      "target": "Pierce-Mcmanamon,Francis P"
    }
  }, {
    "data": {
      "source": "Pierce-Mcmanamon,Francis P",
      "target": "Whelan,Mary Kathryn"
    }
  }, {
    "data": {
      "source": "Pilarisetty,Tarakeshwar",
      "target": "Fromme,Petra"
    }
  }, {
    "data": {
      "source": "Pilarisetty,Tarakeshwar",
      "target": "Mujica,Vladimiro"
    }
  }, {
    "data": {
      "source": "Pilarisetty,Tarakeshwar",
      "target": "Pilarisetty,Tarakeshwar"
    }
  }, {
    "data": {
      "source": "Pilarisetty,Tarakeshwar",
      "target": "Yarger,Jeffery Lynn"
    }
  }, {
    "data": {
      "source": "Pina,Armando A",
      "target": "Doane,Leah D."
    }
  }, {
    "data": {
      "source": "Pina,Armando A",
      "target": "Gonzales,Nancy A"
    }
  }, {
    "data": {
      "source": "Pina,Armando A",
      "target": "Pina,Armando A"
    }
  }, {
    "data": {
      "source": "Pina,Armando A",
      "target": "Tein,Jenn-Yun"
    }
  }, {
    "data": {
      "source": "Pinholster,Jacob Daniel",
      "target": "Esser,Gregory M"
    }
  }, {
    "data": {
      "source": "Pinholster,Jacob Daniel",
      "target": "Lerman,Elizabeth A"
    }
  }, {
    "data": {
      "source": "Pinholster,Jacob Daniel",
      "target": "Pinholster,Jacob Daniel"
    }
  }, {
    "data": {
      "source": "Pinholster,Jacob Daniel",
      "target": "Tepper,Steven Jay"
    }
  }, {
    "data": {
      "source": "Pipe,Teri Britt",
      "target": "Pipe,Teri Britt"
    }
  }, {
    "data": {
      "source": "Pittman,Andrea Lorraine",
      "target": "Pittman,Andrea Lorraine"
    }
  }, {
    "data": {
      "source": "Pivovarova,Margarita",
      "target": "Pivovarova,Margarita"
    }
  }, {
    "data": {
      "source": "Pizarro-Terrill,Jesenia Milagr",
      "target": "Pizarro-Terrill,Jesenia Milagr"
    }
  }, {
    "data": {
      "source": "Pizzarello,Sandra",
      "target": "Pizzarello,Sandra"
    }
  }, {
    "data": {
      "source": "Pizziconi,Vincent B",
      "target": "Massia,Stephen Paul"
    }
  }, {
    "data": {
      "source": "Pizziconi,Vincent B",
      "target": "Pizziconi,Vincent B"
    }
  }, {
    "data": {
      "source": "Pizzo,Melissa",
      "target": "Pizzo,Melissa"
    }
  }, {
    "data": {
      "source": "Podolnikova,Nataly",
      "target": "Podolnikova,Nataly"
    }
  }, {
    "data": {
      "source": "Polidoro,Beth",
      "target": "Kandala,Srinivasa Srivatsav"
    }
  }, {
    "data": {
      "source": "Polidoro,Beth",
      "target": "Polidoro,Beth"
    }
  }, {
    "data": {
      "source": "Pollat,Scott Lewis",
      "target": "Mada Kannan,Arunachala Nadar"
    }
  }, {
    "data": {
      "source": "Polygerinos,Panagiotis",
      "target": "Polygerinos,Panagiotis"
    }
  }, {
    "data": {
      "source": "Polygerinos,Panagiotis",
      "target": "Santello,Marco"
    }
  }, {
    "data": {
      "source": "Polygerinos,Panagiotis",
      "target": "Zhang,Wenlong"
    }
  }, {
    "data": {
      "source": "Ponce,Fernando Agustin",
      "target": "Ponce,Fernando Agustin"
    }
  }, {
    "data": {
      "source": "Powers,Jeanne",
      "target": "Pivovarova,Margarita"
    }
  }, {
    "data": {
      "source": "Powers,Jeanne",
      "target": "Powers,Jeanne"
    }
  }, {
    "data": {
      "source": "Pratt,Megan E",
      "target": "Abry,Tashia"
    }
  }, {
    "data": {
      "source": "Pratt,Megan E",
      "target": "Pratt,Megan E"
    }
  }, {
    "data": {
      "source": "Pratt,Stephen",
      "target": "Pratt,Stephen"
    }
  }, {
    "data": {
      "source": "Puckett,Kathleen S",
      "target": "Puckett,Kathleen S"
    }
  }, {
    "data": {
      "source": "Puzauskas,Katherine A",
      "target": "Ames,Victoria E"
    }
  }, {
    "data": {
      "source": "Puzauskas,Katherine A",
      "target": "Puzauskas,Katherine A"
    }
  }, {
    "data": {
      "source": "Qing,Quan",
      "target": "Lindsay,Stuart"
    }
  }, {
    "data": {
      "source": "Qing,Quan",
      "target": "Qing,Quan"
    }
  }, {
    "data": {
      "source": "Qing,Quan",
      "target": "Zhang,Peiming"
    }
  }, {
    "data": {
      "source": "Qiu,Ji",
      "target": "Labaer,Joshua"
    }
  }, {
    "data": {
      "source": "Qiu,Ji",
      "target": "Qiu,Ji"
    }
  }, {
    "data": {
      "source": "Quay,Raymond G",
      "target": "Adame,Bradley Joseph"
    }
  }, {
    "data": {
      "source": "Quay,Raymond G",
      "target": "Elser,Monica Mueller"
    }
  }, {
    "data": {
      "source": "Quay,Raymond G",
      "target": "Larson,Kelli Leigh"
    }
  }, {
    "data": {
      "source": "Quay,Raymond G",
      "target": "Maciejewski,Ross"
    }
  }, {
    "data": {
      "source": "Quay,Raymond G",
      "target": "Quay,Raymond G"
    }
  }, {
    "data": {
      "source": "Quay,Raymond G",
      "target": "White,Dave Douglas"
    }
  }, {
    "data": {
      "source": "Quigg,John C",
      "target": "Quigg,John C"
    }
  }, {
    "data": {
      "source": "Rajagopalan,Jagannathan",
      "target": "Rajagopalan,Jagannathan"
    }
  }, {
    "data": {
      "source": "Rajan,Subramaniam Dharma",
      "target": "Rajan,Subramaniam Dharma"
    }
  }, {
    "data": {
      "source": "Randall,Ashley Karay",
      "target": "Randall,Ashley Karay"
    }
  }, {
    "data": {
      "source": "Raupp,Gregory Bruce",
      "target": "Blain Christen,Jennifer Mary"
    }
  }, {
    "data": {
      "source": "Raupp,Gregory Bruce",
      "target": "Raupp,Gregory Bruce"
    }
  }, {
    "data": {
      "source": "Raymond,Jason R",
      "target": "Raymond,Jason R"
    }
  }, {
    "data": {
      "source": "Razdan,Anshuman",
      "target": "Razdan,Anshuman"
    }
  }, {
    "data": {
      "source": "Redding,Kevin Edward",
      "target": "Fromme,Raimund"
    }
  }, {
    "data": {
      "source": "Redding,Kevin Edward",
      "target": "Redding,Kevin Edward"
    }
  }, {
    "data": {
      "source": "Reddy,T Agami",
      "target": "Reddy,T Agami"
    }
  }, {
    "data": {
      "source": "Redman,Erin N",
      "target": "Boltz,Andrea Maria"
    }
  }, {
    "data": {
      "source": "Redman,Erin N",
      "target": "Boone,Christopher G"
    }
  }, {
    "data": {
      "source": "Redman,Erin N",
      "target": "Brundiers,Katja"
    }
  }, {
    "data": {
      "source": "Redman,Erin N",
      "target": "Elser,Monica Mueller"
    }
  }, {
    "data": {
      "source": "Redman,Erin N",
      "target": "Grimm,Nancy B"
    }
  }, {
    "data": {
      "source": "Redman,Erin N",
      "target": "Herrmann,Lisa Kay"
    }
  }, {
    "data": {
      "source": "Redman,Erin N",
      "target": "Mcgehee,Robert Thomas"
    }
  }, {
    "data": {
      "source": "Redman,Erin N",
      "target": "Redman,Charles L"
    }
  }, {
    "data": {
      "source": "Redman,Erin N",
      "target": "Redman,Erin N"
    }
  }, {
    "data": {
      "source": "Reed,Kaye E",
      "target": "Reed,Kaye E"
    }
  }, {
    "data": {
      "source": "Reed,Michael B",
      "target": "Reed,Michael B"
    }
  }, {
    "data": {
      "source": "Reffett,Kevin",
      "target": "Reffett,Kevin"
    }
  }, {
    "data": {
      "source": "Rege,Kaushal",
      "target": "Caplan,Michael Ryckman"
    }
  }, {
    "data": {
      "source": "Rege,Kaushal",
      "target": "Gelb,Anne"
    }
  }, {
    "data": {
      "source": "Rege,Kaushal",
      "target": "Goryll,Michael"
    }
  }, {
    "data": {
      "source": "Rege,Kaushal",
      "target": "Kodibagkar,Vikram D"
    }
  }, {
    "data": {
      "source": "Rege,Kaushal",
      "target": "Labaer,Joshua"
    }
  }, {
    "data": {
      "source": "Rege,Kaushal",
      "target": "Rege,Kaushal"
    }
  }, {
    "data": {
      "source": "Rege,Kaushal",
      "target": "Van Horn,Wade Dale"
    }
  }, {
    "data": {
      "source": "Rege,Kaushal",
      "target": "Wallstrom,Garrick L"
    }
  }, {
    "data": {
      "source": "Reifsnider,Elizabeth Ann",
      "target": "Boone,Christopher G"
    }
  }, {
    "data": {
      "source": "Reifsnider,Elizabeth Ann",
      "target": "Bruening,Meredith Margaret"
    }
  }, {
    "data": {
      "source": "Reifsnider,Elizabeth Ann",
      "target": "Doebbeling,Bradley Niel"
    }
  }, {
    "data": {
      "source": "Reifsnider,Elizabeth Ann",
      "target": "Green,Ellen"
    }
  }, {
    "data": {
      "source": "Reifsnider,Elizabeth Ann",
      "target": "Hinde,Katherine J"
    }
  }, {
    "data": {
      "source": "Reifsnider,Elizabeth Ann",
      "target": "Lamb,Gerri"
    }
  }, {
    "data": {
      "source": "Reifsnider,Elizabeth Ann",
      "target": "Lyles,Annmarie Abu-Judom"
    }
  }, {
    "data": {
      "source": "Reifsnider,Elizabeth Ann",
      "target": "Reifsnider,Elizabeth Ann"
    }
  }, {
    "data": {
      "source": "Reifsnider,Elizabeth Ann",
      "target": "Slade,Alexandra Avril Brewis"
    }
  }, {
    "data": {
      "source": "Reifsnider,Elizabeth Ann",
      "target": "Todd,Michael Wayne"
    }
  }, {
    "data": {
      "source": "Reifsnider,Elizabeth Ann",
      "target": "Whisner,Corrie Marie"
    }
  }, {
    "data": {
      "source": "Reifsnider,Elizabeth Ann",
      "target": "Williams,Deborah L"
    }
  }, {
    "data": {
      "source": "Reilly,Thomas Francis",
      "target": "Reilly,Thomas Francis"
    }
  }, {
    "data": {
      "source": "Reiman,Eric M",
      "target": "Bimonte-Nelson,Heather"
    }
  }, {
    "data": {
      "source": "Reiman,Eric M",
      "target": "Coon,David Wayne"
    }
  }, {
    "data": {
      "source": "Reiman,Eric M",
      "target": "Gonzalez,Graciela H"
    }
  }, {
    "data": {
      "source": "Reiman,Eric M",
      "target": "Reiman,Eric M"
    }
  }, {
    "data": {
      "source": "Reiman,Eric M",
      "target": "Walker,Douglas Gordon"
    }
  }, {
    "data": {
      "source": "Reisig,Kristy Holtfreter",
      "target": "Reisig,Kristy Holtfreter"
    }
  }, {
    "data": {
      "source": "Reisig,Kristy Holtfreter",
      "target": "Reisig,Michael"
    }
  }, {
    "data": {
      "source": "Reisig,Michael",
      "target": "Reisig,Kristy Holtfreter"
    }
  }, {
    "data": {
      "source": "Reisig,Michael",
      "target": "Reisig,Michael"
    }
  }, {
    "data": {
      "source": "Reisslein,Martin",
      "target": "Reisslein,Martin"
    }
  }, {
    "data": {
      "source": "Ren,Fengbo",
      "target": "Ren,Fengbo"
    }
  }, {
    "data": {
      "source": "Ren,Yi",
      "target": "Jiao,Yang"
    }
  }, {
    "data": {
      "source": "Ren,Yi",
      "target": "Liu,Yongming"
    }
  }, {
    "data": {
      "source": "Ren,Yi",
      "target": "Ren,Yi"
    }
  }, {
    "data": {
      "source": "Ren,Yi",
      "target": "Tong,Hanghang"
    }
  }, {
    "data": {
      "source": "Restrepo,Maria Adelaida",
      "target": "Gray,Shelley Irene"
    }
  }, {
    "data": {
      "source": "Restrepo,Maria Adelaida",
      "target": "Renaud,Claire"
    }
  }, {
    "data": {
      "source": "Restrepo,Maria Adelaida",
      "target": "Restrepo,Maria Adelaida"
    }
  }, {
    "data": {
      "source": "Rey,Sergio J",
      "target": "Rey,Sergio J"
    }
  }, {
    "data": {
      "source": "Rhoads,James Ely",
      "target": "Jansen,Rolf A"
    }
  }, {
    "data": {
      "source": "Rhoads,James Ely",
      "target": "Malhotra,Sangeeta"
    }
  }, {
    "data": {
      "source": "Rhoads,James Ely",
      "target": "Rhoads,James Ely"
    }
  }, {
    "data": {
      "source": "Rhoads,James Ely",
      "target": "Windhorst,Rogier A"
    }
  }, {
    "data": {
      "source": "Rhoden,Alyssa Rose",
      "target": "Rhoden,Alyssa Rose"
    }
  }, {
    "data": {
      "source": "Richa,Andrea W",
      "target": "Richa,Andrea W"
    }
  }, {
    "data": {
      "source": "Richert,Ranko",
      "target": "Richert,Ranko"
    }
  }, {
    "data": {
      "source": "Ridgway,Samantha Willow",
      "target": "Neisewander,Janet Leigh"
    }
  }, {
    "data": {
      "source": "Riley,William",
      "target": "Brett,Joan F"
    }
  }, {
    "data": {
      "source": "Riley,William",
      "target": "Doebbeling,Bradley Niel"
    }
  }, {
    "data": {
      "source": "Riley,William",
      "target": "Gregory-Mercado,Karen"
    }
  }, {
    "data": {
      "source": "Riley,William",
      "target": "Hekler,Eric Chambers"
    }
  }, {
    "data": {
      "source": "Riley,William",
      "target": "Jacobs,Bertram Lewis"
    }
  }, {
    "data": {
      "source": "Riley,William",
      "target": "Marsiglia,Flavio"
    }
  }, {
    "data": {
      "source": "Riley,William",
      "target": "Mccullough,Jeffrey Carroll"
    }
  }, {
    "data": {
      "source": "Riley,William",
      "target": "Riley,William"
    }
  }, {
    "data": {
      "source": "Riley,William",
      "target": "Rivera,Daniel E"
    }
  }, {
    "data": {
      "source": "Riley,William",
      "target": "Runger,George"
    }
  }, {
    "data": {
      "source": "Riley,William",
      "target": "Salamone,Damien Thomas"
    }
  }, {
    "data": {
      "source": "Riley,William",
      "target": "Shafer,Michael S"
    }
  }, {
    "data": {
      "source": "Riley,William",
      "target": "Trastek,Victor Frederick"
    }
  }, {
    "data": {
      "source": "Ritchie,Barry G",
      "target": "Ritchie,Barry G"
    }
  }, {
    "data": {
      "source": "Rittmann,Bruce Edward",
      "target": "Agusdinata,Buyung"
    }
  }, {
    "data": {
      "source": "Rittmann,Bruce Edward",
      "target": "Hristovski,Kiril D"
    }
  }, {
    "data": {
      "source": "Rittmann,Bruce Edward",
      "target": "Krajmalnik-Brown,Rosa"
    }
  }, {
    "data": {
      "source": "Rittmann,Bruce Edward",
      "target": "Lackner,Klaus S."
    }
  }, {
    "data": {
      "source": "Rittmann,Bruce Edward",
      "target": "Lai,Yen-Jung"
    }
  }, {
    "data": {
      "source": "Rittmann,Bruce Edward",
      "target": "Lammers,Peter"
    }
  }, {
    "data": {
      "source": "Rittmann,Bruce Edward",
      "target": "Popat,Sudeep C"
    }
  }, {
    "data": {
      "source": "Rittmann,Bruce Edward",
      "target": "Rittmann,Bruce Edward"
    }
  }, {
    "data": {
      "source": "Rittmann,Bruce Edward",
      "target": "Sommerfeld,Milton R"
    }
  }, {
    "data": {
      "source": "Rittmann,Bruce Edward",
      "target": "Stechel,Ellen B."
    }
  }, {
    "data": {
      "source": "Rittmann,Bruce Edward",
      "target": "Torres,Cesar I"
    }
  }, {
    "data": {
      "source": "Rittmann,Bruce Edward",
      "target": "Westerhoff,Paul"
    }
  }, {
    "data": {
      "source": "Rittmann,Bruce Edward",
      "target": "Zhou,Chen"
    }
  }, {
    "data": {
      "source": "Rivera,Daniel E",
      "target": "Buman,Matthew P"
    }
  }, {
    "data": {
      "source": "Rivera,Daniel E",
      "target": "Hekler,Eric Chambers"
    }
  }, {
    "data": {
      "source": "Rivera,Daniel E",
      "target": "Rivera,Daniel E"
    }
  }, {
    "data": {
      "source": "Roberts,Nicole Alicia",
      "target": "Roberts,Nicole Alicia"
    }
  }, {
    "data": {
      "source": "Robinson,Mark Southwick",
      "target": "Boyd,Aaron Kyle"
    }
  }, {
    "data": {
      "source": "Robinson,Mark Southwick",
      "target": "Cisneros,Ernest"
    }
  }, {
    "data": {
      "source": "Robinson,Mark Southwick",
      "target": "Estes,Nicholas"
    }
  }, {
    "data": {
      "source": "Robinson,Mark Southwick",
      "target": "Johnson,Alexander"
    }
  }, {
    "data": {
      "source": "Robinson,Mark Southwick",
      "target": "Lawrence,Samuel J"
    }
  }, {
    "data": {
      "source": "Robinson,Mark Southwick",
      "target": "Leland,Jeffrey Richard"
    }
  }, {
    "data": {
      "source": "Robinson,Mark Southwick",
      "target": "Nelson,David Michael"
    }
  }, {
    "data": {
      "source": "Robinson,Mark Southwick",
      "target": "Paris,Kristen Nicole"
    }
  }, {
    "data": {
      "source": "Robinson,Mark Southwick",
      "target": "Robinson,Mark Southwick"
    }
  }, {
    "data": {
      "source": "Robinson,Mark Southwick",
      "target": "Wagner,Robert Vernon"
    }
  }, {
    "data": {
      "source": "Rodriguez,Armando A",
      "target": "Anderson-Rowland,Mary Ruth"
    }
  }, {
    "data": {
      "source": "Rodriguez,Armando A",
      "target": "Rodriguez,Armando A"
    }
  }, {
    "data": {
      "source": "Roe-Sepowitz,Dominique",
      "target": "Krysik,Judy Lynn"
    }
  }, {
    "data": {
      "source": "Roe-Sepowitz,Dominique",
      "target": "Roe-Sepowitz,Dominique"
    }
  }, {
    "data": {
      "source": "Roff,Heather Michelle",
      "target": "Roff,Heather Michelle"
    }
  }, {
    "data": {
      "source": "Rogers,Bradley Barney",
      "target": "Henderson,Mark Richard"
    }
  }, {
    "data": {
      "source": "Rogers,Bradley Barney",
      "target": "Mobasher,Barzin"
    }
  }, {
    "data": {
      "source": "Rogers,Bradley Barney",
      "target": "Rogers,Bradley Barney"
    }
  }, {
    "data": {
      "source": "Roosevelt,Stacia Stolzenberg",
      "target": "Roosevelt,Stacia Stolzenberg"
    }
  }, {
    "data": {
      "source": "Ros,Alexandra",
      "target": "Ros,Alexandra"
    }
  }, {
    "data": {
      "source": "Roscoe,Rod David",
      "target": "Roscoe,Rod David"
    }
  }, {
    "data": {
      "source": "Rosen,Julia K",
      "target": "Rosen,Julia K"
    }
  }, {
    "data": {
      "source": "Rosenberg,Michael",
      "target": "Rosenberg,Michael"
    }
  }, {
    "data": {
      "source": "Rosier,Kathlene M",
      "target": "Rosier,Kathlene M"
    }
  }, {
    "data": {
      "source": "Ross,Emily",
      "target": "Crnic,Keith Alan"
    }
  }, {
    "data": {
      "source": "Ross,Heather Maura",
      "target": "Ahn,Gail-Joon"
    }
  }, {
    "data": {
      "source": "Ross,Heather Maura",
      "target": "Doupe,Adam"
    }
  }, {
    "data": {
      "source": "Ross,Heather Maura",
      "target": "Labelle,Jeffrey T"
    }
  }, {
    "data": {
      "source": "Ross,Heather Maura",
      "target": "Ross,Heather Maura"
    }
  }, {
    "data": {
      "source": "Ross,Heather Maura",
      "target": "Winterton,Jamie"
    }
  }, {
    "data": {
      "source": "Ruddell,Benjamin Lyle",
      "target": "Gurney,Kevin Robert"
    }
  }, {
    "data": {
      "source": "Ruddell,Benjamin Lyle",
      "target": "Hanemann,William Michael Micha"
    }
  }, {
    "data": {
      "source": "Ruddell,Benjamin Lyle",
      "target": "Johnson,Nathan Gregory"
    }
  }, {
    "data": {
      "source": "Ruddell,Benjamin Lyle",
      "target": "Ruddell,Benjamin Lyle"
    }
  }, {
    "data": {
      "source": "Ruddell,Benjamin Lyle",
      "target": "Sabo,John L"
    }
  }, {
    "data": {
      "source": "Ruddell,Benjamin Lyle",
      "target": "Shutters,Shade Timothy"
    }
  }, {
    "data": {
      "source": "Ruff,Steven William",
      "target": "Ruff,Steven William"
    }
  }, {
    "data": {
      "source": "Ruhi Vidal,Albert",
      "target": "Sabo,John L"
    }
  }, {
    "data": {
      "source": "Runger,George",
      "target": "Buman,Matthew P"
    }
  }, {
    "data": {
      "source": "Runger,George",
      "target": "Gaesser,Glenn Alan"
    }
  }, {
    "data": {
      "source": "Runger,George",
      "target": "Johnson,William G"
    }
  }, {
    "data": {
      "source": "Runger,George",
      "target": "Kaufman,David"
    }
  }, {
    "data": {
      "source": "Runger,George",
      "target": "Lindor,Keith Douglas"
    }
  }, {
    "data": {
      "source": "Runger,George",
      "target": "Liss,Julie M"
    }
  }, {
    "data": {
      "source": "Runger,George",
      "target": "Phillips,Elizabeth Deutsch"
    }
  }, {
    "data": {
      "source": "Runger,George",
      "target": "Runger,George"
    }
  }, {
    "data": {
      "source": "Runger,George",
      "target": "Shafer,Michael S"
    }
  }, {
    "data": {
      "source": "Runger,George",
      "target": "Sottara,Davide"
    }
  }, {
    "data": {
      "source": "Rushforth,Richard Ray",
      "target": "Johnson,Nathan Gregory"
    }
  }, {
    "data": {
      "source": "Rushforth,Richard Ray",
      "target": "Larson,Rhett"
    }
  }, {
    "data": {
      "source": "Rushforth,Richard Ray",
      "target": "Rushforth,Richard Ray"
    }
  }, {
    "data": {
      "source": "Ruth,Alissa Alice",
      "target": "Ruth,Alissa Alice"
    }
  }, {
    "data": {
      "source": "Ryan,Edmund Michael Colum",
      "target": "Collins,James"
    }
  }, {
    "data": {
      "source": "Rykaczewski,Konrad",
      "target": "Rykaczewski,Konrad"
    }
  }, {
    "data": {
      "source": "Sabo,John L",
      "target": "Aggarwal,Rimjhim M"
    }
  }, {
    "data": {
      "source": "Sabo,John L",
      "target": "Ahn,Gail-Joon"
    }
  }, {
    "data": {
      "source": "Sabo,John L",
      "target": "Candan,Kasim Selcuk"
    }
  }, {
    "data": {
      "source": "Sabo,John L",
      "target": "Chhetri,Netra B"
    }
  }, {
    "data": {
      "source": "Sabo,John L",
      "target": "Gerber,Leah R"
    }
  }, {
    "data": {
      "source": "Sabo,John L",
      "target": "Hanemann,William Michael Micha"
    }
  }, {
    "data": {
      "source": "Sabo,John L",
      "target": "Janssen,Marcus Alexander"
    }
  }, {
    "data": {
      "source": "Sabo,John L",
      "target": "Kuby,Michael"
    }
  }, {
    "data": {
      "source": "Sabo,John L",
      "target": "Maciejewski,Ross"
    }
  }, {
    "data": {
      "source": "Sabo,John L",
      "target": "Myint,Soe W"
    }
  }, {
    "data": {
      "source": "Sabo,John L",
      "target": "Qiu,Yueming"
    }
  }, {
    "data": {
      "source": "Sabo,John L",
      "target": "Ruddell,Benjamin Lyle"
    }
  }, {
    "data": {
      "source": "Sabo,John L",
      "target": "Sabo,John L"
    }
  }, {
    "data": {
      "source": "Sabo,John L",
      "target": "Slade,Alexandra Avril Brewis"
    }
  }, {
    "data": {
      "source": "Sabo,John L",
      "target": "Vivoni,Enrique"
    }
  }, {
    "data": {
      "source": "Sabo,John L",
      "target": "White,Dave Douglas"
    }
  }, {
    "data": {
      "source": "Sabo,John L",
      "target": "Wutich,Amber Elisabeth Yoder"
    }
  }, {
    "data": {
      "source": "Sadleir,Rosalind Jane",
      "target": "Kodibagkar,Vikram D"
    }
  }, {
    "data": {
      "source": "Sadleir,Rosalind Jane",
      "target": "Sadleir,Rosalind Jane"
    }
  }, {
    "data": {
      "source": "Sailor,David J",
      "target": "Gober,Patricia"
    }
  }, {
    "data": {
      "source": "Sailor,David J",
      "target": "Middel,Ariane Christine"
    }
  }, {
    "data": {
      "source": "Sala,Osvaldo E.",
      "target": "Sala,Osvaldo E."
    }
  }, {
    "data": {
      "source": "Salerno,Jessica Marie",
      "target": "Roberts,Nicole Alicia"
    }
  }, {
    "data": {
      "source": "Salerno,Jessica Marie",
      "target": "Salerno,Jessica Marie"
    }
  }, {
    "data": {
      "source": "Salerno,Jessica Marie",
      "target": "Schweitzer,Nicholas"
    }
  }, {
    "data": {
      "source": "Sampson,Robert R",
      "target": "Larsen,Wiley"
    }
  }, {
    "data": {
      "source": "Sampson,Robert R",
      "target": "Sampson,Robert R"
    }
  }, {
    "data": {
      "source": "Sanabria,Federico",
      "target": "Conrad,Cheryl Diane"
    }
  }, {
    "data": {
      "source": "Sanabria,Federico",
      "target": "Gipson-Reichardt,Cassandra Dia"
    }
  }, {
    "data": {
      "source": "Sanabria,Federico",
      "target": "Neisewander,Janet Leigh"
    }
  }, {
    "data": {
      "source": "Sanabria,Federico",
      "target": "Olive,Michael Foster"
    }
  }, {
    "data": {
      "source": "Sanabria,Federico",
      "target": "Sanabria,Federico"
    }
  }, {
    "data": {
      "source": "Sandler,Irwin Noah",
      "target": "Porter,Michele"
    }
  }, {
    "data": {
      "source": "Sandler,Irwin Noah",
      "target": "Sandler,Irwin Noah"
    }
  }, {
    "data": {
      "source": "Sandler,Irwin Noah",
      "target": "Tein,Jenn-Yun"
    }
  }, {
    "data": {
      "source": "Sandler,Irwin Noah",
      "target": "Wolchik,Sharlene"
    }
  }, {
    "data": {
      "source": "Sandrin,Susannah K",
      "target": "Sandrin,Susannah K"
    }
  }, {
    "data": {
      "source": "Sandrin,Todd Ryan",
      "target": "Ball,Rebecca"
    }
  }, {
    "data": {
      "source": "Sandrin,Todd Ryan",
      "target": "Broatch,Jennifer Ellen"
    }
  }, {
    "data": {
      "source": "Sandrin,Todd Ryan",
      "target": "Camacho,Erika T"
    }
  }, {
    "data": {
      "source": "Sandrin,Todd Ryan",
      "target": "Dietrich,Suzanne Wagner"
    }
  }, {
    "data": {
      "source": "Sandrin,Todd Ryan",
      "target": "Ferry,Lara Annette"
    }
  }, {
    "data": {
      "source": "Sandrin,Todd Ryan",
      "target": "Hackney Price,Jennifer Faye"
    }
  }, {
    "data": {
      "source": "Sandrin,Todd Ryan",
      "target": "Johnson,James Chadwick"
    }
  }, {
    "data": {
      "source": "Sandrin,Todd Ryan",
      "target": "Marshall,Pamela Ann"
    }
  }, {
    "data": {
      "source": "Sandrin,Todd Ryan",
      "target": "Mooney,Sian"
    }
  }, {
    "data": {
      "source": "Sandrin,Todd Ryan",
      "target": "Polidoro,Beth"
    }
  }, {
    "data": {
      "source": "Sandrin,Todd Ryan",
      "target": "Sandrin,Susannah K"
    }
  }, {
    "data": {
      "source": "Sandrin,Todd Ryan",
      "target": "Sandrin,Todd Ryan"
    }
  }, {
    "data": {
      "source": "Sandrin,Todd Ryan",
      "target": "Silva,Yasin Nilton"
    }
  }, {
    "data": {
      "source": "Sankar,Lalitha",
      "target": "Sankar,Lalitha"
    }
  }, {
    "data": {
      "source": "Santana,Robert Scott",
      "target": "Johnston,Carol S"
    }
  }, {
    "data": {
      "source": "Santanam,Raghu",
      "target": "Santanam,Raghu"
    }
  }, {
    "data": {
      "source": "Santello,Marco",
      "target": "Abbas,James"
    }
  }, {
    "data": {
      "source": "Santello,Marco",
      "target": "Ankeny,Casey J"
    }
  }, {
    "data": {
      "source": "Santello,Marco",
      "target": "Artemiadis,Panagiotis K."
    }
  }, {
    "data": {
      "source": "Santello,Marco",
      "target": "Ben Amor,Hani"
    }
  }, {
    "data": {
      "source": "Santello,Marco",
      "target": "Coursen,Jerry Lee"
    }
  }, {
    "data": {
      "source": "Santello,Marco",
      "target": "Frow,Emma Khamis"
    }
  }, {
    "data": {
      "source": "Santello,Marco",
      "target": "Fu,Qiushi"
    }
  }, {
    "data": {
      "source": "Santello,Marco",
      "target": "Garcia,Antonio Agustin"
    }
  }, {
    "data": {
      "source": "Santello,Marco",
      "target": "Kleim,Jeffrey Allan"
    }
  }, {
    "data": {
      "source": "Santello,Marco",
      "target": "Labelle,Jeffrey T"
    }
  }, {
    "data": {
      "source": "Santello,Marco",
      "target": "Santello,Marco"
    }
  }, {
    "data": {
      "source": "Santos,Carlos Eduardo",
      "target": "Santos,Carlos Eduardo"
    }
  }, {
    "data": {
      "source": "Saraniti,Marco",
      "target": "Saraniti,Marco"
    }
  }, {
    "data": {
      "source": "Sarewitz,Daniel",
      "target": "Sarewitz,Daniel"
    }
  }, {
    "data": {
      "source": "Saripalli,Srikanth",
      "target": "Bell III,James"
    }
  }, {
    "data": {
      "source": "Saripalli,Srikanth",
      "target": "Christensen,Philip R"
    }
  }, {
    "data": {
      "source": "Saripalli,Srikanth",
      "target": "Saripalli,Srikanth"
    }
  }, {
    "data": {
      "source": "Sarjoughian,Hessam Seyed",
      "target": "Sarjoughian,Hessam Seyed"
    }
  }, {
    "data": {
      "source": "Sarwat,Mohamed",
      "target": "Candan,Kasim Selcuk"
    }
  }, {
    "data": {
      "source": "Sarwat,Mohamed",
      "target": "Mirchandani,Pitu B."
    }
  }, {
    "data": {
      "source": "Sarwat,Mohamed",
      "target": "Sarwat,Mohamed"
    }
  }, {
    "data": {
      "source": "Sato,Hiroyuki",
      "target": "Bell III,James"
    }
  }, {
    "data": {
      "source": "Sato,Hiroyuki",
      "target": "Lawrence,Samuel J"
    }
  }, {
    "data": {
      "source": "Sato,Hiroyuki",
      "target": "Robinson,Mark Southwick"
    }
  }, {
    "data": {
      "source": "Sato,Hiroyuki",
      "target": "Sato,Hiroyuki"
    }
  }, {
    "data": {
      "source": "Saul,Steven Eugene",
      "target": "Saul,Steven Eugene"
    }
  }, {
    "data": {
      "source": "Sayeed,Mohamed",
      "target": "Sayeed,Mohamed"
    }
  }, {
    "data": {
      "source": "Scaglione,Anna",
      "target": "Scaglione,Anna"
    }
  }, {
    "data": {
      "source": "Scaglione,Anna",
      "target": "Ying,Lei"
    }
  }, {
    "data": {
      "source": "Scannapieco,Evan",
      "target": "Desch,Steven"
    }
  }, {
    "data": {
      "source": "Scannapieco,Evan",
      "target": "Scannapieco,Evan"
    }
  }, {
    "data": {
      "source": "Scherer,Nancy",
      "target": "Berisha,Visar Shahin"
    }
  }, {
    "data": {
      "source": "Scherer,Nancy",
      "target": "Helms  Tillery,Augusta K"
    }
  }, {
    "data": {
      "source": "Scherer,Nancy",
      "target": "Liss,Julie M"
    }
  }, {
    "data": {
      "source": "Scherer,Nancy",
      "target": "Restrepo,Maria Adelaida"
    }
  }, {
    "data": {
      "source": "Scherer,Nancy",
      "target": "Scherer,Nancy"
    }
  }, {
    "data": {
      "source": "Schoettle,Louis Noble",
      "target": "Blattman,Joseph Nathan"
    }
  }, {
    "data": {
      "source": "Schrader,Devin Lee",
      "target": "Schrader,Devin Lee"
    }
  }, {
    "data": {
      "source": "Schreiner-Mcgraw,Adam Paul",
      "target": "Vivoni,Enrique"
    }
  }, {
    "data": {
      "source": "Schulte,Ann C",
      "target": "Schulte,Ann C"
    }
  }, {
    "data": {
      "source": "Scotch,Matthew L",
      "target": "Gonzalez,Graciela H"
    }
  }, {
    "data": {
      "source": "Scotch,Matthew L",
      "target": "Hogue,Brenda G"
    }
  }, {
    "data": {
      "source": "Scotch,Matthew L",
      "target": "Mubayi,Anuj"
    }
  }, {
    "data": {
      "source": "Scotch,Matthew L",
      "target": "Pahle,Robert"
    }
  }, {
    "data": {
      "source": "Scotch,Matthew L",
      "target": "Scotch,Matthew L"
    }
  }, {
    "data": {
      "source": "Scott,Kimberly A",
      "target": "Scott,Kimberly A"
    }
  }, {
    "data": {
      "source": "Scowen,Paul Andrew",
      "target": "Scowen,Paul Andrew"
    }
  }, {
    "data": {
      "source": "Seager,Thomas Payson",
      "target": "Branch,Boyd Mathoni"
    }
  }, {
    "data": {
      "source": "Seager,Thomas Payson",
      "target": "Seager,Thomas Payson"
    }
  }, {
    "data": {
      "source": "Seaton,Eleanor",
      "target": "Seaton,Eleanor"
    }
  }, {
    "data": {
      "source": "Seaton,Eleanor",
      "target": "Spanierman,Lisa Beth"
    }
  }, {
    "data": {
      "source": "Sebold,Brent James",
      "target": "Sebold,Brent James"
    }
  }, {
    "data": {
      "source": "Segal,Sabrina",
      "target": "Granger,Douglas"
    }
  }, {
    "data": {
      "source": "Segal,Sabrina",
      "target": "Segal,Sabrina"
    }
  }, {
    "data": {
      "source": "Semken,Steven",
      "target": "Gober,Patricia"
    }
  }, {
    "data": {
      "source": "Semken,Steven",
      "target": "Semken,Steven"
    }
  }, {
    "data": {
      "source": "Semken,Steven",
      "target": "Wentz,Elizabeth Ann"
    }
  }, {
    "data": {
      "source": "Sen,Arunabha",
      "target": "Sen,Arunabha"
    }
  }, {
    "data": {
      "source": "Seyler,Sean Lee",
      "target": "Beckstein,Oliver"
    }
  }, {
    "data": {
      "source": "Sha,Xin Wei",
      "target": "Ingalls,Todd Matthew"
    }
  }, {
    "data": {
      "source": "Sha,Xin Wei",
      "target": "Sha,Xin Wei"
    }
  }, {
    "data": {
      "source": "Shafer,Michael S",
      "target": "Shafer,Michael S"
    }
  }, {
    "data": {
      "source": "Shaibi,Gabriel",
      "target": "Shaibi,Gabriel"
    }
  }, {
    "data": {
      "source": "Shakarian,Paulo",
      "target": "Sarwat,Mohamed"
    }
  }, {
    "data": {
      "source": "Shakarian,Paulo",
      "target": "Shakarian,Paulo"
    }
  }, {
    "data": {
      "source": "Shan,Xiaonan",
      "target": "Shan,Xiaonan"
    }
  }, {
    "data": {
      "source": "Shan,Xiaonan",
      "target": "Tao,Nongjian"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Buseck,P R"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Carpenter,Ray W"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Chang,Lan-Yun"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Crozier,Peter"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Dwyer,Christian"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Garcia-Pichel,Ferran"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Goryll,Michael"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Jiang,Hanqing"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Liu,Jingyue"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Mccartney,Martha Rogers"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Nannenga,Brent Lane"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Ponce,Fernando Agustin"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Rajagopalan,Jagannathan"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Roberson,Robert Wayne"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Sharp,Thomas"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Shim,Sang-Heon"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Sieradzki,Karl"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Smith,David John"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Vermaas,Willem F J"
    }
  }, {
    "data": {
      "source": "Sharp,Thomas",
      "target": "Yu,Hongyu"
    }
  }, {
    "data": {
      "source": "Shearer,Nelma Beth",
      "target": "Shearer,Nelma Beth"
    }
  }, {
    "data": {
      "source": "Shet Tilvi,Vithal Pandurang",
      "target": "Shet Tilvi,Vithal Pandurang"
    }
  }, {
    "data": {
      "source": "Shi,Yixin",
      "target": "Kong,Wei"
    }
  }, {
    "data": {
      "source": "Shi,Yixin",
      "target": "Shi,Yixin"
    }
  }, {
    "data": {
      "source": "Shim,Sang-Heon",
      "target": "Chizmeshya,Andrew V"
    }
  }, {
    "data": {
      "source": "Shim,Sang-Heon",
      "target": "Hervig,Richard Lokke"
    }
  }, {
    "data": {
      "source": "Shim,Sang-Heon",
      "target": "Leinenweber,Kurt D"
    }
  }, {
    "data": {
      "source": "Shim,Sang-Heon",
      "target": "Shim,Sang-Heon"
    }
  }, {
    "data": {
      "source": "Shin,Cha-Nam",
      "target": "Belyea,Michael John"
    }
  }, {
    "data": {
      "source": "Shin,Cha-Nam",
      "target": "Bruening,Meredith Margaret"
    }
  }, {
    "data": {
      "source": "Shin,Cha-Nam",
      "target": "Reifsnider,Elizabeth Ann"
    }
  }, {
    "data": {
      "source": "Shin,Cha-Nam",
      "target": "Shin,Cha-Nam"
    }
  }, {
    "data": {
      "source": "Shiota,Michelle Noelani",
      "target": "Shiota,Michelle Noelani"
    }
  }, {
    "data": {
      "source": "Shipstead,Zachary",
      "target": "Shipstead,Zachary"
    }
  }, {
    "data": {
      "source": "Shirzaei,Manoochehr",
      "target": "Shirzaei,Manoochehr"
    }
  }, {
    "data": {
      "source": "Shirzaei,Manoochehr",
      "target": "Werth,Susanna"
    }
  }, {
    "data": {
      "source": "Shkolnik,Evgenya",
      "target": "Bowman,Judd David"
    }
  }, {
    "data": {
      "source": "Shkolnik,Evgenya",
      "target": "Jacobs,Daniel C."
    }
  }, {
    "data": {
      "source": "Shkolnik,Evgenya",
      "target": "Line,Michael Robert"
    }
  }, {
    "data": {
      "source": "Shkolnik,Evgenya",
      "target": "Scowen,Paul Andrew"
    }
  }, {
    "data": {
      "source": "Shkolnik,Evgenya",
      "target": "Shkolnik,Evgenya"
    }
  }, {
    "data": {
      "source": "Shock,Everett",
      "target": "Gould,Ian R"
    }
  }, {
    "data": {
      "source": "Shock,Everett",
      "target": "Shock,Everett"
    }
  }, {
    "data": {
      "source": "Shrivastava,Aviral",
      "target": "Clark,Lawrence T"
    }
  }, {
    "data": {
      "source": "Shrivastava,Aviral",
      "target": "Shrivastava,Aviral"
    }
  }, {
    "data": {
      "source": "Shutters,Shade Timothy",
      "target": "Maciejewski,Ross"
    }
  }, {
    "data": {
      "source": "Shutters,Shade Timothy",
      "target": "Ruddell,Benjamin Lyle"
    }
  }, {
    "data": {
      "source": "Shutters,Shade Timothy",
      "target": "Shutters,Shade Timothy"
    }
  }, {
    "data": {
      "source": "Shutters,Shade Timothy",
      "target": "Thies,Cameron G"
    }
  }, {
    "data": {
      "source": "Si,Jennie",
      "target": "Si,Jennie"
    }
  }, {
    "data": {
      "source": "Sieradzki,Karl",
      "target": "Sieradzki,Karl"
    }
  }, {
    "data": {
      "source": "Sierks,Michael Richard",
      "target": "Brafman,David Adam"
    }
  }, {
    "data": {
      "source": "Sierks,Michael Richard",
      "target": "Dunckley,Travis L"
    }
  }, {
    "data": {
      "source": "Sierks,Michael Richard",
      "target": "Hayes,Mark A"
    }
  }, {
    "data": {
      "source": "Sierks,Michael Richard",
      "target": "Mills,Jeremy H"
    }
  }, {
    "data": {
      "source": "Sierks,Michael Richard",
      "target": "Nannenga,Brent Lane"
    }
  }, {
    "data": {
      "source": "Sierks,Michael Richard",
      "target": "Oddo,Salvatore"
    }
  }, {
    "data": {
      "source": "Sierks,Michael Richard",
      "target": "Reiser,Mark R"
    }
  }, {
    "data": {
      "source": "Sierks,Michael Richard",
      "target": "Sierks,Michael Richard"
    }
  }, {
    "data": {
      "source": "Silcock,Burton William",
      "target": "Gilger,Kristin G"
    }
  }, {
    "data": {
      "source": "Silcock,Burton William",
      "target": "Silcock,Burton William"
    }
  }, {
    "data": {
      "source": "Silva,Yasin Nilton",
      "target": "Hall,Deborah L"
    }
  }, {
    "data": {
      "source": "Silva,Yasin Nilton",
      "target": "Silva,Yasin Nilton"
    }
  }, {
    "data": {
      "source": "Simon,Arleyn W",
      "target": "Simon,Arleyn W"
    }
  }, {
    "data": {
      "source": "Simpson,Richard Kendall",
      "target": "Mcgraw,Kevin J"
    }
  }, {
    "data": {
      "source": "Sipka,Danko Dan",
      "target": "Evans-Romaine,Dorothy Kathleen"
    }
  }, {
    "data": {
      "source": "Sipka,Danko Dan",
      "target": "Sipka,Danko Dan"
    }
  }, {
    "data": {
      "source": "Skorokhodov,Philip",
      "target": "Von Hagen,Mark"
    }
  }, {
    "data": {
      "source": "Slivinski,Stephen Anthony",
      "target": "Slivinski,Stephen Anthony"
    }
  }, {
    "data": {
      "source": "Smith,Barbara Symie",
      "target": "Bean,Heather"
    }
  }, {
    "data": {
      "source": "Smith,Barbara Symie",
      "target": "Smith,Barbara Symie"
    }
  }, {
    "data": {
      "source": "Smith,Brian",
      "target": "Sanabria,Federico"
    }
  }, {
    "data": {
      "source": "Smith,Brian",
      "target": "Smith,Brian"
    }
  }, {
    "data": {
      "source": "Smith,Brian",
      "target": "Wynne,Clive"
    }
  }, {
    "data": {
      "source": "Smith,David John",
      "target": "Smith,David John"
    }
  }, {
    "data": {
      "source": "Smith,David John",
      "target": "Zhang,Yong-Hang"
    }
  }, {
    "data": {
      "source": "Smith,Jacqueline Vella",
      "target": "Smith,Jacqueline Vella"
    }
  }, {
    "data": {
      "source": "Snyder,Russell Bradley",
      "target": "Delay,Dawn Ann"
    }
  }, {
    "data": {
      "source": "Snyder,Russell Bradley",
      "target": "Hedberg,Eric Christopher"
    }
  }, {
    "data": {
      "source": "Snyder,Russell Bradley",
      "target": "Lindstrom Johnson,Sarah Renee"
    }
  }, {
    "data": {
      "source": "Snyder,Russell Bradley",
      "target": "Snyder,Russell Bradley"
    }
  }, {
    "data": {
      "source": "Snyder,Russell Bradley",
      "target": "Wolfersteig,Wendy L"
    }
  }, {
    "data": {
      "source": "Sodemann,Angela Ann",
      "target": "Craig,Scotty Dale"
    }
  }, {
    "data": {
      "source": "Sodemann,Angela Ann",
      "target": "Gaffar,Ashraf"
    }
  }, {
    "data": {
      "source": "Sodemann,Angela Ann",
      "target": "Hsu,Keng Hao"
    }
  }, {
    "data": {
      "source": "Sodemann,Angela Ann",
      "target": "Mcdaniel,Troy Lee"
    }
  }, {
    "data": {
      "source": "Sodemann,Angela Ann",
      "target": "Sodemann,Angela Ann"
    }
  }, {
    "data": {
      "source": "Sohoni,Sohum Ashok",
      "target": "Craig,Scotty Dale"
    }
  }, {
    "data": {
      "source": "Sohoni,Sohum Ashok",
      "target": "Sohoni,Sohum Ashok"
    }
  }, {
    "data": {
      "source": "Solanki,Kiran N.",
      "target": "Solanki,Kiran N."
    }
  }, {
    "data": {
      "source": "Solyom,Jessica Ann",
      "target": "Solyom,Jessica Ann"
    }
  }, {
    "data": {
      "source": "Sommerfeld,Milton R",
      "target": "Sailor,David J"
    }
  }, {
    "data": {
      "source": "Sommerfeld,Milton R",
      "target": "Sommerfeld,Milton R"
    }
  }, {
    "data": {
      "source": "Song,Qian",
      "target": "Song,Qian"
    }
  }, {
    "data": {
      "source": "Sottara,Davide",
      "target": "Sottara,Davide"
    }
  }, {
    "data": {
      "source": "Spanias,Andreas Savva",
      "target": "Ayyanar,Raja"
    }
  }, {
    "data": {
      "source": "Spanias,Andreas Savva",
      "target": "Spanias,Andreas Savva"
    }
  }, {
    "data": {
      "source": "Spanias,Andreas Savva",
      "target": "Tepedelenlioglu,Cihan"
    }
  }, {
    "data": {
      "source": "Spanias,Andreas Savva",
      "target": "Turaga,Pavan Kumar"
    }
  }, {
    "data": {
      "source": "Spanierman,Lisa Beth",
      "target": "Hedberg,Eric Christopher"
    }
  }, {
    "data": {
      "source": "Spanierman,Lisa Beth",
      "target": "Marsiglia,Flavio"
    }
  }, {
    "data": {
      "source": "Spanierman,Lisa Beth",
      "target": "Spanierman,Lisa Beth"
    }
  }, {
    "data": {
      "source": "Spano,Mark L.",
      "target": "Spano,Mark L."
    }
  }, {
    "data": {
      "source": "Speyerer,Emerson Jacob",
      "target": "Speyerer,Emerson Jacob"
    }
  }, {
    "data": {
      "source": "Spindler,Robert Paul",
      "target": "Spindler,Robert Paul"
    }
  }, {
    "data": {
      "source": "Spinrad,Tracy",
      "target": "Eisenberg,Nancy"
    }
  }, {
    "data": {
      "source": "Spinrad,Tracy",
      "target": "Spinrad,Tracy"
    }
  }, {
    "data": {
      "source": "Spinrad,Tracy",
      "target": "Wilkens,Natalie Desrochers"
    }
  }, {
    "data": {
      "source": "Squires,Kyle D",
      "target": "Collofello,James Samuel"
    }
  }, {
    "data": {
      "source": "Squires,Kyle D",
      "target": "Dai,Lenore L"
    }
  }, {
    "data": {
      "source": "Squires,Kyle D",
      "target": "Ganesh,Tirupalavanam Gopal"
    }
  }, {
    "data": {
      "source": "Squires,Kyle D",
      "target": "Squires,Kyle D"
    }
  }, {
    "data": {
      "source": "Stabenfeldt,Sarah E",
      "target": "Stabenfeldt,Sarah E"
    }
  }, {
    "data": {
      "source": "Stafford,Phillip",
      "target": "Stafford,Phillip"
    }
  }, {
    "data": {
      "source": "Standley,Eileen",
      "target": "Fitzgerald,Mary M"
    }
  }, {
    "data": {
      "source": "Standley,Eileen",
      "target": "Standley,Eileen"
    }
  }, {
    "data": {
      "source": "Stanley,Richard H",
      "target": "Stanley,Richard H"
    }
  }, {
    "data": {
      "source": "Starrfield,Sumner Grosby",
      "target": "Starrfield,Sumner Grosby"
    }
  }, {
    "data": {
      "source": "Stats-Caldwell,Denise M",
      "target": "Stats-Caldwell,Denise M"
    }
  }, {
    "data": {
      "source": "Stechel,Ellen B.",
      "target": "Deng,Shuguang"
    }
  }, {
    "data": {
      "source": "Stechel,Ellen B.",
      "target": "Johnson,Nathan Gregory"
    }
  }, {
    "data": {
      "source": "Stechel,Ellen B.",
      "target": "Lammers,Peter"
    }
  }, {
    "data": {
      "source": "Stechel,Ellen B.",
      "target": "Phelan,Patrick E"
    }
  }, {
    "data": {
      "source": "Stechel,Ellen B.",
      "target": "Rittmann,Bruce Edward"
    }
  }, {
    "data": {
      "source": "Stechel,Ellen B.",
      "target": "Stechel,Ellen B."
    }
  }, {
    "data": {
      "source": "Steele,Kelly Patricia",
      "target": "Steele,Kelly Patricia"
    }
  }, {
    "data": {
      "source": "Steimle,Timothy",
      "target": "Steimle,Timothy"
    }
  }, {
    "data": {
      "source": "Stephanopoulos,Nicholas",
      "target": "Marvi,Hamidreza"
    }
  }, {
    "data": {
      "source": "Stephanopoulos,Nicholas",
      "target": "Stephanopoulos,Nicholas"
    }
  }, {
    "data": {
      "source": "Stephanopoulos,Nicholas",
      "target": "Yan,Hao"
    }
  }, {
    "data": {
      "source": "Sterner,Beckett",
      "target": "Jacobs,Bertram Lewis"
    }
  }, {
    "data": {
      "source": "Stojanowski,Christopher Michae",
      "target": "Stojanowski,Christopher Michae"
    }
  }, {
    "data": {
      "source": "Stone,Anne C",
      "target": "Buikstra,Jane Ellen"
    }
  }, {
    "data": {
      "source": "Stone,Anne C",
      "target": "Stone,Anne C"
    }
  }, {
    "data": {
      "source": "Stopar,Julie D",
      "target": "Robinson,Mark Southwick"
    }
  }, {
    "data": {
      "source": "Stopar,Julie D",
      "target": "Speyerer,Emerson Jacob"
    }
  }, {
    "data": {
      "source": "Stopar,Julie D",
      "target": "Stopar,Julie D"
    }
  }, {
    "data": {
      "source": "Strumsky,Deborah",
      "target": "Lobo,Jose A"
    }
  }, {
    "data": {
      "source": "Strumsky,Deborah",
      "target": "Strumsky,Deborah"
    }
  }, {
    "data": {
      "source": "Strumsky,Deborah",
      "target": "Van Der Leeuw,Sander"
    }
  }, {
    "data": {
      "source": "Stufken,John",
      "target": "Stufken,John"
    }
  }, {
    "data": {
      "source": "Sullivan,Kenneth T",
      "target": "Kashiwagi,Dean Takeo"
    }
  }, {
    "data": {
      "source": "Sullivan,Kenneth T",
      "target": "Sullivan,Kenneth T"
    }
  }, {
    "data": {
      "source": "Sumida Huaman,Elizabeth",
      "target": "Brayboy,Bryan"
    }
  }, {
    "data": {
      "source": "Sumida Huaman,Elizabeth",
      "target": "Sumida Huaman,Elizabeth"
    }
  }, {
    "data": {
      "source": "Sun,Fei",
      "target": "Sun,Fei"
    }
  }, {
    "data": {
      "source": "Suzart De Albuquerque,Fabio",
      "target": "Suzart De Albuquerque,Fabio"
    }
  }, {
    "data": {
      "source": "Suzuki,Anne S",
      "target": "Suzuki,Anne S"
    }
  }, {
    "data": {
      "source": "Suzuki,Anne S",
      "target": "Wetzel,Nicole Michelle"
    }
  }, {
    "data": {
      "source": "Swadener,Elizabeth Blue",
      "target": "Swadener,Elizabeth Blue"
    }
  }, {
    "data": {
      "source": "Swartz,Jonathan Ward",
      "target": "Swartz,Jonathan Ward"
    }
  }, {
    "data": {
      "source": "Sweazea,Karen Leanna",
      "target": "Johnston,Carol S"
    }
  }, {
    "data": {
      "source": "Sweazea,Karen Leanna",
      "target": "Sweazea,Karen Leanna"
    }
  }, {
    "data": {
      "source": "Sweazea,Karen Leanna",
      "target": "Whisner,Corrie Marie"
    }
  }, {
    "data": {
      "source": "Swindell,David",
      "target": "Swindell,David"
    }
  }, {
    "data": {
      "source": "Symonds,Sylvia Alicia",
      "target": "Symonds,Sylvia Alicia"
    }
  }, {
    "data": {
      "source": "Symonds,William",
      "target": "Symonds,William"
    }
  }, {
    "data": {
      "source": "Syrotiuk,Violet",
      "target": "Colbourn,Charles Joseph"
    }
  }, {
    "data": {
      "source": "Syrotiuk,Violet",
      "target": "Syrotiuk,Violet"
    }
  }, {
    "data": {
      "source": "Tachine,Amanda R",
      "target": "Tachine,Amanda R"
    }
  }, {
    "data": {
      "source": "Takahashi,Timothy Taro",
      "target": "Takahashi,Timothy Taro"
    }
  }, {
    "data": {
      "source": "Takamura,John Hiroomi",
      "target": "Takamura,John Hiroomi"
    }
  }, {
    "data": {
      "source": "Talboom,Joshua S",
      "target": "Oddo,Salvatore"
    }
  }, {
    "data": {
      "source": "Tamizhmani,Govindasamy",
      "target": "Kuitche,Joseph Mathurin"
    }
  }, {
    "data": {
      "source": "Tamizhmani,Govindasamy",
      "target": "Pan,Rong"
    }
  }, {
    "data": {
      "source": "Tamizhmani,Govindasamy",
      "target": "Tamizhmani,Govindasamy"
    }
  }, {
    "data": {
      "source": "Tang,Pingbo",
      "target": "Cooke,Nancy Jaworski"
    }
  }, {
    "data": {
      "source": "Tang,Pingbo",
      "target": "Liu,Yongming"
    }
  }, {
    "data": {
      "source": "Tang,Pingbo",
      "target": "Ren,Yi"
    }
  }, {
    "data": {
      "source": "Tang,Pingbo",
      "target": "Tang,Pingbo"
    }
  }, {
    "data": {
      "source": "Tang,Wenbo",
      "target": "Tang,Wenbo"
    }
  }, {
    "data": {
      "source": "Tao,Meng",
      "target": "Tao,Meng"
    }
  }, {
    "data": {
      "source": "Tao,Nongjian",
      "target": "Haydel,Shelley"
    }
  }, {
    "data": {
      "source": "Tao,Nongjian",
      "target": "Tao,Nongjian"
    }
  }, {
    "data": {
      "source": "Tao,Nongjian",
      "target": "Wang,Shaopeng"
    }
  }, {
    "data": {
      "source": "Tasevska,Natasha",
      "target": "Johnston,Carol S"
    }
  }, {
    "data": {
      "source": "Tasevska,Natasha",
      "target": "Tasevska,Natasha"
    }
  }, {
    "data": {
      "source": "Tasooji,Amaneh",
      "target": "Tasooji,Amaneh"
    }
  }, {
    "data": {
      "source": "Taylor,Jesse Earl",
      "target": "Taylor,Jesse Earl"
    }
  }, {
    "data": {
      "source": "Taylor,Michelle Elizabeth",
      "target": "Fabes,Richard Allen"
    }
  }, {
    "data": {
      "source": "Taylor,Michelle Elizabeth",
      "target": "Pratt,Megan E"
    }
  }, {
    "data": {
      "source": "Taylor,Michelle Elizabeth",
      "target": "Taylor,Michelle Elizabeth"
    }
  }, {
    "data": {
      "source": "Taylor,Michelle Elizabeth",
      "target": "Wilkens,Natalie Desrochers"
    }
  }, {
    "data": {
      "source": "Taylor,Sydney June",
      "target": "Wang,Liping"
    }
  }, {
    "data": {
      "source": "Tebeau,Mark Thomas",
      "target": "Lessios-Damerow,Julia L"
    }
  }, {
    "data": {
      "source": "Tebeau,Mark Thomas",
      "target": "Simeone,Michael Paul"
    }
  }, {
    "data": {
      "source": "Tebeau,Mark Thomas",
      "target": "Tebeau,Mark Thomas"
    }
  }, {
    "data": {
      "source": "Tein,Jenn-Yun",
      "target": "Dishion,Thomas"
    }
  }, {
    "data": {
      "source": "Tein,Jenn-Yun",
      "target": "Mackinnon,David Peter"
    }
  }, {
    "data": {
      "source": "Tein,Jenn-Yun",
      "target": "Mauricio,Anne Marie"
    }
  }, {
    "data": {
      "source": "Tein,Jenn-Yun",
      "target": "Tein,Jenn-Yun"
    }
  }, {
    "data": {
      "source": "Telep,Cody Webb",
      "target": "Telep,Cody Webb"
    }
  }, {
    "data": {
      "source": "Tepedelenlioglu,Cihan",
      "target": "Spanias,Andreas Savva"
    }
  }, {
    "data": {
      "source": "Tepedelenlioglu,Cihan",
      "target": "Tepedelenlioglu,Cihan"
    }
  }, {
    "data": {
      "source": "Tepper,Steven Jay",
      "target": "Esser,Gregory M"
    }
  }, {
    "data": {
      "source": "Tepper,Steven Jay",
      "target": "Frenette,Alexandre"
    }
  }, {
    "data": {
      "source": "Tepper,Steven Jay",
      "target": "Koppell,Jonathan"
    }
  }, {
    "data": {
      "source": "Tepper,Steven Jay",
      "target": "Lerman,Elizabeth A"
    }
  }, {
    "data": {
      "source": "Tepper,Steven Jay",
      "target": "Pinholster,Jacob Daniel"
    }
  }, {
    "data": {
      "source": "Tepper,Steven Jay",
      "target": "Tepper,Steven Jay"
    }
  }, {
    "data": {
      "source": "Terrill,William Charles",
      "target": "Terrill,William Charles"
    }
  }, {
    "data": {
      "source": "Thangavelautham,Jekanthan",
      "target": "Robinson,Mark Southwick"
    }
  }, {
    "data": {
      "source": "Thangavelautham,Jekanthan",
      "target": "Thangavelautham,Jekanthan"
    }
  }, {
    "data": {
      "source": "Thies,Cameron G",
      "target": "Thies,Cameron G"
    }
  }, {
    "data": {
      "source": "Thompson,John Curtis",
      "target": "Thompson,John Curtis"
    }
  }, {
    "data": {
      "source": "Thompson,Michael Lloyd",
      "target": "Thompson,Michael Lloyd"
    }
  }, {
    "data": {
      "source": "Thompson,Patrick W",
      "target": "Milner,Fabio Augusto"
    }
  }, {
    "data": {
      "source": "Thompson,Patrick W",
      "target": "Thompson,Patrick W"
    }
  }, {
    "data": {
      "source": "Thorpe,Michael F",
      "target": "Thorpe,Michael F"
    }
  }, {
    "data": {
      "source": "Throop,Heather Lynne",
      "target": "Elkins-Tanton,Linda"
    }
  }, {
    "data": {
      "source": "Throop,Heather Lynne",
      "target": "Throop,Heather Lynne"
    }
  }, {
    "data": {
      "source": "Thyagarajan,Nithyanandan",
      "target": "Beardsley,Adam Peter"
    }
  }, {
    "data": {
      "source": "Thyagarajan,Nithyanandan",
      "target": "Bowman,Judd David"
    }
  }, {
    "data": {
      "source": "Thyagarajan,Nithyanandan",
      "target": "Thyagarajan,Nithyanandan"
    }
  }, {
    "data": {
      "source": "Till,Christy B",
      "target": "Till,Christy B"
    }
  }, {
    "data": {
      "source": "Timmes,Francis",
      "target": "Timmes,Francis"
    }
  }, {
    "data": {
      "source": "Tiokhin,Leonid",
      "target": "Nesse,Randolph Martin"
    }
  }, {
    "data": {
      "source": "Tobias,Evan Sean",
      "target": "Bennett,Ira Mccoy"
    }
  }, {
    "data": {
      "source": "Tobias,Evan Sean",
      "target": "Finn,Edward Frederick"
    }
  }, {
    "data": {
      "source": "Tobias,Evan Sean",
      "target": "Jordan,Shawn Senneff"
    }
  }, {
    "data": {
      "source": "Tobias,Evan Sean",
      "target": "Lande,Micah"
    }
  }, {
    "data": {
      "source": "Tobias,Evan Sean",
      "target": "Ostman,Rae Ellen Marie"
    }
  }, {
    "data": {
      "source": "Tobias,Evan Sean",
      "target": "Paine,Garth Crispan"
    }
  }, {
    "data": {
      "source": "Tobias,Evan Sean",
      "target": "Stauffer,Sandra Lee"
    }
  }, {
    "data": {
      "source": "Tobias,Evan Sean",
      "target": "Tinapple,David A"
    }
  }, {
    "data": {
      "source": "Tobias,Evan Sean",
      "target": "Tobias,Evan Sean"
    }
  }, {
    "data": {
      "source": "Tobin,Daniel Joseph",
      "target": "Mcmahon,Jeffrey D"
    }
  }, {
    "data": {
      "source": "Todd,Michael Wayne",
      "target": "Todd,Michael Wayne"
    }
  }, {
    "data": {
      "source": "Toledo,Meynard John Lapore",
      "target": "Buman,Matthew P"
    }
  }, {
    "data": {
      "source": "Tong,Hanghang",
      "target": "Liu,Huan"
    }
  }, {
    "data": {
      "source": "Tong,Hanghang",
      "target": "Tong,Hanghang"
    }
  }, {
    "data": {
      "source": "Tong,Hanghang",
      "target": "Ying,Lei"
    }
  }, {
    "data": {
      "source": "Tongay,Sefaattin",
      "target": "Tongay,Sefaattin"
    }
  }, {
    "data": {
      "source": "Torres,Cesar I",
      "target": "Flory,Justin David"
    }
  }, {
    "data": {
      "source": "Torres,Cesar I",
      "target": "Fromme,Petra"
    }
  }, {
    "data": {
      "source": "Torres,Cesar I",
      "target": "Hecht,Sidney Michael"
    }
  }, {
    "data": {
      "source": "Torres,Cesar I",
      "target": "Moore,Ana L"
    }
  }, {
    "data": {
      "source": "Torres,Cesar I",
      "target": "Moore,Thomas Andrew"
    }
  }, {
    "data": {
      "source": "Torres,Cesar I",
      "target": "Rittmann,Bruce Edward"
    }
  }, {
    "data": {
      "source": "Torres,Cesar I",
      "target": "Torres,Cesar I"
    }
  }, {
    "data": {
      "source": "Torres,Cesar I",
      "target": "Vermaas,Willem F J"
    }
  }, {
    "data": {
      "source": "Towers,Sherry Meleah Jean",
      "target": "Castillo-Chavez,Carlos"
    }
  }, {
    "data": {
      "source": "Towers,Sherry Meleah Jean",
      "target": "Maciejewski,Ross"
    }
  }, {
    "data": {
      "source": "Towers,Sherry Meleah Jean",
      "target": "Towers,Sherry Meleah Jean"
    }
  }, {
    "data": {
      "source": "Treacy,Michael Matthew John",
      "target": "Thorpe,Michael F"
    }
  }, {
    "data": {
      "source": "Treacy,Michael Matthew John",
      "target": "Treacy,Michael Matthew John"
    }
  }, {
    "data": {
      "source": "Trenchevska,Olgica",
      "target": "Nedelkov,Dobrin"
    }
  }, {
    "data": {
      "source": "Trenchevska,Olgica",
      "target": "Nelson,Randall William"
    }
  }, {
    "data": {
      "source": "Trenchevska,Olgica",
      "target": "Trenchevska,Olgica"
    }
  }, {
    "data": {
      "source": "Trifiro,Anthony J",
      "target": "Jimenez-Silva,Margarita"
    }
  }, {
    "data": {
      "source": "Trifiro,Anthony J",
      "target": "Lambson,Dawn Anita"
    }
  }, {
    "data": {
      "source": "Trifiro,Anthony J",
      "target": "Trifiro,Anthony J"
    }
  }, {
    "data": {
      "source": "Trovitch,Ryan James",
      "target": "Trovitch,Ryan James"
    }
  }, {
    "data": {
      "source": "Truong,Danh Dinh",
      "target": "Nikkhah,Mehdi"
    }
  }, {
    "data": {
      "source": "Tsakalis,Konstantinos",
      "target": "Tsakalis,Konstantinos"
    }
  }, {
    "data": {
      "source": "Tsow,Tsing Wai",
      "target": "Forzani,Erica Silvia"
    }
  }, {
    "data": {
      "source": "Tsow,Tsing Wai",
      "target": "Tao,Nongjian"
    }
  }, {
    "data": {
      "source": "Tsow,Tsing Wai",
      "target": "Tsow,Tsing Wai"
    }
  }, {
    "data": {
      "source": "Tsow,Tsing Wai",
      "target": "Xian,Xiaojun"
    }
  }, {
    "data": {
      "source": "Tsuda,Takeyuki",
      "target": "Tsuda,Takeyuki"
    }
  }, {
    "data": {
      "source": "Turaga,Pavan Kumar",
      "target": "Coleman,Grisha"
    }
  }, {
    "data": {
      "source": "Turaga,Pavan Kumar",
      "target": "Ingalls,Todd Matthew"
    }
  }, {
    "data": {
      "source": "Turaga,Pavan Kumar",
      "target": "Sha,Xin Wei"
    }
  }, {
    "data": {
      "source": "Turaga,Pavan Kumar",
      "target": "Turaga,Pavan Kumar"
    }
  }, {
    "data": {
      "source": "Turker,Ebru",
      "target": "Turker,Ebru"
    }
  }, {
    "data": {
      "source": "Turriziani Colonna,Federica",
      "target": "Maienschein,Jane Ann"
    }
  }, {
    "data": {
      "source": "Turriziani Colonna,Federica",
      "target": "Turriziani Colonna,Federica"
    }
  }, {
    "data": {
      "source": "Tylavsky,Daniel John",
      "target": "Tylavsky,Daniel John"
    }
  }, {
    "data": {
      "source": "Tyler,William James",
      "target": "Tyler,William James"
    }
  }, {
    "data": {
      "source": "Ugarova,Tatiana P",
      "target": "Ros,Robert"
    }
  }, {
    "data": {
      "source": "Ugarova,Tatiana P",
      "target": "Ugarova,Tatiana P"
    }
  }, {
    "data": {
      "source": "Umana-Taylor,Adriana J",
      "target": "Schaefer,David"
    }
  }, {
    "data": {
      "source": "Umana-Taylor,Adriana J",
      "target": "Umana-Taylor,Adriana J"
    }
  }, {
    "data": {
      "source": "Underiner,Tamara Lou",
      "target": "Etheridge Woodson,Stephani"
    }
  }, {
    "data": {
      "source": "Underiner,Tamara Lou",
      "target": "Underiner,Tamara Lou"
    }
  }, {
    "data": {
      "source": "Underwood,Benjamin Shane",
      "target": "El Asmar,Mounir"
    }
  }, {
    "data": {
      "source": "Underwood,Benjamin Shane",
      "target": "Jang,Jaewon"
    }
  }, {
    "data": {
      "source": "Underwood,Benjamin Shane",
      "target": "Kaloush,Kamil Elias"
    }
  }, {
    "data": {
      "source": "Underwood,Benjamin Shane",
      "target": "Neithalath,Narayanan"
    }
  }, {
    "data": {
      "source": "Underwood,Benjamin Shane",
      "target": "Stempihar,Jeffrey John"
    }
  }, {
    "data": {
      "source": "Underwood,Benjamin Shane",
      "target": "Underwood,Benjamin Shane"
    }
  }, {
    "data": {
      "source": "Updegraff,Kimberly A",
      "target": "Umana-Taylor,Adriana J"
    }
  }, {
    "data": {
      "source": "Updegraff,Kimberly A",
      "target": "Updegraff,Kimberly A"
    }
  }, {
    "data": {
      "source": "Vachaspati,Tanmay",
      "target": "Vachaspati,Tanmay"
    }
  }, {
    "data": {
      "source": "Vaiana,Sara",
      "target": "Ghirlanda,Giovanna"
    }
  }, {
    "data": {
      "source": "Vaiana,Sara",
      "target": "Vaiana,Sara"
    }
  }, {
    "data": {
      "source": "Vaiana,Sara",
      "target": "Yarger,Jeffery Lynn"
    }
  }, {
    "data": {
      "source": "Valente,Matthew",
      "target": "Mackinnon,David Peter"
    }
  }, {
    "data": {
      "source": "Van De Sande,Carla",
      "target": "Boggess,May"
    }
  }, {
    "data": {
      "source": "Van De Sande,Carla",
      "target": "Surgent,Scott Adam"
    }
  }, {
    "data": {
      "source": "Van De Sande,Carla",
      "target": "Van De Sande,Carla"
    }
  }, {
    "data": {
      "source": "Van Gelderen,Elly",
      "target": "Van Gelderen,Elly"
    }
  }, {
    "data": {
      "source": "Van Huisstede,Lauren Elizabeth",
      "target": "Crnic,Keith Alan"
    }
  }, {
    "data": {
      "source": "Vanlehn,Kurt A",
      "target": "Milner,Fabio Augusto"
    }
  }, {
    "data": {
      "source": "Vanlehn,Kurt A",
      "target": "Sannier,Adrian Vincent"
    }
  }, {
    "data": {
      "source": "Vanlehn,Kurt A",
      "target": "Vanlehn,Kurt A"
    }
  }, {
    "data": {
      "source": "Vanlehn,Kurt A",
      "target": "Wetzel,Jon"
    }
  }, {
    "data": {
      "source": "Varnum,Michael E",
      "target": "Blais,Christopher Raymond"
    }
  }, {
    "data": {
      "source": "Varnum,Michael E",
      "target": "Brewer Jr,Gene"
    }
  }, {
    "data": {
      "source": "Varnum,Michael E",
      "target": "Kenrick,Douglas T"
    }
  }, {
    "data": {
      "source": "Varnum,Michael E",
      "target": "Kwan,Sau Y"
    }
  }, {
    "data": {
      "source": "Varnum,Michael E",
      "target": "Suk,Hye Won"
    }
  }, {
    "data": {
      "source": "Varnum,Michael E",
      "target": "Varnum,Michael E"
    }
  }, {
    "data": {
      "source": "Vasileska,Dragica",
      "target": "Brinkman,Daniel"
    }
  }, {
    "data": {
      "source": "Vasileska,Dragica",
      "target": "Ghazarian,Arbi"
    }
  }, {
    "data": {
      "source": "Vasileska,Dragica",
      "target": "Ringhofer,Christian"
    }
  }, {
    "data": {
      "source": "Vasileska,Dragica",
      "target": "Vasileska,Dragica"
    }
  }, {
    "data": {
      "source": "Vaughan,Linda",
      "target": "Coletta,Dawn"
    }
  }, {
    "data": {
      "source": "Vaughan,Linda",
      "target": "Johnston,Carol S"
    }
  }, {
    "data": {
      "source": "Vaughan,Linda",
      "target": "Lindor,Keith Douglas"
    }
  }, {
    "data": {
      "source": "Vaughan,Linda",
      "target": "Mandarino,Lawrence"
    }
  }, {
    "data": {
      "source": "Vaughan,Linda",
      "target": "Regier,Philip Roger"
    }
  }, {
    "data": {
      "source": "Vaughan,Linda",
      "target": "Vaughan,Linda"
    }
  }, {
    "data": {
      "source": "Vega-Lopez,Sonia",
      "target": "Vega-Lopez,Sonia"
    }
  }, {
    "data": {
      "source": "Vega,Sujey",
      "target": "Vega,Sujey"
    }
  }, {
    "data": {
      "source": "Velasquez,Donna Marie",
      "target": "Bonifas,Robin P"
    }
  }, {
    "data": {
      "source": "Velasquez,Donna Marie",
      "target": "Velasquez,Donna Marie"
    }
  }, {
    "data": {
      "source": "Velazquez,Ramon",
      "target": "Oddo,Salvatore"
    }
  }, {
    "data": {
      "source": "Velez-Ibanez,Carlos",
      "target": "Velez-Ibanez,Carlos"
    }
  }, {
    "data": {
      "source": "Veramendi,Gregory Francisco",
      "target": "Veramendi,Gregory Francisco"
    }
  }, {
    "data": {
      "source": "Vermaas,Willem F J",
      "target": "Nielsen,David Ross"
    }
  }, {
    "data": {
      "source": "Vermaas,Willem F J",
      "target": "Vermaas,Willem F J"
    }
  }, {
    "data": {
      "source": "Vermaas,Willem F J",
      "target": "Wang,Xuan"
    }
  }, {
    "data": {
      "source": "Vernon,Brent",
      "target": "Caplan,Michael Ryckman"
    }
  }, {
    "data": {
      "source": "Vernon,Brent",
      "target": "Kleim,Jeffrey Allan"
    }
  }, {
    "data": {
      "source": "Vernon,Brent",
      "target": "Stabenfeldt,Sarah E"
    }
  }, {
    "data": {
      "source": "Vernon,Brent",
      "target": "Vernon,Brent"
    }
  }, {
    "data": {
      "source": "Vidt,Meghan Elise",
      "target": "Dounskaia,Natalia"
    }
  }, {
    "data": {
      "source": "Vidt,Meghan Elise",
      "target": "Lee,Chong Do"
    }
  }, {
    "data": {
      "source": "Vidt,Meghan Elise",
      "target": "Swan,Pamela D"
    }
  }, {
    "data": {
      "source": "Vidt,Meghan Elise",
      "target": "Vidt,Meghan Elise"
    }
  }, {
    "data": {
      "source": "Villalobos,Jesus R",
      "target": "Bliss,Daniel Wesley"
    }
  }, {
    "data": {
      "source": "Villalobos,Jesus R",
      "target": "Pan,Rong"
    }
  }, {
    "data": {
      "source": "Villalobos,Jesus R",
      "target": "Phelan,Patrick E"
    }
  }, {
    "data": {
      "source": "Villalobos,Jesus R",
      "target": "Sefair,Jorge Alberto"
    }
  }, {
    "data": {
      "source": "Villalobos,Jesus R",
      "target": "Shuaib,Abdelrahman Nasr"
    }
  }, {
    "data": {
      "source": "Villalobos,Jesus R",
      "target": "Villalobos,Jesus R"
    }
  }, {
    "data": {
      "source": "Villalobos,Jesus R",
      "target": "Wharton,Christopher Mack"
    }
  }, {
    "data": {
      "source": "Villalobos,Jesus R",
      "target": "Ye,Nong"
    }
  }, {
    "data": {
      "source": "Vittal,Vijay",
      "target": "Ayyanar,Raja"
    }
  }, {
    "data": {
      "source": "Vittal,Vijay",
      "target": "Heydt,Gerald"
    }
  }, {
    "data": {
      "source": "Vittal,Vijay",
      "target": "Tylavsky,Daniel John"
    }
  }, {
    "data": {
      "source": "Vittal,Vijay",
      "target": "Vittal,Vijay"
    }
  }, {
    "data": {
      "source": "Vivoni,Enrique",
      "target": "Hanemann,William Michael Micha"
    }
  }, {
    "data": {
      "source": "Vivoni,Enrique",
      "target": "Pasqualetti,Martin J"
    }
  }, {
    "data": {
      "source": "Vivoni,Enrique",
      "target": "Vivoni,Enrique"
    }
  }, {
    "data": {
      "source": "Vogt,Christine Ann",
      "target": "Andereck,Kathleen L"
    }
  }, {
    "data": {
      "source": "Vogt,Christine Ann",
      "target": "Buzinde,Christine"
    }
  }, {
    "data": {
      "source": "Vogt,Christine Ann",
      "target": "Lee,Woojin"
    }
  }, {
    "data": {
      "source": "Vogt,Christine Ann",
      "target": "Nyaupane,Gyan P"
    }
  }, {
    "data": {
      "source": "Vogt,Christine Ann",
      "target": "Swindell,David"
    }
  }, {
    "data": {
      "source": "Vogt,Christine Ann",
      "target": "Vogt,Christine Ann"
    }
  }, {
    "data": {
      "source": "Vrudhula,Sarma B K",
      "target": "Vrudhula,Sarma B K"
    }
  }, {
    "data": {
      "source": "Wadhwa,Meenakshi",
      "target": "Hervig,Richard Lokke"
    }
  }, {
    "data": {
      "source": "Wadhwa,Meenakshi",
      "target": "Wadhwa,Meenakshi"
    }
  }, {
    "data": {
      "source": "Wagner-Dunbar,Faith Marg",
      "target": "Ball,Deborah"
    }
  }, {
    "data": {
      "source": "Wagner-Dunbar,Faith Marg",
      "target": "Wagner-Dunbar,Faith Marg"
    }
  }, {
    "data": {
      "source": "Wagner,Carl Edward",
      "target": "Jurutka,Peter W"
    }
  }, {
    "data": {
      "source": "Wagner,Carl Edward",
      "target": "Marshall,Pamela Ann"
    }
  }, {
    "data": {
      "source": "Wagner,Carl Edward",
      "target": "Wagner,Carl Edward"
    }
  }, {
    "data": {
      "source": "Waldman,David A",
      "target": "Javidan,Mansour"
    }
  }, {
    "data": {
      "source": "Waldman,David A",
      "target": "Waldman,David A"
    }
  }, {
    "data": {
      "source": "Waldron,Vincent R",
      "target": "Kelley,Douglas L"
    }
  }, {
    "data": {
      "source": "Waldron,Vincent R",
      "target": "Waldron,Vincent R"
    }
  }, {
    "data": {
      "source": "Walker,Douglas Gordon",
      "target": "Lue,Lih-Fen"
    }
  }, {
    "data": {
      "source": "Walker,Douglas Gordon",
      "target": "Walker,Douglas Gordon"
    }
  }, {
    "data": {
      "source": "Walker,Erin Ashley",
      "target": "Walker,Erin Ashley"
    }
  }, {
    "data": {
      "source": "Walker,Ian James",
      "target": "Walker,Ian James"
    }
  }, {
    "data": {
      "source": "Wallace,Danielle Marie",
      "target": "Grubesic,Anthony Hoyt"
    }
  }, {
    "data": {
      "source": "Wallace,Danielle Marie",
      "target": "Wallace,Danielle Marie"
    }
  }, {
    "data": {
      "source": "Wallstrom,Garrick L",
      "target": "Wallstrom,Garrick L"
    }
  }, {
    "data": {
      "source": "Walters,Debra Molina",
      "target": "Jordan,Shawn Senneff"
    }
  }, {
    "data": {
      "source": "Walters,Debra Molina",
      "target": "Walters,Debra Molina"
    }
  }, {
    "data": {
      "source": "Wang,Chao",
      "target": "Jiao,Yang"
    }
  }, {
    "data": {
      "source": "Wang,Chao",
      "target": "Wang,Chao"
    }
  }, {
    "data": {
      "source": "Wang,Chao",
      "target": "Woodbury,Neal Walter"
    }
  }, {
    "data": {
      "source": "Wang,Chao",
      "target": "Yan,Hao"
    }
  }, {
    "data": {
      "source": "Wang,Chao",
      "target": "Yao,Yu"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Berisha,Visar Shahin"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Buman,Matthew P"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Dinu,Valentin"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Doebbeling,Bradley Niel"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Gonzalez,Graciela H"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Grando,Maria Adela"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Greenes,Robert"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Halden,Rolf"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Hekler,Eric Chambers"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Johnson,William G"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Kaufman,David"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Liang,Jianming"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Liu,Li"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Mccullough,Jeffrey Carroll"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Murcko,Anita C."
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Patel,Vimla"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Peter,Beate"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Reddy,Corianne Rogalsky"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Runger,George"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Scotch,Matthew L"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Shortliffe,Edward H"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Sottara,Davide"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Wallstrom,Garrick L"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Wang,Dongwen"
    }
  }, {
    "data": {
      "source": "Wang,Dongwen",
      "target": "Yamashiro,Carl Takeshi"
    }
  }, {
    "data": {
      "source": "Wang,Liping",
      "target": "Alford,Terry Lynn"
    }
  }, {
    "data": {
      "source": "Wang,Liping",
      "target": "Jiang,Hanqing"
    }
  }, {
    "data": {
      "source": "Wang,Liping",
      "target": "Li,Jian"
    }
  }, {
    "data": {
      "source": "Wang,Liping",
      "target": "Wang,Liping"
    }
  }, {
    "data": {
      "source": "Wang,Liping",
      "target": "Yu,Hongbin"
    }
  }, {
    "data": {
      "source": "Wang,Qing Hua",
      "target": "Green,Alexander Arthur"
    }
  }, {
    "data": {
      "source": "Wang,Qing Hua",
      "target": "Wang,Qing Hua"
    }
  }, {
    "data": {
      "source": "Wang,Robert Y.",
      "target": "Wang,Robert Y."
    }
  }, {
    "data": {
      "source": "Wang,Xiao",
      "target": "Lai,Ying-Cheng"
    }
  }, {
    "data": {
      "source": "Wang,Xiao",
      "target": "Wang,Xiao"
    }
  }, {
    "data": {
      "source": "Wang,Xu",
      "target": "Wang,Xu"
    }
  }, {
    "data": {
      "source": "Wang,Xuan",
      "target": "Nielsen,David Ross"
    }
  }, {
    "data": {
      "source": "Wang,Xuan",
      "target": "Wang,Xuan"
    }
  }, {
    "data": {
      "source": "Wang,Yalin",
      "target": "Wang,Yalin"
    }
  }, {
    "data": {
      "source": "Wang,Zhihua",
      "target": "Myint,Soe W"
    }
  }, {
    "data": {
      "source": "Wang,Zhihua",
      "target": "Wang,Zhihua"
    }
  }, {
    "data": {
      "source": "Webb,Vincent J",
      "target": "Katz,Charles"
    }
  }, {
    "data": {
      "source": "Webb,Vincent J",
      "target": "Webb,Vincent J"
    }
  }, {
    "data": {
      "source": "Welch,Eric W",
      "target": "Welch,Eric W"
    }
  }, {
    "data": {
      "source": "Welfert,Bruno Denis",
      "target": "Lopez,Juan Manuel"
    }
  }, {
    "data": {
      "source": "Welfert,Bruno Denis",
      "target": "Welfert,Bruno Denis"
    }
  }, {
    "data": {
      "source": "Wellington,Danika Fay",
      "target": "Bell III,James"
    }
  }, {
    "data": {
      "source": "Wentz,Elizabeth Ann",
      "target": "Bernstein,Bianca L"
    }
  }, {
    "data": {
      "source": "Wentz,Elizabeth Ann",
      "target": "Brayboy,Bryan"
    }
  }, {
    "data": {
      "source": "Wentz,Elizabeth Ann",
      "target": "Ehlenz,Meagan"
    }
  }, {
    "data": {
      "source": "Wentz,Elizabeth Ann",
      "target": "Gaughan,Monica M"
    }
  }, {
    "data": {
      "source": "Wentz,Elizabeth Ann",
      "target": "Glick,Jennifer Elyse"
    }
  }, {
    "data": {
      "source": "Wentz,Elizabeth Ann",
      "target": "Gonzales,Nancy A"
    }
  }, {
    "data": {
      "source": "Wentz,Elizabeth Ann",
      "target": "Panchanathan,Sethuraman"
    }
  }, {
    "data": {
      "source": "Wentz,Elizabeth Ann",
      "target": "Pijawka,David"
    }
  }, {
    "data": {
      "source": "Wentz,Elizabeth Ann",
      "target": "Searle,Mark"
    }
  }, {
    "data": {
      "source": "Wentz,Elizabeth Ann",
      "target": "Semken,Steven"
    }
  }, {
    "data": {
      "source": "Wentz,Elizabeth Ann",
      "target": "Wentz,Elizabeth Ann"
    }
  }, {
    "data": {
      "source": "Wermers,James Edward",
      "target": "Wermers,James Edward"
    }
  }, {
    "data": {
      "source": "Wernimont,Jacqueline",
      "target": "Wernimont,Jacqueline"
    }
  }, {
    "data": {
      "source": "Werth,Susanna",
      "target": "Shirzaei,Manoochehr"
    }
  }, {
    "data": {
      "source": "Werth,Susanna",
      "target": "Werth,Susanna"
    }
  }, {
    "data": {
      "source": "Wertheimer,Eric H R",
      "target": "Wertheimer,Eric H R"
    }
  }, {
    "data": {
      "source": "Westerhoff,Paul",
      "target": "Boyer,Treavor H."
    }
  }, {
    "data": {
      "source": "Westerhoff,Paul",
      "target": "Capco,David George"
    }
  }, {
    "data": {
      "source": "Westerhoff,Paul",
      "target": "Fox,Peter"
    }
  }, {
    "data": {
      "source": "Westerhoff,Paul",
      "target": "Herckes,Pierre E H"
    }
  }, {
    "data": {
      "source": "Westerhoff,Paul",
      "target": "Hristovski,Kiril D"
    }
  }, {
    "data": {
      "source": "Westerhoff,Paul",
      "target": "Krajmalnik-Brown,Rosa"
    }
  }, {
    "data": {
      "source": "Westerhoff,Paul",
      "target": "Westerhoff,Paul"
    }
  }, {
    "data": {
      "source": "Westlake,Garret M",
      "target": "Westlake,Garret M"
    }
  }, {
    "data": {
      "source": "Wetmore,Jameson Michael",
      "target": "Bennett,Ira Mccoy"
    }
  }, {
    "data": {
      "source": "Wetmore,Jameson Michael",
      "target": "Wetmore,Jameson Michael"
    }
  }, {
    "data": {
      "source": "Whipple,Kelin X",
      "target": "Whipple,Kelin X"
    }
  }, {
    "data": {
      "source": "White,Dave Douglas",
      "target": "Maciejewski,Ross"
    }
  }, {
    "data": {
      "source": "White,Dave Douglas",
      "target": "White,Dave Douglas"
    }
  }, {
    "data": {
      "source": "White,Michael D",
      "target": "Katz,Charles"
    }
  }, {
    "data": {
      "source": "White,Michael D",
      "target": "White,Michael D"
    }
  }, {
    "data": {
      "source": "White,Rebecca May Blumenauer",
      "target": "White,Rebecca May Blumenauer"
    }
  }, {
    "data": {
      "source": "Whitsett,Andrea Johns",
      "target": "Daugherty,David B."
    }
  }, {
    "data": {
      "source": "Whitsett,Andrea Johns",
      "target": "Whitsett,Andrea Johns"
    }
  }, {
    "data": {
      "source": "Wilcox,Martha Jeanne",
      "target": "Gray,Shelley Irene"
    }
  }, {
    "data": {
      "source": "Wilcox,Martha Jeanne",
      "target": "Reiser,Mark R"
    }
  }, {
    "data": {
      "source": "Wilcox,Martha Jeanne",
      "target": "Wilcox,Martha Jeanne"
    }
  }, {
    "data": {
      "source": "Williams,David A",
      "target": "Williams,David A"
    }
  }, {
    "data": {
      "source": "Williams,Deborah L",
      "target": "Williams,Deborah L"
    }
  }, {
    "data": {
      "source": "Williams,Lela Rankin",
      "target": "Williams,Lela Rankin"
    }
  }, {
    "data": {
      "source": "Williamson,John Clint",
      "target": "Freakley,Benjamin Clark"
    }
  }, {
    "data": {
      "source": "Williamson,John Clint",
      "target": "Jaynes,Andrew Craig"
    }
  }, {
    "data": {
      "source": "Williamson,John Clint",
      "target": "Polt,Michael Christian"
    }
  }, {
    "data": {
      "source": "Williamson,John Clint",
      "target": "Williamson,John Clint"
    }
  }, {
    "data": {
      "source": "Wilson Sayres,Melissa A",
      "target": "Wilson Sayres,Melissa A"
    }
  }, {
    "data": {
      "source": "Wilson-Rawls,Norma Jeanne",
      "target": "Brafman,David Adam"
    }
  }, {
    "data": {
      "source": "Wilson-Rawls,Norma Jeanne",
      "target": "Stabenfeldt,Sarah E"
    }
  }, {
    "data": {
      "source": "Wilson-Rawls,Norma Jeanne",
      "target": "Wilson-Rawls,Norma Jeanne"
    }
  }, {
    "data": {
      "source": "Windhorst,Rogier A",
      "target": "Windhorst,Rogier A"
    }
  }, {
    "data": {
      "source": "Wittmann,Axel",
      "target": "Wittmann,Axel"
    }
  }, {
    "data": {
      "source": "Wolfersteig,Wendy L",
      "target": "Lopez,Vera A"
    }
  }, {
    "data": {
      "source": "Wolfersteig,Wendy L",
      "target": "Marsiglia,Flavio"
    }
  }, {
    "data": {
      "source": "Wolfersteig,Wendy L",
      "target": "Wolfersteig,Wendy L"
    }
  }, {
    "data": {
      "source": "Wolowiec-Fisher,Kimberly Chris",
      "target": "Wolowiec-Fisher,Kimberly Chris"
    }
  }, {
    "data": {
      "source": "Wood,Reed Morrison",
      "target": "Wood,Reed Morrison"
    }
  }, {
    "data": {
      "source": "Woodbury,Neal Walter",
      "target": "Johnston,Stephen Albert"
    }
  }, {
    "data": {
      "source": "Woodbury,Neal Walter",
      "target": "Lin,Su"
    }
  }, {
    "data": {
      "source": "Woodbury,Neal Walter",
      "target": "Matyushov,Dmitry V"
    }
  }, {
    "data": {
      "source": "Woodbury,Neal Walter",
      "target": "Woodbury,Neal Walter"
    }
  }, {
    "data": {
      "source": "Woodbury,Neal Walter",
      "target": "Zhao,Zhan-Gong"
    }
  }, {
    "data": {
      "source": "Wright,Kevin A",
      "target": "Griffin,Marie Louise"
    }
  }, {
    "data": {
      "source": "Wright,Kevin A",
      "target": "Hepburn,John Robert"
    }
  }, {
    "data": {
      "source": "Wright,Kevin A",
      "target": "Wright,Kevin A"
    }
  }, {
    "data": {
      "source": "Wright,Thorin",
      "target": "Wood,Reed Morrison"
    }
  }, {
    "data": {
      "source": "Wright,Thorin",
      "target": "Wright,Thorin"
    }
  }, {
    "data": {
      "source": "Wu,Bing",
      "target": "Wu,Bing"
    }
  }, {
    "data": {
      "source": "Wu,Carole-Jean",
      "target": "Wu,Carole-Jean"
    }
  }, {
    "data": {
      "source": "Wu,Teresa",
      "target": "Ju,Feng"
    }
  }, {
    "data": {
      "source": "Wu,Teresa",
      "target": "Li,Jing"
    }
  }, {
    "data": {
      "source": "Wu,Teresa",
      "target": "Wu,Teresa"
    }
  }, {
    "data": {
      "source": "Wutich,Amber Elisabeth Yoder",
      "target": "Wutich,Amber Elisabeth Yoder"
    }
  }, {
    "data": {
      "source": "Wylie,Ruth",
      "target": "Wylie,Ruth"
    }
  }, {
    "data": {
      "source": "Wynne,Clive",
      "target": "Wynne,Clive"
    }
  }, {
    "data": {
      "source": "Xue,Guoliang",
      "target": "Xue,Guoliang"
    }
  }, {
    "data": {
      "source": "Yan,Hao",
      "target": "Blattman,Joseph Nathan"
    }
  }, {
    "data": {
      "source": "Yan,Hao",
      "target": "Chang,Yung"
    }
  }, {
    "data": {
      "source": "Yan,Hao",
      "target": "Liu,Yan"
    }
  }, {
    "data": {
      "source": "Yan,Hao",
      "target": "Mills,Jeremy H"
    }
  }, {
    "data": {
      "source": "Yan,Hao",
      "target": "Park,Jin"
    }
  }, {
    "data": {
      "source": "Yan,Hao",
      "target": "Stephanopoulos,Nicholas"
    }
  }, {
    "data": {
      "source": "Yan,Hao",
      "target": "Woodbury,Neal Walter"
    }
  }, {
    "data": {
      "source": "Yan,Hao",
      "target": "Yan,Hao"
    }
  }, {
    "data": {
      "source": "Yao,Yu",
      "target": "Chae,Junseok"
    }
  }, {
    "data": {
      "source": "Yao,Yu",
      "target": "Goodnick,Stephen Marshall"
    }
  }, {
    "data": {
      "source": "Yao,Yu",
      "target": "Ren,Fengbo"
    }
  }, {
    "data": {
      "source": "Yao,Yu",
      "target": "Wang,Chao"
    }
  }, {
    "data": {
      "source": "Yao,Yu",
      "target": "Yao,Yu"
    }
  }, {
    "data": {
      "source": "Yao,Yu",
      "target": "Zhang,Yong-Hang"
    }
  }, {
    "data": {
      "source": "Yarger,Jeffery Lynn",
      "target": "Leinenweber,Kurt D"
    }
  }, {
    "data": {
      "source": "Yarger,Jeffery Lynn",
      "target": "Yarger,Jeffery Lynn"
    }
  }, {
    "data": {
      "source": "Yau,Sik-Sang",
      "target": "Ahn,Gail-Joon"
    }
  }, {
    "data": {
      "source": "Yau,Sik-Sang",
      "target": "Yau,Sik-Sang"
    }
  }, {
    "data": {
      "source": "Ye,Nong",
      "target": "Chong,Oswald Wk"
    }
  }, {
    "data": {
      "source": "Ye,Nong",
      "target": "Collofello,James Samuel"
    }
  }, {
    "data": {
      "source": "Ye,Nong",
      "target": "Ye,Nong"
    }
  }, {
    "data": {
      "source": "Yeager,Cynthia Jean",
      "target": "Kreiser,Kellie Jean"
    }
  }, {
    "data": {
      "source": "Yekani Fard,Masoud",
      "target": "Yekani Fard,Masoud"
    }
  }, {
    "data": {
      "source": "Ying,Lei",
      "target": "Ying,Lei"
    }
  }, {
    "data": {
      "source": "Ying,Lei",
      "target": "Zhang,Junshan"
    }
  }, {
    "data": {
      "source": "York,Abigail",
      "target": "York,Abigail"
    }
  }, {
    "data": {
      "source": "Yost,William A",
      "target": "Yost,William A"
    }
  }, {
    "data": {
      "source": "Young,Patrick",
      "target": "Young,Patrick"
    }
  }, {
    "data": {
      "source": "Youngstedt,Shawn D",
      "target": "Youngstedt,Shawn D"
    }
  }, {
    "data": {
      "source": "Yu,Hongbin",
      "target": "Ayyanar,Raja"
    }
  }, {
    "data": {
      "source": "Yu,Hongbin",
      "target": "Jiang,Hanqing"
    }
  }, {
    "data": {
      "source": "Yu,Hongbin",
      "target": "Yu,Hongbin"
    }
  }, {
    "data": {
      "source": "Yu,Hongyu",
      "target": "Dai,Lenore L"
    }
  }, {
    "data": {
      "source": "Yu,Hongyu",
      "target": "Garnero,Edward"
    }
  }, {
    "data": {
      "source": "Yu,Hongyu",
      "target": "Yu,Hongyu"
    }
  }, {
    "data": {
      "source": "Yu,Shimeng",
      "target": "Cao,Yu"
    }
  }, {
    "data": {
      "source": "Yu,Shimeng",
      "target": "Chakrabarti,Chaitali"
    }
  }, {
    "data": {
      "source": "Yu,Shimeng",
      "target": "Seo,Jae-Sun"
    }
  }, {
    "data": {
      "source": "Yu,Shimeng",
      "target": "Yu,Shimeng"
    }
  }, {
    "data": {
      "source": "Zatsepin,Nadia",
      "target": "Kirian,Richard Adam"
    }
  }, {
    "data": {
      "source": "Zatsepin,Nadia",
      "target": "Schmidt,Kevin Edward"
    }
  }, {
    "data": {
      "source": "Zatsepin,Nadia",
      "target": "Spence,John Charles"
    }
  }, {
    "data": {
      "source": "Zatsepin,Nadia",
      "target": "Weierstall,Uwe Juergen"
    }
  }, {
    "data": {
      "source": "Zatsepin,Nadia",
      "target": "Zatsepin,Nadia"
    }
  }, {
    "data": {
      "source": "Zautra,Alex John",
      "target": "Zautra,Alex John"
    }
  }, {
    "data": {
      "source": "Zhai,Guang",
      "target": "Shirzaei,Manoochehr"
    }
  }, {
    "data": {
      "source": "Zhang,Fei",
      "target": "Jiao,Yang"
    }
  }, {
    "data": {
      "source": "Zhang,Fei",
      "target": "Yan,Hao"
    }
  }, {
    "data": {
      "source": "Zhang,Fei",
      "target": "Zhang,Fei"
    }
  }, {
    "data": {
      "source": "Zhang,Jun Lei",
      "target": "West,Stephen H"
    }
  }, {
    "data": {
      "source": "Zhang,Junshan",
      "target": "Hedman,Kory W"
    }
  }, {
    "data": {
      "source": "Zhang,Junshan",
      "target": "Scaglione,Anna"
    }
  }, {
    "data": {
      "source": "Zhang,Junshan",
      "target": "Vittal,Vijay"
    }
  }, {
    "data": {
      "source": "Zhang,Junshan",
      "target": "Zhang,Junshan"
    }
  }, {
    "data": {
      "source": "Zhang,Wenlong",
      "target": "Zhang,Wenlong"
    }
  }, {
    "data": {
      "source": "Zhang,Xia",
      "target": "Cutter,Robert Joe"
    }
  }, {
    "data": {
      "source": "Zhang,Xia",
      "target": "Zhang,Xia"
    }
  }, {
    "data": {
      "source": "Zhang,Yanchao",
      "target": "Zhang,Yanchao"
    }
  }, {
    "data": {
      "source": "Zhang,Yong-Hang",
      "target": "Chen,Tingyong"
    }
  }, {
    "data": {
      "source": "Zhang,Yong-Hang",
      "target": "Goodnick,Stephen Marshall"
    }
  }, {
    "data": {
      "source": "Zhang,Yong-Hang",
      "target": "Holman,Zachary Charles"
    }
  }, {
    "data": {
      "source": "Zhang,Yong-Hang",
      "target": "Honsberg,Christiana B"
    }
  }, {
    "data": {
      "source": "Zhang,Yong-Hang",
      "target": "Johnson,Shane Richard"
    }
  }, {
    "data": {
      "source": "Zhang,Yong-Hang",
      "target": "Kiehl,Richard Arthur"
    }
  }, {
    "data": {
      "source": "Zhang,Yong-Hang",
      "target": "King,Richard Roland"
    }
  }, {
    "data": {
      "source": "Zhang,Yong-Hang",
      "target": "Mccartney,Martha Rogers"
    }
  }, {
    "data": {
      "source": "Zhang,Yong-Hang",
      "target": "Menendez,Jose"
    }
  }, {
    "data": {
      "source": "Zhang,Yong-Hang",
      "target": "Nemanich,Robert John"
    }
  }, {
    "data": {
      "source": "Zhang,Yong-Hang",
      "target": "Ponce,Fernando Agustin"
    }
  }, {
    "data": {
      "source": "Zhang,Yong-Hang",
      "target": "Smith,David John"
    }
  }, {
    "data": {
      "source": "Zhang,Yong-Hang",
      "target": "Vasileska,Dragica"
    }
  }, {
    "data": {
      "source": "Zhang,Yong-Hang",
      "target": "Yao,Yu"
    }
  }, {
    "data": {
      "source": "Zhang,Yong-Hang",
      "target": "Zhang,Yong-Hang"
    }
  }, {
    "data": {
      "source": "Zhang,Yong-Hang",
      "target": "Zhao,Yuji"
    }
  }, {
    "data": {
      "source": "Zhang,Yu",
      "target": "Ben Amor,Hani"
    }
  }, {
    "data": {
      "source": "Zhang,Yu",
      "target": "Kambhampati,Subbarao"
    }
  }, {
    "data": {
      "source": "Zhang,Yu",
      "target": "Zhang,Yu"
    }
  }, {
    "data": {
      "source": "Zhao,Ming",
      "target": "Candan,Kasim Selcuk"
    }
  }, {
    "data": {
      "source": "Zhao,Ming",
      "target": "Davulcu,Hasan"
    }
  }, {
    "data": {
      "source": "Zhao,Ming",
      "target": "He,Jingrui"
    }
  }, {
    "data": {
      "source": "Zhao,Ming",
      "target": "Li,Baoxin"
    }
  }, {
    "data": {
      "source": "Zhao,Ming",
      "target": "Liu,Huan"
    }
  }, {
    "data": {
      "source": "Zhao,Ming",
      "target": "Maciejewski,Ross"
    }
  }, {
    "data": {
      "source": "Zhao,Ming",
      "target": "Ren,Fengbo"
    }
  }, {
    "data": {
      "source": "Zhao,Ming",
      "target": "Tong,Hanghang"
    }
  }, {
    "data": {
      "source": "Zhao,Ming",
      "target": "Zhao,Ming"
    }
  }, {
    "data": {
      "source": "Zhao,Yuji",
      "target": "Smith,David John"
    }
  }, {
    "data": {
      "source": "Zhao,Yuji",
      "target": "Wertheimer,Eric H R"
    }
  }, {
    "data": {
      "source": "Zhao,Yuji",
      "target": "Zhang,Yong-Hang"
    }
  }, {
    "data": {
      "source": "Zhao,Yuji",
      "target": "Zhao,Yuji"
    }
  }, {
    "data": {
      "source": "Zheng,Yi",
      "target": "Zheng,Yi"
    }
  }, {
    "data": {
      "source": "Zhou,Xuesong",
      "target": "Kaloush,Kamil Elias"
    }
  }, {
    "data": {
      "source": "Zhou,Xuesong",
      "target": "Lou,Yingyan"
    }
  }, {
    "data": {
      "source": "Zhou,Xuesong",
      "target": "Zhou,Xuesong"
    }
  }, {
    "data": {
      "source": "Zolotov,Mikhail",
      "target": "Zolotov,Mikhail"
    }
  }]
};
},{}],"cytoscapeEx.js":[function(require,module,exports) {
var cytoscape = require('cytoscape');

var $ = require("jquery");

var cytoData = require('./nLinks.json'); //(with path)// = JSON.stringify("nodes_convert.json");


window.cytoscape = cytoscape; // console.log("lol", cytoData);

var cy = cytoscape({
  container: document.getElementById('cy'),
  elements: cytoData,
  style: [// the stylesheet for the graph
  {
    selector: 'node',
    style: {
      'background-color': 'mapData(group_code, 0, 29, rgb(10,250,0), rgb(245,0,220))',
      'label': 'data(id)',
      'width': "mapData(links, 0, 10, 20, 60)",
      "height": "mapData(links, 0, 10, 20, 60)"
    }
  }, {
    selector: 'edge',
    style: {
      'width': 2,
      'line-color': '#ccc',
      'target-arrow-color': '#ccc',
      'target-arrow-shape': 'triangle'
    }
  }],
  layout: {
    name: 'grid',
    rows: 1
  }
}); // Layout
// http://js.cytoscape.org/#layouts

var options = {
  name: 'circle',
  fit: true,
  // whether to fit the viewport to the graph
  padding: 30,
  // the padding on fit
  boundingBox: undefined,
  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  avoidOverlap: true,
  // prevents node overlap, may overflow boundingBox and radius if not enough space
  nodeDimensionsIncludeLabels: false,
  // Excludes the label when calculating node bounding boxes for the layout algorithm
  spacingFactor: undefined,
  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
  radius: undefined,
  // the radius of the circle
  startAngle: 3 / 2 * Math.PI,
  // where nodes start in radians
  sweep: undefined,
  // how many radians should be between the first and last node (defaults to full circle)
  clockwise: true,
  // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
  sort: undefined,
  // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
  animate: false,
  // whether to transition the node positions
  animationDuration: 500,
  // duration of animation in ms if enabled
  animationEasing: undefined,
  // easing of animation if enabled
  animateFilter: function animateFilter(node, i) {
    return true;
  },
  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
  ready: undefined,
  // callback on layoutready
  stop: undefined,
  // callback on layoutstop
  transform: function transform(node, position) {
    return position;
  } // transform a given node position. Useful for changing flow direction in discrete layouts 

};
cy.layout(options);
var layout = cy.layout(options);
layout.run(); // var layout = cy.layout({ name: 'random' });
//   layout.start()
// Iterate over each node by copying ref.

var nodes = cy.nodes();
var lastNodeSearch = "";
nodes.forEach(function (n) {// console.log("Node", n.data());
  // console.log("Indegrees:\t" + n.indegree(false));
}); // JQuery Search Feature

$("#submit").on("click", function () {
  var name = $("input:text").val();
  var nodes = cy.nodes();
  nodes.forEach(function (n) {
    if (n.data().id == name || n.data().id.includes(name)) {
      // TODO: Format data to be last name, first name
      console.log(n.data());
      console.log("FOUND", n.data().id);
      var findNode = '[id = ' + '"' + name + '"' + ']';
      cy.nodes(findNode).style('background-color', 'magenta'); // TODO: Store original color of node to revert it per new search.

      lastNodeSearch = n.data().id; // Assign reference to past node.
      // displayNeighbors(n);
    }
  });
}); // Press enter to submit once typing.

$('#name').keydown(function (event) {
  var keyCode = event.keyCode ? event.keyCode : event.which;

  if (keyCode == '13') {
    $('#submit').trigger('click');
  }
}); // Allow auto-comlete of input.
// function complete(){
//     let nodes = cy.nodes();
//     $( "#name" ).autocomplete({
//          source: nodes
//       });   
// }
// complete();
},{"cytoscape":"node_modules/cytoscape/dist/cytoscape.cjs.js","jquery":"node_modules/jquery/dist/jquery.js","./nLinks.json":"nLinks.json"}],"node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "49154" + '/');

  ws.onmessage = function (event) {
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      console.clear();
      data.assets.forEach(function (asset) {
        hmrApply(global.parcelRequire, asset);
      });
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          hmrAccept(global.parcelRequire, asset.id);
        }
      });
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAccept(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAccept(bundle.parent, id);
  }

  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAccept(global.parcelRequire, id);
  });
}
},{}]},{},["node_modules/parcel-bundler/src/builtins/hmr-runtime.js","cytoscapeEx.js"], null)
//# sourceMappingURL=/cytoscapeEx.417bb115.map