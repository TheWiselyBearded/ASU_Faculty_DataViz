{"id":"node_modules/webcola/dist/src/pqueue.js","dependencies":[{"name":"/Users/reza/Documents/Meteor/ASU Data Viz Tinnapple/Graph/node_modules/webcola/dist/src/pqueue.js.map","includedInParent":true,"mtime":1517462217000},{"name":"/Users/reza/Documents/Meteor/ASU Data Viz Tinnapple/Graph/node_modules/webcola/WebCola/src/pqueue.ts","includedInParent":true,"mtime":1516884256000},{"name":"/Users/reza/Documents/Meteor/ASU Data Viz Tinnapple/Graph/package.json","includedInParent":true,"mtime":1550967406043},{"name":"/Users/reza/Documents/Meteor/ASU Data Viz Tinnapple/Graph/node_modules/webcola/package.json","includedInParent":true,"mtime":1550967405642}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar PairingHeap = (function () {\r\n    function PairingHeap(elem) {\r\n        this.elem = elem;\r\n        this.subheaps = [];\r\n    }\r\n    PairingHeap.prototype.toString = function (selector) {\r\n        var str = \"\", needComma = false;\r\n        for (var i = 0; i < this.subheaps.length; ++i) {\r\n            var subheap = this.subheaps[i];\r\n            if (!subheap.elem) {\r\n                needComma = false;\r\n                continue;\r\n            }\r\n            if (needComma) {\r\n                str = str + \",\";\r\n            }\r\n            str = str + subheap.toString(selector);\r\n            needComma = true;\r\n        }\r\n        if (str !== \"\") {\r\n            str = \"(\" + str + \")\";\r\n        }\r\n        return (this.elem ? selector(this.elem) : \"\") + str;\r\n    };\r\n    PairingHeap.prototype.forEach = function (f) {\r\n        if (!this.empty()) {\r\n            f(this.elem, this);\r\n            this.subheaps.forEach(function (s) { return s.forEach(f); });\r\n        }\r\n    };\r\n    PairingHeap.prototype.count = function () {\r\n        return this.empty() ? 0 : 1 + this.subheaps.reduce(function (n, h) {\r\n            return n + h.count();\r\n        }, 0);\r\n    };\r\n    PairingHeap.prototype.min = function () {\r\n        return this.elem;\r\n    };\r\n    PairingHeap.prototype.empty = function () {\r\n        return this.elem == null;\r\n    };\r\n    PairingHeap.prototype.contains = function (h) {\r\n        if (this === h)\r\n            return true;\r\n        for (var i = 0; i < this.subheaps.length; i++) {\r\n            if (this.subheaps[i].contains(h))\r\n                return true;\r\n        }\r\n        return false;\r\n    };\r\n    PairingHeap.prototype.isHeap = function (lessThan) {\r\n        var _this = this;\r\n        return this.subheaps.every(function (h) { return lessThan(_this.elem, h.elem) && h.isHeap(lessThan); });\r\n    };\r\n    PairingHeap.prototype.insert = function (obj, lessThan) {\r\n        return this.merge(new PairingHeap(obj), lessThan);\r\n    };\r\n    PairingHeap.prototype.merge = function (heap2, lessThan) {\r\n        if (this.empty())\r\n            return heap2;\r\n        else if (heap2.empty())\r\n            return this;\r\n        else if (lessThan(this.elem, heap2.elem)) {\r\n            this.subheaps.push(heap2);\r\n            return this;\r\n        }\r\n        else {\r\n            heap2.subheaps.push(this);\r\n            return heap2;\r\n        }\r\n    };\r\n    PairingHeap.prototype.removeMin = function (lessThan) {\r\n        if (this.empty())\r\n            return null;\r\n        else\r\n            return this.mergePairs(lessThan);\r\n    };\r\n    PairingHeap.prototype.mergePairs = function (lessThan) {\r\n        if (this.subheaps.length == 0)\r\n            return new PairingHeap(null);\r\n        else if (this.subheaps.length == 1) {\r\n            return this.subheaps[0];\r\n        }\r\n        else {\r\n            var firstPair = this.subheaps.pop().merge(this.subheaps.pop(), lessThan);\r\n            var remaining = this.mergePairs(lessThan);\r\n            return firstPair.merge(remaining, lessThan);\r\n        }\r\n    };\r\n    PairingHeap.prototype.decreaseKey = function (subheap, newValue, setHeapNode, lessThan) {\r\n        var newHeap = subheap.removeMin(lessThan);\r\n        subheap.elem = newHeap.elem;\r\n        subheap.subheaps = newHeap.subheaps;\r\n        if (setHeapNode !== null && newHeap.elem !== null) {\r\n            setHeapNode(subheap.elem, subheap);\r\n        }\r\n        var pairingNode = new PairingHeap(newValue);\r\n        if (setHeapNode !== null) {\r\n            setHeapNode(newValue, pairingNode);\r\n        }\r\n        return this.merge(pairingNode, lessThan);\r\n    };\r\n    return PairingHeap;\r\n}());\r\nexports.PairingHeap = PairingHeap;\r\nvar PriorityQueue = (function () {\r\n    function PriorityQueue(lessThan) {\r\n        this.lessThan = lessThan;\r\n    }\r\n    PriorityQueue.prototype.top = function () {\r\n        if (this.empty()) {\r\n            return null;\r\n        }\r\n        return this.root.elem;\r\n    };\r\n    PriorityQueue.prototype.push = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        var pairingNode;\r\n        for (var i = 0, arg; arg = args[i]; ++i) {\r\n            pairingNode = new PairingHeap(arg);\r\n            this.root = this.empty() ?\r\n                pairingNode : this.root.merge(pairingNode, this.lessThan);\r\n        }\r\n        return pairingNode;\r\n    };\r\n    PriorityQueue.prototype.empty = function () {\r\n        return !this.root || !this.root.elem;\r\n    };\r\n    PriorityQueue.prototype.isHeap = function () {\r\n        return this.root.isHeap(this.lessThan);\r\n    };\r\n    PriorityQueue.prototype.forEach = function (f) {\r\n        this.root.forEach(f);\r\n    };\r\n    PriorityQueue.prototype.pop = function () {\r\n        if (this.empty()) {\r\n            return null;\r\n        }\r\n        var obj = this.root.min();\r\n        this.root = this.root.removeMin(this.lessThan);\r\n        return obj;\r\n    };\r\n    PriorityQueue.prototype.reduceKey = function (heapNode, newKey, setHeapNode) {\r\n        if (setHeapNode === void 0) { setHeapNode = null; }\r\n        this.root = this.root.decreaseKey(heapNode, newKey, setHeapNode, this.lessThan);\r\n    };\r\n    PriorityQueue.prototype.toString = function (selector) {\r\n        return this.root.toString(selector);\r\n    };\r\n    PriorityQueue.prototype.count = function () {\r\n        return this.root.count();\r\n    };\r\n    return PriorityQueue;\r\n}());\r\nexports.PriorityQueue = PriorityQueue;\r\n","map":{"version":3,"file":"pqueue.js","sourceRoot":"","sources":["../../WebCola/src/pqueue.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nexport class PairingHeap<T> {\r\n    private subheaps : PairingHeap<T>[];\r\n    // from: https://gist.github.com/nervoussystem\r\n    //{elem:object, subheaps:[array of heaps]}\r\n    constructor(public elem: T) {\r\n        this.subheaps = [];\r\n    }\r\n\r\n    public toString(selector) : string {\r\n        var str = \"\", needComma = false;\r\n        for (var i = 0; i < this.subheaps.length; ++i) {\r\n            var subheap: PairingHeap<T> = this.subheaps[i];\r\n            if (!subheap.elem) {\r\n                needComma = false;\r\n                continue;\r\n            }\r\n            if (needComma) {\r\n                str = str + \",\";\r\n            }\r\n            str = str + subheap.toString(selector);\r\n            needComma = true;\r\n        }\r\n        if (str !== \"\") {\r\n            str = \"(\" + str + \")\";\r\n        }\r\n        return (this.elem ? selector(this.elem) : \"\") + str;\r\n    }\r\n\r\n    public forEach(f) {\r\n        if (!this.empty()) {\r\n            f(this.elem, this);\r\n            this.subheaps.forEach(s => s.forEach(f));\r\n        }\r\n    }\r\n\r\n    public count(): number {\r\n        return this.empty() ? 0 : 1 + this.subheaps.reduce((n: number, h: PairingHeap<T>) => {\r\n            return n + h.count();\r\n        }, 0);\r\n    }\r\n\r\n    public min() : T {\r\n        return this.elem;\r\n    }\r\n\r\n    public empty() : boolean {\r\n        return this.elem == null;\r\n    }\r\n\r\n    public contains(h: PairingHeap<T>): boolean {\r\n        if (this === h) return true;\r\n        for (var i = 0; i < this.subheaps.length; i++) {\r\n            if (this.subheaps[i].contains(h)) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public isHeap(lessThan: (a: T, b: T) => boolean): boolean {\r\n        return this.subheaps.every(h=> lessThan(this.elem, h.elem) && h.isHeap(lessThan));\r\n    }\r\n\r\n    public insert(obj : T, lessThan) : PairingHeap<T> {\r\n        return this.merge(new PairingHeap<T>(obj), lessThan);\r\n    }\r\n\r\n    public merge(heap2: PairingHeap<T>, lessThan): PairingHeap<T> {\r\n        if (this.empty()) return heap2;\r\n        else if (heap2.empty()) return this;\r\n        else if (lessThan(this.elem, heap2.elem)) {\r\n            this.subheaps.push(heap2);\r\n            return this;\r\n        } else {\r\n            heap2.subheaps.push(this);\r\n            return heap2;\r\n        }\r\n    }\r\n\r\n    public removeMin(lessThan: (a: T, b: T) => boolean): PairingHeap<T> {\r\n        if (this.empty()) return null;\r\n        else return this.mergePairs(lessThan);\r\n    }\r\n\r\n    public mergePairs(lessThan: (a: T, b: T) => boolean) : PairingHeap<T> {\r\n        if (this.subheaps.length == 0) return new PairingHeap<T>(null);\r\n        else if (this.subheaps.length == 1) { return this.subheaps[0]; }\r\n        else {\r\n            var firstPair = this.subheaps.pop().merge(this.subheaps.pop(), lessThan);\r\n            var remaining = this.mergePairs(lessThan);\r\n            return firstPair.merge(remaining, lessThan);\r\n        }\r\n    }\r\n    public decreaseKey(subheap: PairingHeap<T>, newValue: T, setHeapNode: (e: T, h: PairingHeap<T>)=>void, lessThan: (a: T, b: T) => boolean): PairingHeap<T> {\r\n        var newHeap = subheap.removeMin(lessThan);\r\n        //reassign subheap values to preserve tree\r\n        subheap.elem = newHeap.elem;\r\n        subheap.subheaps = newHeap.subheaps;\r\n        if (setHeapNode !== null && newHeap.elem !== null) {\r\n            setHeapNode(subheap.elem, subheap);\r\n        }\r\n        var pairingNode = new PairingHeap(newValue);\r\n        if (setHeapNode !== null) {\r\n            setHeapNode(newValue, pairingNode);\r\n        }\r\n        return this.merge(pairingNode, lessThan);\r\n    }\r\n}\r\n\r\n/**\r\n * @class PriorityQueue a min priority queue backed by a pairing heap\r\n */\r\nexport class PriorityQueue<T> {\r\n    private root : PairingHeap<T>;\r\n    constructor(private lessThan: (a: T, b: T) => boolean) { }\r\n    /**\r\n     * @method top\r\n     * @return the top element (the min element as defined by lessThan)\r\n     */\r\n    public top() : T {\r\n        if (this.empty()) { return null; }\r\n        return this.root.elem;\r\n    }\r\n    /**\r\n     * @method push\r\n     * put things on the heap\r\n     */\r\n    public push(...args: T[]): PairingHeap<T> {\r\n        var pairingNode;\r\n        for (var i = 0, arg; arg=args[i]; ++i) {\r\n            pairingNode = new PairingHeap(arg);\r\n            this.root = this.empty() ?\r\n                pairingNode : this.root.merge(pairingNode, this.lessThan);\r\n        }\r\n        return pairingNode;\r\n    }\r\n    /**\r\n     * @method empty\r\n     * @return true if no more elements in queue\r\n     */\r\n    public empty(): boolean {\r\n        return !this.root || !this.root.elem;\r\n    }\r\n    /**\r\n     * @method isHeap check heap condition (for testing)\r\n     * @return true if queue is in valid state\r\n     */\r\n    public isHeap(): boolean {\r\n        return this.root.isHeap(this.lessThan);\r\n    }\r\n    /**\r\n     * @method forEach apply f to each element of the queue\r\n     * @param f function to apply\r\n     */\r\n    public forEach(f) {\r\n        this.root.forEach(f);\r\n    }\r\n    /**\r\n     * @method pop remove and return the min element from the queue\r\n     */\r\n    public pop(): T {\r\n        if (this.empty()) {\r\n            return null;\r\n        }\r\n        var obj = this.root.min();\r\n        this.root = this.root.removeMin(this.lessThan);\r\n        return obj;\r\n    }\r\n    /**\r\n     * @method reduceKey reduce the key value of the specified heap node\r\n     */\r\n    public reduceKey(heapNode: PairingHeap<T>, newKey: T, setHeapNode: (e: T, h: PairingHeap<T>)=>void = null): void {\r\n        this.root = this.root.decreaseKey(heapNode, newKey, setHeapNode, this.lessThan);\r\n    }\r\n    public toString(selector) {\r\n        return this.root.toString(selector);\r\n    }\r\n    /**\r\n     * @method count\r\n     * @return number of elements in queue\r\n     */\r\n    public count() {\r\n        return this.root.count();\r\n    }\r\n}\r\n"]}},"hash":"d8db29e8f28363aa6bdbf74e01dbf5d3","cacheData":{"env":{}}}