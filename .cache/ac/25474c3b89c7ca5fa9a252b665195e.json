{"id":"node_modules/webcola/dist/src/shortestpaths.js","dependencies":[{"name":"/Users/reza/Documents/Meteor/ASU Data Viz Tinnapple/Graph/node_modules/webcola/dist/src/shortestpaths.js.map","includedInParent":true,"mtime":1517462217000},{"name":"/Users/reza/Documents/Meteor/ASU Data Viz Tinnapple/Graph/node_modules/webcola/WebCola/src/shortestpaths.ts","includedInParent":true,"mtime":1516884256000},{"name":"/Users/reza/Documents/Meteor/ASU Data Viz Tinnapple/Graph/package.json","includedInParent":true,"mtime":1550967406043},{"name":"/Users/reza/Documents/Meteor/ASU Data Viz Tinnapple/Graph/node_modules/webcola/package.json","includedInParent":true,"mtime":1550967405642},{"name":"./pqueue","loc":{"line":3,"column":23},"parent":"/Users/reza/Documents/Meteor/ASU Data Viz Tinnapple/Graph/node_modules/webcola/dist/src/shortestpaths.js","resolved":"/Users/reza/Documents/Meteor/ASU Data Viz Tinnapple/Graph/node_modules/webcola/dist/src/pqueue.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar pqueue_1 = require(\"./pqueue\");\r\nvar Neighbour = (function () {\r\n    function Neighbour(id, distance) {\r\n        this.id = id;\r\n        this.distance = distance;\r\n    }\r\n    return Neighbour;\r\n}());\r\nvar Node = (function () {\r\n    function Node(id) {\r\n        this.id = id;\r\n        this.neighbours = [];\r\n    }\r\n    return Node;\r\n}());\r\nvar QueueEntry = (function () {\r\n    function QueueEntry(node, prev, d) {\r\n        this.node = node;\r\n        this.prev = prev;\r\n        this.d = d;\r\n    }\r\n    return QueueEntry;\r\n}());\r\nvar Calculator = (function () {\r\n    function Calculator(n, es, getSourceIndex, getTargetIndex, getLength) {\r\n        this.n = n;\r\n        this.es = es;\r\n        this.neighbours = new Array(this.n);\r\n        var i = this.n;\r\n        while (i--)\r\n            this.neighbours[i] = new Node(i);\r\n        i = this.es.length;\r\n        while (i--) {\r\n            var e = this.es[i];\r\n            var u = getSourceIndex(e), v = getTargetIndex(e);\r\n            var d = getLength(e);\r\n            this.neighbours[u].neighbours.push(new Neighbour(v, d));\r\n            this.neighbours[v].neighbours.push(new Neighbour(u, d));\r\n        }\r\n    }\r\n    Calculator.prototype.DistanceMatrix = function () {\r\n        var D = new Array(this.n);\r\n        for (var i = 0; i < this.n; ++i) {\r\n            D[i] = this.dijkstraNeighbours(i);\r\n        }\r\n        return D;\r\n    };\r\n    Calculator.prototype.DistancesFromNode = function (start) {\r\n        return this.dijkstraNeighbours(start);\r\n    };\r\n    Calculator.prototype.PathFromNodeToNode = function (start, end) {\r\n        return this.dijkstraNeighbours(start, end);\r\n    };\r\n    Calculator.prototype.PathFromNodeToNodeWithPrevCost = function (start, end, prevCost) {\r\n        var q = new pqueue_1.PriorityQueue(function (a, b) { return a.d <= b.d; }), u = this.neighbours[start], qu = new QueueEntry(u, null, 0), visitedFrom = {};\r\n        q.push(qu);\r\n        while (!q.empty()) {\r\n            qu = q.pop();\r\n            u = qu.node;\r\n            if (u.id === end) {\r\n                break;\r\n            }\r\n            var i = u.neighbours.length;\r\n            while (i--) {\r\n                var neighbour = u.neighbours[i], v = this.neighbours[neighbour.id];\r\n                if (qu.prev && v.id === qu.prev.node.id)\r\n                    continue;\r\n                var viduid = v.id + ',' + u.id;\r\n                if (viduid in visitedFrom && visitedFrom[viduid] <= qu.d)\r\n                    continue;\r\n                var cc = qu.prev ? prevCost(qu.prev.node.id, u.id, v.id) : 0, t = qu.d + neighbour.distance + cc;\r\n                visitedFrom[viduid] = t;\r\n                q.push(new QueueEntry(v, qu, t));\r\n            }\r\n        }\r\n        var path = [];\r\n        while (qu.prev) {\r\n            qu = qu.prev;\r\n            path.push(qu.node.id);\r\n        }\r\n        return path;\r\n    };\r\n    Calculator.prototype.dijkstraNeighbours = function (start, dest) {\r\n        if (dest === void 0) { dest = -1; }\r\n        var q = new pqueue_1.PriorityQueue(function (a, b) { return a.d <= b.d; }), i = this.neighbours.length, d = new Array(i);\r\n        while (i--) {\r\n            var node = this.neighbours[i];\r\n            node.d = i === start ? 0 : Number.POSITIVE_INFINITY;\r\n            node.q = q.push(node);\r\n        }\r\n        while (!q.empty()) {\r\n            var u = q.pop();\r\n            d[u.id] = u.d;\r\n            if (u.id === dest) {\r\n                var path = [];\r\n                var v = u;\r\n                while (typeof v.prev !== 'undefined') {\r\n                    path.push(v.prev.id);\r\n                    v = v.prev;\r\n                }\r\n                return path;\r\n            }\r\n            i = u.neighbours.length;\r\n            while (i--) {\r\n                var neighbour = u.neighbours[i];\r\n                var v = this.neighbours[neighbour.id];\r\n                var t = u.d + neighbour.distance;\r\n                if (u.d !== Number.MAX_VALUE && v.d > t) {\r\n                    v.d = t;\r\n                    v.prev = u;\r\n                    q.reduceKey(v.q, v, function (e, q) { return e.q = q; });\r\n                }\r\n            }\r\n        }\r\n        return d;\r\n    };\r\n    return Calculator;\r\n}());\r\nexports.Calculator = Calculator;\r\n","map":{"version":3,"file":"shortestpaths.js","sourceRoot":"","sources":["../../WebCola/src/shortestpaths.ts"],"names":[],"mappings":"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","sourcesContent":["import {PairingHeap, PriorityQueue} from './pqueue'\r\n\r\nclass Neighbour {\r\n    constructor(public id: number, public distance: number) { }\r\n}\r\n\r\nclass Node {\r\n    constructor(public id: number) {\r\n        this.neighbours = [];\r\n    }\r\n    neighbours: Neighbour[];\r\n    d: number;\r\n    prev: Node;\r\n    q: PairingHeap<Node>;\r\n}\r\n\r\nclass QueueEntry {\r\n    constructor(public node: Node, public prev: QueueEntry, public d: number) {}\r\n}\r\n\r\n/**\r\n * calculates all-pairs shortest paths or shortest paths from a single node\r\n * @class Calculator\r\n * @constructor\r\n * @param n {number} number of nodes\r\n * @param es {Edge[]} array of edges\r\n */\r\nexport class Calculator<Link> {\r\n    private neighbours: Node[];\r\n\r\n    constructor(public n: number, public es: Link[], getSourceIndex: (l: Link) => number, getTargetIndex: (l: Link) => number, getLength: (l: Link) => number) {\r\n        this.neighbours = new Array(this.n);\r\n        var i = this.n; while (i--) this.neighbours[i] = new Node(i);\r\n\r\n        i = this.es.length; while (i--) {\r\n            var e = this.es[i];\r\n            var u: number = getSourceIndex(e), v: number = getTargetIndex(e);\r\n            var d = getLength(e);\r\n            this.neighbours[u].neighbours.push(new Neighbour(v, d));\r\n            this.neighbours[v].neighbours.push(new Neighbour(u, d));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * compute shortest paths for graph over n nodes with edges an array of source/target pairs\r\n     * edges may optionally have a length attribute.  1 is the default.\r\n     * Uses Johnson's algorithm.\r\n     *\r\n     * @method DistanceMatrix\r\n     * @return the distance matrix\r\n     */\r\n    DistanceMatrix(): number[][] {\r\n        var D = new Array(this.n);\r\n        for (var i = 0; i < this.n; ++i) {\r\n            D[i] = this.dijkstraNeighbours(i);\r\n        }\r\n        return D;\r\n    }\r\n\r\n    /**\r\n     * get shortest paths from a specified start node\r\n     * @method DistancesFromNode\r\n     * @param start node index\r\n     * @return array of path lengths\r\n     */\r\n    DistancesFromNode(start: number): number[] {\r\n        return this.dijkstraNeighbours(start);\r\n    }\r\n\r\n    PathFromNodeToNode(start: number, end: number): number[] {\r\n        return this.dijkstraNeighbours(start, end);\r\n    }\r\n\r\n    // find shortest path from start to end, with the opportunity at\r\n    // each edge traversal to compute a custom cost based on the\r\n    // previous edge.  For example, to penalise bends.\r\n    PathFromNodeToNodeWithPrevCost(\r\n        start: number,\r\n        end: number,\r\n        prevCost: (u:number,v:number,w:number)=>number): number[]\r\n    {\r\n        var q = new PriorityQueue<QueueEntry>((a, b) => a.d <= b.d),\r\n            u: Node = this.neighbours[start],\r\n            qu: QueueEntry = new QueueEntry(u,null,0),\r\n            visitedFrom = {};\r\n        q.push(qu);\r\n        while(!q.empty()) {\r\n            qu = q.pop();\r\n            u = qu.node;\r\n            if (u.id === end) {\r\n                break;\r\n            }\r\n            var i = u.neighbours.length; while (i--) {\r\n                var neighbour = u.neighbours[i],\r\n                    v = this.neighbours[neighbour.id];\r\n\r\n                // don't double back\r\n                if (qu.prev && v.id === qu.prev.node.id) continue;\r\n\r\n                // don't retraverse an edge if it has already been explored\r\n                // from a lower cost route\r\n                var viduid = v.id + ',' + u.id;\r\n                if(viduid in visitedFrom && visitedFrom[viduid] <= qu.d)\r\n                    continue;\r\n\r\n                var cc = qu.prev ? prevCost(qu.prev.node.id, u.id, v.id) : 0,\r\n                    t = qu.d + neighbour.distance + cc;\r\n\r\n                // store cost of this traversal\r\n                visitedFrom[viduid] = t;\r\n                q.push(new QueueEntry(v, qu, t));\r\n            }\r\n        }\r\n        var path:number[] = [];\r\n        while (qu.prev) {\r\n            qu = qu.prev;\r\n            path.push(qu.node.id);\r\n        }\r\n        return path;\r\n    }\r\n\r\n    private dijkstraNeighbours(start: number, dest: number = -1): number[] {\r\n        var q = new PriorityQueue<Node>((a, b) => a.d <= b.d),\r\n            i = this.neighbours.length,\r\n            d: number[] = new Array(i);\r\n        while (i--) {\r\n            var node: Node = this.neighbours[i];\r\n            node.d = i === start ? 0 : Number.POSITIVE_INFINITY;\r\n            node.q = q.push(node);\r\n        }\r\n        while (!q.empty()) {\r\n            // console.log(q.toString(function (u) { return u.id + \"=\" + (u.d === Number.POSITIVE_INFINITY ? \"\\u221E\" : u.d.toFixed(2) )}));\r\n            var u = q.pop();\r\n            d[u.id] = u.d;\r\n            if (u.id === dest) {\r\n                var path: number[] = [];\r\n                var v = u;\r\n                while (typeof v.prev !== 'undefined') {\r\n                    path.push(v.prev.id);\r\n                    v = v.prev;\r\n                }\r\n                return path;\r\n            }\r\n            i = u.neighbours.length; while (i--) {\r\n                var neighbour = u.neighbours[i];\r\n                var v = this.neighbours[neighbour.id];\r\n                var t = u.d + neighbour.distance;\r\n                if (u.d !== Number.MAX_VALUE && v.d > t) {\r\n                    v.d = t;\r\n                    v.prev = u;\r\n                    q.reduceKey(v.q, v, (e,q)=>e.q = q);\r\n                }\r\n            }\r\n        }\r\n        return d;\r\n    }\r\n}\r\n"]}},"hash":"64e2bff15e57f65a0444ed5ae044f2bd","cacheData":{"env":{}}}