{"id":"node_modules/webcola/dist/src/powergraph.js","dependencies":[{"name":"/Users/reza/Documents/Meteor/ASU Data Viz Tinnapple/Graph/node_modules/webcola/dist/src/powergraph.js.map","includedInParent":true,"mtime":1517462217000},{"name":"/Users/reza/Documents/Meteor/ASU Data Viz Tinnapple/Graph/node_modules/webcola/WebCola/src/powergraph.ts","includedInParent":true,"mtime":1516884256000},{"name":"/Users/reza/Documents/Meteor/ASU Data Viz Tinnapple/Graph/package.json","includedInParent":true,"mtime":1550967406043},{"name":"/Users/reza/Documents/Meteor/ASU Data Viz Tinnapple/Graph/node_modules/webcola/package.json","includedInParent":true,"mtime":1550967405642}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar PowerEdge = (function () {\r\n    function PowerEdge(source, target, type) {\r\n        this.source = source;\r\n        this.target = target;\r\n        this.type = type;\r\n    }\r\n    return PowerEdge;\r\n}());\r\nexports.PowerEdge = PowerEdge;\r\nvar Configuration = (function () {\r\n    function Configuration(n, edges, linkAccessor, rootGroup) {\r\n        var _this = this;\r\n        this.linkAccessor = linkAccessor;\r\n        this.modules = new Array(n);\r\n        this.roots = [];\r\n        if (rootGroup) {\r\n            this.initModulesFromGroup(rootGroup);\r\n        }\r\n        else {\r\n            this.roots.push(new ModuleSet());\r\n            for (var i = 0; i < n; ++i)\r\n                this.roots[0].add(this.modules[i] = new Module(i));\r\n        }\r\n        this.R = edges.length;\r\n        edges.forEach(function (e) {\r\n            var s = _this.modules[linkAccessor.getSourceIndex(e)], t = _this.modules[linkAccessor.getTargetIndex(e)], type = linkAccessor.getType(e);\r\n            s.outgoing.add(type, t);\r\n            t.incoming.add(type, s);\r\n        });\r\n    }\r\n    Configuration.prototype.initModulesFromGroup = function (group) {\r\n        var moduleSet = new ModuleSet();\r\n        this.roots.push(moduleSet);\r\n        for (var i = 0; i < group.leaves.length; ++i) {\r\n            var node = group.leaves[i];\r\n            var module = new Module(node.id);\r\n            this.modules[node.id] = module;\r\n            moduleSet.add(module);\r\n        }\r\n        if (group.groups) {\r\n            for (var j = 0; j < group.groups.length; ++j) {\r\n                var child = group.groups[j];\r\n                var definition = {};\r\n                for (var prop in child)\r\n                    if (prop !== \"leaves\" && prop !== \"groups\" && child.hasOwnProperty(prop))\r\n                        definition[prop] = child[prop];\r\n                moduleSet.add(new Module(-1 - j, new LinkSets(), new LinkSets(), this.initModulesFromGroup(child), definition));\r\n            }\r\n        }\r\n        return moduleSet;\r\n    };\r\n    Configuration.prototype.merge = function (a, b, k) {\r\n        if (k === void 0) { k = 0; }\r\n        var inInt = a.incoming.intersection(b.incoming), outInt = a.outgoing.intersection(b.outgoing);\r\n        var children = new ModuleSet();\r\n        children.add(a);\r\n        children.add(b);\r\n        var m = new Module(this.modules.length, outInt, inInt, children);\r\n        this.modules.push(m);\r\n        var update = function (s, i, o) {\r\n            s.forAll(function (ms, linktype) {\r\n                ms.forAll(function (n) {\r\n                    var nls = n[i];\r\n                    nls.add(linktype, m);\r\n                    nls.remove(linktype, a);\r\n                    nls.remove(linktype, b);\r\n                    a[o].remove(linktype, n);\r\n                    b[o].remove(linktype, n);\r\n                });\r\n            });\r\n        };\r\n        update(outInt, \"incoming\", \"outgoing\");\r\n        update(inInt, \"outgoing\", \"incoming\");\r\n        this.R -= inInt.count() + outInt.count();\r\n        this.roots[k].remove(a);\r\n        this.roots[k].remove(b);\r\n        this.roots[k].add(m);\r\n        return m;\r\n    };\r\n    Configuration.prototype.rootMerges = function (k) {\r\n        if (k === void 0) { k = 0; }\r\n        var rs = this.roots[k].modules();\r\n        var n = rs.length;\r\n        var merges = new Array(n * (n - 1));\r\n        var ctr = 0;\r\n        for (var i = 0, i_ = n - 1; i < i_; ++i) {\r\n            for (var j = i + 1; j < n; ++j) {\r\n                var a = rs[i], b = rs[j];\r\n                merges[ctr] = { id: ctr, nEdges: this.nEdges(a, b), a: a, b: b };\r\n                ctr++;\r\n            }\r\n        }\r\n        return merges;\r\n    };\r\n    Configuration.prototype.greedyMerge = function () {\r\n        for (var i = 0; i < this.roots.length; ++i) {\r\n            if (this.roots[i].modules().length < 2)\r\n                continue;\r\n            var ms = this.rootMerges(i).sort(function (a, b) { return a.nEdges == b.nEdges ? a.id - b.id : a.nEdges - b.nEdges; });\r\n            var m = ms[0];\r\n            if (m.nEdges >= this.R)\r\n                continue;\r\n            this.merge(m.a, m.b, i);\r\n            return true;\r\n        }\r\n    };\r\n    Configuration.prototype.nEdges = function (a, b) {\r\n        var inInt = a.incoming.intersection(b.incoming), outInt = a.outgoing.intersection(b.outgoing);\r\n        return this.R - inInt.count() - outInt.count();\r\n    };\r\n    Configuration.prototype.getGroupHierarchy = function (retargetedEdges) {\r\n        var _this = this;\r\n        var groups = [];\r\n        var root = {};\r\n        toGroups(this.roots[0], root, groups);\r\n        var es = this.allEdges();\r\n        es.forEach(function (e) {\r\n            var a = _this.modules[e.source];\r\n            var b = _this.modules[e.target];\r\n            retargetedEdges.push(new PowerEdge(typeof a.gid === \"undefined\" ? e.source : groups[a.gid], typeof b.gid === \"undefined\" ? e.target : groups[b.gid], e.type));\r\n        });\r\n        return groups;\r\n    };\r\n    Configuration.prototype.allEdges = function () {\r\n        var es = [];\r\n        Configuration.getEdges(this.roots[0], es);\r\n        return es;\r\n    };\r\n    Configuration.getEdges = function (modules, es) {\r\n        modules.forAll(function (m) {\r\n            m.getEdges(es);\r\n            Configuration.getEdges(m.children, es);\r\n        });\r\n    };\r\n    return Configuration;\r\n}());\r\nexports.Configuration = Configuration;\r\nfunction toGroups(modules, group, groups) {\r\n    modules.forAll(function (m) {\r\n        if (m.isLeaf()) {\r\n            if (!group.leaves)\r\n                group.leaves = [];\r\n            group.leaves.push(m.id);\r\n        }\r\n        else {\r\n            var g = group;\r\n            m.gid = groups.length;\r\n            if (!m.isIsland() || m.isPredefined()) {\r\n                g = { id: m.gid };\r\n                if (m.isPredefined())\r\n                    for (var prop in m.definition)\r\n                        g[prop] = m.definition[prop];\r\n                if (!group.groups)\r\n                    group.groups = [];\r\n                group.groups.push(m.gid);\r\n                groups.push(g);\r\n            }\r\n            toGroups(m.children, g, groups);\r\n        }\r\n    });\r\n}\r\nvar Module = (function () {\r\n    function Module(id, outgoing, incoming, children, definition) {\r\n        if (outgoing === void 0) { outgoing = new LinkSets(); }\r\n        if (incoming === void 0) { incoming = new LinkSets(); }\r\n        if (children === void 0) { children = new ModuleSet(); }\r\n        this.id = id;\r\n        this.outgoing = outgoing;\r\n        this.incoming = incoming;\r\n        this.children = children;\r\n        this.definition = definition;\r\n    }\r\n    Module.prototype.getEdges = function (es) {\r\n        var _this = this;\r\n        this.outgoing.forAll(function (ms, edgetype) {\r\n            ms.forAll(function (target) {\r\n                es.push(new PowerEdge(_this.id, target.id, edgetype));\r\n            });\r\n        });\r\n    };\r\n    Module.prototype.isLeaf = function () {\r\n        return this.children.count() === 0;\r\n    };\r\n    Module.prototype.isIsland = function () {\r\n        return this.outgoing.count() === 0 && this.incoming.count() === 0;\r\n    };\r\n    Module.prototype.isPredefined = function () {\r\n        return typeof this.definition !== \"undefined\";\r\n    };\r\n    return Module;\r\n}());\r\nexports.Module = Module;\r\nfunction intersection(m, n) {\r\n    var i = {};\r\n    for (var v in m)\r\n        if (v in n)\r\n            i[v] = m[v];\r\n    return i;\r\n}\r\nvar ModuleSet = (function () {\r\n    function ModuleSet() {\r\n        this.table = {};\r\n    }\r\n    ModuleSet.prototype.count = function () {\r\n        return Object.keys(this.table).length;\r\n    };\r\n    ModuleSet.prototype.intersection = function (other) {\r\n        var result = new ModuleSet();\r\n        result.table = intersection(this.table, other.table);\r\n        return result;\r\n    };\r\n    ModuleSet.prototype.intersectionCount = function (other) {\r\n        return this.intersection(other).count();\r\n    };\r\n    ModuleSet.prototype.contains = function (id) {\r\n        return id in this.table;\r\n    };\r\n    ModuleSet.prototype.add = function (m) {\r\n        this.table[m.id] = m;\r\n    };\r\n    ModuleSet.prototype.remove = function (m) {\r\n        delete this.table[m.id];\r\n    };\r\n    ModuleSet.prototype.forAll = function (f) {\r\n        for (var mid in this.table) {\r\n            f(this.table[mid]);\r\n        }\r\n    };\r\n    ModuleSet.prototype.modules = function () {\r\n        var vs = [];\r\n        this.forAll(function (m) {\r\n            if (!m.isPredefined())\r\n                vs.push(m);\r\n        });\r\n        return vs;\r\n    };\r\n    return ModuleSet;\r\n}());\r\nexports.ModuleSet = ModuleSet;\r\nvar LinkSets = (function () {\r\n    function LinkSets() {\r\n        this.sets = {};\r\n        this.n = 0;\r\n    }\r\n    LinkSets.prototype.count = function () {\r\n        return this.n;\r\n    };\r\n    LinkSets.prototype.contains = function (id) {\r\n        var result = false;\r\n        this.forAllModules(function (m) {\r\n            if (!result && m.id == id) {\r\n                result = true;\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n    LinkSets.prototype.add = function (linktype, m) {\r\n        var s = linktype in this.sets ? this.sets[linktype] : this.sets[linktype] = new ModuleSet();\r\n        s.add(m);\r\n        ++this.n;\r\n    };\r\n    LinkSets.prototype.remove = function (linktype, m) {\r\n        var ms = this.sets[linktype];\r\n        ms.remove(m);\r\n        if (ms.count() === 0) {\r\n            delete this.sets[linktype];\r\n        }\r\n        --this.n;\r\n    };\r\n    LinkSets.prototype.forAll = function (f) {\r\n        for (var linktype in this.sets) {\r\n            f(this.sets[linktype], Number(linktype));\r\n        }\r\n    };\r\n    LinkSets.prototype.forAllModules = function (f) {\r\n        this.forAll(function (ms, lt) { return ms.forAll(f); });\r\n    };\r\n    LinkSets.prototype.intersection = function (other) {\r\n        var result = new LinkSets();\r\n        this.forAll(function (ms, lt) {\r\n            if (lt in other.sets) {\r\n                var i = ms.intersection(other.sets[lt]), n = i.count();\r\n                if (n > 0) {\r\n                    result.sets[lt] = i;\r\n                    result.n += n;\r\n                }\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n    return LinkSets;\r\n}());\r\nexports.LinkSets = LinkSets;\r\nfunction intersectionCount(m, n) {\r\n    return Object.keys(intersection(m, n)).length;\r\n}\r\nfunction getGroups(nodes, links, la, rootGroup) {\r\n    var n = nodes.length, c = new Configuration(n, links, la, rootGroup);\r\n    while (c.greedyMerge())\r\n        ;\r\n    var powerEdges = [];\r\n    var g = c.getGroupHierarchy(powerEdges);\r\n    powerEdges.forEach(function (e) {\r\n        var f = function (end) {\r\n            var g = e[end];\r\n            if (typeof g == \"number\")\r\n                e[end] = nodes[g];\r\n        };\r\n        f(\"source\");\r\n        f(\"target\");\r\n    });\r\n    return { groups: g, powerEdges: powerEdges };\r\n}\r\nexports.getGroups = getGroups;\r\n","map":{"version":3,"file":"powergraph.js","sourceRoot":"","sources":["../../WebCola/src/powergraph.ts"],"names":[],"mappings":"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","sourcesContent":["import {LinkAccessor} from './linklengths'\r\n\r\nexport interface LinkTypeAccessor<Link> extends LinkAccessor<Link> {\r\n        // return a unique identifier for the type of the link\r\n        getType(l: Link): number;\r\n    }\r\n\r\n    export class PowerEdge {\r\n        constructor(\r\n            public source: any,\r\n            public target: any,\r\n            public type: number) { }\r\n    }\r\n\r\n    export class Configuration<Link> {\r\n        // canonical list of modules.\r\n        // Initialized to a module for each leaf node, such that the ids and indexes of the module in the array match the indexes of the nodes in links\r\n        // Modules created through merges are appended to the end of this.\r\n        modules: Module[];\r\n        // top level modules and candidates for merges\r\n        roots: ModuleSet[];\r\n        // remaining edge count\r\n        R: number;\r\n        constructor(n: number, edges: Link[], private linkAccessor: LinkTypeAccessor<Link>, rootGroup?: any[]) {\r\n            this.modules = new Array(n);\r\n            this.roots = [];\r\n            if (rootGroup) {\r\n                this.initModulesFromGroup(rootGroup);\r\n            } else {\r\n                this.roots.push(new ModuleSet());\r\n                for (var i = 0; i < n; ++i)\r\n                    this.roots[0].add(this.modules[i] = new Module(i));\r\n            }\r\n            this.R = edges.length;\r\n            edges.forEach(e => {\r\n                var s = this.modules[linkAccessor.getSourceIndex(e)],\r\n                    t = this.modules[linkAccessor.getTargetIndex(e)],\r\n                    type = linkAccessor.getType(e);\r\n                s.outgoing.add(type, t);\r\n                t.incoming.add(type, s);\r\n            });\r\n        }\r\n\r\n        private initModulesFromGroup(group): ModuleSet {\r\n            var moduleSet = new ModuleSet();\r\n            this.roots.push(moduleSet);\r\n            for (var i = 0; i < group.leaves.length; ++i) {\r\n                var node = group.leaves[i];\r\n                var module = new Module(node.id);\r\n                this.modules[node.id] = module;\r\n                moduleSet.add(module);\r\n            }\r\n            if (group.groups) {\r\n                for (var j = 0; j < group.groups.length; ++j) {\r\n                    var child = group.groups[j];\r\n                    // Propagate group properties (like padding, stiffness, ...) as module definition so that the generated power graph group will inherit it\r\n                    var definition = {};\r\n                    for (var prop in child)\r\n                        if (prop !== \"leaves\" && prop !== \"groups\" && child.hasOwnProperty(prop))\r\n                            definition[prop] = child[prop];\r\n                    // Use negative module id to avoid clashes between predefined and generated modules\r\n                    moduleSet.add(new Module(-1-j, new LinkSets(), new LinkSets(), this.initModulesFromGroup(child), definition));\r\n                }\r\n            }\r\n            return moduleSet;\r\n         }\r\n\r\n        // merge modules a and b keeping track of their power edges and removing the from roots\r\n        merge(a: Module, b: Module, k: number = 0): Module {\r\n            var inInt = a.incoming.intersection(b.incoming),\r\n                outInt = a.outgoing.intersection(b.outgoing);\r\n            var children = new ModuleSet();\r\n            children.add(a);\r\n            children.add(b);\r\n            var m = new Module(this.modules.length, outInt, inInt, children);\r\n            this.modules.push(m);\r\n            var update = (s: LinkSets, i: string, o: string) => {\r\n                s.forAll((ms, linktype) => {\r\n                    ms.forAll(n => {\r\n                        var nls = <LinkSets>n[i];\r\n                        nls.add(linktype, m);\r\n                        nls.remove(linktype, a);\r\n                        nls.remove(linktype, b);\r\n                        (<LinkSets>a[o]).remove(linktype, n);\r\n                        (<LinkSets>b[o]).remove(linktype, n);\r\n                    });\r\n                });\r\n            };\r\n            update(outInt, \"incoming\", \"outgoing\");\r\n            update(inInt, \"outgoing\", \"incoming\");\r\n            this.R -= inInt.count() + outInt.count();\r\n            this.roots[k].remove(a);\r\n            this.roots[k].remove(b);\r\n            this.roots[k].add(m);\r\n            return m;\r\n        }\r\n\r\n        private rootMerges(k: number = 0): {\r\n            id: number;\r\n            nEdges: number;\r\n            a: Module;\r\n            b: Module;\r\n        }[] {\r\n            var rs = this.roots[k].modules();\r\n            var n = rs.length;\r\n            var merges = new Array(n * (n - 1));\r\n            var ctr = 0;\r\n            for (var i = 0, i_ = n - 1; i < i_; ++i) {\r\n                for (var j = i+1; j < n; ++j) {\r\n                    var a = rs[i], b = rs[j];\r\n                    merges[ctr] = { id: ctr, nEdges: this.nEdges(a, b), a: a, b: b };\r\n                    ctr++;\r\n                }\r\n            }\r\n            return merges;\r\n        }\r\n\r\n        greedyMerge(): boolean {\r\n            for (var i = 0; i < this.roots.length; ++i) {\r\n                // Handle single nested module case\r\n                if (this.roots[i].modules().length < 2) continue;\r\n\r\n                // find the merge that allows for the most edges to be removed.  secondary ordering based on arbitrary id (for predictability)\r\n                var ms = this.rootMerges(i).sort((a, b) => a.nEdges == b.nEdges ? a.id - b.id : a.nEdges - b.nEdges);\r\n                var m = ms[0];\r\n                if (m.nEdges >= this.R) continue;\r\n                this.merge(m.a, m.b, i);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        private nEdges(a: Module, b: Module): number {\r\n            var inInt = a.incoming.intersection(b.incoming),\r\n                outInt = a.outgoing.intersection(b.outgoing);\r\n            return this.R - inInt.count() - outInt.count();\r\n        }\r\n\r\n        getGroupHierarchy(retargetedEdges: PowerEdge[]): any[]{\r\n            var groups = [];\r\n            var root = {};\r\n            toGroups(this.roots[0], root, groups);\r\n            var es = this.allEdges();\r\n            es.forEach(e => {\r\n                var a = this.modules[e.source];\r\n                var b = this.modules[e.target];\r\n                retargetedEdges.push(new PowerEdge(\r\n                    typeof a.gid === \"undefined\" ? e.source : groups[a.gid],\r\n                    typeof b.gid === \"undefined\" ? e.target : groups[b.gid],\r\n                    e.type\r\n                ));\r\n            });\r\n            return groups;\r\n        }\r\n\r\n        allEdges(): PowerEdge[] {\r\n            var es = [];\r\n            Configuration.getEdges(this.roots[0], es);\r\n            return es;\r\n        }\r\n\r\n        static getEdges(modules: ModuleSet, es: PowerEdge[]) {\r\n            modules.forAll(m => {\r\n                m.getEdges(es);\r\n                Configuration.getEdges(m.children, es);\r\n            });\r\n        }\r\n    }\r\n\r\n    function toGroups(modules: ModuleSet, group, groups) {\r\n        modules.forAll(m => {\r\n            if (m.isLeaf()) {\r\n                if (!group.leaves) group.leaves = [];\r\n                group.leaves.push(m.id);\r\n            } else {\r\n                var g = group;\r\n                m.gid = groups.length;\r\n                if (!m.isIsland() || m.isPredefined()) {\r\n                    g = { id: m.gid };\r\n                    if (m.isPredefined())\r\n                        // Apply original group properties\r\n                        for (var prop in m.definition)\r\n                            g[prop] = m.definition[prop];\r\n                    if (!group.groups) group.groups = [];\r\n                    group.groups.push(m.gid);\r\n                    groups.push(g);\r\n                }\r\n                toGroups(m.children, g, groups);\r\n            }\r\n        });\r\n    }\r\n\r\n    export class Module {\r\n        gid: number;\r\n\r\n        constructor(\r\n            public id: number,\r\n            public outgoing: LinkSets = new LinkSets(),\r\n            public incoming: LinkSets = new LinkSets(),\r\n            public children: ModuleSet = new ModuleSet(),\r\n            public definition?: any) { }\r\n\r\n        getEdges(es: PowerEdge[]) {\r\n            this.outgoing.forAll((ms, edgetype) => {\r\n                ms.forAll(target => {\r\n                    es.push(new PowerEdge(this.id, target.id, edgetype));\r\n                });\r\n            });\r\n        }\r\n\r\n        isLeaf() {\r\n            return this.children.count() === 0;\r\n        }\r\n\r\n        isIsland() {\r\n            return this.outgoing.count() === 0 && this.incoming.count() === 0;\r\n        }\r\n\r\n        isPredefined(): boolean {\r\n            return typeof this.definition !== \"undefined\";\r\n        }\r\n    }\r\n\r\n    function intersection(m: any, n: any): any {\r\n        var i = {};\r\n        for (var v in m) if (v in n) i[v] = m[v];\r\n        return i;\r\n    }\r\n\r\n    export class ModuleSet {\r\n        table: any = {};\r\n        count() {\r\n            return Object.keys(this.table).length;\r\n        }\r\n        intersection(other: ModuleSet): ModuleSet {\r\n            var result = new ModuleSet();\r\n            result.table = intersection(this.table, other.table);\r\n            return result;\r\n        }\r\n        intersectionCount(other: ModuleSet): number {\r\n            return this.intersection(other).count();\r\n        }\r\n        contains(id: number): boolean {\r\n            return id in this.table;\r\n        }\r\n        add(m: Module): void {\r\n            this.table[m.id] = m;\r\n        }\r\n        remove(m: Module): void {\r\n            delete this.table[m.id];\r\n        }\r\n        forAll(f: (m: Module) => void) {\r\n            for (var mid in this.table) {\r\n                f(this.table[mid]);\r\n            }\r\n        }\r\n        modules(): Module[] {\r\n            var vs = [];\r\n            this.forAll(m => {\r\n                if (!m.isPredefined())\r\n                    vs.push(m);\r\n            });\r\n            return vs;\r\n        }\r\n    }\r\n\r\n    export class LinkSets {\r\n        sets: any = {};\r\n        n: number = 0;\r\n        count(): number {\r\n            return this.n;\r\n        }\r\n        contains(id: number) {\r\n            var result = false;\r\n            this.forAllModules(m => {\r\n                if (!result && m.id == id) {\r\n                    result = true;\r\n                }\r\n            });\r\n            return result;\r\n        }\r\n        add(linktype: number, m: Module) {\r\n            var s: ModuleSet = linktype in this.sets ? this.sets[linktype] : this.sets[linktype] = new ModuleSet();\r\n            s.add(m);\r\n            ++this.n;\r\n        }\r\n        remove(linktype: number, m: Module) {\r\n            var ms = <ModuleSet>this.sets[linktype];\r\n            ms.remove(m);\r\n            if (ms.count() === 0) {\r\n                delete this.sets[linktype];\r\n            }\r\n            --this.n;\r\n        }\r\n        forAll(f: (ms: ModuleSet, linktype: number) => void) {\r\n            for (var linktype in this.sets) {\r\n                f(<ModuleSet>this.sets[linktype], Number(linktype));\r\n            }\r\n        }\r\n        forAllModules(f: (m: Module) => void) {\r\n            this.forAll((ms, lt) => ms.forAll(f));\r\n        }\r\n        intersection(other: LinkSets): LinkSets {\r\n            var result: LinkSets = new LinkSets();\r\n            this.forAll((ms, lt) => {\r\n                if (lt in other.sets) {\r\n                    var i = ms.intersection(other.sets[lt]),\r\n                        n = i.count();\r\n                    if (n > 0) {\r\n                        result.sets[lt] = i;\r\n                        result.n += n;\r\n                    }\r\n                }\r\n            });\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function intersectionCount(m: any, n: any): number {\r\n        return Object.keys(intersection(m, n)).length\r\n    }\r\n\r\n    export function getGroups<Link>(nodes: any[], links: Link[], la: LinkTypeAccessor<Link>, rootGroup?: any[]): { groups: any[]; powerEdges: PowerEdge[] } {\r\n        var n = nodes.length,\r\n            c = new Configuration(n, links, la, rootGroup);\r\n        while (c.greedyMerge());\r\n        var powerEdges: PowerEdge[] = [];\r\n        var g = c.getGroupHierarchy(powerEdges);\r\n        powerEdges.forEach(function (e) {\r\n            var f = (end) => {\r\n                var g = e[end];\r\n                if (typeof g == \"number\") e[end] = nodes[g];\r\n            };\r\n            f(\"source\");\r\n            f(\"target\");\r\n        });\r\n        return { groups: g, powerEdges: powerEdges };\r\n    }\r\n"]}},"hash":"2f582c6bdb41ff86d39fac281480f1de","cacheData":{"env":{}}}